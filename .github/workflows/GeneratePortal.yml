name: Portal Generator

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get list of changed directories
        id: changed-dirs
        run: |
          CHANGED_DIRS=$(find . -type d -name 'BuildFiles' | xargs -n1 dirname | sort -u | tr '\n' ' ')
          echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV

      - name: Verify Environment Setup
        run: |
          echo "Changed directories: $CHANGED_DIRS"  
          echo "API_KEY: (hidden)"

      - name: Process and Deploy Changed Directories
        if: env.CHANGED_DIRS
        run: |
          # Loop through the directories containing 'BuildFiles'
          for dir in $CHANGED_DIRS; do
            echo "Processing $dir..."

            # Navigate to the directory containing BuildFiles
            cd "$dir"

            # Zip the contents of the BuildFiles directory
            echo "Zipping BuildFiles in $dir..."
            zip -r portal-input.zip BuildFiles/* > /dev/null

            # Make the API call with the zipped file
            RESPONSE=$(curl -s --output response.zip --write-out '%{http_code}\t%{content_type}' --request POST \
                        --url 'https://api.apimatic.io/portal' \
                        -H 'Authorization: X-Auth-Key ${{ secrets.APIMATIC_API_KEY }}' \
                        -F "file=@portal-input.zip")

            # Debug: output the raw response and the response file
            echo "Raw curl response: $RESPONSE"
            echo "Response file (response.zip) status:"
            ls -l response.zip

            # Extract the HTTP code and content type
            echo "Extracting HTTP code and content type..."
            HTTP_CODE=$(echo "$RESPONSE" | cut -f1)
            CONTENT_TYPE=$(echo "$RESPONSE" | cut -f2)

            # Debug: output extracted variables
            echo "Extracted HTTP_CODE=$HTTP_CODE"
            echo "Extracted CONTENT_TYPE=$CONTENT_TYPE"

            # Check if the HTTP_CODE is a valid integer
            if ! [[ "$HTTP_CODE" =~ ^[0-9]{3}$ ]]; then
              echo "Invalid HTTP_CODE value: $HTTP_CODE. Expected a 3-digit status code."
              exit 1
            fi

            # Process the response based on HTTP code
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Request successful (HTTP 200). Unzipping response..."

              # Ensure the Portal directory exists
              mkdir -p Portal

              # Unzip the response into the Portal directory
              unzip -qq response.zip -d Portal

              # Debug: List unzipped contents
              echo "Unzipped contents in $dir/Portal:"
              ls -l Portal
            else
              echo "Unexpected response: HTTP_CODE=$HTTP_CODE. Exiting."
              exit 1
            fi

            # Navigate back to the original directory
            cd - || exit 1

          done


      - name: Deploy Changed Directories to Cloudflare Pages
        if: env.CHANGED_DIRS
        run: |
          # Loop through each directory containing BuildFiles
          for dir in $CHANGED_DIRS; do
            echo "Processing and deploying $dir..."

            # Extract the folder name and set project name
            PROJECT_NAME="${dir##*/}-apimatic"

            echo "Deploying project $PROJECT_NAME from directory $dir/BuildFiles..."

            # Trigger the Cloudflare Pages deployment for each project
            gh workflow run cloudflare/pages-action@v1 \
              --ref main \
              -f apiToken="${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -f accountId="${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
              -f projectName="$PROJECT_NAME" \
              -f directory="$dir/BuildFiles"
              
            echo "Deployment initiated for $PROJECT_NAME."
          done
  
      - name: Cleanup
        run: |
          rm -f portal-input.zip response.zip
          echo "Cleanup complete"
