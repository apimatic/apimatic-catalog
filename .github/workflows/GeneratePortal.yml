name: Portal Generator

on:
  push:
    branches:
      - main
      - dev

jobs:
  collect_dirs:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.collect-dirs.outputs.dirs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Collect Changed Directories
        id: collect-dirs
        run: |
          CHANGED_DIRS=$(find . -type d -name 'BuildFiles' | xargs -n1 dirname | sort -u | tr '\n' ' ')
          echo "directories=$CHANGED_DIRS" >> $GITHUB_ENV
          echo "::set-output name=dirs::$CHANGED_DIRS"
          
  build_and_deploy:
    needs: collect_dirs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.collect_dirs.outputs.dirs) }}  # Parallel execution based on collected directories
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Zip BuildFiles
        run: |
          cd ${{ matrix.directory }}
          echo "Zipping BuildFiles in ${{ matrix.directory }}..."
          zip -r portal-input.zip BuildFiles/* > /dev/null
          echo "Zipped BuildFiles successfully."

      - name: Send to APIMatic
        id: send-apimatic
        run: |
          echo "Sending zip to APIMatic..."
          RESPONSE=$(curl -s --output response.zip --write-out '%{http_code}\t%{content_type}' --request POST \
                      --url 'https://api.apimatic.io/portal' \
                      -H 'Authorization: X-Auth-Key ${{ secrets.APIMATIC_API_KEY }}' \
                      -F "file=@portal-input.zip")
          
          echo "Raw curl response: $RESPONSE"
          HTTP_CODE=$(echo "$RESPONSE" | cut -f1)
          CONTENT_TYPE=$(echo "$RESPONSE" | cut -f2)

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "APIMatic transformer failed with HTTP_CODE=$HTTP_CODE. Exiting."
            exit 1
          fi

          echo "Request successful. Unzipping response..."
          mkdir -p Portal
          unzip -qq response.zip -d Portal

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy Portal --project-name=${{ matrix.directory }}-apimatic

      - name: Update README.md
        run: |
          echo "${{ matrix.directory }}-apimatic" > ${{ matrix.directory }}/README.md
          curl --request GET \
            --url https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects \
            --header 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" | jq '.result.[].subdomain' | tr -d '"' | sed 's/^/<http:\/\//' | sed 's/$/>/' >> ${{ matrix.directory }}/README.md

      - name: Cleanup
        run: |
          rm -f portal-input.zip response.zip
          echo "Cleanup complete"
