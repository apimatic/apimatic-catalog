name: Portal Generator

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get list of changed directories
        id: changed-dirs
        run: |
          CHANGED_DIRS=$(find . -type d -name 'BuildFiles' | xargs -n1 dirname | sort -u | tr '\n' ' ')
          echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV

      # This step helps ensure that environment variables and secrets are set up correctly
      - name: Verify Environment Setup
        run: |
          echo "Changed directories: $CHANGED_DIRS"  # Only minimal output
          echo "API_KEY: (hidden)"  # Don't print the actual secret, just verify it's referenced

      - name: Process and Deploy Changed Directories
        if: env.CHANGED_DIRS
        run: |
          for dir in $CHANGED_DIRS; do
            echo "Processing $dir..."

            # Navigate to the directory
            cd "$dir"

            # Zip the BuildFiles directory (suppress output from zip)
            zip -r portal-input.zip BuildFiles/* > /dev/null

            # Call the Apimatic API endpoint to generate the portal
            RESPONSE=$(curl -s --write-out '%{http_code}\t%{content_type}' --request POST --url 'https://api.apimatic.io/portal' \
                        -H "Authorization: X-Auth-Key ${{ secrets.APIMATIC_API_KEY }}" \
                        -F "file=@portal-input.zip")

            # Extract the HTTP code and content type
            HTTP_CODE=$(echo $RESPONSE | cut -d $'\t' -f 1)
            CONTENT_TYPE=$(echo $RESPONSE | cut -d $'\t' -f 2)

            echo "HTTP_CODE=$HTTP_CODE"

            # Handle invalid HTTP code
            if ! [[ "$HTTP_CODE" =~ ^[0-9]+$ ]]; then
              echo "Authorization error or invalid response"
              exit 1
            fi

            # Handle different responses
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Portal generation successful."
              curl -s -o portal.zip --request POST --url 'https://api.apimatic.io/portal' \
                -H "Authorization: X-Auth-Key ${{ secrets.APIMATIC_API_KEY }}" \
                -F "file=@portal-input.zip"
              unzip -qq portal.zip -d Portal
            elif [ "$HTTP_CODE" -eq 422 ]; then
              echo "Unprocessable entry. Error encountered."
              exit 1
            elif [ "$HTTP_CODE" -eq 402 ]; then
              echo "Subscription issue. Exiting."
              exit 1
            elif [ "$HTTP_CODE" -eq 401 ]; then
              echo "Authorization issue. Exiting."
              exit 1
            elif [ "$HTTP_CODE" -eq 400 ]; then
              echo "Bad Request. Exiting."
              exit 1
            else
              echo "Unexpected response. Exiting."
              exit 1
            fi

            # Navigate back to the root directory
            cd ..

          done
