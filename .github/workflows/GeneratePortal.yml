name: Portal Generator

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get list of changed directories
        id: changed-dirs
        run: |
          CHANGED_DIRS=$(find . -type d -name 'BuildFiles' | xargs -n1 dirname | sort -u | tr '\n' ' ')
          echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV
          echo "Changed directories: $CHANGED_DIRS"  # Debugging output

      - name: Debug GitHub environment variables
        run: |
          echo "GITHUB_ENV: $GITHUB_ENV"
          echo "API_KEY: ${{ secrets.API_KEY }}"  # Verify the secret is being read correctly
          echo "Changed directories from GITHUB_ENV: $CHANGED_DIRS"

      - name: Process and Deploy Changed Directories
        if: env.CHANGED_DIRS
        run: |
          echo "Processing directories..."  # Debugging output
          for dir in $CHANGED_DIRS; do
            echo "Processing $dir..."

            # Navigate to the directory
            cd "$dir"

            # Zip the BuildFiles directory
            zip -qq -r portal-input.zip BuildFiles/*

            # Call the Apimatic API endpoint to generate the portal
            RESPONSE=$(curl -s --write-out '%{http_code}\t%{content_type}' --request POST --url 'https://api.apimatic.io/portal' \
              -H "Authorization: X-Auth-Key ${{ secrets.API_KEY }}" \
              -F "file=@portal-input.zip")

            # Extract the HTTP code and content type
            HTTP_CODE=$(echo $RESPONSE | cut -d " " -f 1)
            CONTENT_TYPE=$(echo $RESPONSE | cut -d " " -f 2)
            echo "HTTP_CODE=$HTTP_CODE"
            echo "CONTENT_TYPE=$CONTENT_TYPE"

            # Handle different responses
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Portal generation successful, extracting files..."
              curl -s -o portal.zip --request POST --url 'https://api.apimatic.io/portal' \
                -H "Authorization: X-Auth-Key ${{ secrets.API_KEY }}" \
                -F "file=@portal-input.zip"
              unzip -qq portal.zip -d Portal
            elif [ "$HTTP_CODE" -eq 422 ] && [ "$CONTENT_TYPE" == "application/zip" ]; then
              unzip -qq error.zip -d error
              echo "Unprocessable entry. Error files extracted."
              exit 1
            elif [ "$HTTP_CODE" -eq 402 ]; then
              echo "Subscription issue. Exiting."
              exit 1
            elif [ "$HTTP_CODE" -eq 401 ]; then
              echo "Authorization issue. Exiting."
              exit 1
            elif [ "$HTTP_CODE" -eq 400 ]; then
              echo "Bad Request. Exiting."
              exit 1
            else
              echo "Unexpected response. Exiting."
              exit 1
            fi

            cd ..
          done
