## --------------------
## DON'T EDIT THIS FILE
## --------------------
## Engine: yamlinc@0.1.10
## Source: .\source-doc\smd-api-swagger-doc.yaml

openapi: 3.0.0
servers:
  - description: URL White Label
    url: 'https://api.marketdata.worldline-solutions.com/smd-api'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    instr:
      type: object
      properties:
        currInstrSess:
          $ref: '#/components/schemas/session'
        prevInstrSess:
          $ref: '#/components/schemas/session'
        transco:
          $ref: '#/components/schemas/transcoList'
        specFeat:
          $ref: '#/components/schemas/specFeat'
        stateHisto:
          $ref: '#/components/schemas/stateHisto'
        exchange:
          $ref: '#/components/schemas/exchange'
        instrRel:
          $ref: '#/components/schemas/instrRel'
        ordBook:
          $ref: '#/components/schemas/ordBook'
        trade:
          $ref: '#/components/schemas/trade'
        perf:
          $ref: '#/components/schemas/perf'
        tradingGroup:
          $ref: '#/components/schemas/tradingGroup'
        iid:
          type: integer
          example: 1000727
        exchCode:
          type: string
          example: XPAR
        tradGrpID:
          type: integer
          example: 65
        tradGrpCode:
          type: string
          example: 11
        longNm:
          type: string
          example: ATOS
        providerNm:
          type: string
          example: ATOS
        type:
          type: string
          example: STOCK
        subType:
          type: string
          example: CFIES
        cfiCode:
          type: string
          example: ESVUFN
        cfiCodeDecompOrder:
          type: string
          example: 'CFIVotingRight,CFIOwnership,CFIPaymentStatus,CFIForm'
        currency:
          type: string
          example: EUR
        faceVal:
          type: integer
          example: 1
        faceValCur:
          type: string
          example: EUR
        issuePx:
          type: number
          example: 85.02
        issuerCtry:
          type: string
          example: FRA
        countryGroup:
          type: string
          example: Europe
        isSRDTradable:
          type: boolean
          example: true
        isISAEligibility:
          type: boolean
          example: true
        marketOfReference:
          type: string
          example: XPAR
        priceUnitType:
          type: string
          example: CUR
        qtyNotat:
          type: string
          example: UNT
        strikePx:
          type: integer
          example: 0
        tradLot:
          type: integer
          example: 1
        listed:
          type: boolean
          example: true
        listBeginDt:
          type: string
          example: 20190925
        nbShare:
          type: integer
          example: 110763699
        accuracy:
          type: integer
          example: 2
        tickSizeRule:
          type: string
          example: ERX_24
        quality:
          $ref: '#/components/schemas/Quality'
    session:
      type: object
      properties:
        sessionType:
          type: string
          example: 'CUR, DCC...'
        dateTime:
          type: string
          example: '20220706-14:46:10'
        quotationState:
          type: string
          example: AUT
        quality:
          $ref: '#/components/schemas/Quality'
        lastPx:
          type: number
          example: 11.34
        lastQty:
          type: integer
          example: 200
        openPx:
          type: number
          example: 10.7
        openQty:
          type: integer
          example: 35
        openDtTm:
          type: string
          example: '20220706-09:00:27'
        indiOpenPx:
          type: number
          example: 10.7
        indiOpenPxDtTm:
          type: string
          example: '20220706-09:00:20'
        closPx:
          type: number
          example: 10.355
        risVarLim:
          type: number
          example: 11.905
        falVarLim:
          type: number
          example: 10.775
        tradedQty:
          type: number
          example: 1891998
        nbTrades:
          type: integer
          example: 6282
        lastUpdate:
          type: string
          example: '20220706-14:46:10'
        valorization:
          type: number
          example: 11.34
        valorizationDateTime:
          type: string
          example: '20220706-14:46:10'
        marketCapitalization:
          type: number
          example: 1256060346.66
        exchangedCapitalisation:
          type: number
          example: 1.70813905375262
        prevAdjClosingPrice:
          type: number
          example: 10.335
        prevAdjClosingDateTime:
          type: string
          example: '20220706-03:01:15'
        instrTradingStatus:
          type: string
          example: 'CON, CLO...'
        haltReason:
          type: string
          example: 0
        actionAffectingState:
          type: string
          example: 4
        progOpeningTime:
          type: string
          example: '09:00:27'
        vwap:
          type: number
          example: 10.9943
        tickSizeRule:
          type: string
          example: ERX_24
    transcoList:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
            example: FR0000051732
          codification:
            type: string
            example: ISIN
          exchCode:
            type: string
            example: XPAR
    specFeat:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
            example: Field
          fieldType:
            type: string
            example: Type
          value:
            type: string
            example: Value
    exchange:
      type: array
      items:
        type: object
        properties:
          exchID:
            type: integer
            example: 1
          exchCd:
            type: string
            example: XPAR
          exchlbl:
            type: string
            example: Nyse Euronext - Euronext Paris
          exchlvl:
            type: integer
            example: 1
          refIdx:
            type: string
            example: CAC40
          ownExchId:
            type: integer
            example: 0
    stateHisto:
      type: array
      items:
        type: object
        properties:
          stateDt:
            type: string
            example: '20201019-18:01:45'
          stateId:
            type: string
            example: HAL
    tradingGroup:
      type: object
      properties:
        tradingGroupCode:
          type: string
          example: 11
        instrumentType:
          type: string
          example: STOCK
    instrRel:
      type: array
      items:
        type: object
        properties:
          instrLst:
            $ref: '#/components/schemas/instrLst'
    instrLst:
      type: object
      properties:
        transco:
          $ref: '#/components/schemas/transcoList'
        listIndex:
          $ref: '#/components/schemas/transco'
        lstType:
          type: string
          example: 'SEC, NDX'
        lstCd:
          type: string
          example: '9000, FR0003500008'
        lstOwner:
          type: string
          example: 'ICB, PUBLIC'
        lstLbl:
          type: string
          example: 'TECHNOLOGIE, CAC 40'
        lstLvl:
          type: integer
          example: 1
        lastUpdate:
          type: string
          example: '20220711-09:00:00'
    transco:
      type: object
      properties:
        code:
          type: string
          example: FR0003500008
        codification:
          type: string
          example: ISIN
        extCode:
          type: string
          example: REF (optional)
        exchCode:
          type: string
          example: XPAR
    ordBook:
      type: object
      properties:
        ordBkLnAsk:
          $ref: '#/components/schemas/orderBookLine'
        ordBkLnBid:
          $ref: '#/components/schemas/orderBookLine'
        bsBidPx:
          type: number
          example: 11.625
        bsBidQty:
          type: number
          example: 1165
        bsBidDtTm:
          type: string
          example: '20220711-09:00:00'
        indBidPx:
          type: number
          example: 1150
        indBidPxDtTm:
          type: string
          example: '20220711-09:00:00'
        bsAskPx:
          type: number
          example: 11.64
        bsAskQty:
          type: number
          example: 796
        bsAskDtTm:
          type: string
          example: '20220711-09:00:00'
        indAskPx:
          type: number
          example: 1150
        indAskPxDtTm:
          type: string
          example: '20220711-09:00:00'
        midPx:
          type: number
          example: 1150
        lastUpdate:
          type: string
          example: '20220711-09:00:00'
        sessionType:
          type: string
          example: 'CUR, DCC'
        askVariation:
          type: number
          example: 1.92
        bidVariation:
          type: number
          example: 1.79
        askVariationAbs:
          type: number
          example: 11.64
        bidVariationAbs:
          type: number
          example: 12.35
        tickSize:
          type: number
          example: 2
        tickSizeRule:
          type: string
          example: ERX_72
    orderBookLine:
      type: array
      items:
        type: object
        properties:
          ordLst:
            $ref: '#/components/schemas/orderList'
          qty:
            type: number
            example: 796
          nbOrd:
            type: integer
            example: 6
          px:
            type: number
            example: 11.64
          tradID:
            type: string
            example: 1
          lastUpdate:
            type: string
            example: '20220711-09:00:00'
          type:
            type: string
            example: 'N'
          dateTime:
            type: string
            example: '20220711-09:00:00'
          liquidityProvider:
            type: boolean
            example: true/false
    orderList:
      type: array
      items:
        type: object
        properties:
          qty:
            type: number
            example: 796
          px:
            type: number
            example: 11.64
          priorityDateTime:
            type: string
            example: '20220711-09:00:00'
    trade:
      type: array
      items:
        type: object
        properties:
          trdDtTm:
            type: string
            example: '20220711-09:00:00'
          trdDtTmRk:
            type: integer
            example: 2909
          tradedQty:
            type: number
            example: 60
          trdPx:
            type: number
            example: 11.625
          buyID:
            type: string
            example: 1
          sellID:
            type: string
            example: 1
          lastUpdate:
            type: string
            example: '20220711-09:00:00'
          provTrdID:
            type: integer
            example: 744705
          trdStatus:
            type: string
            example: 'VAL, DEL'
          tradeType:
            type: string
          tradeMarket:
            type: string
    perf:
      type: array
      items:
        type: object
        properties:
          perType:
            type: string
            example: 'D, P, 1W...'
          perStartDtTm:
            type: string
            example: '20220711-09:00:00'
          perStartPx:
            type: number
            example: 12.005
          var:
            type: number
            example: 0.02124115
          pxVar:
            type: number
            example: 0.255
          highPx:
            type: number
            example: 12.585
          highPxQty:
            type: number
            example: 50
          highPxDtTm:
            type: string
            example: '20220711-09:00:00'
          lowPx:
            type: number
            example: 11.805
          lowPxQty:
            type: number
            example: 50
          lowPxDtTm:
            type: string
            example: '20220711-09:00:00'
          tradedQty:
            type: number
            example: 1659551
          tradedAmt:
            type: number
            example: 20218191.4
          nbOpenDays:
            type: integer
            example: 20
          updateMd:
            type: string
            example: I
          lastQuotDtTm:
            type: string
            example: '20220711-09:00:00'
          lastUpdate:
            type: string
            example: '20220711-09:00:00'
          nationalSharesTraded:
            type: number
          sessionType:
            type: string
            example: DCC
          volatHisto:
            type: number
          ratioInfoHisto:
            type: number
          trackingErrorHisto:
            type: number
          ratioSharpeHisto:
            type: number
          theoriticalOpeningVar:
            type: number
          vwap:
            type: number
            example: 12.1829
    intradayPointMinute:
      type: object
      properties:
        time:
          type: string
        nbTrade:
          type: integer
        beginPx:
          type: number
        beginTime:
          type: string
        endPx:
          type: number
        endTime:
          type: string
        highPx:
          type: number
        lowPx:
          type: number
        beginAskPx:
          type: number
        beginAskTime:
          type: string
        endAskPx:
          type: number
        endAskTime:
          type: string
        highAskPx:
          type: number
        lowAskPx:
          type: number
        beginBidPx:
          type: number
        beginBidTime:
          type: string
        endBidPx:
          type: number
        endBidTime:
          type: string
        highBidPx:
          type: number
        lowBidPx:
          type: number
        vol:
          type: number
        amt:
          type: number
        previousClosingPx:
          type: number
        previousClosingDt:
          type: string
    intradayPointTrade:
      type: object
      properties:
        time:
          type: string
        beginPx:
          type: number
        vol:
          type: number
        amt:
          type: number
        tradeStatus:
          type: string
        tradeType:
          type: string
        provTrdID:
          type: string
    historyDt:
      type: object
      properties:
        dt:
          type: string
          example: 20220627
        beginDt:
          type: string
          example: 20220627
        openPx:
          type: number
          example: 37.5
        closePx:
          type: number
          example: 38.59
        highPx:
          type: number
          example: 39.25
        lowPx:
          type: number
          example: 37.5
        lastPx:
          type: number
          example: 38.59
        qty:
          type: number
          example: 2773433
        volNbTrade:
          type: number
          example: 20483
        volCap:
          type: number
          example: 107074396.589999
        var:
          type: number
        setPx:
          type: number
        openInterest:
          type: number
        netRet:
          type: number
        grossRet:
          type: number
        closCap:
          type: number
        turn:
          type: number
        tickSize:
          type: number
        tickSizeRule:
          type: string
          example: ERX_24
        vwap:
          type: number
    indicators:
      type: object
      properties:
        indicator:
          type: array
          items:
            $ref: '#/components/schemas/indicator'
        dt:
          type: string
          example: 20220627
    indicator:
      type: object
      properties:
        name:
          type: string
        nbDays:
          type: integer
        value:
          type: number
    ranking:
      type: object
      properties:
        accuracy:
          type: integer
        tickSize:
          type: number
        tickSizeRule:
          type: string
        lastPrice:
          type: number
        highPrice:
          type: number
        lowPrice:
          type: number
        openPrice:
          type: number
        tradedQuantity:
          type: number
        tradedAmount:
          type: number
        variation:
          type: number
        lastQuotation:
          type: string
        nbShare:
          type: integer
        marketCap:
          type: number
        instr:
          $ref: '#/components/schemas/instr'
    corporateAction:
      type: object
      properties:
        date:
          type: string
        caType:
          type: string
        netAmount:
          type: number
        grossAmount:
          type: number
        currency:
          type: string
        adjustmentFactor:
          type: number
        description:
          type: string
        allocatedSecuritiesNumber:
          type: integer
        ownSecuritiesNumber:
          type: integer
        linkIid:
          type: integer
        taxCredit:
          type: number
    instrSearch:
      type: object
      properties:
        resultPerInstrType:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        resultPerInstrSubType:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        resultPerInstrCountry:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        instr:
          type: array
          items:
            $ref: '#/components/schemas/instr'
    document:
      type: object
      properties:
        documentID:
          type: integer
        type:
          type: string
        subType:
          type: string
        format:
          type: string
        title:
          type: string
        summary:
          type: string
        providerRef:
          type: string
        body:
          type: string
        rawBody:
          type: string
        binaryRawBody:
          type: string
        providerLevel:
          type: integer
        dateTime:
          type: string
        effectiveDate:
          type: string
        updateDate:
          type: string
        lastUpdate:
          type: string
        docCategory:
          type: array
          items:
            $ref: '#/components/schemas/docCategory'
        externalRef:
          type: array
          items:
            $ref: '#/components/schemas/externalRef'
        specFeat:
          type: array
          items:
            $ref: '#/components/schemas/specFeat'
        transcoDoc:
          type: array
          items:
            $ref: '#/components/schemas/transcoDoc'
        docProvider:
          $ref: '#/components/schemas/docProvider'
    docCategory:
      type: object
      properties:
        categoryID:
          type: integer
        code:
          type: string
        label:
          type: string
    externalRef:
      type: object
      properties:
        externalRefID:
          type: integer
        name:
          type: string
        path:
          type: string
        type:
          type: string
        title:
          type: string
        body:
          type: string
        subType:
          type: string
        date:
          type: string
    transcoDoc:
      type: object
      properties:
        rank:
          type: integer
        transco:
          type: array
          items:
            $ref: '#/components/schemas/transco'
    docProvider:
      type: object
      properties:
        providerID:
          type: integer
        code:
          type: string
        name:
          type: string
    user:
      type: object
      properties:
        userID:
          type: integer
          example: 123456
        externalRef:
          type: string
          example: toto
        mail:
          type: string
          example: toto@worldline.com
        sms:
          type: string
          example: 0612345678
        locale:
          type: string
          example: FR
    portfolio:
      type: object
      properties:
        userID:
          type: integer
          example: 123456
        portfolioID:
          type: integer
          example: 123456
        creationDate:
          type: string
          example: '20220713-09:00:00'
        portfolioName:
          type: string
          example: Portfolio 1
        currency:
          type: string
          example: EUR
        portfolioProfile:
          type: string
        liquidity:
          type: number
          example: 1000
        purchaseValorization:
          type: number
          example: 1526.63
        purchaseValorizationWithFees:
          type: number
        actualValorization:
          type: number
          example: 1854.79
        previousValorization:
          type: number
        variation:
          type: number
          example: 3.85
        variationAbs:
          type: number
        profitAndLossLatent:
          type: number
        profitAndLossLatentInPercent:
          type: number
        profitAndLossLatentWithFees:
          type: number
        profitAndLossLatentWithFeesInPercent:
          type: number
        profitAndLossTotal:
          type: number
        profitAndLossTotalInPercent:
          type: number
        profitAndLossTotalWithFees:
          type: number
        profitAndLossTotalWithFeesInPercent:
          type: number
        profitAndLossRealised:
          type: number
        profitAndLossRealisedWithFees:
          type: number
        totalQuantity:
          type: number
        provisionAmount:
          type: number
        provisionMax:
          type: number
        totalFees:
          type: number
        isEmpty:
          type: boolean
        feeByDefaultCurrency:
          type: number
        feeByDefaultPercentage:
          type: number
        externalRef:
          type: string
    portfolioDetail:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/portfolio'
        portfolioLine:
          type: array
          items:
            $ref: '#/components/schemas/portfolioLine'
        cross:
          type: array
          items:
            $ref: '#/components/schemas/cross'
    portfolioLine:
      type: object
      properties:
        portfolioLineID:
          type: integer
          example: 123456
        transco:
          $ref: '#/components/schemas/transco'
        quantity:
          type: number
          example: 20
        lastOperationDate:
          type: string
          example: '20220713-09:00:00'
        averagePurchasePrice:
          type: number
          example: 25.3
        averagePurchasePriceInCurrency:
          type: number
        averagePurchasePriceWithFees:
          type: number
        purchaseValorization:
          type: number
        purchaseValorizationInCurrency:
          type: number
        purchaseValorizationWithFees:
          type: number
        actualValorization:
          type: number
        previousValorization:
          type: number
        actualValorizationInCurrency:
          type: number
        lastPrice:
          type: number
        valorization:
          type: number
        valorizationInCurrency:
          type: number
        currency:
          type: string
          example: EUR
        ptfCurrency:
          type: string
          example: EUR
        priceUnitType:
          type: string
        lastPriceDateTime:
          type: string
          example: '20220713-09:00:00'
        valorizationDateTime:
          type: string
          example: '20220713-09:00:00'
        previousValorizationDateTime:
          type: string
          example: '20220713-09:00:00'
        priceVariation:
          type: number
        priceVariationAbs:
          type: number
        profitAndLoss:
          type: number
        profitAndLossInPercent:
          type: number
        profitAndLossInCurrency:
          type: number
        profitAndLossInCurrencyInPercent:
          type: number
        profitAndLossWithFees:
          type: number
        profitAndLossWithFeesInPercent:
          type: number
        accuracy:
          type: integer
        tickSize:
          type: number
        tickSizeRule:
          type: string
        iid:
          type: integer
        isAvailable:
          type: boolean
    portfolioOperation:
      type: object
      properties:
        transco:
          $ref: '#/components/schemas/transco'
        eventDate:
          type: string
          example: '20220713-09:00:00'
        operationType:
          type: integer
        quantity:
          type: number
          example: 10
        price:
          type: number
          example: 15.35
        operationDate:
          type: string
          example: '20220713-09:00:00'
        fees:
          type: number
        feesInPercent:
          type: number
        operationAmount:
          type: number
        portfolioOperationID:
          type: integer
        profitAndLoss:
          type: number
        profitAndLossWithFees:
          type: number
        accuracy:
          type: integer
        tickSize:
          type: number
        tickSizeRule:
          type: string
        comment:
          type: string
        conversionRate:
          type: number
        currencyPtf:
          type: string
    histoPtf:
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/operations'
        date:
          type: string
        valo:
          type: number
        provisionAmount:
          type: number
        perf:
          type: number
        globalPerf:
          type: number
    histoIndex:
      type: object
      properties:
        date:
          type: string
        valo:
          type: number
        perf:
          type: number
        globalPerf:
          type: number
    operations:
      type: object
      properties:
        type:
          type: string
        lineID:
          type: integer
        quantity:
          type: integer
        instrument:
          type: string
        price:
          type: number
        fees:
          type: number
        comment:
          type: string
    histoValoPerformanceBean:
      type: object
      properties:
        periodType:
          type: string
        performance:
          type: number
    watchlist:
      type: object
      properties:
        userID:
          type: integer
          example: 123456
        watchlistID:
          type: integer
          example: 123456
        creationDate:
          type: string
          example: '20220713-09:00:00'
        watchlistName:
          type: string
          example: Watchlist 1
        currency:
          type: string
          example: EUR
        profile:
          type: string
        externalRef:
          type: string
        isEmpty:
          type: boolean
    watchlistLine:
      type: object
      properties:
        iid:
          type: integer
          example: 123456
        watchlistLineID:
          type: integer
          example: 123456
        transco:
          $ref: '#/components/schemas/transco'
    palmares:
      type: object
      properties:
        idPtf:
          type: integer
          example: 475
        nameUser:
          type: string
          example: test_ptf_antoine
        namePtf:
          type: string
          example: Nikos à Mikonos
        provisionAmount:
          type: number
          example: 30
        actualValorization:
          type: number
          example: 70.29
        performance:
          type: number
          example: -0.010470334053515083
    triggerCriterion:
      type: object
      properties:
        params-entry:
          type: array
          items:
            $ref: '#/components/schemas/paramsEntry'
        data:
          type: string
        operator:
          type: string
        value:
          type: number
        value2:
          type: string
        condition-expr:
          type: string
        alias-map:
          type: string
    paramsEntry:
      type: object
      properties:
        value:
          type: string
        key:
          type: string
    notificationInfo:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    alert:
      type: object
      properties:
        userID:
          type: integer
          example: 123456
        code:
          type: string
          example: FR0000051732
        codification:
          type: string
          example: ISIN
        exchangeCode:
          type: string
          example: XPAR
        extensionCode:
          type: string
        startDateValidity:
          type: integer
          format: int64
        endDateValidity:
          type: integer
          format: int64
        creationDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        deleteDate:
          type: integer
          format: int64
        alertType:
          type: integer
        alertStatus:
          type: integer
        releaseDate:
          type: integer
          format: int64
        autoReactivation:
          type: integer
        locale:
          type: string
        openingDigest:
          type: integer
        closingDigest:
          type: integer
        groupID:
          type: integer
          format: int64
        frontData:
          type: string
        template:
          type: string
        triggerCriterionList:
          type: array
          items:
            $ref: '#/components/schemas/triggerCriterion'
        notificationInfosList:
          type: array
          items:
            $ref: '#/components/schemas/notificationInfo'
    cross:
      type: object
      properties:
        crossName:
          type: string
          example: EURUSD
        crossRate:
          type: number
          example: 1.25
    pagination:
      type: object
      properties:
        nbItems:
          type: integer
          example: 120
        offset:
          type: integer
          example: 1
    exchangeInfo:
      type: object
      properties:
        label:
          type: string
        sessionStartTime:
          type: string
        sessionPreOpenTime:
          type: string
        sessionEndTime:
          type: string
        sessionEndPreOpenTime:
          type: string
        sessionStartDateTime:
          type: string
        sessionPreOpenDateTime:
          type: string
        sessionEndDateTime:
          type: string
        sessionEndPreOpenDateTime:
          type: string
        exchangeType:
          type: string
    infoDate:
      type: object
      properties:
        curSessDt:
          type: string
        nextOpenDt:
          type: string
        nextHolDt:
          type: string
        prevHolDt:
          type: string
        nextLiqDt:
          type: string
        prevLiqDt:
          type: string
        nextLiqDtTm:
          type: string
        beforeLiqDtTm:
          type: string
        prevLiqDtTm:
          type: string
        lastOpenDayMonthDt:
          type: string
    specificInfo:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    multiCross:
      type: object
      properties:
        crossLabel:
          type: string
        crossValue:
          type: number
        lastUpdateDate:
          type: string
    tickSizeRule:
      type: object
      properties:
        id:
          type: string
        tickSizeSingleRule:
          type: array
          items:
            $ref: '#/components/schemas/tickSizeSingleRule'
    tickSizeSingleRule:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
        tick:
          type: number
    extendedTradingGroup:
      type: object
      properties:
        exchCode:
          type: string
        trGrpCode:
          type: string
        trMode:
          type: string
        quality:
          type: string
        marketState:
          type: string
        providerMarketState:
          type: string
        instrumentType:
          type: string
        timePreOpen1:
          type: string
        timeOpen1:
          type: string
        timeClos1:
          type: string
        timePreOpen2:
          type: string
        timeOpen2:
          type: string
        timeClos2:
          type: string
        timePreOpen3:
          type: string
        timeOpen3:
          type: string
        timeClos3:
          type: string
        eodTime:
          type: string
        lastUpdate:
          type: string
    listElement:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: string
    bestPrice:
      type: object
      properties:
        instr:
          $ref: '#/components/schemas/instr'
        comment:
          type: string
    Granularity:
      type: string
      enum:
        - W
        - 2W
        - M
        - 3M
        - 6M
        - 'Y'
    Mode:
      type: string
      enum:
        - SES
        - DCC
    Quality:
      type: string
      enum:
        - RT
        - DT
        - BT
    RankingType:
      type: string
      enum:
        - VAR
        - QTY
        - CAP
        - LAST_PRICE
        - HIGH_PRICE
        - LOW_PRICE
        - OPEN_PRICE
        - MARKET_CAP
    TopFlop:
      type: string
      enum:
        - TOP
        - FLOP
        - TOPFLOP
    View:
      type: string
      enum:
        - FULL
        - LIGHT
    Period:
      type: string
      enum:
        - D
        - 1D
        - 6D
        - 1W
        - 52W
        - M
        - 1M
        - 3M
        - 6M
        - 'Y'
        - 1Y
        - 2Y
        - 3Y
        - 4Y
        - 5Y
        - 7Y
        - 10Y
        - MAX
    RankingPeriod:
      type: string
      enum:
        - 15MN
        - 30MN
        - 1H
        - 3H
        - D
        - 1D
        - 6D
        - 1W
        - 52W
        - M
        - 1M
        - 3M
        - 6M
        - 'Y'
        - 1Y
        - 2Y
        - 3Y
        - 4Y
        - 5Y
        - 7Y
        - 10Y
        - MAX
    Resolution:
      type: string
      enum:
        - 1MN
        - 5MN
        - 10MN
        - 15MN
        - 30MN
        - 60MN
    DocumentType:
      type: string
      enum:
        - NEWS
        - DETAIL_SOCIETE
        - CONSENSUS
        - ANALYSE_TECHNIQUE
        - AGENDA
        - NOTICE
    DocumentCategoryType:
      type: string
      enum:
        - ALL
        - GEOGRAPHICAL_ZONE
        - WFI_CATEGORIES
    Order:
      type: string
      enum:
        - ASC
        - DES
    InstrumentType:
      type: string
      enum:
        - STOCK
        - INDEX
        - WARRT
        - TRACK
        - BOND
        - REPO
        - FUNDS
        - OPT
        - FUT
        - COMMO
        - CURR
        - RATE
        - CERTI
    SortField:
      type: string
      enum:
        - SHORT_NAME
        - LONG_NAME
        - SUB_TYPE
        - TYPE
        - ISSUER
        - EXCHANGE
        - DATE_TIME
    Currency:
      type: string
      enum:
        - AUD
        - CAD
        - CHF
        - CZK
        - DEM
        - DKK
        - EUR
        - GBP
        - GBX
        - HKD
        - HUF
        - IDR
        - ILS
        - JPY
        - MYR
        - NOK
        - NZD
        - RUR
        - SEK
        - SGD
        - THB
        - TRL
        - TRY
        - USD
        - ZAR
    PushSubscribeTarget:
      enum:
        - REDIS
    PushSubscribeDataType:
      enum:
        - TR
        - OB
    AlertStatus:
      type: string
      enum:
        - WAITED (1)
        - IN_PROGRESS (2)
        - EXPIRED (3)
        - CANCELLED (4)
        - SUSPENDED (5)
        - EXECUTED (6)
    AlertType:
      type: string
      enum:
        - VARIATION_LIMIT (1)
        - LAST_QUOTE_CHANGE (2)
        - TRADING_VOLUME (3)
        - RESERVED (4)
        - SUSPENDED (5)
        - TIME (6)
        - OPENING (7)
        - CLOSING (8)
    AggregateType:
      type: string
      enum:
        - EXCHANGE (EXCH)
        - TYPE (TYPE)
        - SUBTYPE (STYPE)
        - CLASS (CLASS)
        - EXPIRY (EXP)
        - WAY_CASH (WAY)
        - WAY_DER (WAY)
        - INDEX (INDEX)
        - UNDERLYING_TYPE (UNDTP)
        - ISSUER (ISSR)
        - SPECIFIC_FEATURE (SF)
        - SPECIFIC_FEATURE_EXCHANGE (SFXCH)
        - SPECIFIC_FEATURE_TYPE (SFTP)
        - CLASSIFICATION (CLASF)
        - CLASSIFICATION_EXCHANGE (CLXCH)
        - CLASSIFICATION_TYPE (CLTP)
        - MARKET (MK)
        - MARKET_EXCHANGE (MKXCH)
        - MARKET_TYPE (MKTP)
    Algorithm:
      type: string
      enum:
        - LAST_VALO
security:
  - bearerAuth: []
info:
  description: SMD API
  version: 1.0.0
  title: SMD API
  contact:
    email: dl-fr-smd2@equensworldline.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: instruments
    description: Instruments APIs
  - name: indexes
    description: Indexes APIs
  - name: documents
    description: Documents APIs
  - name: others
    description: Others APIs
  - name: users
    description: Users APIs
  - name: portfolios
    description: Portfolios APIs
  - name: watchlists
    description: Watchlists APIs
paths:
  '/instruments/{instrument-key}':
    get:
      tags:
        - instruments
      operationId: InstrumentDetailApi
      summary: Instrument Detail
      description: |
        ### Instrument Detail for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
      responses:
        '200':
          description: Instrument Detail
          content:
            application/json:
              schema:
                type: object
                properties:
                  instr:
                    type: array
                    items:
                      $ref: '#/components/schemas/instr'
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
        '400':
          description: bad input parameter
  /instruments:
    get:
      tags:
        - instruments
      operationId: InstrumentSearchApi
      summary: Instrument Search
      description: |
        ### Instrument Search
      parameters:
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: string
        - in: query
          name: label
          description: 'instrument label (example: WORLDLINE)'
          schema:
            type: string
        - in: query
          name: sort-field
          schema:
            $ref: '#/components/schemas/SortField'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Instrument Search
          content:
            application/json:
              schema:
                type: object
                properties:
                  instrSearch:
                    $ref: '#/components/schemas/instrSearch'
                  status:
                    type: integer
                  entityID:
                    type: integer
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
                  nbTotal:
                    type: integer
        '400':
          description: bad input parameter
  /instruments/rankings/variation:
    get:
      tags:
        - instruments
      operationId: VariationRankingApi
      summary: Variation Ranking
      description: |
        ### Variation Ranking
      parameters:
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          required: true
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: string
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  /instruments/rankings/variation/top:
    get:
      tags:
        - instruments
      operationId: TopVariationRankingApi
      summary: Top Variation Ranking
      description: |
        ### Top Variation Ranking
      parameters:
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          required: true
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: string
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  /instruments/rankings/variation/flop:
    get:
      tags:
        - instruments
      operationId: FlopVariationRankingApi
      summary: Flop Variation Ranking
      description: |
        ### Flop Variation Ranking
      parameters:
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          required: true
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: string
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  /instruments/rankings/volume:
    get:
      tags:
        - instruments
      operationId: VolumeRankingApi
      summary: Volume Ranking
      description: |
        ### Volume Ranking
      parameters:
        - in: query
          name: period
          description: 'D, 1W, 1M...'
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          required: true
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: string
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  /instruments/rankings/turnover:
    get:
      tags:
        - instruments
      operationId: TurnoverRankingApi
      summary: Turnover Ranking
      description: |
        ### Turnover Ranking
      parameters:
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: markets
          description: 'XPAR,XAMS'
          required: true
          schema:
            type: string
        - in: query
          name: types
          description: 'STOCK,INDEX'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstrumentType'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/intraday':
    get:
      tags:
        - instruments
      operationId: IntradayMinutesApi
      summary: Intraday Minutes
      description: |
        ### Intraday Minutes for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: depth
          description: '0, 1...5, -1...'
          schema:
            type: integer
        - in: query
          name: resolution
          schema:
            $ref: '#/components/schemas/Resolution'
        - in: query
          name: start-time
          description: 'null by default, example 09:00:00'
          schema:
            type: string
        - in: query
          name: end-time
          description: 'null by default, example 17:30:00'
          schema:
            type: string
        - in: query
          name: sess-without-intraday
          description: 'true'
          schema:
            type: boolean
        - in: query
          name: previous-closing
          description: 'true'
          schema:
            type: boolean
        - in: query
          name: instrument-label
          description: 'true'
          schema:
            type: boolean
        - in: query
          name: local-time
          description: 'false'
          schema:
            type: boolean
      responses:
        '200':
          description: Intraday Minutes
          content:
            application/json:
              schema:
                type: object
                properties:
                  intradayPoint:
                    type: array
                    items:
                      $ref: '#/components/schemas/intradayPointMinute'
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
                  currency:
                    type: string
                    example: EUR
                  accuracy:
                    type: integer
                    example: 2
                  tickSizeRule:
                    type: string
                    example: ERX_24
                  label:
                    type: string
                    example: WORLDLINE
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/intraday/trades':
    get:
      tags:
        - instruments
      operationId: IntradayTradesApi
      summary: Intraday Trades
      description: |
        ### Intraday Trades for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: depth
          description: '0, 1...5, -1...'
          schema:
            type: integer
      responses:
        '200':
          description: Intraday Trades
          content:
            application/json:
              schema:
                type: object
                properties:
                  intradayPoint:
                    type: array
                    items:
                      $ref: '#/components/schemas/intradayPointTrade'
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
                  currency:
                    type: string
                    example: EUR
                  accuracy:
                    type: integer
                    example: 2
                  tickSizeRule:
                    type: string
                    example: ERX_24
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/history/period':
    get:
      tags:
        - instruments
      operationId: HistoryPeriodApi
      summary: History by Period
      description: |
        ### History by Period for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          required: true
          schema:
            $ref: '#/components/schemas/Period'
        - in: query
          name: granularity
          schema:
            $ref: '#/components/schemas/Granularity'
      responses:
        '200':
          description: Histo
          content:
            application/json:
              schema:
                type: object
                properties:
                  transco:
                    $ref: '#/components/schemas/transco'
                  history:
                    type: object
                    properties:
                      historyDt:
                        type: array
                        items:
                          $ref: '#/components/schemas/historyDt'
                      accuracy:
                        type: integer
                        example: 2
                      currency:
                        type: string
                        example: EUR
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    type: string
                    example: HISTORY
                  beginningDate:
                    type: string
                    example: 20220627
                  endingDate:
                    type: string
                    example: 20220727
                  period:
                    type: string
                    example: 1M
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/history/range':
    get:
      tags:
        - instruments
      operationId: HistoryRangeApi
      summary: History by Range
      description: |
        ### History by Range for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: begin-date
          description: format yyyyMMdd
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end-date
          description: format yyyyMMdd
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: granularity
          schema:
            $ref: '#/components/schemas/Granularity'
      responses:
        '200':
          description: Histo
          content:
            application/json:
              schema:
                type: object
                properties:
                  transco:
                    $ref: '#/components/schemas/transco'
                  history:
                    type: object
                    properties:
                      historyDt:
                        type: array
                        items:
                          $ref: '#/components/schemas/historyDt'
                      accuracy:
                        type: integer
                        example: 2
                      currency:
                        type: string
                        example: EUR
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    type: string
                    example: HISTORY
                  beginningDate:
                    type: string
                    example: 20220627
                  endingDate:
                    type: string
                    example: 20220727
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/history/period/indicators':
    get:
      tags:
        - instruments
      operationId: HistoIndicatorsPeriodApi
      summary: History Indicators by Period
      description: |
        ### History Indicators by Period for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          required: true
          schema:
            $ref: '#/components/schemas/Period'
        - in: query
          name: indicators
          description: 'name-nbDays format, example: MOVAVERAGE-3,MOVAVERAGE-6'
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Histo
          content:
            application/json:
              schema:
                type: object
                properties:
                  transco:
                    $ref: '#/components/schemas/transco'
                  history:
                    type: object
                    properties:
                      historyDt:
                        type: array
                        items:
                          $ref: '#/components/schemas/indicators'
                      accuracy:
                        type: integer
                        example: 2
                      currency:
                        type: string
                        example: EUR
                  indicatorName:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        nbDays:
                          type: integer
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    type: string
                    example: INDICATOR
                  beginningDate:
                    type: string
                    example: 20220628
                  endingDate:
                    type: string
                    example: 20220728
                  period:
                    type: string
                    example: 1M
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/history/range/indicators':
    get:
      tags:
        - instruments
      operationId: HistoIndicatorsRangeApi
      summary: History Indicators by Range
      description: |
        ### History Indicators by Range for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: begin-date
          description: format yyyyMMdd
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end-date
          description: format yyyyMMdd
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: indicators
          description: 'name-nbDays format, example: MOVAVERAGE-3,MOVAVERAGE-6'
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Histo
          content:
            application/json:
              schema:
                type: object
                properties:
                  transco:
                    $ref: '#/components/schemas/transco'
                  history:
                    type: object
                    properties:
                      historyDt:
                        type: array
                        items:
                          $ref: '#/components/schemas/indicators'
                      accuracy:
                        type: integer
                        example: 2
                      currency:
                        type: string
                        example: EUR
                  indicatorName:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        nbDays:
                          type: integer
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    type: string
                    example: INDICATOR
                  beginningDate:
                    type: string
                    example: 20220501
                  endingDate:
                    type: string
                    example: 20220727
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/corporate-actions':
    get:
      tags:
        - instruments
      operationId: CorporateActionListForInstrumentApi
      summary: Corporate Action
      description: |
        ### Corporate Action for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
      responses:
        '200':
          description: Corporate Action list for instrument
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/corporateAction'
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/state-histo':
    get:
      tags:
        - instruments
      operationId: InstrumentStateHistoApi
      summary: State Histo
      description: |
        ### State Histo for the instrument-key
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
      responses:
        '200':
          description: State Histo list for instrument
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/stateHisto'
        '400':
          description: bad input parameter
  '/instruments/{instrument-key}/documents':
    get:
      tags:
        - instruments
      operationId: InstrDocumentSearchApi
      summary: Document Search for an instrument
      description: |
        ### Document Search for an instrument
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: label
          description: label
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: begin-date
          description: format yyyy-MM-dd
          schema:
            type: string
            format: date
        - in: query
          name: ending-date
          description: format yyyy-MM-dd
          schema:
            type: string
            format: date
        - in: query
          name: category
          description: category
          schema:
            type: string
        - in: query
          name: provider
          description: provider
          schema:
            type: string
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/DocumentType'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotalResult:
                    type: integer
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  document:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '400':
          description: 'invalid input, object invalid'
  /instruments/documents:
    post:
      tags:
        - instruments
      operationId: ListInstrDocumentSearchApi
      summary: Document Search for a list of instruments
      description: |
        ### Document Search for a list of instruments
      requestBody:
        description: List of instruments in array
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                    example: FR0011981968
                  codification:
                    type: string
                    example: ISIN
                  exchCode:
                    type: string
                    example: XPAR
      parameters:
        - in: query
          name: label
          description: label
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: begin-date
          description: format yyyy-MM-dd
          schema:
            type: string
            format: date
        - in: query
          name: ending-date
          description: format yyyy-MM-dd
          schema:
            type: string
            format: date
        - in: query
          name: category
          description: category
          schema:
            type: string
        - in: query
          name: provider
          description: provider
          schema:
            type: string
        - in: query
          name: type
          description: type
          schema:
            $ref: '#/components/schemas/DocumentType'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotalResult:
                    type: integer
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  document:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '400':
          description: 'invalid input, object invalid'
  '/indexes/{instrument-key}/composition':
    get:
      tags:
        - indexes
      operationId: IndexCompositionApi
      summary: Index Composition
      description: |
        ### Composition for the index (instrument-key)
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
      responses:
        '200':
          description: Index Composition
          content:
            application/json:
              schema:
                type: object
                properties:
                  instrSearch:
                    $ref: '#/components/schemas/instrSearch'
                  status:
                    type: integer
                    example: 0
                  entityID:
                    type: string
                    example: wfi
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
                  nbTotal:
                    type: integer
                    example: 40
        '400':
          description: bad input parameter
  '/indexes/{instrument-key}/rankings/variation':
    get:
      tags:
        - indexes
      operationId: IndexVariationRankingApi
      summary: Variation Ranking for Index Compo
      description: |
        ### Variation Ranking for Index Compo
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/indexes/{instrument-key}/rankings/variation/top':
    get:
      tags:
        - indexes
      operationId: IndexTopVariationRankingApi
      summary: Top Variation Ranking for Index Compo
      description: |
        ### Top Variation Ranking for Index Compo
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/indexes/{instrument-key}/rankings/variation/flop':
    get:
      tags:
        - indexes
      operationId: IndexFlopVariationRankingApi
      summary: Flop Variation Ranking for Index Compo
      description: |
        ### Flop Variation Ranking for Index Compo
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/indexes/{instrument-key}/rankings/volume':
    get:
      tags:
        - indexes
      operationId: IndexVolumeRankingApi
      summary: Volume Ranking for Index Compo
      description: |
        ### Volume Ranking for Index Compo
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/indexes/{instrument-key}/rankings/turnover':
    get:
      tags:
        - indexes
      operationId: IndexTurnoverRankingApi
      summary: Turnover Ranking for Index Compo
      description: |
        ### Turnover Ranking for Index Compo
      parameters:
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
        - in: query
          name: period
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: order
          schema:
            $ref: '#/components/schemas/Order'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Ranking
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotal:
                    type: integer
                  betterDateTime:
                    type: string
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  rnkVal:
                    type: array
                    items:
                      $ref: '#/components/schemas/ranking'
        '400':
          description: bad input parameter
  '/documents/{document-id}':
    get:
      tags:
        - documents
      operationId: DocumentDetailApi
      summary: Document Detail
      description: |
        ### Document Detail
      parameters:
        - in: path
          name: document-id
          description: ID of document
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                type: object
                properties:
                  document:
                    $ref: '#/components/schemas/document'
        '400':
          description: 'invalid input, object invalid'
  /documents:
    get:
      tags:
        - documents
      operationId: DocumentSearchApi
      summary: Document Search
      description: |
        ### Document Search
      parameters:
        - in: query
          name: label
          description: label
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: begin-date
          description: yyyy-MM-dd format
          schema:
            type: string
            format: date
        - in: query
          name: ending-date
          description: yyyy-MM-dd format
          schema:
            type: string
            format: date
        - in: query
          name: category
          description: category
          schema:
            type: string
        - in: query
          name: provider
          description: provider
          schema:
            type: string
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/RankingPeriod'
        - in: query
          name: page
          description: 'page number (example: 1)'
          schema:
            type: integer
        - in: query
          name: limit
          description: 'max items (example: 20)'
          schema:
            type: integer
      responses:
        '200':
          description: Documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  nbTotalResult:
                    type: integer
                  paginationParam:
                    $ref: '#/components/schemas/pagination'
                  document:
                    type: array
                    items:
                      $ref: '#/components/schemas/document'
        '400':
          description: 'invalid input, object invalid'
  /documents/categories:
    get:
      tags:
        - documents
      operationId: DocumentCategoryApi
      summary: Document Category
      description: |
        ### Document Category
      parameters:
        - in: query
          name: category-type
          schema:
            $ref: '#/components/schemas/DocumentCategoryType'
        - in: query
          name: provider
          description: provider
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Document Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/docCategory'
        '400':
          description: 'invalid input, object invalid'
  /documents/providers:
    get:
      tags:
        - documents
      operationId: DocumentProviderApi
      summary: Document Provider
      description: |
        ### Document Provider
      parameters:
        - in: query
          name: instruments
          description: >-
            list of instrument keys: code,codification,exchange (exchange is
            optional)
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Document Providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/docProvider'
        '400':
          description: 'invalid input, object invalid'
  /users:
    post:
      tags:
        - users
      operationId: CreateUserApi
      summary: Create User
      description: |
        ### Create a user in database  
      responses:
        '200':
          description: item created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - external-reference
              properties:
                external-reference:
                  type: string
                  example: '802155, toto...'
                email:
                  type: string
                  example: toto@worldline.com
                sms:
                  type: string
                  example: 0612345678
                locale:
                  type: string
                  example: FR
        description: Information for user to create
  '/users/{user-id}':
    put:
      tags:
        - users
      operationId: ModifyUserApi
      summary: Modify User
      description: |
        ### Modify information for the userID  
      parameters:
        - in: path
          name: user-id
          description: ID of user to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: toto@worldline.com
                sms:
                  type: string
                  example: 0612345678
                locale:
                  type: string
                  example: FR
        description: Information to modify
    delete:
      tags:
        - users
      operationId: DeleteUserApi
      summary: Delete User
      description: |
        ### Delete a user  
      parameters:
        - in: path
          name: user-id
          description: ID of user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - users
      operationId: UserByIDApi
      summary: Get user by ID
      description: |
        ### Get a user by ID
      parameters:
        - in: path
          name: user-id
          description: ID of user to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: 'invalid input, object invalid'
  '/users/external-ref/{external-reference}':
    get:
      tags:
        - users
      operationId: UserByExternalRefApi
      summary: Get user by externalRef
      description: |
        ### Get a user by External Ref
      parameters:
        - in: path
          name: external-reference
          description: externalRef of user to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: 'invalid input, object invalid'
  /portfolios:
    post:
      tags:
        - portfolios
      operationId: CreatePortfolioApi
      summary: Create Portfolio
      description: |
        ### Create a portfolio for a user  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      responses:
        '200':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user-id
                - portfolio-name
              properties:
                user-id:
                  type: integer
                  example: 123456
                portfolio-name:
                  type: string
                  example: Portfolio 1
                currency:
                  type: string
                  example: EUR
                liquidity:
                  type: number
                  example: 10000
                fee-by-default-currency:
                  type: number
                fee-by-default-percentage:
                  type: number
        description: Information for portfolio to create
    get:
      tags:
        - portfolios
      operationId: PortfoliosByUserIDApi
      summary: Get portfolios by UserID
      description: |
        ### Get the portfolios by User ID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: query
          name: user-id
          description: ID of user
          required: true
          schema:
            type: integer
        - in: query
          name: view
          required: false
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: order-by-name
          description: order by
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/portfolio'
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}':
    put:
      tags:
        - portfolios
      operationId: ModifyPortfolioApi
      summary: Modify Portfolio
      description: |
        ### Modify information for the portfolioID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                portfolio-name:
                  type: string
                  example: Portfolio 1
                currency:
                  type: string
                  example: EUR
                liquidity:
                  type: number
                  example: 10000
                fee-by-default-currency:
                  type: number
                fee-by-default-percentage:
                  type: number
        description: Information to modify
    delete:
      tags:
        - portfolios
      operationId: DeletePortfolioApi
      summary: Delete Portfolio
      description: |
        ### Delete a portfolio  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - portfolios
      operationId: PortfolioByIDApi
      summary: Get portfolio by ID
      description: |
        ### Get a portfolio by ID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio to get
          required: true
          schema:
            type: integer
        - in: query
          name: view
          required: false
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: quality
          required: false
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: all-lines
          description: order by
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/portfolioDetail'
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/liquidity/add':
    put:
      tags:
        - portfolios
      operationId: AddLiquidityApi
      summary: Add liquidity to portfolio
      description: |
        ### Add liquidity to portfolio  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: liquidity added
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - liquidity
              properties:
                liquidity:
                  type: number
                  example: 1000
                date:
                  type: string
                  example: '20220706-14:46:10'
                comment:
                  type: string
        description: Liquidity to add with date and comment
  '/portfolios/{portfolio-id}/liquidity/remove':
    put:
      tags:
        - portfolios
      operationId: RemoveLiquidityApi
      summary: Remove liquidity from portfolio
      description: |
        ### Remove liquidity from portfolio  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: liquidity removed
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - liquidity
              properties:
                liquidity:
                  type: number
                  example: 1000
                date:
                  type: string
                  example: '20220706-14:46:10'
                comment:
                  type: string
        description: Liquidity to remove with date and comment
  '/portfolios/{portfolio-id}/instruments/{instrument-key}/purchase':
    post:
      tags:
        - portfolios
      operationId: PurchaseInstrumentApi
      summary: Purchase instrument
      description: |
        ### Purchase instrument  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
      responses:
        '200':
          description: purchase done
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quality:
                  $ref: '#/components/schemas/Quality'
                quantity:
                  type: number
                  example: 10
                price:
                  type: number
                  example: 15.35
                operation-date:
                  type: string
                  example: '20220706-14:46:10'
                fees:
                  type: number
                conversion-rate:
                  type: number
                comment:
                  type: string
                check-liquidity:
                  type: boolean
        description: Optional infos for the purchase
  '/portfolios/{portfolio-id}/instruments/{instrument-key}/sale':
    post:
      tags:
        - portfolios
      operationId: SaleInstrumentApi
      summary: Sale instrument
      description: |
        ### Sale instrument  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
      responses:
        '200':
          description: sale done
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quality:
                  $ref: '#/components/schemas/Quality'
                quantity:
                  type: number
                  example: 10
                price:
                  type: number
                  example: 15.35
                operation-date:
                  type: string
                  example: '20220706-14:46:10'
                fees:
                  type: number
                conversion-rate:
                  type: number
                comment:
                  type: string
        description: Optional infos for the sale
  '/portfolios/{portfolio-id}/instruments/{instrument-key}/dividends':
    post:
      tags:
        - portfolios
      operationId: AddDividendApi
      summary: Add dividend
      description: |
        ### Add dividend  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
      responses:
        '200':
          description: dividend added
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quality:
                  $ref: '#/components/schemas/Quality'
                quantity:
                  type: number
                  example: 10
                price:
                  type: number
                  example: 15.35
                operation-date:
                  type: string
                  example: '20220706-14:46:10'
                conversion-rate:
                  type: number
                comment:
                  type: string
        description: Optional infos for the dividend addition
  '/portfolios/{portfolio-id}/instruments/{instrument-key}/corporate-action':
    post:
      tags:
        - portfolios
      operationId: CorporateActionApi
      summary: Corporate action
      description: |
        ### Corporate action  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
      responses:
        '200':
          description: corporate action added
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - coef
              properties:
                type:
                  type: string
                coef:
                  type: number
                quality:
                  $ref: '#/components/schemas/Quality'
                operation-date:
                  type: string
                  example: '20220706-14:46:10'
                comment:
                  type: string
        description: Optional infos for the corporate action addition
  '/portfolios/{portfolio-id}/lines/{line-id}':
    put:
      tags:
        - portfolios
      operationId: ModifyPortfolioLineApi
      summary: Modify portfolio line
      description: |
        ### Modify portfolio line  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of portfolioLine to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: line modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new-quantity:
                  type: number
                new-average-purchase-price:
                  type: number
                new-fees:
                  type: number
                comment:
                  type: string
        description: New infos for the line
    delete:
      tags:
        - portfolios
      operationId: RemovePortfolioLineApi
      summary: Remove portfolio line
      description: |
        ### Remove portfolio line  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of portfolioLine to remove
          required: true
          schema:
            type: integer
        - in: query
          name: just-hide-the-line
          description: 'For delete the line or just hide (ex: false)'
          schema:
            type: boolean
      responses:
        '200':
          description: line removed
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/operations':
    get:
      tags:
        - portfolios
      operationId: OperationsByPortfolioIDApi
      summary: Operations by portfolioID
      description: |
        ### Operations by portfolio ID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: get operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/portfolioOperation'
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/lines/{line-id}/operations':
    get:
      tags:
        - portfolios
      operationId: OperationsByPortfolioLineIDApi
      summary: Operations by portfolioLineID
      description: |
        ### Operations by portfolioLine ID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of portfolioLine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: get operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  portfolioOperations:
                    type: array
                    items:
                      $ref: '#/components/schemas/portfolioOperation'
                  portfolioLine:
                    $ref: '#/components/schemas/portfolioLine'
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/lines/{line-id}/operations/{operation-id}':
    put:
      tags:
        - portfolios
      operationId: UpdateCommentOfOperationApi
      summary: Update comment of operation
      description: |
        ### Update comment of operation  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of portfolioLine
          required: true
          schema:
            type: integer
        - in: path
          name: operation-id
          description: ID of portfolioOperation to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: operation comment modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
        description: New comment
  '/portfolios/{portfolio-id}/lines/{line-id}/last-operation':
    delete:
      tags:
        - portfolios
      operationId: DeleteLastOperationApi
      summary: Delete last operation
      description: |
        ### Delete last operation  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of portfolioLine
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: lastOperation removed
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/performance/period':
    get:
      tags:
        - portfolios
      operationId: PerformanceByPeriodApi
      summary: Performance by period
      description: |
        ### Performance by period  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: query
          name: period
          description: period for the perf
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get performance
          content:
            application/json:
              schema:
                type: object
                properties:
                  perf:
                    type: number
                  beginingDate:
                    type: string
                  endDate:
                    type: string
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/performance/range':
    get:
      tags:
        - portfolios
      operationId: PerformanceByRangeApi
      summary: Performance by range
      description: |
        ### Performance by range  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: query
          name: begin-date
          description: range for the perf (YYYYMMDD)
          required: true
          schema:
            type: string
        - in: query
          name: end-date
          description: range for the perf (YYYYMMDD)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get performance
          content:
            application/json:
              schema:
                type: object
                properties:
                  perf:
                    type: number
                  beginingDate:
                    type: string
                  endDate:
                    type: string
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/histo-valo/period':
    get:
      tags:
        - portfolios
      operationId: HistoValoByPeriodApi
      summary: HistoValo by period
      description: |
        ### HistoValo by period  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: query
          name: period
          description: period for the histoValo
          required: true
          schema:
            type: string
        - in: query
          name: index-code
          required: false
          schema:
            type: string
        - in: query
          name: index-exchange
          required: false
          schema:
            type: string
        - in: query
          name: index-codif
          required: false
          schema:
            type: string
        - in: query
          name: request-ope
          required: false
          schema:
            type: boolean
        - in: query
          name: first-histo-valo-only
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: get histoValo
          content:
            application/json:
              schema:
                type: object
                properties:
                  histoPtf:
                    type: array
                    items:
                      $ref: '#/components/schemas/histoPtf'
                  histoIndex:
                    type: array
                    items:
                      $ref: '#/components/schemas/histoIndex'
                  beginingDate:
                    type: string
                  endDate:
                    type: string
                  instrumentName:
                    type: string
                  currency:
                    type: string
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/histo-valo/range':
    get:
      tags:
        - portfolios
      operationId: HistoValoByRangeApi
      summary: HistoValo by range
      description: |
        ### HistoValo by range  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: query
          name: begin-date
          description: range for the histoValo (YYYYMMDD)
          required: true
          schema:
            type: string
        - in: query
          name: end-date
          description: range for the histoValo (YYYYMMDD)
          required: true
          schema:
            type: string
        - in: query
          name: index-code
          required: false
          schema:
            type: string
        - in: query
          name: index-exchange
          required: false
          schema:
            type: string
        - in: query
          name: index-codif
          required: false
          schema:
            type: string
        - in: query
          name: request-ope
          required: false
          schema:
            type: boolean
        - in: query
          name: first-histo-valo-only
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: get histoValo
          content:
            application/json:
              schema:
                type: object
                properties:
                  histoPtf:
                    type: array
                    items:
                      $ref: '#/components/schemas/histoPtf'
                  histoIndex:
                    type: array
                    items:
                      $ref: '#/components/schemas/histoIndex'
                  beginingDate:
                    type: string
                  endDate:
                    type: string
                  instrumentName:
                    type: string
                  currency:
                    type: string
        '400':
          description: 'invalid input, object invalid'
  '/portfolios/{portfolio-id}/histo-valo/performance':
    get:
      tags:
        - portfolios
      operationId: HistoValoPerfApi
      summary: HistoValoPerf
      description: |
        ### HistoValoPerf  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: portfolio-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: query
          name: period-list
          description: period list for the histoValoPerf
          required: false
          schema:
            type: string
      responses:
        '200':
          description: get histoValoPerf
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/histoValoPerformanceBean'
        '400':
          description: 'invalid input, object invalid'
  /portfolios/palmares:
    get:
      tags:
        - portfolios
      operationId: GetPalmaresUserByPeriodAndExternalRef
      summary: Get Palmares User By Period And External
      parameters:
        - in: query
          name: external-ref
          description: sentence with which the names of the users should begin
          required: true
          schema:
            type: string
        - in: query
          name: period-type
          description: period-type
          required: true
          schema:
            type: string
        - in: query
          name: limit
          description: number of ptf to display (by default 10)
          required: false
          schema:
            type: number
      responses:
        '200':
          description: get palmares user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/palmares'
        '400':
          description: 'invalid input, object invalid'
  /watchlists:
    post:
      tags:
        - watchlists
      operationId: CreateWatchListApi
      summary: Create WatchList
      description: |
        ### Create a watchlist for a user  
      responses:
        '200':
          description: item created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user-id
                - watchlist-name
              properties:
                user-id:
                  type: integer
                  example: 123456
                watchlist-name:
                  type: string
                  example: Watchlist 1
                currency:
                  type: string
                  example: EUR
                external-reference:
                  type: string
                profile:
                  type: string
        description: Information for watchlist to create
    get:
      tags:
        - watchlists
      operationId: WatchlistsByUserIDApi
      summary: Get watchlists by UserID
      description: |
        ### Get the watchlists by User ID  
      parameters:
        - in: path
          name: user-id
          description: ID of user
          required: true
          schema:
            type: integer
        - in: query
          name: view
          required: false
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: order-by-name
          description: order by name
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/watchlist'
        '400':
          description: 'invalid input, object invalid'
  '/watchlists/{watchlist-id}':
    put:
      tags:
        - watchlists
      operationId: ModifyWatchlistApi
      summary: Modify Watchlist
      description: |
        ### Modify information for the watchListID  
      parameters:
        - in: path
          name: watchlist-id
          description: ID of watchlist to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                watchlist-name:
                  type: string
                  example: Watchlist 1
                currency:
                  type: string
                  example: EUR
                external-reference:
                  type: string
                profile:
                  type: string
        description: Information to modify
    delete:
      tags:
        - watchlists
      operationId: DeleteWatchlistApi
      summary: Delete Watchlist
      description: |
        ### Delete a watchlist  
      parameters:
        - in: path
          name: watchlist-id
          description: ID of watchlist to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - watchlists
      operationId: WatchlistByIDApi
      summary: Get watchlist by ID
      description: |
        ### Get a watchlist by ID  
      parameters:
        - in: path
          name: watchlist-id
          description: ID of watchlist to get
          required: true
          schema:
            type: integer
        - in: query
          name: view
          required: false
          schema:
            $ref: '#/components/schemas/View'
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  watchlist:
                    $ref: '#/components/schemas/watchlist'
                  lines:
                    type: array
                    items:
                      $ref: '#/components/schemas/watchlistLine'
        '400':
          description: 'invalid input, object invalid'
  '/watchlists/{watchlist-id}/instruments/{instrument-key}':
    post:
      tags:
        - watchlists
      operationId: AddInstrumentApi
      summary: Add instrument in watchlist
      description: |
        ### Add instrument in watchlist  
      parameters:
        - in: path
          name: watchlist-id
          description: ID of portfolio to modify
          required: true
          schema:
            type: integer
        - in: path
          name: instrument-key
          description: >-
            key is code,exchangeCode,codification with code and exchangeCode
            mandatory and codification optional
          required: true
          schema:
            type: string
      responses:
        '200':
          description: item modified
        '400':
          description: 'invalid input, object invalid'
  '/watchlists/{watchlist-id}/lines/{line-id}':
    delete:
      tags:
        - watchlists
      operationId: RemoveInstrumentApi
      summary: Remove instrument in watchlist
      description: |
        ### Remove instrument in watchlist  
      parameters:
        - in: path
          name: watchlist-id
          description: ID of portfolio
          required: true
          schema:
            type: integer
        - in: path
          name: line-id
          description: ID of line to remove
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: line removed
        '400':
          description: 'invalid input, object invalid'
  /alerts:
    post:
      tags:
        - alerts
      operationId: CreateAlertApi
      summary: Create Alert
      description: |
        ### Create a new alert  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      responses:
        '200':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user-id
              properties:
                user-id:
                  type: integer
                  example: 123456
                instrument-key:
                  type: string
                  example: >-
                    key is code,exchangeCode,codification with code and
                    exchangeCode mandatory and codification optional
                front-data:
                  type: string
                  example: Additional data for notifications
                template:
                  type: string
                  example: use only if template must be override
                locale:
                  type: string
                  example: 'FR, EN, DE...'
                alert-status:
                  $ref: '#/components/schemas/AlertStatus'
                alert-type:
                  $ref: '#/components/schemas/AlertType'
                auto-reactivation:
                  type: integer
                  example: '-1= enabled every day ; 1 .. n= 1 .. n execution'
                start-date:
                  type: string
                  example: TBD
                end-date:
                  type: string
                  example: TBD
                opening-digest:
                  type: integer
                closing-digest:
                  type: integer
                group-id:
                  type: integer
                trigger-criterion:
                  type: array
                  items:
                    $ref: '#/components/schemas/triggerCriterion'
                notification-info:
                  type: array
                  items:
                    $ref: '#/components/schemas/notificationInfo'
        description: Information for alert to create
    get:
      tags:
        - alerts
      operationId: >-
        AlertsByCustomerID or AlertsByCustomerIDAndStatus or
        AlertsByCustomerIDAndGroupID
      summary: Get alerts
      description: |
        ### Get alerts by UserId and more  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: query
          name: user-id
          description: ID of user
          required: true
          schema:
            type: integer
        - in: query
          name: status
          description: status list
          required: false
          schema:
            type: string
        - in: query
          name: group-id
          description: group id
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/alert'
        '400':
          description: 'invalid input, object invalid'
  '/alerts/{alert-id}':
    put:
      tags:
        - alerts
      operationId: ModifyAlertApi
      summary: Modify Alert
      description: |
        ### Modify information for the alertID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: alert-id
          description: ID of alert to modify
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item modified
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user-id:
                  type: integer
                  example: 123456
                instrument-key:
                  type: string
                  example: >-
                    key is code,exchangeCode,codification with code and
                    exchangeCode mandatory and codification optional
                front-data:
                  type: string
                  example: Additional data for notifications
                template:
                  type: string
                  example: use only if template must be override
                locale:
                  type: string
                  example: 'FR, EN, DE...'
                alert-status:
                  $ref: '#/components/schemas/AlertStatus'
                alert-type:
                  $ref: '#/components/schemas/AlertType'
                auto-reactivation:
                  type: integer
                  example: '-1= enabled every day ; 1 .. n= 1 .. n execution'
                start-date:
                  type: string
                  example: TBD
                end-date:
                  type: string
                  example: TBD
                update-date:
                  type: string
                  example: TBD
                delete-date:
                  type: string
                  example: TBD
                opening-digest:
                  type: integer
                closing-digest:
                  type: integer
                group-id:
                  type: integer
                trigger-criterion:
                  type: array
                  items:
                    $ref: '#/components/schemas/triggerCriterion'
                notification-info:
                  type: array
                  items:
                    $ref: '#/components/schemas/notificationInfo'
        description: Information to modify
    delete:
      tags:
        - alerts
      operationId: DeleteAlertApi
      summary: Delete Alert
      description: |
        ### Delete an alert  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: alert-id
          description: ID of alert to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item deleted
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - alerts
      operationId: AlertByIDApi
      summary: Get alert by ID
      description: |
        ### Get an alert by ID  
        * If view mandatory, by default use LIGHT  
        * If quality mandatory, by default use BT
      parameters:
        - in: path
          name: alert-id
          description: ID of alert to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: item user ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alert'
        '400':
          description: 'invalid input, object invalid'
  '/exchanges/{exchange-code}':
    get:
      tags:
        - others
      operationId: ExchangeInfoApi
      summary: Exchange Info
      description: |
        ### Exchange Info
      parameters:
        - in: path
          name: exchange-code
          description: 'XPAR, XBRU...'
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: date
          description: yyyy-MM-dd format
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Exchange Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  timezone:
                    type: string
                  stateMarket:
                    type: string
                  delay:
                    type: integer
                  exchangeInfo:
                    $ref: '#/components/schemas/exchangeInfo'
                  infoDate:
                    $ref: '#/components/schemas/infoDate'
                  specificInfos:
                    type: array
                    items:
                      $ref: '#/components/schemas/specificInfo'
                  referenceIndexIID:
                    $ref: '#/components/schemas/transco'
        '400':
          description: bad input parameter
  /currencies/conversion:
    get:
      tags:
        - others
      operationId: CrossConvertApi
      summary: Cross Convert
      description: |
        ### Cross Convert
      parameters:
        - in: query
          name: from
          description: currency of value
          required: true
          schema:
            $ref: '#/components/schemas/Currency'
        - in: query
          name: to
          description: currency to convert value into
          required: true
          schema:
            $ref: '#/components/schemas/Currency'
        - in: query
          name: value
          description: value to convert
          schema:
            type: number
            default: 1
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: date
          description: yyyy-MM-dd format
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Conversion
          content:
            application/json:
              schema:
                type: object
                properties:
                  crossValue:
                    type: number
                  lastUpdateDate:
                    type: string
        '400':
          description: bad input parameter
  /currencies/cross-conversion:
    get:
      tags:
        - others
      operationId: MultiCrossApi
      summary: Multi Cross
      description: |
        ### Multi Cross
      parameters:
        - in: query
          name: crossList
          description: >-
            cross list, where a cross is 'fromCurrency*toCurrency' (example:
            EURUSD)
          required: true
          schema:
            type: array
            items:
              type: string
        - in: query
          name: quality
          schema:
            $ref: '#/components/schemas/Quality'
      responses:
        '200':
          description: Multi Cross
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/multiCross'
        '400':
          description: bad input parameter
  /aggregates:
    get:
      tags:
        - others
      operationId: AggregateApi
      summary: Aggregate
      description: |
        ### Aggregate
      parameters:
        - in: query
          name: quality
          required: true
          schema:
            $ref: '#/components/schemas/Quality'
        - in: query
          name: mode
          required: true
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: period
          description: '1W, 1M...'
          required: true
          schema:
            type: string
        - in: query
          name: aggregate-type
          schema:
            $ref: '#/components/schemas/AggregateType'
        - in: query
          name: classif-name
          description: TBD
          schema:
            type: string
        - in: query
          name: exchange-code
          description: XPAR
          schema:
            type: string
        - in: query
          name: sub-type
          description: TBD
          schema:
            type: string
        - in: query
          name: type
          description: 'STOCK, BOND...'
          schema:
            type: string
        - in: query
          name: issuer
          description: TBD
          schema:
            type: string
        - in: query
          name: list-code
          description: TBD
          schema:
            type: string
        - in: query
          name: market
          description: TBD
          schema:
            type: string
        - in: query
          name: maturity-date
          description: TBD
          schema:
            type: string
        - in: query
          name: spec-feat-code
          description: TBD
          schema:
            type: string
        - in: query
          name: spec-feat-value
          description: TBD
          schema:
            type: string
        - in: query
          name: transco
          description: TBD
          schema:
            type: string
        - in: query
          name: underlying-type
          description: TBD
          schema:
            type: string
        - in: query
          name: way-category
          description: TBD
          schema:
            type: string
      responses:
        '200':
          description: Aggregate
          content:
            application/json:
              schema:
                type: object
                properties:
                  view:
                    $ref: '#/components/schemas/View'
                  sessionQuality:
                    $ref: '#/components/schemas/Quality'
                  mode:
                    $ref: '#/components/schemas/Mode'
                  periodType:
                    type: string
                    example: D
                  code:
                    type: string
                  tradedQty:
                    type: number
                  tradedQtyTCS:
                    type: number
                  turnover:
                    type: number
                  turnoverTCS:
                    type: number
                  tradedQtyAtFall:
                    type: number
                  turnoverAtFall:
                    type: number
                  tradedQtyAtRise:
                    type: number
                  turnoverAtRise:
                    type: number
                  tradedQtyUnchanged:
                    type: number
                  turnoverUnchanged:
                    type: number
                  openInterest:
                    type: number
                  openInterestDateTime:
                    type: string
                  nbTrades:
                    type: integer
                  nbTradesTCS:
                    type: integer
                  nbTradesAtFall:
                    type: integer
                  nbTradesAtRise:
                    type: integer
                  nbTradesUnchanged:
                    type: integer
                  nbInstruments:
                    type: integer
                  nbInstrumentsAtFall:
                    type: integer
                  nbInstrumentsAtRise:
                    type: integer
                  nbInstrumentsUnchanged:
                    type: integer
                  market:
                    type: string
                  lastTradeDateTime:
                    type: string
                  transco:
                    $ref: '#/components/schemas/transco'
        '400':
          description: bad input parameter
  /tick-sizes/rules:
    get:
      tags:
        - others
      operationId: TickSizeApi
      summary: Tick Size Rule
      description: |
        ### Tick Size Rule
      responses:
        '200':
          description: Tick Size Rule
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tickSizeRule'
        '400':
          description: bad input parameter
  /trading-groups:
    get:
      tags:
        - others
      operationId: TradingGroupApi
      summary: Trading Group
      description: |
        ### Trading Group
      parameters:
        - in: query
          name: exchange-code
          schema:
            type: string
        - in: query
          name: natures
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InstrumentType'
      responses:
        '200':
          description: Trading Group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/extendedTradingGroup'
        '400':
          description: bad input parameter
  '/push-subscribe/{target}/{exchange-code}-{iid}-{type}-{quality}':
    get:
      tags:
        - others
      operationId: PushSubscribeApi
      summary: Push Subscribe
      description: |
        ### Push Subscribe
      parameters:
        - in: path
          name: target
          required: true
          schema:
            $ref: '#/components/schemas/PushSubscribeTarget'
        - in: path
          name: exchange-code
          description: 'XPAR, XBRU...'
          required: true
          schema:
            type: string
        - in: path
          name: iid
          description: iid to subscribe
          required: true
          schema:
            type: integer
        - in: path
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/PushSubscribeDataType'
        - in: path
          name: quality
          required: true
          schema:
            $ref: '#/components/schemas/Quality'
      responses:
        '200':
          description: Status for subscription
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: bad input parameter
  /issuers:
    get:
      tags:
        - others
      operationId: ListApi
      summary: General List Issuer
      description: |
        ### General List Issuer
      responses:
        '200':
          description: List Element
          content:
            application/json:
              schema:
                type: object
                properties:
                  listElement:
                    type: array
                    items:
                      $ref: '#/components/schemas/listElement'
        '400':
          description: bad input parameter
  /best-price:
    get:
      tags:
        - others
      operationId: BestPriceApi
      summary: Best Price
      description: |
        ### Best Price
      parameters:
        - in: query
          name: instruments
          required: true
          description: 'list of instrument keys ''code,exchange,codification'''
          schema:
            type: array
            items:
              type: string
        - in: query
          name: exchanges
          required: true
          description: list of 'exchange-quality'
          example: XPAR-RT
          schema:
            type: array
            items:
              type: string
        - in: query
          name: view
          schema:
            $ref: '#/components/schemas/View'
        - in: query
          name: mode
          schema:
            $ref: '#/components/schemas/Mode'
        - in: query
          name: algorithm
          schema:
            $ref: '#/components/schemas/Algorithm'
      responses:
        '200':
          description: Best Price
          content:
            application/json:
              schema:
                type: object
                properties:
                  bestPrice:
                    type: array
                    items:
                      $ref: '#/components/schemas/bestPrice'
                  algorithm:
                    $ref: '#/components/schemas/Algorithm'
                  view:
                    $ref: '#/components/schemas/View'
                  mode:
                    $ref: '#/components/schemas/Mode'
        '400':
          description: bad input parameter
