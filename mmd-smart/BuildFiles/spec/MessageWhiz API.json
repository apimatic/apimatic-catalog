{
  "openapi": "3.0.3",
  "info": {
    "version": "3.0.0",
    "title": " MessageWhiz API",
    "description": "Using the MessageWhiz API, you can create message campaigns, send individual SMS messages or entire message broadcasts, manage recipients, senders, unsubscribers lists, and create and manage templates, tokens and links.\n\nThis document will guide you through the core endpoints and functionality of the Message Whiz API, so you can quickly and efficiently start your messaging.\n\n**Getting started**\n\nIn this section, we describe all the necessary steps to send your first broadcast via the MW API.\n\nTo start, MessageWhiz uses API keys to allow access to the API. You can find your API key in your personal MW account page.\n\nTo properly access the MessageWhiz platform, the API key needs to be included in the header for all API requests to the server.\n\n You must replace `apikey` with your personal API key.\n\n**Sending First Broadcast**\n\nIn order to send the basic message broadcast, you need to perform the following steps:\n\n*Create a Campaign* - a set of SMS messages grouped under one campaign name.\n\n*Create Recipient List* - phone numbers to which the messages will be sent.\n\n*Create Sender* - a number, name, or ID that recipients see on their devices when they receive a message from you. Only after creating these entities, you can create and send a broadcast. Or you might use already existing entities for broadcasting as well.\n\n**Generic replaceable**\n\nThe following variables should be replaced with your actual information in requests:\n\n`<apikey>` Personal API key\n\n`<url>` URL from which API is accessed - https://sms.messagewhiz.com/\n",
    "termsOfService": "",
    "contact": {
      "url": "https://sms.messagewhiz.com"
    }
  },
  "servers": [
    {
      "url": "https://sms.messagewhiz.com/",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Single",
      "description": ""
    },
    {
      "name": "Broadcast",
      "description": ""
    },
    {
      "name": "Campaign",
      "description": "A Campaign unifies a set of SMS messages grouped under one campaign name.\nThe campaign exists in a specified time period, thus start and end dates should be indicated during\ncampaign creation."
    },
    {
      "name": "DeliveryReport",
      "description": ""
    },
    {
      "name": "Link",
      "description": "MessageWhiz provides you with the possibility to include Links in your message broadcasts.\nYou are able to create and manage Links beforehand, and then just insert them in a message as a Link token(`{{link:linkId}}`)."
    },
    {
      "name": "Link List",
      "description": "MessageWhiz provides you with the possibility to group multiple links into one list.\nWith the help of the Link List token, links from the list will be evenly distributed between recipients of the broadcast.\nJust insert Link List in a message as a token(`{{link_list:linkListId}}`)."
    },
    {
      "name": "Recipients",
      "description": "Here you can manage your recipients - basically phone numbers grouped into lists of recipients\nto whom the messages will be sent.\nSome additional metadata related to each recipient might be included in the recipient lists and used in the broadcasts.\n\nYou have *two* options for the recipient list creation:\n\n* [Import](%create-a-recipient-list-import-a-file) .xlsx, .xls, or .csv file with numbers and metadata(optional),\n* Add numbers [manually](%create-a-recipient-list-manually) in array.\n\nPlease make sure to enter the number in the international format, including the country code.\nFor example, enter 18756785619 if you are sending an SMS to a recipient from the USA or Canada,\nwhere 1 is the country code.\n\n<aside class=\"notice\"> You can import either .xlsx, .xls, or .csv files file with contacts.\nThe maximum file size is 5 MB and it should contain a maximum of 10 columns.\nPlease note that up to 100,000 recipients can be designated in a single broadcast.</aside>"
    },
    {
      "name": "Senders",
      "description": "Sender is generally a number, name, or ID that recipients see on their devices when they receive a message from you.\nHere's how to manage a single sender entity."
    },
    {
      "name": "Sender Lists",
      "description": "MessageWhiz provides you with the possibility to group multiple Senders into one Sender List,\nfrom which a Sender will be randomly select for each broadcast message."
    },
    {
      "name": "Template",
      "description": "You can write the text of your message immediately before sending it, or use a predefined template for it.\nA message template is a message saved on the  MessageWhiz platform that can be reused for new messages with similar content."
    },
    {
      "name": "Trigger",
      "description": "One of the sending conditions that MessageWhiz provides is Trigger.\nDefault triggers are used to postpone the sending of the message until a specific event occurs to trigger its transmission."
    },
    {
      "name": "Word Spinners",
      "description": "Word spinner is a token which enables randomizing the text in broadcast messages by randomly selecting from a predefined\nlist of synonyms, so that the overall message and meaning are left intact while the wording is changed slightly.\nJust insert Word Spinner in a message as a token(`{{word_spinner:ID}}`)."
    },
    {
      "name": "Unsubscribe List",
      "description": "Unsubscribe lists - lists of numbers that will be excluded from recipient lists and will not receive messages from you.\nAn unsubscribe list consists of the numbers that opted out of your broadcasts as well as numbers you added to the list yourself.\n\n**_NOTE:_** To enable recipients to opt out of your broadcasts, you should include\n`{{unsubscription_link:ID}}` token that generates a link to your message body.\nThe recipient clicks on the unsubscribe link and confirms unsubscription, the user’s data will be added to the\nunsubscribe list associated with this token. </aside>"
    },
    {
      "name": "2way API",
      "description": "The Messages API consolidates and normalises exchanges across all messaging channels. It allows you to use a single API to interact with our various channels such as WhatsApp. Manage customers."
    },
    {
      "name": "Customers",
      "description": "Customer management API that allows you to manage customers, and cut out the manual step of creating customers. You can add new customers, delete, update customers, and get a list of customers."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Broadcast service",
      "tags": [
        "Single",
        "Broadcast",
        "Campaign",
        "DeliveryReport",
        "Link",
        "Link List",
        "Recipients",
        "Senders",
        "Sender Lists",
        "Template",
        "Trigger",
        "Word Spinners",
        "Unsubscribe List"
      ]
    },
    {
      "name": "2way API",
      "tags": [
        "Messages",
        "Customers"
      ]
    }
  ],
  "paths": {
    "/api/3/Campaign/": {
      "post": {
        "parameters": [],
        "tags": [
          "Campaign"
        ],
        "summary": "Create a Campaign",
        "description": "Create a Campaign from your MessageWhiz account\n\n In the request body specify details for the Campaign that will be created. Date and time are expressed according to ISO 8601.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.044941952,
                  "result": {
                    "id": 46279,
                    "is_default": 0,
                    "name": "MyCampaign",
                    "start_date": "2020-07-22T21:00:00.000Z",
                    "end_date": "2020-09-25T21:00:00.000Z",
                    "enabled": true
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "integer",
                      "default": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "default": ""
                    },
                    "errorType": {
                      "type": "string",
                      "default": ""
                    },
                    "executionTime": {
                      "type": "float",
                      "default": 0.01234
                    },
                    "result": {
                      "$ref": "#/components/responses/campaign_create"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "Note , the Campaign `end_date` cannot be earlier than `start_date`.",
          "content": {
            "application/json": {
              "example": {
                "name": "CampaignName",
                "start_date": "2020-07-22T21:00:00.000Z",
                "end_date": "2020-09-25T21:00:00.000Z"
              },
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/campaign_name"
                  },
                  "end_date": {
                    "$ref": "#/components/parameters/campaign_end_date"
                  },
                  "start_date": {
                    "$ref": "#/components/parameters/campaign_start_date"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Campaign/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"CampaignName\",\n  \"start_date\": \"2020-07-22T21:00:00.000Z\",\n  \"end_date\": \"2020-09-25T21:00:00.000Z\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Campaign/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"CampaignName\",\n  \"start_date\": \"2020-07-22T21:00:00.000Z\",\n  \"end_date\": \"2020-09-25T21:00:00.000Z\"\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "name": "limit",
            "in": "query",
            "description": "The number of items to fetch"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "name": "start",
            "in": "query",
            "description": "The number of items to skip"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "name": "filter",
            "in": "query",
            "description": "Filtering by the specific campaign name"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "all"
              ],
              "default": "true"
            },
            "name": "enabled",
            "in": "query",
            "description": "Fetch only active campaigns"
          }
        ],
        "tags": [
          "Campaign"
        ],
        "summary": "Get Campaigns",
        "description": "Get Campaigns from your MessageWhiz account\n\n You can include several parameters in your GET query in order to receive only the data you need.\n      As an example, to get first two inactive campaigns, the query URL will be the following:\n\n`GET https://sms.messagewhiz.com/api/3/campaign?limit=2&enabled=false`\n\nTo get the Campaign by the name:\n\n`GET https://sms.messagewhiz.com/api/3/campaign?filter=name=CampaignName`\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.012664016,
                  "result": [
                    {
                      "enabled": true,
                      "id": 46279,
                      "is_default": 0,
                      "name": "CampaignName",
                      "start_date": "2020-07-22T21:00:00.000Z",
                      "end_date": "2020-09-25T21:00:00.000Z",
                      "userList": [
                        {
                          "campaign_id": 46279,
                          "user_id": 3191,
                          "company_id": 3182
                        }
                      ]
                    },
                    {
                      "enabled": true,
                      "id": 34641,
                      "is_default": 1,
                      "name": "Default campaign",
                      "start_date": null,
                      "end_date": null,
                      "userList": [
                        {
                          "campaign_id": 34641,
                          "user_id": 3191,
                          "company_id": null
                        }
                      ]
                    }
                  ]
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "integer",
                      "default": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "default": ""
                    },
                    "errorType": {
                      "type": "string",
                      "default": ""
                    },
                    "executionTime": {
                      "type": "float",
                      "default": 0.01234
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/responses/Campaign"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Campaign/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Campaign/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Campaign/{id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true
          }
        ],
        "tags": [
          "Campaign"
        ],
        "summary": "Get Campaign by ID",
        "description": "Get Campaign detailes from your MessageWhiz account",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.044941952,
                  "result": {
                    "id": 2134,
                    "is_default": 0,
                    "name": "CampaignName",
                    "start_date": "2020-07-22T21:00:00.000Z",
                    "end_date": "2020-09-25T21:00:00.000Z",
                    "enabled": true
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "integer",
                      "default": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "default": ""
                    },
                    "errorType": {
                      "type": "string",
                      "default": ""
                    },
                    "executionTime": {
                      "type": "float",
                      "default": 0.01234
                    },
                    "result": {
                      "$ref": "#/components/responses/Campaign"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Campaign/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Campaign/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "description": "Campaign ID",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Campaign"
        ],
        "summary": "Modify a Campaign",
        "description": "To modify a specific Campaign from your MessageWhiz account, include its ID in the query:\n\n`PUT https://sms.messagewhiz.com/api/3/campaign/{id}`\n\nFor instance, PUT `https://sms.messagewhiz.com/api/3/campaign/46279`, where `46279` is the ID of the Campaign that will be replaced using the data presented in the request body.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.026245764,
                  "result": {
                    "id": 2134,
                    "is_default": 0,
                    "name": "CampaignName",
                    "start_date": "2020-07-22T21:00:00.000Z",
                    "end_date": "2021-03-25T21:00:00.000Z",
                    "enabled": true
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "integer",
                      "default": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "default": ""
                    },
                    "errorType": {
                      "type": "string",
                      "default": ""
                    },
                    "executionTime": {
                      "type": "float",
                      "default": 0.01234
                    },
                    "result": {
                      "$ref": "#/components/responses/campaign_create"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/campaign_name"
                  },
                  "start_date": {
                    "$ref": "#/components/parameters/campaign_start_date"
                  },
                  "end_date": {
                    "$ref": "#/components/parameters/campaign_end_date"
                  }
                }
              },
              "example": {
                "end_date": "2021-03-25T21:00:00.000Z"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Campaign/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"end_date\": \"2021-03-25T21:00:00.000Z\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Campaign/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"end_date\": \"2021-03-25T21:00:00.000Z\"\n}'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "description": "Campaign ID",
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Campaign"
        ],
        "summary": "Modify a Campaign",
        "description": "To modify a specific Campaign from your MessageWhiz account, include its ID in the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.026245764,
                  "result": {
                    "id": 2134,
                    "is_default": 0,
                    "name": "CampaignName",
                    "start_date": "2020-07-22T21:00:00.000Z",
                    "end_date": "2021-03-25T21:00:00.000Z",
                    "enabled": true
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorCode": {
                      "type": "integer",
                      "default": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "default": ""
                    },
                    "errorType": {
                      "type": "string",
                      "default": ""
                    },
                    "executionTime": {
                      "type": "float",
                      "default": 0.01234
                    },
                    "result": {
                      "$ref": "#/components/responses/campaign_create"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enabled": "1"
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/campaign_name"
                  },
                  "start_date": {
                    "$ref": "#/components/parameters/campaign_start_date"
                  },
                  "end_date": {
                    "$ref": "#/components/parameters/campaign_end_date"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/Campaign/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"enabled\": \"1\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/Campaign/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"enabled\": \"1\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "description": "Campaign ID",
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Campaign"
        ],
        "summary": "Disable a Campaign",
        "description": "To remove a specific Campaign from your MessageWhiz account, add its ID as parameter to the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Campaign/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Campaign/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/DeliveryReport/": {
      "post": {
        "parameters": [],
        "tags": [
          "DeliveryReport"
        ],
        "summary": "Get a delivery report",
        "description": "To get the delivery report of a certain broadcast:\n\n`POST https://sms.messagewhiz.com/api/3/DeliveryReport`\n\nIn case the broadcast is a V3 smart broadcast (Manual/CTR threshold) each segment DLR will be shown in a separate object in the response.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.044941952,
                  "result": {
                    "broadcast_id": 123123,
                    "sent": 0,
                    "delivered": 1,
                    "undelivered": 0,
                    "rejected": 0,
                    "expired": 0,
                    "failed": 0
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "bid"
                ],
                "properties": {
                  "bid": {
                    "description": "id of the broadcast which delivery report should be fetched",
                    "schema": {
                      "type": "string"
                    },
                    "example": "225544",
                    "type": "string"
                  }
                }
              },
              "description": "POST /api/3/campaign HTTP/1.1\nHost: sms.messagewhiz.com\napikey: <apikey>\nContent-Type: application/json\n\n{\n    \"name\":\"CampaignName\",\n\t\"start_date\":\"2020-07-22T21:00:00.000Z\",\n\t\"end_date\":\"2020-09-25T21:00:00.000Z\"\n}"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/DeliveryReport/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"bid\": \"225544\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/DeliveryReport/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"bid\": \"225544\"\n}'"
          }
        ]
      }
    },
    "/api/3/Broadcast/": {
      "post": {
        "parameters": [],
        "tags": [
          "Broadcast"
        ],
        "summary": "Send Broadcast",
        "description": "To Send a broadcast via API",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Single Broadcast": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 0.160202353,
                      "result": {
                        "broadcastID": 331,
                        "segmentID": 493,
                        "custom_parameter": "1234abcd5678efgh"
                      }
                    }
                  },
                  "Base Broadcast": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 0.446636071,
                      "result": {
                        "broadcastID": 333,
                        "segmentID": 494
                      }
                    }
                  },
                  "Smart Broadcast": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 0.446636071,
                      "result": {
                        "broadcastID": 333,
                        "segmentID": 495
                      }
                    }
                  },
                  "Text Optimisation": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 0.446636071,
                      "result": {
                        "broadcastID": 333,
                        "segmentIDs": [
                          494,
                          495
                        ]
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "x-show-example-request": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Base Broadcast",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_submitBase"
                      }
                    ]
                  },
                  {
                    "title": "Smart Standard",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_submitSmart_Standart"
                      }
                    ]
                  },
                  {
                    "title": "Smart CTR",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_submitSmart_CTR"
                      }
                    ]
                  },
                  {
                    "title": "Text Optimisation",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_submitTextOptimization"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "Base Broadcast HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"broadcast\",\n  \"campaign_id\": 1,\n  \"broadcast_type\": 11,\n  \"unsubscriber_list_ids\": \"\",\n  \"sender_ids\": \"23\",\n  \"recipient_list_ids\": \"12\",\n  \"message_body\": \"broadcast message\"\n}"
          },
          {
            "label": "Base Broadcast cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"broadcast\",\n  \"campaign_id\": 1,\n  \"broadcast_type\": 11,\n  \"unsubscriber_list_ids\": \"\",\n  \"sender_ids\": \"23\",\n  \"recipient_list_ids\": \"12\",\n  \"message_body\": \"broadcast message\"\n}'"
          },
          {
            "label": "Smart Standard HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"manual\",\n  \"campaign_id\": 1,\n  \"broadcast_type\": 12,\n  \"unsubscriber_list_ids\": \"\",\n  \"sender_ids\": \"23\",\n  \"recipient_list_ids\": \"12\",\n  \"message_body\": \"man message\",\n  \"send_date\": \"2021-03-01T12:41:38.837Z\",\n  \"utc_offset\": 120,\n  \"eb_type\": \"manual\",\n  \"first_segment_size\": \"3\"\n}"
          },
          {
            "label": "Smart Standard cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"manual\",\n  \"campaign_id\": 1,\n  \"broadcast_type\": 12,\n  \"unsubscriber_list_ids\": \"\",\n  \"sender_ids\": \"23\",\n  \"recipient_list_ids\": \"12\",\n  \"message_body\": \"man message\",\n  \"send_date\": \"2021-03-01T12:41:38.837Z\",\n  \"utc_offset\": 120,\n  \"eb_type\": \"manual\",\n  \"first_segment_size\": \"3\"\n}'"
          },
          {
            "label": "Smart CTR HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"CTR\",\n  \"campaign_id\": 57568,\n  \"broadcast_type\": 12,\n  \"eb_type\": \"CTR\",\n  \"sender_ids\": \"143871\",\n  \"recipient_list_ids\": 109242,\n  \"message_body\": \"broadcast message {{link:132451}}\",\n  \"first_segment_size\": 1,\n  \"next_segment_size\": 1,\n  \"conversion_threshold\": 25\n}"
          },
          {
            "label": "Smart CTR cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"CTR\",\n  \"campaign_id\": 57568,\n  \"broadcast_type\": 12,\n  \"eb_type\": \"CTR\",\n  \"sender_ids\": \"143871\",\n  \"recipient_list_ids\": 109242,\n  \"message_body\": \"broadcast message {{link:132451}}\",\n  \"first_segment_size\": 1,\n  \"next_segment_size\": 1,\n  \"conversion_threshold\": 25\n}'"
          },
          {
            "label": "Text Optimisation HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"Text optimisation\",\n  \"campaign_id\": 1,\n  \"test_segment_size\": \"100\",\n  \"broadcast_type\": 13,\n  \"recipient_list_ids\": \"79419\",\n  \"sender_ids\": \"144548\",\n  \"unsubscriber_list_ids\": \"\",\n  \"utc_offset\": 180,\n  \"message_bodies\": [\n    \"Text 1 {{link:132451}}\",\n    \"Text 2 {{link:132451}}\"\n  ],\n  \"conversion_threshold\": \"25\",\n  \"period\": 120,\n  \"recipient_cap\": \"no_limit\",\n  \"send_immediately_when_ctr_done\": false\n}"
          },
          {
            "label": "Text Optimisation cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"Text optimisation\",\n  \"campaign_id\": 1,\n  \"test_segment_size\": \"100\",\n  \"broadcast_type\": 13,\n  \"recipient_list_ids\": \"79419\",\n  \"sender_ids\": \"144548\",\n  \"unsubscriber_list_ids\": \"\",\n  \"utc_offset\": 180,\n  \"message_bodies\": [\n    \"Text 1 {{link:132451}}\",\n    \"Text 2 {{link:132451}}\"\n  ],\n  \"conversion_threshold\": \"25\",\n  \"period\": 120,\n  \"recipient_cap\": \"no_limit\",\n  \"send_immediately_when_ctr_done\": false\n}'"
          }
        ]
      }
    },
    "/api/3/Broadcast/Estimate": {
      "post": {
        "parameters": [],
        "tags": [
          "Broadcast"
        ],
        "summary": "Estimate Broadcast",
        "description": "To Estimate a broadcast via API",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "Single, Base, Smart Standard, Smart CTR": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 5.076538867,
                      "result": {
                        "messages": 1,
                        "sum": 3.36,
                        "parts": 1,
                        "recipient_id_map": [],
                        "replacements": {},
                        "firstSegmentCount": 1,
                        "recipient_meta_data_map": [
                          [
                            3852004823,
                            {
                              "phone_number": 3852004823,
                              "email": "email@gmail.com",
                              "custom": "Custom",
                              "url": "https://google.com",
                              "first_name": "John",
                              "last_name": "Doe"
                            }
                          ]
                        ],
                        "recipients": {
                          "3852004823": {
                            "rate": 3.36,
                            "mccMnc": 111222
                          }
                        },
                        "messageExpanded": {
                          "actions": {
                            "callback": {
                              "replacement": "",
                              "uuid": "",
                              "count": 0
                            },
                            "first_name": {
                              "replacement": "",
                              "count": 0
                            },
                            "last_name": {
                              "replacement": "",
                              "count": 0
                            },
                            "url": {
                              "replacement": "",
                              "count": 0
                            },
                            "random_symbol": {
                              "replacement": "h",
                              "count": 0
                            },
                            "verification_code": {
                              "replacement": "",
                              "count": 0
                            },
                            "custom": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom1": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom2": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom3": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom4": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "gender": {
                              "replacement": "",
                              "count": 0
                            },
                            "word_spinner": {
                              "replacement": "",
                              "count": 0,
                              "parameters": [],
                              "isApproximate": true
                            },
                            "link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "link_list": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "unsubscription_link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "shorten_url": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "callback_link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            }
                          },
                          "text": "sample"
                        },
                        "links": {},
                        "warnings": [],
                        "estimateHash": "8572aeb3624293a238cd2d7cd901fb61743e3a435e50e00d631a410cb0044d39dd4a53be35e040974f88c7e3799ab1f8d1629455c260a87b0fa48da547c7ffcb",
                        "batchEstimation": {
                          "messages": 1,
                          "sum": 3.36,
                          "parts": 1
                        }
                      }
                    }
                  },
                  "Text Optimisation": {
                    "value": {
                      "errorCode": 0,
                      "errorMessage": "",
                      "errorType": "",
                      "executionTime": 0.12474547,
                      "result": {
                        "testSegmentCount": 2,
                        "testSegmentSize": 50,
                        "testSegmentEstimations": [
                          {
                            "messageExpanded": {
                              "actions": {
                                "callback": {
                                  "replacement": "",
                                  "uuid": "",
                                  "count": 0
                                },
                                "first_name": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "last_name": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "url": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "random_symbol": {
                                  "replacement": "i",
                                  "count": 0
                                },
                                "verification_code": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "custom": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom1": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom2": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom3": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom4": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "gender": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "word_spinner": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": [],
                                  "isApproximate": true
                                },
                                "link": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "link_list": {
                                  "replacement": "",
                                  "count": 1,
                                  "parameters": [
                                    "36238"
                                  ]
                                },
                                "unsubscription_link": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "shorten_url": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "callback_link": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                }
                              },
                              "text": " Test segment 1"
                            },
                            "parts": 1,
                            "sum": 4.999999999999998,
                            "messages": 50,
                            "recipients": 50,
                            "links": {
                              "link_list": {
                                "36238": {
                                  "223955": "https://www.google.com/",
                                  "226214": "https://www.google.com/"
                                }
                              }
                            }
                          },
                          {
                            "messageExpanded": {
                              "actions": {
                                "callback": {
                                  "replacement": "",
                                  "uuid": "",
                                  "count": 0
                                },
                                "first_name": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "last_name": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "url": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "random_symbol": {
                                  "replacement": "H",
                                  "count": 0
                                },
                                "verification_code": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "custom": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom1": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom2": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom3": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "custom4": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "gender": {
                                  "replacement": "",
                                  "count": 0
                                },
                                "word_spinner": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": [],
                                  "isApproximate": true
                                },
                                "link": {
                                  "replacement": "",
                                  "count": 1,
                                  "parameters": [
                                    "223955"
                                  ]
                                },
                                "link_list": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "unsubscription_link": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "shorten_url": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                },
                                "callback_link": {
                                  "replacement": "",
                                  "count": 0,
                                  "parameters": []
                                }
                              },
                              "text": " Test segment 2"
                            },
                            "parts": 1,
                            "sum": 4.999999999999998,
                            "messages": 50,
                            "recipients": 50,
                            "links": {
                              "link": {
                                "223955": "https://www.google.com/"
                              }
                            }
                          }
                        ],
                        "warnings": [],
                        "messages": 250,
                        "sum": 25.000000000000085,
                        "recipients": 250,
                        "parts": 1,
                        "messageExpanded": {
                          "actions": {
                            "callback": {
                              "replacement": "",
                              "uuid": "",
                              "count": 0
                            },
                            "first_name": {
                              "replacement": "",
                              "count": 0
                            },
                            "last_name": {
                              "replacement": "",
                              "count": 0
                            },
                            "url": {
                              "replacement": "",
                              "count": 0
                            },
                            "random_symbol": {
                              "replacement": "i",
                              "count": 0
                            },
                            "verification_code": {
                              "replacement": "",
                              "count": 0
                            },
                            "custom": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom1": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom2": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom3": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "custom4": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "gender": {
                              "replacement": "",
                              "count": 0
                            },
                            "word_spinner": {
                              "replacement": "",
                              "count": 0,
                              "parameters": [],
                              "isApproximate": true
                            },
                            "link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "link_list": {
                              "replacement": "",
                              "count": 1,
                              "parameters": [
                                "36238"
                              ]
                            },
                            "unsubscription_link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "shorten_url": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            },
                            "callback_link": {
                              "replacement": "",
                              "count": 0,
                              "parameters": []
                            }
                          },
                          "text": " Test segment 1"
                        },
                        "links": {
                          "link_list": {
                            "36238": {
                              "223955": "https://www.google.com/",
                              "226214": "https://www.google.com/"
                            }
                          }
                        },
                        "estimateHash": "90ea00d1ed058fe0b5df00c7a48fdf8f3a24d3f734d8b41e7b2a1d434e73dd57a8136b399384d1e6a161a8e9c6e11ea841eb0430bdd1906afd4d3d609924ea7b"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "x-show-example-request": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Base Broadcast",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_estimate_base"
                      }
                    ]
                  },
                  {
                    "title": "Smart Standard",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_estimate_standard"
                      }
                    ]
                  },
                  {
                    "title": "Smart CTR",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_estimate_CTR"
                      }
                    ]
                  },
                  {
                    "title": "Text Optimisation",
                    "allOf": [
                      {
                        "$ref": "#/components/requestBodies/Broadcasts_estimateTextOptimization"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "label": "Base Broadcast HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/Estimate HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"broadcast_type\": 11,\n  \"recipient_list_ids\": \"288696\",\n  \"unsubscriber_list_ids\": \"\",\n  \"message_body\": \"sample\"\n}"
          },
          {
            "label": "Base Broadcast cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/Estimate' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"broadcast_type\": 11,\n  \"recipient_list_ids\": \"288696\",\n  \"unsubscriber_list_ids\": \"\",\n  \"message_body\": \"sample\"\n}'"
          },
          {
            "label": "Smart Standard HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/Estimate HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"broadcast_type\": 12,\n  \"message_body\": \"message  {{link:233648}} \",\n  \"eb_type\": \"manual\",\n  \"first_segment_size\": \"10\",\n  \"time_limit\": 0,\n  \"recipient_cap\": \"no_limit\",\n  \"recipient_list_ids\": \"132885\",\n  \"unsubscriber_list_ids\": \"\"\n}"
          },
          {
            "label": "Smart Standard cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/Estimate' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"broadcast_type\": 12,\n  \"message_body\": \"message  {{link:233648}} \",\n  \"eb_type\": \"manual\",\n  \"first_segment_size\": \"10\",\n  \"time_limit\": 0,\n  \"recipient_cap\": \"no_limit\",\n  \"recipient_list_ids\": \"132885\",\n  \"unsubscriber_list_ids\": \"\"\n}'"
          },
          {
            "label": "Smart CTR HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/Estimate HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"broadcast_type\": 12,\n  \"message_body\": \"message  {{link:233248}} \",\n  \"eb_type\": \"CTR\",\n  \"first_segment_size\": \"15\",\n  \"next_segment_size\": \"25\",\n  \"recipient_list_ids\": \"132995\",\n  \"unsubscriber_list_ids\": \"\"\n}"
          },
          {
            "label": "Smart CTR cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/Estimate' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"broadcast_type\": 12,\n  \"message_body\": \"message  {{link:233248}} \",\n  \"eb_type\": \"CTR\",\n  \"first_segment_size\": \"15\",\n  \"next_segment_size\": \"25\",\n  \"recipient_list_ids\": \"132995\",\n  \"unsubscriber_list_ids\": \"\"\n}'"
          },
          {
            "label": "Text Optimisation HTTP",
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/Estimate HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"test_segment_size\": \"50\",\n  \"broadcast_type\": 13,\n  \"recipient_list_ids\": \"129161\",\n  \"unsubscriber_list_ids\": \"\",\n  \"message_bodies\": [\n    \"{{link_list:36238}} Test segment 1\",\n    \"{{link:223955}} Test segment 2\"\n  ]\n}"
          },
          {
            "label": "Text Optimisation cURL",
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/Estimate' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"test_segment_size\": \"50\",\n  \"broadcast_type\": 13,\n  \"recipient_list_ids\": \"129161\",\n  \"unsubscriber_list_ids\": \"\",\n  \"message_bodies\": [\n    \"{{link_list:36238}} Test segment 1\",\n    \"{{link:223955}} Test segment 2\"\n  ]\n}'"
          }
        ]
      }
    },
    "/api/3/Broadcast/List": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          },
          {
            "$ref": "#/components/parameters/broadcast_filter"
          },
          {
            "$ref": "#/components/parameters/filter_orderby"
          }
        ],
        "tags": [
          "Broadcast"
        ],
        "summary": "Get Broadcasts List",
        "description": "Get Broadcasts from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.351626371,
                  "result": [
                    {
                      "id": 200,
                      "user_id": 123,
                      "name": "sample broadcast",
                      "type": 1,
                      "message_body": "sample message",
                      "enabled": 1,
                      "trigger_id": null,
                      "send_date": "2041-03-07T11:41:55.000Z",
                      "state": 2,
                      "parent_id": null,
                      "real_price": 0,
                      "estimated_price": 10.5,
                      "create_date": "2019-08-05T13:20:04.000Z",
                      "estimated_count": 8,
                      "utc_offset": 0,
                      "next_segment_size": null,
                      "eb_type": null,
                      "company_name": "sample company",
                      "timezone": "GMT +0",
                      "send_now": false,
                      "broadcastConversion": {
                        "uniqueClicks": 0,
                        "totalClicks": 0,
                        "recipientCount": 8,
                        "conversion": "0.00",
                        "broadcastId": 200
                      }
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.351626371
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 200
                      },
                      "user_id": {
                        "type": "number",
                        "example": 123
                      },
                      "name": {
                        "type": "string",
                        "example": "sample broadcast"
                      },
                      "type": {
                        "type": "number",
                        "example": 1
                      },
                      "message_body": {
                        "type": "string",
                        "example": "sample message"
                      },
                      "enabled": {
                        "type": "number",
                        "example": 1
                      },
                      "send_date": {
                        "type": "string",
                        "example": "2041-03-07T11:41:55.000Z"
                      },
                      "state": {
                        "type": "number",
                        "example": 2
                      },
                      "real_price": {
                        "type": "number",
                        "example": 0
                      },
                      "estimated_price": {
                        "type": "number",
                        "example": 10.5
                      },
                      "create_date": {
                        "type": "string",
                        "example": "2019-08-05T13:20:04.000Z"
                      },
                      "estimated_count": {
                        "type": "number",
                        "example": 8
                      },
                      "utc_offset": {
                        "type": "number",
                        "example": 0
                      },
                      "company_name": {
                        "type": "string",
                        "example": "sample company"
                      },
                      "timezone": {
                        "type": "string",
                        "example": "GMT +0"
                      },
                      "send_now": {
                        "type": "boolean",
                        "example": false
                      },
                      "broadcastConversion": {
                        "required": [
                          "uniqueClicks",
                          "totalClicks",
                          "recipientCount",
                          "conversion",
                          "broadcastId"
                        ],
                        "properties": {
                          "uniqueClicks": {
                            "type": "number",
                            "example": 0
                          },
                          "totalClicks": {
                            "type": "number",
                            "example": 0
                          },
                          "recipientCount": {
                            "type": "number",
                            "example": 8
                          },
                          "conversion": {
                            "type": "string",
                            "example": "0.00"
                          },
                          "broadcastId": {
                            "type": "number",
                            "example": 200
                          }
                        },
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Broadcast/List HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Broadcast/List' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Broadcast/Combinedsubmit": {
      "post": {
        "parameters": [],
        "tags": [
          "Broadcast"
        ],
        "summary": "Single request broadcasts",
        "description": "An endpoint on Segment Based architecture which enables creating a Base Broadcast and sending it to a new Recipient list withone request",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.351626371,
                  "result": [
                    {
                      "broadcastID": 333,
                      "segmentID": 495
                    }
                  ]
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "message_body": "hello {{first_name}} {{last_name}} here is {{custom2}} click on link {{shorten_url}}!!",
                "sender": "My sender",
                "recipients": [
                  {
                    "phone_number": 380100001010,
                    "first_name": "John",
                    "last_name": "Doe",
                    "custom2": "MyCustomToken",
                    "url": "https://mylink1.com"
                  },
                  {
                    "phone_number": 380100001011,
                    "first_name": "Bob",
                    "url": "https://mylink2.com"
                  }
                ]
              },
              "schema": {
                "type": "object",
                "required": [
                  "message_body",
                  "sender",
                  "recipients"
                ],
                "properties": {
                  "message_body": {
                    "$ref": "#/components/parameters/broadcast_message_body"
                  },
                  "sender": {
                    "$ref": "#/components/parameters/broadcast_sender"
                  },
                  "recipients": {
                    "description": "Json file with all needed data (phone number, first name, last name, URL ect. per each recipient)",
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "minLength": 1,
                    "maxLength": 100000
                  },
                  "name": {
                    "description": "The name of broadcast is an optional parameter. If it is defined in the request, this value will be used as the name. If it is not provided, the broadcast ID will be used as a name",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "send_date": {
                    "$ref": "#/components/parameters/broadcast_send_date"
                  },
                  "sender_id": {
                    "$ref": "#/components/parameters/broadcast_sender_id"
                  },
                  "utc_offset": {
                    "$ref": "#/components/parameters/broadcast_utc_offset"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Broadcast/Combinedsubmit HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"message_body\": \"hello {{first_name}} {{last_name}} here is {{custom2}} click on link {{shorten_url}}!!\",\n  \"sender\": \"My sender\",\n  \"recipients\": [\n    {\n      \"phone_number\": 380100001010,\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"custom2\": \"MyCustomToken\",\n      \"url\": \"https://mylink1.com\"\n    },\n    {\n      \"phone_number\": 380100001011,\n      \"first_name\": \"Bob\",\n      \"url\": \"https://mylink2.com\"\n    }\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Broadcast/Combinedsubmit' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"message_body\": \"hello {{first_name}} {{last_name}} here is {{custom2}} click on link {{shorten_url}}!!\",\n  \"sender\": \"My sender\",\n  \"recipients\": [\n    {\n      \"phone_number\": 380100001010,\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"custom2\": \"MyCustomToken\",\n      \"url\": \"https://mylink1.com\"\n    },\n    {\n      \"phone_number\": 380100001011,\n      \"first_name\": \"Bob\",\n      \"url\": \"https://mylink2.com\"\n    }\n  ]\n}'"
          }
        ]
      }
    },
    "/api/3/Segments/": {
      "post": {
        "parameters": [],
        "tags": [
          "Broadcast"
        ],
        "summary": "Continue smart broadcast",
        "description": "",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 2.202010018,
                  "result": {
                    "real_price": 0,
                    "id": 1,
                    "broadcast_id": 111,
                    "utc_offset": 180,
                    "message_body": "sample",
                    "template_id": null,
                    "batch_index": null,
                    "state": 0,
                    "recipient_count": 1,
                    "estimated_price": 3.36,
                    "send_conditions_id": 1,
                    "enabled": true,
                    "created_at": "2021-06-25 14:02:50",
                    "send_time": "2021-06-25 14:02:50",
                    "estimated_count": 1
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 2.202010018
                },
                "result": {
                  "required": [
                    "real_price",
                    "id",
                    "broadcast_id",
                    "utc_offset",
                    "message_body",
                    "template_id",
                    "batch_index",
                    "state",
                    "recipient_count",
                    "estimated_price",
                    "send_conditions_id",
                    "enabled",
                    "created_at",
                    "send_time",
                    "estimated_count"
                  ],
                  "properties": {
                    "real_price": {
                      "type": "number",
                      "example": 0
                    },
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "broadcast_id": {
                      "type": "number",
                      "example": 111
                    },
                    "utc_offset": {
                      "type": "number",
                      "example": 180
                    },
                    "message_body": {
                      "type": "string",
                      "example": "sample"
                    },
                    "state": {
                      "type": "number",
                      "example": 0
                    },
                    "recipient_count": {
                      "type": "number",
                      "example": 1
                    },
                    "estimated_price": {
                      "type": "number",
                      "example": 3.36
                    },
                    "send_conditions_id": {
                      "type": "number",
                      "example": 1
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2021-06-25 14:02:50"
                    },
                    "send_time": {
                      "type": "string",
                      "example": "2021-06-25 14:02:50"
                    },
                    "estimated_count": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "broadcast_id": {
                    "description": "Id of the broadcast to be continued",
                    "schema": {
                      "type": "integer"
                    },
                    "type": "integer"
                  },
                  "sender_ids": {
                    "description": "Specifies if the segment should be sent as soon as possible",
                    "type": "boolean"
                  },
                  "segment_size": {
                    "description": "Ount of the recipients whose messages will be sent within the segment",
                    "schema": {
                      "type": "integer",
                      "minimum": 1
                    },
                    "type": "integer",
                    "minimum": 1
                  },
                  "message_body": {
                    "description": "Message for the segment",
                    "schema": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100000
                    },
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100000
                  },
                  "next_segment_size": {
                    "description": "Count of the recipients whose messages will be sent within the next segments of the batch (should be specified if a paused CTR Threshold broadcast is being continued)",
                    "schema": {
                      "type": "integer",
                      "minimum": 1
                    },
                    "type": "integer",
                    "minimum": 1
                  },
                  "recipient_cap": {
                    "description": "Count of recipients whose messages will be sent before the broadcast will be paused for further actions (should be specified if a paused CTR Threshold broadcast is being continued)",
                    "schema": {
                      "type": [
                        "integer",
                        "string"
                      ],
                      "pattern": "no_limit",
                      "default": "no_limit",
                      "minimum": 1
                    },
                    "type": [
                      "integer",
                      "string"
                    ],
                    "pattern": "no_limit",
                    "default": "no_limit",
                    "minimum": 1
                  },
                  "send_date": {
                    "description": "Date when the segment will be send (may be used instead of send_now)",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  },
                  "sender_list_ids": {
                    "description": "Ids of the sender lists which will be used for the created segment (may be used instead of `sender_ids`)",
                    "schema": {
                      "type": "string",
                      "minLength": 0,
                      "maxLength": 1000,
                      "pattern": "^[0-9]+(,[0-9]+)*$",
                      "errorMessage": {
                        "pattern": "Only numeric sender_list_ids separated by comma can be used"
                      }
                    },
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 1000,
                    "pattern": "^[0-9]+(,[0-9]+)*$",
                    "errorMessage": {
                      "pattern": "Only numeric sender_list_ids separated by comma can be used"
                    }
                  },
                  "first_segment_size": {
                    "description": "Count of the recipients whose messages will be sent within the first segment of the batch (should be specified if a paused CTR Threshold broadcast is being continued)",
                    "schema": {
                      "type": "integer",
                      "minimum": 1
                    },
                    "type": "integer",
                    "minimum": 1
                  },
                  "template_ids": {
                    "description": "Ids of the templates that will be used for the created segment (may be used instead of message_body)",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  },
                  "utc_offset": {
                    "description": "Specific time zone, in minutes (min -720, max +720, e.g. for UTC+0 the value is 0)",
                    "schema": {
                      "type": "integer",
                      "minimum": -720,
                      "maximum": 720
                    },
                    "type": "integer",
                    "minimum": -720,
                    "maximum": 720
                  }
                },
                "required": [
                  "broadcast_id",
                  "message_body",
                  "segment_size",
                  "sender_ids"
                ]
              },
              "example": {
                "broadcast_id": 111,
                "message_body": "sample",
                "segment_size": 1,
                "send_now": true,
                "sender_ids": "1",
                "utc_offset": 180
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Segments/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"broadcast_id\": 111,\n  \"message_body\": \"sample\",\n  \"segment_size\": 1,\n  \"send_now\": true,\n  \"sender_ids\": \"1\",\n  \"utc_offset\": 180\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Segments/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"broadcast_id\": 111,\n  \"message_body\": \"sample\",\n  \"segment_size\": 1,\n  \"send_now\": true,\n  \"sender_ids\": \"1\",\n  \"utc_offset\": 180\n}'"
          }
        ]
      }
    },
    "/api/3/LinkList/": {
      "post": {
        "parameters": [],
        "tags": [
          "Link List"
        ],
        "summary": "Create a Link List",
        "description": "Create an empty Link List from your MessageWhiz account\n\n In the request body specify the name(string) of the Link List that will be created. Either linkIds - an array of IDs of the previously created Links that the list will contain, or links - an array of objects with url and name properties\n\nTo add existing Links to the Link List, include Link List ID in the query:\n\n`POST https://sms.messagewhiz.com/api/3/LinkList/{id}/links`\n\nIn the request body specify the `ids(array)` an array of IDs of the previously created Links that the list will contain. Or specify one link `id(int)`\n\n### To create a Link List by importing the file, use `multipart/formdata` request\n\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.017949384,
                  "result": {
                    "id": 6940,
                    "name": "FirstLinkList",
                    "enabled": true,
                    "linkListLength": 1,
                    "warning": ""
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.017949384
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "enabled",
                    "linkListLength",
                    "warning"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 6940
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstLinkList"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "linkListLength": {
                      "type": "number",
                      "example": 1
                    },
                    "warning": {
                      "type": "string",
                      "example": ""
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "FirstLinkList",
                "linkIds": [
                  "311"
                ]
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/linklist_name"
                  },
                  "linkIds": {
                    "$ref": "#/components/parameters/linklist_linkIds"
                  },
                  "links": {
                    "$ref": "#/components/parameters/linklist_links"
                  },
                  "mapping": {
                    "$ref": "#/components/parameters/linklist_mapping"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "multipart/form-data": {
              "example": "--form 'doc=@/home/user/Downloads/SecondLinkList.csv' \\\n--form 'mapping={\"0\":\"name\", \"1\":\"url\"}' \\\n--form 'name=NewList'",
              "x-show-example-request": true,
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "mapping": {
                    "$ref": "#/components/parameters/linklist_mapping"
                  },
                  "name": {
                    "$ref": "#/components/parameters/linklist_name"
                  },
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  }
                },
                "required": [
                  "name",
                  "doc",
                  "mapping"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/LinkList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstLinkList\",\n  \"linkIds\": [\n    \"311\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/LinkList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstLinkList\",\n  \"linkIds\": [\n    \"311\"\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          },
          {
            "$ref": "#/components/parameters/linklist_filter"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Get Link Lists",
        "description": "Get Link Lists from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.056359856,
                  "result": [
                    {
                      "id": 6943,
                      "name": "LinksList",
                      "enabled": 1,
                      "conversionCount": 0
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.056359856
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 6943
                      },
                      "name": {
                        "type": "string",
                        "example": "LinksList"
                      },
                      "enabled": {
                        "type": "number",
                        "example": 1
                      },
                      "conversionCount": {
                        "type": "number",
                        "example": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/LinkList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/LinkList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/LinkList/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Modify a Link List (import a file)",
        "description": "If you want to partially update the resource, you can use PATCH",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.009358444,
                  "result": {
                    "id": 2134,
                    "enabled": 1
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.009358444
                },
                "result": {
                  "required": [
                    "id",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 6944
                    },
                    "enabled": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "x-show-example-request": true,
              "example": "--form 'doc=@/home/user/Downloads/SecondLinkList.csv' \\\n--form 'mapping={\"0\":\"name\", \"1\":\"url\"}' \\\n--form 'name=NewList'",
              "schema": {
                "type": "object",
                "properties": {
                  "mapping": {
                    "$ref": "#/components/parameters/linklist_mapping"
                  },
                  "name": {
                    "$ref": "#/components/parameters/linklist_name"
                  },
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  }
                },
                "required": [
                  "name",
                  "doc",
                  "mapping"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/LinkList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/SecondLinkList.csv' \\\n--form 'mapping={\"0\":\"name\", \"1\":\"url\"}' \\\n--form 'name=NewList'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/LinkList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/SecondLinkList.csv' \\\n--form 'mapping={\"0\":\"name\", \"1\":\"url\"}' \\\n--form 'name=NewList'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Modify a Link List",
        "description": "",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.009358444,
                  "result": {
                    "id": 2134,
                    "enabled": 1
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.009358444
                },
                "result": {
                  "required": [
                    "id",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 6944
                    },
                    "enabled": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "example": 1,
                    "type": "integer",
                    "enum": [
                      1,
                      0
                    ]
                  }
                },
                "required": [
                  "enabled"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/LinkList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"enabled\": 1\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/LinkList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"enabled\": 1\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Disable a Link List",
        "description": "Remove a specific Link List from your MessageWhiz account by ID",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/LinkList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/LinkList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/LinkList/{id}/links": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Get Links from the List",
        "description": "Get an array of Links from a specific Link List by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.010940972,
                  "result": [
                    {
                      "id": 2134,
                      "links": [
                        {
                          "linkId": 146746,
                          "url": "https://google.com"
                        },
                        {
                          "linkId": 146747,
                          "url": "https://youtube.com"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.010940972
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 6941
                      },
                      "links": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "linkId": {
                              "type": "number",
                              "example": 146746
                            },
                            "url": {
                              "type": "string",
                              "example": "https://google.com"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/LinkList/{id}/links HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/LinkList/{id}/links' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/LinkList/{listID}/links?id={linkID}": {
      "delete": {
        "parameters": [
          {
            "schema": {
              "description": "Link List Id",
              "type": "integer"
            },
            "name": "listID",
            "in": "path",
            "required": true
          },
          {
            "schema": {
              "description": "Link Id",
              "type": "integer"
            },
            "name": "linkID",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Disable a Link in the Link List",
        "description": "To remove a Link from the Link List, include Link List ID in the query and specify Link ID as required parameter",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/LinkList/{listID}/links?id={linkID} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/LinkList/{listID}/links?id={linkID}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/LinkList/{id}/links/bulk": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link List"
        ],
        "summary": "Add New Links to a Link List (Bulk)",
        "description": "To add multiple new Links to the Link List, you should include Link List ID in the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.064860264,
                  "result": {
                    "enabled": true,
                    "id": 2134,
                    "name": "FirstLinkList",
                    "user_id": 3191,
                    "company_id": 3182
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.064860264
                },
                "result": {
                  "required": [
                    "enabled",
                    "id",
                    "name",
                    "user_id",
                    "company_id"
                  ],
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "id": {
                      "type": "number",
                      "example": 6940
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstLinkList"
                    },
                    "user_id": {
                      "type": "number",
                      "example": 3191
                    },
                    "company_id": {
                      "type": "number",
                      "example": 3182
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "links": [
                  {
                    "name": "some3 name",
                    "url": "https://43.url.com"
                  },
                  {
                    "name": "some3 name 2",
                    "url": "https://24422.url.com"
                  }
                ]
              },
              "schema": {
                "type": "object",
                "properties": {
                  "links": {
                    "$ref": "#/components/parameters/linklist_links"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/LinkList/{id}/links/bulk HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"links\": [\n    {\n      \"name\": \"some3 name\",\n      \"url\": \"https://43.url.com\"\n    },\n    {\n      \"name\": \"some3 name 2\",\n      \"url\": \"https://24422.url.com\"\n    }\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/LinkList/{id}/links/bulk' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"links\": [\n    {\n      \"name\": \"some3 name\",\n      \"url\": \"https://43.url.com\"\n    },\n    {\n      \"name\": \"some3 name 2\",\n      \"url\": \"https://24422.url.com\"\n    }\n  ]\n}'"
          }
        ]
      }
    },
    "/api/3/Link/": {
      "post": {
        "parameters": [],
        "tags": [
          "Link"
        ],
        "summary": "Create a Link",
        "description": "Create a Link from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.01954006,
                  "result": {
                    "id": 165655,
                    "name": "Link1",
                    "url": "https://foot1.com",
                    "enabled": true,
                    "type": 0,
                    "platform_based_links": {
                      "bot_redirect": "https://foot32.com/desktop",
                      "preview_url": "https://foot12.com"
                    }
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.01954006
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "url",
                    "enabled",
                    "type",
                    "platform_based_links"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 165655
                    },
                    "name": {
                      "type": "string",
                      "example": "Link1"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://foot1.com"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "type": {
                      "type": "number",
                      "example": 0
                    },
                    "platform_based_links": {
                      "$ref": "#/components/parameters/platform_based_links"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "Link1",
                "url": "https://foot1.com",
                "platform_based_links": {
                  "bot_redirect": "https://foot32.com/desktop",
                  "preview_url": "https://foot12.com"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Link name",
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "description": "Link url itself, in the URI format"
                  },
                  "platform_based_links": {
                    "$ref": "#/components/parameters/platform_based_links"
                  }
                },
                "required": [
                  "name",
                  "url"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Link/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"Link1\",\n  \"url\": \"https://foot1.com\",\n  \"platform_based_links\": {\n    \"bot_redirect\": \"https://foot32.com/desktop\",\n    \"preview_url\": \"https://foot12.com\"\n  }\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Link/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"Link1\",\n  \"url\": \"https://foot1.com\",\n  \"platform_based_links\": {\n    \"bot_redirect\": \"https://foot32.com/desktop\",\n    \"preview_url\": \"https://foot12.com\"\n  }\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          },
          {
            "$ref": "#/components/parameters/link_filter"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          }
        ],
        "tags": [
          "Link"
        ],
        "summary": "Get Links",
        "description": "Get Links from your MessageWhiz account\n\nFor example, to get only a Link with specific URL (e.g https://foot1.com), use the following query:\n\n`https://sms.messagewhiz.com/api/3/link?filter=url=https://foot1.com`\n\nor to get a Link by name:\n\n`https://sms.messagewhiz.com/api/3/link?filter=name=Link1`",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.006230324,
                  "result": [
                    {
                      "enabled": true,
                      "id": 165655,
                      "name": "Link1",
                      "url": "https://foot1.com"
                    },
                    {
                      "enabled": true,
                      "id": 146746,
                      "name": "test",
                      "url": "https://sms.messagewhiz.com/app/workspace/links"
                    }
                  ]
                }
              }
            },
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.006230324
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "example": true
                      },
                      "id": {
                        "type": "number",
                        "example": 165655
                      },
                      "name": {
                        "type": "string",
                        "example": "Link1"
                      },
                      "url": {
                        "type": "string",
                        "example": "https://foot1.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Link/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Link/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Link/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link"
        ],
        "summary": "Modify a Link",
        "description": "To modify a specific Link, you should specify its ID in the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.011805652,
                  "result": {
                    "id": 2134,
                    "name": "FirstLink",
                    "url": "https://foot1.com",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.011805652
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "url",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 165655
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstLink"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://foot1.com"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "FirstLink",
                "url": "https://foot1.com"
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Link name",
                    "type": "string"
                  },
                  "url": {
                    "description": "Link url itself, in the URI format",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "url"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Link/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstLink\",\n  \"url\": \"https://foot1.com\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Link/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstLink\",\n  \"url\": \"https://foot1.com\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Link"
        ],
        "summary": "Disable a Link",
        "description": "To remove a specific Link, you should include its ID in the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Link/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Link/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/details/linkConversion": {
      "post": {
        "parameters": [],
        "tags": [
          "Link"
        ],
        "summary": "Monitor link conversion",
        "description": "To receive conversion data from a certain link",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.12326038,
                  "result": {
                    "conversion": 100,
                    "totalRecipients": 1,
                    "clicks": 1
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversion": {
                      "type": "float",
                      "description": "Level of CTR"
                    },
                    "totalRecipients": {
                      "type": "float",
                      "description": "Amount of recipients to which such link was send"
                    },
                    "clicks": {
                      "type": "float",
                      "description": "Amount of unique clicks on the link"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "description": "The link to monitor conversion",
                    "schema": {
                      "type": "string"
                    },
                    "example": "messagewhiz.com",
                    "type": "string"
                  }
                },
                "required": [
                  "url"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/details/linkConversion HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"url\": \"messagewhiz.com\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/details/linkConversion' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"url\": \"messagewhiz.com\"\n}'"
          }
        ]
      }
    },
    "/api/3/RecipientList/?truncate={truncate}": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "name": "truncate",
            "in": "query",
            "required": true,
            "description": "Automatically truncates fields in the list if they are longer than allowed.\n\n if truncate===false and there are fields in the list that exceed the limits, an error while loading occurs."
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Create a Recipient List (import a file)",
        "description": "Create a Recipient List by importing file of contacts\n\n**NOTE** Please note that up to 100,000 recipients can be designated in a single broadcast.\n\nTo check if your file fits, you can preview(/Recipient List/preview) it",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecipientListAdd",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "x-show-example-request": true,
              "example": "--form 'doc=@/home/user/Downloads/numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'",
              "schema": {
                "type": "object",
                "properties": {
                  "mapping": {
                    "$ref": "#/components/parameters/RecipientList_mapping"
                  },
                  "name": {
                    "$ref": "#/components/parameters/RecipientList_name"
                  },
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  }
                },
                "required": [
                  "name",
                  "mapping"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/RecipientList/?truncate={truncate} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/RecipientList/?truncate={truncate}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'"
          }
        ]
      }
    },
    "/api/3/RecipientList/numbers": {
      "post": {
        "parameters": [],
        "tags": [
          "Recipients"
        ],
        "summary": "Create a Recipient List (manually)",
        "description": "Create a Recipient List by adding the phone numbers manually",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecipientListAdd",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/RecipientList_name"
                  },
                  "numbers": {
                    "schema": {
                      "type": "array"
                    },
                    "items": {
                      "type": "string"
                    },
                    "name": "numbers",
                    "in": "body",
                    "example": [
                      "380503327227",
                      "380848122639"
                    ],
                    "type": "array"
                  }
                },
                "required": [
                  "name",
                  "numbers"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/RecipientList/numbers HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/RecipientList/numbers' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}'"
          }
        ]
      }
    },
    "/api/3/RecipientList/": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "name": "limit",
            "in": "query",
            "description": "The number of items to fetch"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "all"
              ],
              "default": "true"
            },
            "name": "enabled",
            "in": "query",
            "description": "Fetch only active lists"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "name": "filter",
            "in": "query",
            "description": "Filtering by the specific list name"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "name": "start",
            "in": "query",
            "description": "The number of items to skip"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Get Recipient Lists",
        "description": "Get Recipient Lists from your MessageWhiz account:\n\nFor example, to get only the Recipient List with specific name(e.g SecondRecipientList), use the following query:\n\nhttps://sms.messagewhiz.com/api/3/RecipientList?filter=name=SecondRecipientList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.012814664,
                  "result": [
                    {
                      "id": 267891,
                      "name": "SecondRecipientList",
                      "enabled": 1,
                      "count": 4
                    },
                    {
                      "id": 267888,
                      "name": "ManuallyAddedList",
                      "enabled": 1,
                      "count": 2
                    },
                    {
                      "id": 267628,
                      "name": "FirstRecipientList",
                      "enabled": 1,
                      "count": 4
                    },
                    {
                      "id": 222345,
                      "name": "ev",
                      "enabled": 1,
                      "count": 1
                    }
                  ]
                }
              }
            },
            "description": "Successful operation\n\nThe response contains an object for each recipient in the list, including their metadata (first_name, last_name,email, url, custom).",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.012814664
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 267891
                      },
                      "name": {
                        "type": "string",
                        "example": "SecondRecipientList"
                      },
                      "enabled": {
                        "type": "number",
                        "example": 1
                      },
                      "count": {
                        "type": "number",
                        "example": 4
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/RecipientList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/RecipientList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/RecipientList/{id}/recipients": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Get Recipients from Recipient List",
        "description": "Get recipients from the specific Recipient List using its ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.012814664,
                  "result": [
                    {
                      "phone_number": 6593333311,
                      "first_name": "Anthony"
                    },
                    {
                      "phone_number": 6593333322,
                      "first_name": "Bob"
                    },
                    {
                      "phone_number": 6593333333,
                      "first_name": "Jonathan"
                    },
                    {
                      "phone_number": 6593333344,
                      "first_name": "Alex"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.012814664
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "phone_number": {
                        "type": "number",
                        "example": 6593333311
                      },
                      "first_name": {
                        "type": "string",
                        "example": "Anthony"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/RecipientList/{id}/recipients HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/RecipientList/{id}/recipients' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/RecipientList/{id}/listNumbers": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Get Numbers from Recipient List",
        "description": "Get an array of phone numbers from the specific Recipient List using its ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.012814664,
                  "result": [
                    "6593333311",
                    "6593333322",
                    "6593333333",
                    "6593333344"
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.012814664
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "6593333311",
                    "6593333322",
                    "6593333333",
                    "6593333344"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/RecipientList/{id}/listNumbers HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/RecipientList/{id}/listNumbers' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/RecipientList/1/preview": {
      "post": {
        "operationId": "RecipientList/preview",
        "tags": [
          "Recipients"
        ],
        "summary": "Preview a Recipient List",
        "description": "MessageWhiz API provides you with the possibility to preview your file of contacts before importing it and creating the Recipient List",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecipientListPreview",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "--form 'doc=@/home/user/Downloads/numbers_9.csv'",
              "schema": {
                "type": "object",
                "properties": {
                  "doc": {
                    "description": "An absolute path to the file on your device",
                    "example": "/Users/userName/dir/recipients.csv",
                    "type": "file"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/RecipientList/1/preview HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/numbers_9.csv'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/RecipientList/1/preview' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/numbers_9.csv'"
          }
        ]
      }
    },
    "/api/3/RecipientList/{id}/download": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Sender List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Download a Recipient List",
        "description": "Download specific Recipient List using its ID and save the response",
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "example": "\"phone_number\";\"first_name\"\n\"6593333311\";\"Anthony\"\n\"6593333322\";\"Bob\"\n\"6593333333\";\"Jonathan\"\n\"6593333344\";\"Alex\""
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/RecipientList/{id}/download HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/RecipientList/{id}/download' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/RecipientList/{id}/numbers": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Modify a Recipient List (manually)",
        "description": "To modify a specific Recipient List by adding new numbers manually or changing the list name, add its ID to the query\n\nIn the request body specify the new values for this list:\n\nname(string) - name of the list, by specifying this value you can change Recipient List name,\nnumbers(array) - array of numbers that will be added to the list.\nIf you want to just partially update the resource(by changing the list name), you can use:\n\nPATCH https://sms.messagewhiz.com/api/3/RecipientList/{id}",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.019542036,
                  "result": {
                    "inserted": 2,
                    "wrong": 0,
                    "duplicate": 0,
                    "total": 2,
                    "recipient_list_id": 267891,
                    "count": 5
                  }
                },
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.019542036
                    },
                    "result": {
                      "required": [
                        "inserted",
                        "wrong",
                        "duplicate",
                        "total",
                        "recipient_list_id",
                        "count"
                      ],
                      "properties": {
                        "inserted": {
                          "type": "number",
                          "example": 1
                        },
                        "wrong": {
                          "type": "number",
                          "example": 0
                        },
                        "duplicate": {
                          "type": "number",
                          "example": 0
                        },
                        "total": {
                          "type": "number",
                          "example": 1
                        },
                        "recipient_list_id": {
                          "type": "number",
                          "example": 267891
                        },
                        "count": {
                          "type": "number",
                          "example": 5
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/RecipientList_name"
                  },
                  "numbers": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "name": "numbers",
                    "in": "body",
                    "example": [
                      "380503327227",
                      "380848122639"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "numbers"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/RecipientList/{id}/numbers HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/RecipientList/{id}/numbers' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Modify partially a Recipient List",
        "description": "",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.019542036,
                  "result": {
                    "inserted": 2,
                    "wrong": 0,
                    "duplicate": 0,
                    "total": 2,
                    "recipient_list_id": 267891,
                    "count": 5
                  }
                },
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.019542036
                    },
                    "result": {
                      "required": [
                        "inserted",
                        "wrong",
                        "duplicate",
                        "total",
                        "recipient_list_id",
                        "count"
                      ],
                      "properties": {
                        "inserted": {
                          "type": "number",
                          "example": 1
                        },
                        "wrong": {
                          "type": "number",
                          "example": 0
                        },
                        "duplicate": {
                          "type": "number",
                          "example": 0
                        },
                        "total": {
                          "type": "number",
                          "example": 1
                        },
                        "recipient_list_id": {
                          "type": "number",
                          "example": 267891
                        },
                        "count": {
                          "type": "number",
                          "example": 5
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "MyRecipientsList",
                "numbers": [
                  "380503327227",
                  "380848122639"
                ]
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/RecipientList_name"
                  },
                  "numbers": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "name": "numbers",
                    "in": "body",
                    "example": [
                      "380503327227",
                      "380848122639"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/RecipientList/{id}/numbers HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/RecipientList/{id}/numbers' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"MyRecipientsList\",\n  \"numbers\": [\n    \"380503327227\",\n    \"380848122639\"\n  ]\n}'"
          }
        ]
      }
    },
    "/api/3/RecipientList/{id}": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Modify a Recipient List (import a file)",
        "description": "Replace the entire existing Recipient List with the new imported one",
        "responses": {
          "200": {
            "$ref": "#/components/responses/RecipientListAdd",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "--form 'doc=@/home/user/Downloads/RecipientList.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'",
              "schema": {
                "type": "object",
                "properties": {
                  "mapping": {
                    "$ref": "#/components/parameters/RecipientList_mapping"
                  },
                  "name": {
                    "$ref": "#/components/parameters/RecipientList_name"
                  },
                  "doc": {
                    "description": "An absolute path to the file on your device\n\nThe mapping structure should correspond to the structure presented in the new uploaded file.",
                    "example": "/Users/userName/dir/recipients.csv",
                    "type": "file"
                  }
                },
                "required": [
                  "name",
                  "mapping"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/RecipientList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/RecipientList.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/RecipientList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/RecipientList.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}'\\\n--form 'name=FirstRecipientList'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Recipient List ID"
          }
        ],
        "tags": [
          "Recipients"
        ],
        "summary": "Disable a Recipient List",
        "description": "To remove a specific Recipient List from your MessageWhiz account, you should include its ID the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/RecipientList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/RecipientList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/SenderList/": {
      "post": {
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/parameters/RecipientList_name"
            },
            "name": "name",
            "in": "body",
            "required": true
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Create a Sender List",
        "description": "Create a Sender List from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.012814664,
                  "result": {
                    "id": 5456,
                    "name": "FirstSenderList",
                    "enabled": true,
                    "count": 2
                  }
                }
              }
            },
            "description": "Success",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.012814664
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "enabled",
                    "count"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 5456
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstSenderList"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "count": {
                      "type": "number",
                      "example": 2
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "In case of all invalid senderIds, Senders will not be added to the list, and the list will be created empty.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/SenderList_name"
                  },
                  "senderIds": {
                    "description": "An array of IDs of the Senders that the list will consist of",
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "name": "numbers",
                    "example": [
                      32154,
                      65412
                    ],
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                },
                "required": [
                  "name",
                  "senderIds"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/SenderList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstSenderList\",\n  \"senderIds\": [\n    32154,\n    65412\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/SenderList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstSenderList\",\n  \"senderIds\": [\n    32154,\n    65412\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_enabled"
          },
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "name": "filter",
            "in": "query",
            "description": "Filtering by the specific sender list name"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Get Sender List",
        "description": "Get Sender Lists from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.00982226,
                  "result": [
                    {
                      "enabled": true,
                      "id": 5456,
                      "name": "FirstSenderList",
                      "count": 2
                    },
                    {
                      "enabled": true,
                      "id": 5455,
                      "name": "SenderList",
                      "count": 1
                    }
                  ]
                },
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.008722612
                    },
                    "result": {
                      "required": [
                        "id",
                        "senders"
                      ],
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 5456
                        },
                        "senders": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "senderId": {
                                "type": "number",
                                "example": 28905674
                              },
                              "name": {
                                "type": "string",
                                "example": "test2"
                              }
                            }
                          }
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/SenderList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/SenderList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/SenderList/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Modify a Sender List",
        "description": "To modify a specific Sender List by adding new Senders and changing the list name, add its ID to the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.040806108
                    },
                    "result": {
                      "required": [
                        "id",
                        "name",
                        "enabled",
                        "count"
                      ],
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 5456
                        },
                        "name": {
                          "type": "string",
                          "example": "New"
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "count": {
                          "type": "number",
                          "example": 2
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.040806108,
                  "result": {
                    "id": 2134,
                    "name": "FirstSenderList",
                    "enabled": true,
                    "count": 2
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "senderIds",
                  "enabled"
                ],
                "description": "By specifying name of the list you can change Sender List name\n\n Array of Sender Ids that will be added to the list.",
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/SenderList_name"
                  },
                  "senderIds": {
                    "$ref": "#/components/parameters/SenderList_senderIds"
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "`true` to make the item active or `false`"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/SenderList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstSenderList\",\n  \"senderIds\": [\n    4324,\n    4321\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/SenderList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstSenderList\",\n  \"senderIds\": [\n    4324,\n    4321\n  ]\n}'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "description": "Senders List ID",
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Modify a Sender List partially",
        "description": "To modify a specific Sender List by adding new Senders and changing the list name, add its ID to the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.040806108
                    },
                    "result": {
                      "required": [
                        "id",
                        "name",
                        "enabled",
                        "count"
                      ],
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 5456
                        },
                        "name": {
                          "type": "string",
                          "example": "New"
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "count": {
                          "type": "number",
                          "example": 2
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.009910892,
                  "result": {
                    "id": 2134,
                    "enabled": 1
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enabled": true
              },
              "schema": {
                "description": "By specifying name of the list you can change Sender List name\n\n Array of Sender Ids that will be added to the list.",
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/SenderList_name"
                  },
                  "senderIds": {
                    "$ref": "#/components/parameters/SenderList_senderIds"
                  },
                  "enabled": {
                    "description": "`true` to make the item active or `false`",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/SenderList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"enabled\": true\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/SenderList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"enabled\": true\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Disable a Sender List",
        "description": "To remove a specific Sender List from your MessageWhiz account, you should include its ID the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/SenderList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/SenderList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/SenderList/{listID}/senders": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SenderList_listID"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Add Senders to a Sender List",
        "description": "To add Senders to a Sender List from your MessageWhiz account, specify Sender List ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.032248508,
                  "result": [
                    28899614,
                    28899615
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.032248508
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "example": [
                    28899614,
                    28899615
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "ids": [
                  28899614,
                  28899615
                ]
              },
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "An array of Sender Ids",
                    "example": [
                      321,
                      322
                    ],
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/SenderList/{listID}/senders HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"ids\": [\n    28899614,\n    28899615\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/SenderList/{listID}/senders' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"ids\": [\n    28899614,\n    28899615\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SenderList_listID"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Get Senders from the List",
        "description": "Get an array of Sender objects from a specific Sender List",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.008722612,
                  "result": {
                    "id": 2134,
                    "senders": [
                      {
                        "senderId": 28905674,
                        "name": "test2"
                      },
                      {
                        "senderId": 28938892,
                        "name": "FirstSender"
                      }
                    ]
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.008722612
                },
                "result": {
                  "required": [
                    "id",
                    "senders"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 5456
                    },
                    "senders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "senderId": {
                            "type": "number",
                            "example": 28905674
                          },
                          "name": {
                            "type": "string",
                            "example": "test2"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/SenderList/{listID}/senders HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/SenderList/{listID}/senders' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/SenderList_listID"
          }
        ],
        "tags": [
          "Sender Lists"
        ],
        "summary": "Disable a Sender in the Sender List",
        "description": "To remove a Sender from the Sender List, you should include Sender List ID in the query and specify Sender ID as required parameter\n\n`/api/3/senderList/{id}/senders?id={senderID}`",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/SenderList/{listID}/senders HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/SenderList/{listID}/senders' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Sender/": {
      "post": {
        "tags": [
          "Senders"
        ],
        "summary": "Create a Sender",
        "description": "Create a Sender from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.044570548,
                  "result": {
                    "id": 28938892,
                    "name": "FirstSender",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.044570548
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 28938892
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstSender"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/sender_name"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Sender/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstSender\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Sender/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstSender\"\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "name": "limit",
            "in": "query",
            "description": "The number of items to fetch"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false",
                "all"
              ],
              "default": "true"
            },
            "name": "enabled",
            "in": "query",
            "description": "Fetch only active lists"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "name": "filter",
            "in": "query",
            "description": "Filtering by the specific sender name"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "name": "start",
            "in": "query",
            "description": "The number of items to skip"
          }
        ],
        "tags": [
          "Senders"
        ],
        "summary": "Get Senders",
        "description": "Get Senders from your MessageWhiz account\n\nYou can include several parameters in your GET query in order to receive only the data you need.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.013848856,
                  "result": [
                    {
                      "enabled": true,
                      "id": 28938892,
                      "name": "FirstSender"
                    },
                    {
                      "enabled": true,
                      "id": 28905672,
                      "name": "test"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.013848856
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "example": true
                      },
                      "id": {
                        "type": "number",
                        "example": 28938892
                      },
                      "name": {
                        "type": "string",
                        "example": "FirstSender"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Sender/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Sender/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Sender/{id}": {
      "put": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "example": 2134,
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Sender ID"
          }
        ],
        "tags": [
          "Senders"
        ],
        "summary": "Modify a Sender",
        "description": "To modify a specific Sender from your MessageWhiz account, include its ID in the query\n\nIn the request body specify the new sender name and status for the selected Sender entity, for instance:\n\n`{ \"name\": \"FirstSender\", \"enabled\": 0 }`",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.021960496
                    },
                    "result": {
                      "required": [
                        "id",
                        "name",
                        "enabled"
                      ],
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 28905672
                        },
                        "name": {
                          "type": "string",
                          "example": "TestSender"
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.021960496,
                  "result": {
                    "id": 2134,
                    "name": "FirstSender",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "enabled"
                ],
                "type": "object",
                "description": "In the request body specify the new sender name and status for the selected Sender entity",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/sender_name"
                  },
                  "enabled": {
                    "description": "Make the item active",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Sender/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstSender\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Sender/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstSender\"\n}'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Sender ID"
          }
        ],
        "tags": [
          "Senders"
        ],
        "summary": "Modify a Sender",
        "description": "If you want to partially update the resource, you can use PATCH",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.021960496
                    },
                    "result": {
                      "required": [
                        "id",
                        "name",
                        "enabled"
                      ],
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 28905672
                        },
                        "name": {
                          "type": "string",
                          "example": "TestSender"
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.021960496,
                  "result": {
                    "id": 2134,
                    "name": "FirstSender",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "FirstSender"
              },
              "schema": {
                "type": "object",
                "description": "In the request body specify the new sender name or a status for the selected Sender entity",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/sender_name"
                  },
                  "enabled": {
                    "description": "Make the item active",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/Sender/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstSender\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/Sender/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstSender\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Sender ID"
          }
        ],
        "tags": [
          "Senders"
        ],
        "summary": "Disable a Sender",
        "description": "To remove a specific Sender from your MessageWhiz account, you should include its ID to the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Sender/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Sender/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Spinner/": {
      "post": {
        "parameters": [],
        "tags": [
          "Word Spinners"
        ],
        "summary": "Create a Word Spinner",
        "description": "Create a Word Spinner from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.041090464,
                  "result": {
                    "name": "Fit32",
                    "words": [
                      "wo",
                      "three",
                      "spinner",
                      "greeetinnngsss",
                      "four",
                      "test",
                      "one",
                      "five"
                    ],
                    "enabled": true,
                    "id": 10520
                  }
                }
              }
            },
            "description": "Success",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.041090464
                },
                "result": {
                  "required": [
                    "name",
                    "words",
                    "enabled",
                    "id"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Fit32"
                    },
                    "words": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "wo",
                        "three",
                        "spinner",
                        "greeetinnngsss",
                        "four",
                        "test",
                        "one",
                        "five"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "id": {
                      "type": "number",
                      "example": 10520
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "Fit32",
                "words": [
                  "wo",
                  "three",
                  "spinner",
                  "greeetinnngsss",
                  "four",
                  "test",
                  "one",
                  "five"
                ]
              },
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "words"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/spinner_name"
                  },
                  "words": {
                    "$ref": "#/components/parameters/spinner_words"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Spinner/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"Fit32\",\n  \"words\": [\n    \"wo\",\n    \"three\",\n    \"spinner\",\n    \"greeetinnngsss\",\n    \"four\",\n    \"test\",\n    \"one\",\n    \"five\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Spinner/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"Fit32\",\n  \"words\": [\n    \"wo\",\n    \"three\",\n    \"spinner\",\n    \"greeetinnngsss\",\n    \"four\",\n    \"test\",\n    \"one\",\n    \"five\"\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          },
          {
            "$ref": "#/components/parameters/filter_filter"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          }
        ],
        "tags": [
          "Word Spinners"
        ],
        "summary": "Get Word Spinners",
        "description": "Get Word Spinners from your MessageWhiz account\n\nYou can include several parameters to your GET query in order to receive only the data you need",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.008722612,
                  "result": [
                    {
                      "words": [
                        "wo",
                        "three",
                        "spinner",
                        "greeetinnngsss",
                        "four",
                        "test",
                        "one",
                        "five"
                      ],
                      "enabled": true,
                      "id": 10520,
                      "name": "Fit32"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.008722612
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "words": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "wo",
                          "three",
                          "spinner",
                          "greeetinnngsss",
                          "four",
                          "test",
                          "one",
                          "five"
                        ]
                      },
                      "enabled": {
                        "type": "boolean",
                        "example": true
                      },
                      "id": {
                        "type": "number",
                        "example": 10520
                      },
                      "name": {
                        "type": "string",
                        "example": "Fit32"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Spinner/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Spinner/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Spinner/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Word Spinners"
        ],
        "summary": "Modify a Word Spinner",
        "description": "To modify a specific Word Spinner, include its ID in the query\n\nIn the request body specify the value you want to modify, for instance:\n\n{ \"name\":\"FirstSpinner\" }\n\nIf the name array is specified in the request body for a PUT request, the previous words will be overwritten.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.014242532,
                  "result": {
                    "name": "FirstSpinner",
                    "words": [
                      "wo",
                      "three",
                      "spinner",
                      "greeetinnngsss",
                      "four",
                      "test",
                      "one",
                      "five"
                    ],
                    "enabled": true,
                    "id": 2134
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.014242532
                },
                "result": {
                  "required": [
                    "name",
                    "words",
                    "enabled",
                    "id"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "FirstSpinner"
                    },
                    "words": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "wo",
                        "three",
                        "spinner",
                        "greeetinnngsss",
                        "four",
                        "test",
                        "one",
                        "five"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "id": {
                      "type": "number",
                      "example": 10520
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Spinner/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"Fit32\",\n  \"words\": [\n    \"wo\",\n    \"three\",\n    \"spinner\",\n    \"greeetinnngsss\",\n    \"four\",\n    \"test\",\n    \"one\",\n    \"five\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Spinner/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"Fit32\",\n  \"words\": [\n    \"wo\",\n    \"three\",\n    \"spinner\",\n    \"greeetinnngsss\",\n    \"four\",\n    \"test\",\n    \"one\",\n    \"five\"\n  ]\n}'"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "Fit32",
                "words": [
                  "wo",
                  "three",
                  "spinner",
                  "greeetinnngsss",
                  "four",
                  "test",
                  "one",
                  "five"
                ]
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/spinner_name"
                  },
                  "words": {
                    "$ref": "#/components/parameters/spinner_words"
                  }
                },
                "required": [
                  "name",
                  "words"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Word Spinners"
        ],
        "summary": "Modify a Word Spinner",
        "description": "To modify a specific Word Spinner, include its ID in the query\n\nThe Word Spinner might be disabled, by specifying it in the request body for a PATCH request:\n\n{ \"enabled\": \"0\" }",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.0242746,
                  "result": {
                    "enabled": 0
                  }
                },
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.014242532
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enabled": "0"
              },
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/spinner_name"
                  },
                  "words": {
                    "$ref": "#/components/parameters/spinner_words"
                  },
                  "enabled": {
                    "description": "Set sinner active",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/Spinner/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"enabled\": \"0\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/Spinner/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"enabled\": \"0\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Word Spinners"
        ],
        "summary": "Disable a Word Spinner",
        "description": "To remove a specific Word Spinner from your MessageWhiz account, include its ID in the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Spinner/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Spinner/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Template/": {
      "post": {
        "parameters": [],
        "tags": [
          "Template"
        ],
        "summary": "Create a Template",
        "description": "Create a Template from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.014043792,
                  "result": {
                    "id": 46126,
                    "name": "FirstTemplate",
                    "body": "HI!",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.014043792
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "body",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 46126
                    },
                    "name": {
                      "type": "string",
                      "example": "FirstTemplate"
                    },
                    "body": {
                      "type": "string",
                      "example": "HI!"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "FirstTemplate",
                "body": "HI!"
              },
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "A text body of the message Template",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  },
                  "name": {
                    "description": "Template name",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "body"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Template/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstTemplate\",\n  \"body\": \"HI!\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Template/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstTemplate\",\n  \"body\": \"HI!\"\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          },
          {
            "$ref": "#/components/parameters/filter_filter"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          }
        ],
        "tags": [
          "Template"
        ],
        "summary": "Get Templates",
        "description": "Get Templates from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.007669944,
                  "result": [
                    {
                      "enabled": true,
                      "id": 46126,
                      "user_id": 3191,
                      "name": "FirstTemplate",
                      "body": "HI!"
                    },
                    {
                      "enabled": true,
                      "id": 46125,
                      "user_id": 3191,
                      "name": "1",
                      "body": "Test test {shorten_url}"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.007669944
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "example": true
                      },
                      "id": {
                        "type": "number",
                        "example": 46126
                      },
                      "user_id": {
                        "type": "number",
                        "example": 3191
                      },
                      "name": {
                        "type": "string",
                        "example": "FirstTemplate"
                      },
                      "body": {
                        "type": "string",
                        "example": "HI!"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Template/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Template/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Template/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Template"
        ],
        "summary": "Modify a Template",
        "description": "To modify a specific Template, include its ID in the query\n\nIf the body is specified in the request body for a PUT request, the previous Template text will be overwritten.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.019078568,
                  "result": {
                    "id": 2134,
                    "name": "AnotherTemplateName",
                    "body": "HI!",
                    "enabled": true
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.019078568
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "body",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 46126
                    },
                    "name": {
                      "type": "string",
                      "example": "AnotherTemplateName"
                    },
                    "body": {
                      "type": "string",
                      "example": "HI!"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "description": "A text body of the message Template",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  },
                  "name": {
                    "description": "Template name",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "AnotherTemplateName",
                "body": "HI!"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Template/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"AnotherTemplateName\",\n  \"body\": \"HI!\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Template/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"AnotherTemplateName\",\n  \"body\": \"HI!\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Template"
        ],
        "summary": "Disable a Template",
        "description": "To remove a specific Template from your MessageWhiz account, include its ID in the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Template/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Template/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Trigger/": {
      "post": {
        "parameters": [],
        "tags": [
          "Trigger"
        ],
        "summary": "Create a Trigger",
        "description": "Create a Trigger from your MessageWhiz account:",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.116146556,
                  "result": {
                    "id": 5677,
                    "name": "newTrigger",
                    "uuid": "1fbea646-7d1e-4475-9f50-26aec1bf3482",
                    "enabled": 1,
                    "short_url": "https://0nz0.com/jBR4d",
                    "trigger_type_id": 1
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.116146556
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "uuid",
                    "enabled",
                    "short_url",
                    "trigger_type_id"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 5677
                    },
                    "name": {
                      "type": "string",
                      "example": "newTrigger"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "1fbea646-7d1e-4475-9f50-26aec1bf3482"
                    },
                    "enabled": {
                      "type": "number",
                      "example": 1
                    },
                    "short_url": {
                      "type": "string",
                      "example": "https://0nz0.com/jBR4d"
                    },
                    "trigger_type_id": {
                      "type": "number",
                      "example": 1
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "In the request body specify the Trigger `\"name\"` that will be created.\n\nIn response you will receive a `short_url`. The message or broadcast will not be sent until the link is clicked on or activated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Trigger name",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "newTrigger"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/Trigger/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"newTrigger\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/Trigger/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"newTrigger\"\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          },
          {
            "$ref": "#/components/parameters/trigger_filter"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          }
        ],
        "tags": [
          "Trigger"
        ],
        "summary": "Get Trigger",
        "description": "Get Trigger from your MessageWhiz account\n\nYou can include several parameters to your GET query in order to receive only the data you need",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.007109016,
                  "result": [
                    {
                      "id": 5677,
                      "name": "newTrigger",
                      "uuid": "1fbea646-7d1e-4475-9f50-26aec1bf3482",
                      "enabled": 1,
                      "short_url": "https://0nz0.com/jBR4d",
                      "trigger_type_id": 1,
                      "details": null,
                      "date": null,
                      "flight_details.flight_number": null,
                      "flight_details.arrival_date": null
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.007109016
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 5677
                      },
                      "name": {
                        "type": "string",
                        "example": "newTrigger"
                      },
                      "uuid": {
                        "type": "string",
                        "example": "1fbea646-7d1e-4475-9f50-26aec1bf3482"
                      },
                      "enabled": {
                        "type": "number",
                        "example": 1
                      },
                      "short_url": {
                        "type": "string",
                        "example": "https://0nz0.com/jBR4d"
                      },
                      "trigger_type_id": {
                        "type": "number",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/Trigger/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/Trigger/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/Trigger/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Trigger"
        ],
        "summary": "Modify a Trigger",
        "description": "To modify a specific Trigger, include its ID in the query",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.019078568,
                  "result": {
                    "id": 2134,
                    "name": "#",
                    "uuid": "1fbea646-7d1e-4475-9f50-26aec1bf3482",
                    "enabled": 1,
                    "short_url": "https://0nz0.com/jBR4d"
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.019078568
                },
                "result": {
                  "required": [
                    "id",
                    "name",
                    "body",
                    "enabled"
                  ],
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 46126
                    },
                    "name": {
                      "type": "string",
                      "example": "AnotherTemplateName"
                    },
                    "body": {
                      "type": "string",
                      "example": "HI!"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "In the request body specify the new value of name, for instance:\n\n`{ \"name\":\"#\" }`",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Trigger name",
                    "schema": {
                      "type": "string"
                    },
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "#"
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/Trigger/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"#\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/Trigger/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"#\"\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Trigger"
        ],
        "summary": "Disable a Trigger",
        "description": "To remove a specific Template from your MessageWhiz account, include its ID in the query",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/Trigger/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/Trigger/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/?truncate=true": {
      "post": {
        "parameters": [],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Create an Unsubscribe List (import a file)",
        "description": "Create an Unsubscribe List by importing file of contacts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.025868544
                    },
                    "result": {
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "id": {
                          "type": "number",
                          "example": 21534
                        },
                        "name": {
                          "type": "string",
                          "example": "FirstUnsubscribeList"
                        },
                        "company_id": {
                          "type": "number",
                          "example": 3182
                        },
                        "unsubscribers_amount": {
                          "type": "number",
                          "example": 1
                        },
                        "user_id": {
                          "type": "number",
                          "example": 3191
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.025868544,
                  "result": {
                    "enabled": true,
                    "id": 21534,
                    "name": "FirstUnsubscribeList",
                    "company_id": 3182,
                    "unsubscribers_amount": 1,
                    "user_id": 3191
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "--form 'doc=@/home/user/Downloads/ numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}' \\\n--form 'name=FirstRecipientList'",
              "schema": {
                "description": "Upload a file",
                "type": "object",
                "required": [
                  "name",
                  "doc",
                  "mapping"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/UnsubscribeList_name"
                  },
                  "mapping": {
                    "$ref": "#/components/parameters/UnsubscribeList_mapping"
                  },
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/UnsubscribeList/?truncate=true HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/ numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}' \\\n--form 'name=FirstRecipientList'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/UnsubscribeList/?truncate=true' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/ numbers_9.csv' \\\n--form 'mapping={\"0\":\"phone_number\", \"1\":\"first_name\"}' \\\n--form 'name=FirstRecipientList'"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/": {
      "post": {
        "parameters": [],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Create an Unsubscribe List (manually)",
        "description": "Create an Unsubscribe List from your MessageWhiz account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.025868544
                    },
                    "result": {
                      "required": [
                        "enabled",
                        "id",
                        "name",
                        "company_id",
                        "unsubscribers_amount",
                        "user_id"
                      ],
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "id": {
                          "type": "number",
                          "example": 21534
                        },
                        "name": {
                          "type": "string",
                          "example": "FirstUnsubscribeList"
                        },
                        "company_id": {
                          "type": "number",
                          "example": 3182
                        },
                        "unsubscribers_amount": {
                          "type": "number",
                          "example": 1
                        },
                        "user_id": {
                          "type": "number",
                          "example": 3191
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.025868544,
                  "result": {
                    "enabled": true,
                    "id": 21534,
                    "name": "FirstUnsubscribeList",
                    "company_id": 3182,
                    "unsubscribers_amount": 1,
                    "user_id": 3191
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "FirstUnsubscribeList",
                "numbers": [
                  380502222233
                ]
              },
              "schema": {
                "description": "Send numbers",
                "type": "object",
                "required": [
                  "name",
                  "numbers"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/components/parameters/UnsubscribeList_name"
                  },
                  "numbers": {
                    "$ref": "#/components/parameters/UnsubscribeList_numbers"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/UnsubscribeList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"name\": \"FirstUnsubscribeList\",\n  \"numbers\": [\n    380502222233\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/UnsubscribeList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"FirstUnsubscribeList\",\n  \"numbers\": [\n    380502222233\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/filter_limit"
          },
          {
            "$ref": "#/components/parameters/filter_enabled"
          },
          {
            "$ref": "#/components/parameters/filter_filter"
          },
          {
            "$ref": "#/components/parameters/filter_start"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Get Unsubscribe Lists",
        "description": "Get Unsubscribe Lists from your MessageWhiz account\n\nFor example, to get only an Unsubscribe List with a specific name(e.g FirstUnsubscribeList), use the following query:\n\n`https://sms.messagewhiz.com/api/3/UnsubscribeList?filter=name=FirstUnsubscribeList`",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.028108664,
                  "result": [
                    {
                      "id": 21534,
                      "name": "FirstUnsubscribeList",
                      "enabled": 1,
                      "unsubscribers_amount": 3
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.028108664
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 21534
                      },
                      "name": {
                        "type": "string",
                        "example": "FirstUnsubscribeList"
                      },
                      "enabled": {
                        "type": "number",
                        "example": 1
                      },
                      "unsubscribers_amount": {
                        "type": "number",
                        "example": 3
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/UnsubscribeList/ HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/UnsubscribeList/' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/{id}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Modify an Unsubscribe List (import a file)",
        "description": "Replace the entire existing Unsubscribe List with the new imported one",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "errorCode",
                    "errorMessage",
                    "errorType",
                    "executionTime",
                    "result"
                  ],
                  "properties": {
                    "errorCode": {
                      "type": "number",
                      "example": 0
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": ""
                    },
                    "errorType": {
                      "type": "string",
                      "example": ""
                    },
                    "executionTime": {
                      "type": "number",
                      "example": 0.040112328
                    },
                    "result": {
                      "required": [
                        "enabled",
                        "id",
                        "name",
                        "company_id",
                        "unsubscribers_amount",
                        "user_id"
                      ],
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "example": true
                        },
                        "id": {
                          "type": "number",
                          "example": 21534
                        },
                        "name": {
                          "type": "string",
                          "example": "FirstUnsubscribeList"
                        },
                        "company_id": {
                          "type": "number",
                          "example": 3182
                        },
                        "unsubscribers_amount": {
                          "type": "number",
                          "example": 4
                        },
                        "user_id": {
                          "type": "number",
                          "example": 3191
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.040112328,
                  "result": {
                    "enabled": true,
                    "id": 2134,
                    "name": "FirstUnsubscribeList",
                    "company_id": 3182,
                    "unsubscribers_amount": 4,
                    "user_id": 3191
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "In the request body specify the new values for this list.\n\nIf you want to partially update the resource, you can use:\n\nPATCH https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "doc",
                  "mapping"
                ],
                "properties": {
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  },
                  "mapping": {
                    "$ref": "#/components/parameters/UnsubscribeList_mapping"
                  }
                }
              },
              "example": "--form 'mapping={\"0\":\"phone_number\"}' \\\n--form 'doc=@/home/user/Downloads/UnsubscribeList.csv'"
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PUT /api/3/UnsubscribeList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'mapping={\"0\":\"phone_number\"}' \\\n--form 'doc=@/home/user/Downloads/UnsubscribeList.csv'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PUT 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'mapping={\"0\":\"phone_number\"}' \\\n--form 'doc=@/home/user/Downloads/UnsubscribeList.csv'"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Modify an Unsubscribe List",
        "description": "Replace the entire existing Unsubscribe List with the new imported one",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.022112432,
                  "result": {
                    "id": 2134,
                    "enabled": false
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "description": "You can disable an unsubscribe list by entering `\"enabled\": false` in the request body.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "$ref": "#/components/parameters/item_enabled"
                  }
                }
              },
              "example": {
                "enabled": false
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "PATCH /api/3/UnsubscribeList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"enabled\": false\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request PATCH 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"enabled\": false\n}'"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Disable a Unsubscribe List",
        "description": "To remove a specific Sender List from your MessageWhiz account, you should include its ID in the path",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleSuccess",
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "DELETE /api/3/UnsubscribeList/{id} HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request DELETE 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/preview": {
      "post": {
        "parameters": [],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Preview an Unsubscribe List",
        "description": "MessageWhiz API provides you with the possibility to preview your file of contacts before actually importing it and to create the Unsubscribe List",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.008022008,
                  "result": {
                    "data": [
                      [
                        "phone_number"
                      ],
                      [
                        "6593333311"
                      ],
                      [
                        "6593333322"
                      ],
                      [
                        "6593333333"
                      ],
                      [
                        "6593333344"
                      ]
                    ],
                    "isAllNum": [
                      true,
                      true,
                      true,
                      true
                    ],
                    "isExceedLength50": [
                      false,
                      false,
                      false,
                      false
                    ],
                    "isExceedLength255": [
                      false,
                      false,
                      false,
                      false
                    ],
                    "isExceedLength5000": [
                      false,
                      false,
                      false,
                      false
                    ]
                  }
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "example": "--form 'doc=@/home/user/Downloads/numbers_9.csv' ",
              "schema": {
                "description": "Upload a file",
                "type": "object",
                "required": [
                  "doc"
                ],
                "properties": {
                  "doc": {
                    "$ref": "#/components/parameters/file"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/UnsubscribeList/preview HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n--form 'doc=@/home/user/Downloads/numbers_9.csv'"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/UnsubscribeList/preview' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--form 'doc=@/home/user/Downloads/numbers_9.csv'"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/{id}/download": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Download an Unsubscribe List",
        "description": "Download a specific Unsubscribe List using its ID and then save the response",
        "responses": {
          "200": {
            "content": {
              "text/csv": {
                "example": "\"phone_number\"\n\"380502327265\"\n\"380502222233\"\n\"380643333322\""
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/UnsubscribeList/{id}/download HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}/download' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/api/3/UnsubscribeList/{id}/members": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Add Numbers to Unsubscribe List",
        "description": "Add phone numbers to the existing Unsubscribe List (include its ID in the query)",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.031270908,
                  "result": {
                    "inserted": 2,
                    "alreadyExists": 0,
                    "notValid": 0
                  }
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.031270908
                },
                "result": {
                  "required": [
                    "inserted",
                    "alreadyExists",
                    "notValid"
                  ],
                  "properties": {
                    "inserted": {
                      "type": "number",
                      "example": 2
                    },
                    "alreadyExists": {
                      "type": "number",
                      "example": 0
                    },
                    "notValid": {
                      "type": "number",
                      "example": 0
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Upload a file",
                "type": "object",
                "required": [
                  "numbers"
                ],
                "properties": {
                  "numbers": {
                    "$ref": "#/components/parameters/UnsubscribeList_numbers"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /api/3/UnsubscribeList/{id}/members HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\nContent-Type: application/json\n\n{\n  \"numbers\": [\n    \"380502222233\",\n    \"380643333322\"\n  ]\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}/members' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"numbers\": [\n    \"380502222233\",\n    \"380643333322\"\n  ]\n}'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "tags": [
          "Unsubscribe List"
        ],
        "summary": "Get Numbers from Unsubscribe List",
        "description": "Get phone numbers from the specific Unsubscribe List using its ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "errorCode": 0,
                  "errorMessage": "",
                  "errorType": "",
                  "executionTime": 0.018904092,
                  "result": [
                    {
                      "phone_number": "380643333322"
                    },
                    {
                      "phone_number": "380502327265"
                    },
                    {
                      "phone_number": "380502222233"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation",
            "schema": {
              "required": [
                "errorCode",
                "errorMessage",
                "errorType",
                "executionTime",
                "result"
              ],
              "properties": {
                "errorCode": {
                  "type": "number",
                  "example": 0
                },
                "errorMessage": {
                  "type": "string",
                  "example": ""
                },
                "errorType": {
                  "type": "string",
                  "example": ""
                },
                "executionTime": {
                  "type": "number",
                  "example": 0.018904092
                },
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "phone_number": {
                        "type": "string",
                        "example": "380643333322"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified"
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid"
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "GET /api/3/UnsubscribeList/{id}/members HTTP/1.1\nHost: sms.messagewhiz.com\napikey: YOUR_COMPANY_API_KEY\n"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request GET 'https://sms.messagewhiz.com/api/3/UnsubscribeList/{id}/members' \\\n--header 'apikey: YOUR_COMPANY_API_KEY' \\\n"
          }
        ]
      }
    },
    "/sms": {
      "post": {
        "tags": [
          "Single"
        ],
        "summary": "Single",
        "description": "To send a single message from your MessageWhiz account",
        "callbacks": {
          "Response on DLR callback": {
            "'{$callback}'": {
              "post": {
                "summary": "Response on DLR callback",
                "description": "When a single message was sent, we got a response with information about the sent message and DLR status.",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "example": {},
                      "schema": {
                        "type": "object",
                        "properties": {
                          "message_id": {
                            "type": "string",
                            "description": "The ID of the message"
                          },
                          "sender": {
                            "type": "string",
                            "description": "The Sender name that was used in message"
                          },
                          "recipient": {
                            "type": "string",
                            "description": "Phone number of the recipient"
                          },
                          "content": {
                            "type": "string",
                            "description": "Text of the message that the recipient received"
                          },
                          "state": {
                            "type": "string",
                            "description": "The id of DLR status of message"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ENROUTE",
                              "DELIVRD",
                              "EXPIRED",
                              "DELETED",
                              "UNDELIV",
                              "ACCEPTD",
                              "UNKNOWN",
                              "REJECTD",
                              "FAILED"
                            ],
                            "description": "The DLR status of single message. Possible DLR statuses (with their ids)"
                          },
                          "client_ref": {
                            "type": "string",
                            "description": "Custom parameter up to 160 characters, will be present in response for Single creation, DLR to Webhook and callback"
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "An API key of your account"
                          },
                          "parts_count": {
                            "type": "string",
                            "description": "The amount of PDUs in the message"
                          },
                          "price": {
                            "type": "string",
                            "description": "The cost of single message"
                          },
                          "parts": {
                            "type": "array",
                            "description": "Information about every PDU, may have such fields:",
                            "items": {
                              "type": "object",
                              "properties": {
                                "pdu_id": {
                                  "description": "ID of the message part",
                                  "type": "string"
                                },
                                "encoding": {
                                  "description": "Text encoding used for the message part",
                                  "type": "string"
                                },
                                "content": {
                                  "description": "Text of the message part",
                                  "type": "string"
                                },
                                "status": {
                                  "description": "DLR status code for the message part",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "responses": {}
                }
              }
            }
          },
          "Response on link click callback": {
            "'{$callback}'": {
              "post": {
                "summary": "Response on link click callback",
                "description": "After the user’s click on the link, an additional response with the click info appears",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "example": {},
                      "schema": {
                        "type": "object",
                        "properties": {
                          "message_id": {
                            "type": "string",
                            "description": "The ID of the message"
                          },
                          "link_id": {
                            "type": "string",
                            "description": "The link that was assigned and clicked by the user"
                          },
                          "unique_click": {
                            "type": "string",
                            "description": "Identifies that this is a unique click"
                          },
                          "time": {
                            "type": "string",
                            "description": "Time of clicking the link"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": [
                  {
                    "summary": "Basic example",
                    "value": {
                      "message_id": "rbzAV2NXxJ_u5bDL35Hop"
                    }
                  },
                  {
                    "summary": "Example DLR Callback",
                    "value": {
                      "message_id": "rbzAV2NXxJ_u5bDL35Hop",
                      "sender": "sender",
                      "recipient": "5417543010",
                      "content": "Message Text",
                      "state": 2,
                      "status": "DELIVRD",
                      "client_ref": "Custom param",
                      "timestamp": "2023-03-28T15:52:31.279Z",
                      "parts_count": 1,
                      "price": 2,
                      "parts": [
                        {
                          "pdu_id": "SVV7oRyvMLX1OIzLwta2p",
                          "encoding": 0,
                          "content": "Message Text",
                          "status": "DELIVRD"
                        }
                      ]
                    }
                  },
                  {
                    "summary": "Example link click Callback",
                    "value": {
                      "message_id": "4iE_yS65Vn8iXCqaW5L2N",
                      "link_id": "hkzt.me/ZPFuT5",
                      "time": "2023-05-01T13:46:37.921Z",
                      "unique_click": true
                    }
                  }
                ]
              }
            },
            "description": "Successful operation "
          },
          "400": {
            "description": "Bad Request -- Invalid parameters specified",
            "content": {
              "application/json": {
                "examples": [
                  {
                    "summary": "without mandatory field `text`",
                    "value": {
                      "statusCode": 400,
                      "message": [
                        "text must be shorter than or equal to 100000 characters",
                        "text must be longer than or equal to 1 characters",
                        "text should not be empty"
                      ],
                      "error": "Bad Request"
                    }
                  },
                  {
                    "summary": "without mandatory field `to`",
                    "value": {
                      "statusCode": 400,
                      "message": [
                        "The recipient number entered is invalid. Please ensure that the number is between 10 and 15 digits in length."
                      ],
                      "error": "Bad Request"
                    }
                  },
                  {
                    "summary": "without mandatory field `from`",
                    "value": {
                      "statusCode": 400,
                      "message": [
                        "Sender must not exceed 11 letters (latin alphabet or special symbols “'._-+&{space}” are allowed) or 20 numbers."
                      ],
                      "error": "Bad Request"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized -- API key is missing or invalid",
            "content": {
              "application/json": {
                "examples": [
                  {
                    "summary": "Without mandatory field `api_key`",
                    "value": {
                      "statusCode": 401,
                      "message": "Unauthorized"
                    }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden -- User/company is either disabled or doesn't have enough permissions"
          },
          "404": {
            "description": "Not found -- An entity is not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "api_key": "<apikey>",
                "to": "2605876689",
                "from": "sender",
                "text": "sample message"
              },
              "schema": {
                "type": "object",
                "required": [
                  "api_key",
                  "from",
                  "to",
                  "text"
                ],
                "properties": {
                  "api_key": {
                    "type": "string",
                    "description": "An API key of your account"
                  },
                  "from": {
                    "type": "string",
                    "description": "Provide here the Sender name"
                  },
                  "text": {
                    "type": "string",
                    "description": "Text of the message that the recipient will see; can contain text and links"
                  },
                  "to": {
                    "type": "string",
                    "description": "Phone number of the recipient"
                  },
                  "callback": {
                    "type": "string",
                    "description": "The URL of callback to which DLR statuses per single message will be sent"
                  },
                  "client_ref": {
                    "type": "string",
                    "description": "Custom parameter up to 160 characters, will be present in response for Single creation"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "HTTP",
            "source": "POST /sms HTTP/1.1\nHost: sms.messagewhiz.com\nContent-Type: application/json\n\n{\n  \"api_key\": \"<apikey>\",\n  \"to\": \"2605876689\",\n  \"from\": \"sender\",\n  \"text\": \"sample message\"\n}"
          },
          {
            "lang": "cURL",
            "source": "curl --location --request POST 'https://sms.messagewhiz.com/sms' \\\n\n--header 'Content-Type: application/json' \\\n--data '{\n  \"api_key\": \"<apikey>\",\n  \"to\": \"2605876689\",\n  \"from\": \"sender\",\n  \"text\": \"sample message\"\n}'"
          }
        ]
      }
    },
    "/chats/api/v1/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Send a Message",
        "summary": "Send a message to the given channel.",
        "operationId": "SendMessage",
        "requestBody": {
          "description": "Send a Message.",
          "required": true,
          "x-show-example-request": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "SMS",
                    "x-tab-id": "SMS",
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Text"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsSms"
                          },
                          {
                            "properties": {
                              "text": {
                                "description": "Text size limit: 599 characters for Latin characters and digits, and 299 characters for other characters like Cyrillic, Arabic, and Chinese.\n",
                                "example": "Hey! this is my awesome message!"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "title": "WhatsApp",
                    "x-tab-id": "WhatsApp",
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Text"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          },
                          {
                            "properties": {
                              "text": {
                                "description": "The text of message to send; limited to 4096 characters, including unicode.\n",
                                "example": "Hey! this is my awesome message!"
                              }
                            }
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Image"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Audio"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Video"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/File"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Location"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Contact"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/baseMessageType"
                          },
                          {
                            "title": "WA Templates",
                            "x-tab-id": "WA Templates",
                            "type": "object",
                            "required": [
                              "message_type",
                              "template"
                            ],
                            "description": "WhatsApp templates.",
                            "properties": {
                              "message_type": {
                                "type": "string",
                                "enum": [
                                  "template"
                                ],
                                "example": "template",
                                "description": "The type of message to send. You must provide `template` in this field"
                              },
                              "whatsapp": {
                                "type": "object",
                                "properties": {
                                  "policy": {
                                    "type": "string",
                                    "enum": [
                                      "deterministic"
                                    ],
                                    "description": "Policy for resolving what language template to use. As of right now the only valid choice is deterministic"
                                  },
                                  "locale": {
                                    "type": "string",
                                    "description": "The BCP 47 language of the template. See the WhatsApp documentation for supported languages."
                                  }
                                }
                              },
                              "template": {
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "You should provide template ID."
                                  },
                                  "parameters": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "pattern": "^(?!.*[$%#]).*$",
                                      "maxLength": 32,
                                      "errorMessage": {
                                        "pattern": "Forbidden to use characters"
                                      }
                                    },
                                    "description": "Template body variables array"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/baseMessageType"
                          },
                          {
                            "title": "Custom",
                            "x-tab-id": "Custom",
                            "type": "object",
                            "required": [
                              "message_type",
                              "custom"
                            ],
                            "description": "Custom messages",
                            "properties": {
                              "message_type": {
                                "type": "string",
                                "enum": [
                                  "custom"
                                ],
                                "example": "custom",
                                "description": "The type of message to send. You must provide `custom` in this field"
                              },
                              "custom": {
                                "type": "object",
                                "required": [
                                  "type",
                                  "template"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "template"
                                    ]
                                  },
                                  "template": {
                                    "type": "object",
                                    "properties": {
                                      "namespace": {
                                        "type": "string",
                                        "description": "The message template namespace"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Template ID"
                                      },
                                      "language": {
                                        "type": "object",
                                        "properties": {
                                          "code": {
                                            "type": "string",
                                            "description": "The BCP 47 language of the template.",
                                            "example": "en"
                                          },
                                          "policy": {
                                            "type": "string",
                                            "enum": [
                                              "deterministic"
                                            ],
                                            "description": "Policy for resolving what language template to use. As of right now the only valid choice is deterministic.",
                                            "example": "deterministic"
                                          }
                                        }
                                      },
                                      "components": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "header",
                                                "body"
                                              ],
                                              "description": "Set the type of variables header or body"
                                            },
                                            "parameters": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "type": {
                                                    "type": "string",
                                                    "enum": [
                                                      "text"
                                                    ],
                                                    "description": "Type of a variable"
                                                  },
                                                  "text": {
                                                    "type": "string",
                                                    "description": "Value of a variable"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsWhatsapp"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "title": "Viber",
                    "x-tab-id": "Viber",
                    "oneOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Text"
                          },
                          {
                            "properties": {
                              "text": {
                                "description": "The text of message to send; limited to 1000 characters, including unicode.\n"
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsViber"
                          }
                        ]
                      },
                      {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Image"
                          },
                          {
                            "$ref": "#/components/schemas/channelOptionsViber"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/chats/api/v1/messages",
                  "title": "Internal Server Error",
                  "detail": "Please contact support",
                  "instance_id": ""
                }
              }
            }
          }
        },
        "callbacks": {
          "message-status": {
            "https://your-domain.com/callback": {
              "post": {
                "summary": "Message Status",
                "operationId": "message-status",
                "x-example-path": "/webhooks/message-status",
                "description": "Webhooks provide information about events happening to the message such as whether it has been sent, delivered or rejected by the provider.",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/messageStatusWhatsApp"
                          },
                          {
                            "$ref": "#/components/schemas/messageStatusViber"
                          }
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/api/v1/customers": {
      "post": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Create customer",
        "operationId": "createCustomer",
        "x-example-path": "/customers",
        "description": "Create customer. If the customer create is successful, you will receive a response status of 200.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewCustomer"
                },
                "example": {
                  "id": "76fdcf10-2352-4da1-ab84-4b1f7ddf8cbd",
                  "chatbot_enabled": {
                    "03dbaafc-a2fe-4aca-9658-dc23dffbfc18": "ENABLED_AUTO"
                  },
                  "phone": "145044111206",
                  "name": "John Smith",
                  "country": "US",
                  "subscriptions": {},
                  "created": "2024-04-16T10:51:28.924Z",
                  "modified": "2024-04-26T13:33:44.677Z",
                  "chatbot_notification_received": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Bad Request",
                  "detail": "invalid payload",
                  "instance_id": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Unauthorized",
                  "detail": "Check that you're using the correct credentials",
                  "instance_id": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Internal Server Error",
                  "detail": "Contact customer support",
                  "instance_id": ""
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Get customers",
        "operationId": "getCustomers",
        "x-example-path": "/customers",
        "description": "Get a list of customers with customers data.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OffsetQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "$ref": "#/components/parameters/OrderQueryParam"
          },
          {
            "$ref": "#/components/parameters/SearchQueryParam"
          },
          {
            "$ref": "#/components/parameters/NameQueryParam"
          },
          {
            "$ref": "#/components/parameters/PhoneQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returning an array of customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Bad Request",
                  "detail": "invalid payload",
                  "instance_id": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Unauthorized",
                  "detail": "Check that you're using the correct credentials",
                  "instance_id": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Internal Server Error",
                  "detail": "Contact customer support",
                  "instance_id": ""
                }
              }
            }
          }
        }
      }
    },
    "/chats/api/v1/customers/{customer_id}": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Get customer",
        "operationId": "getCustomer",
        "x-example-path": "/customers/1",
        "description": "Retrieve customer data by providing either the customer ID or the customer phone number.",
        "parameters": [
          {
            "name": "customer_id or phone",
            "in": "path",
            "required": true,
            "description": "Customer ID or customer phone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response returning customer data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Bad Request",
                  "detail": "invalid payload",
                  "instance_id": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Unauthorized",
                  "detail": "Check that you're using the correct credentials",
                  "instance_id": ""
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Not Found",
                  "detail": "Customer not found",
                  "instance_id": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Internal Server Error",
                  "detail": "Contact customer support",
                  "instance_id": ""
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Update customer",
        "operationId": "updateCustomer",
        "x-example-path": "/customers/1",
        "description": "Update customer. If the customer update is successful, you will receive a response status of 204.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "description": "Customer ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "name": "CustomerName"
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated customer"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Bad Request",
                  "detail": "invalid payload",
                  "instance_id": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Unauthorized",
                  "detail": "Check that you're using the correct credentials",
                  "instance_id": ""
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Not Found",
                  "detail": "Customer not found",
                  "instance_id": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Internal Server Error",
                  "detail": "Contact customer support",
                  "instance_id": ""
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "tags": [
          "Customers"
        ],
        "summary": "Delete customer",
        "operationId": "deleteCustomer",
        "x-example-path": "/customers/1",
        "description": "Delete customer. If the customer delete is successful, you will receive a response status of 204.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "description": "Customer ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse400"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Bad Request",
                  "detail": "invalid payload",
                  "instance_id": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse401"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Unauthorized",
                  "detail": "Check that you're using the correct credentials",
                  "instance_id": ""
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse404"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Not Found",
                  "detail": "Customer not found",
                  "instance_id": ""
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse500"
                },
                "example": {
                  "type": "https://sms.messagewhiz.com/",
                  "title": "Internal Server Error",
                  "detail": "Contact customer support",
                  "instance_id": ""
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "apikey"
      }
    },
    "parameters": {
      "BlueSnap_credit_card": {
        "$id": "/credit_card",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "cardLastFourDigits",
          "cardType"
        ],
        "properties": {
          "cardType": {
            "type": "string"
          },
          "cardLastFourDigits": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "errorMessage": "Must be a four digits string"
          }
        },
        "description": ""
      },
      "BlueSnap_shopper_meta": {
        "$id": "/shopper_meta",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "firstName",
          "lastName"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "pattern": "^(([a-zA-z]+[.,~’'`\\-]*|[a-zA-z]*)\\s?)+$",
            "minLength": 1,
            "maxLength": 255
          },
          "lastName": {
            "type": "string",
            "pattern": "^(([a-zA-z]+[.,~’'`\\-]*|[a-zA-z]*)\\s?)+$",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "pattern": "^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{1,5})$",
            "minLength": 1,
            "maxLength": 255
          },
          "zip": {
            "type": "string",
            "pattern": "^(\\d+)",
            "minLength": 1,
            "maxLength": 10
          },
          "address": {
            "type": "string",
            "pattern": "^(\\w|\\s|\\d[^\"'`])+$",
            "minLength": 1,
            "maxLength": 255
          },
          "cardName": {
            "type": "string",
            "pattern": "^([A-Za-z0-9 ]+)?$",
            "maxLength": 20
          },
          "cardHash": {
            "type": "string",
            "pattern": "^[0-9]{10}[A-Z]{1}$"
          }
        },
        "description": ""
      },
      "CallbackLink_ip": {
        "$id": "/ip",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 7,
        "maxLength": 15,
        "pattern": "^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$",
        "errorMessage": {
          "isNotEmpty": "IP can't be empty",
          "pattern": "IP must be valid"
        },
        "description": ""
      },
      "CallbackLink_name": {
        "$id": "/name",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[^\\s]+(\\s+[^\\s]+)*$",
        "errorMessage": {
          "isNotEmpty": "Name cannot contain only whitespace or be empty",
          "pattern": "Name cannot contain whitespace at the start and end"
        },
        "description": ""
      },
      "CallbackLink_phone_number": {
        "$id": "/phone_number",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 6,
        "maxLength": 50,
        "errorMessage": {
          "isNotEmpty": "phone can't be empty"
        },
        "description": ""
      },
      "RecipientList_mapping": {
        "example": {
          "0": "phone_number",
          "1": "first_name",
          "2": "last_name"
        },
        "title": "Array of numbers to create a recipient list.",
        "type": "object",
        "additionalProperties": false,
        "anyOf": [
          {
            "required": [
              "0"
            ]
          },
          {
            "required": [
              "1"
            ]
          },
          {
            "required": [
              "2"
            ]
          },
          {
            "required": [
              "3"
            ]
          },
          {
            "required": [
              "4"
            ]
          },
          {
            "required": [
              "5"
            ]
          },
          {
            "required": [
              "6"
            ]
          },
          {
            "required": [
              "7"
            ]
          },
          {
            "required": [
              "8"
            ]
          },
          {
            "required": [
              "9"
            ]
          }
        ],
        "properties": {
          "0": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "1": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "2": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "3": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "4": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "5": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "6": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "7": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "8": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          },
          "9": {
            "$ref": "#/components/parameters/RecipientList_post_mapping_item"
          }
        },
        "description": "The markers to specify the type of stored data in the columns. Possible markers:\n\n- *phone_number* - required\n\n- *first_name*\n\n- *last_name*\n\n- *email*\n\n- *url*\n\n- *custom*\n\n(e.g `{\"0\":\"phone_number\", \"1\":\"first_name\"}`).\n\nThe mapping structure should correspond to the structure presented in the uploaded file.\n\nfirst_name, last_name - max length is 50 symbols, email, url - 255, other - 5000.\n\nThe metadata stored in these marked columns might be used as tokens to send personalized messages."
      },
      "RecipientList_name": {
        "type": "string",
        "example": "MyRecipientsList",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "description": "Name of the created recipient list"
      },
      "RecipientList_name_item": {
        "$id": "/name/item",
        "$async": false,
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "isNotEmpty": true,
        "description": "Item for the created recipient list"
      },
      "RecipientList_patch/enabled_item": {
        "$id": "/patch/enabled_item",
        "$async": false,
        "type": "boolean",
        "description": ""
      },
      "RecipientList_post_mapping_item": {
        "$id": "/post_mapping_item",
        "$async": false,
        "type": "string",
        "description": "The markers to specify the type of stored data in the columns"
      },
      "SenderList_listID": {
        "schema": {
          "description": "Sender List Id",
          "type": "integer"
        },
        "name": "listID",
        "in": "query",
        "required": true,
        "errorMessage": {
          "required": "Senders ids is required param",
          "minItems": "Senders ids cannot be empty!",
          "uniqueItems": "Senders id must be unique"
        },
        "description": "Senders ids"
      },
      "SenderList_name": {
        "description": "Sender List name",
        "example": "FirstSenderList",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[^\\s]+(\\s+[^\\s]+)*$",
        "errorMessage": {
          "isNotEmpty": "Name cannot contain only whitespace or be empty",
          "pattern": "Name cannot contain whitespace at the start and end"
        }
      },
      "SenderList_name_item": {
        "$async": false,
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "isNotEmpty": true,
        "description": "SenderList name"
      },
      "SenderList_patch_enabled_item": {
        "$id": "/patch/enabled_item",
        "$async": false,
        "type": "boolean",
        "description": ""
      },
      "SenderList_post_mapping_item": {
        "$id": "/post_mapping_item",
        "$async": false,
        "type": "string",
        "enum": [
          "name"
        ],
        "description": ""
      },
      "SenderList_senderIds": {
        "example": [
          4324,
          4321
        ],
        "type": "array",
        "minItems": 1,
        "uniqueItems": true,
        "items": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4294967295
        },
        "errorMessage": {
          "required": "Senders ids is required param",
          "minItems": "Senders ids cannot be empty!",
          "uniqueItems": "Senders id must be unique"
        },
        "description": "Senders ids list"
      },
      "UnsubscribeList_mapping": {
        "description": "The markers to specify the type of stored data in the columns. Possible markers:\n\n- phone_number - required\n - first_name\n - last_name\n - email\n - url\n - custom\n\n(e.g `{\"0\":\"phone_number\", \"1\":\"first_name\"}`).\n\nThe mapping structure should correspond to the structure presented in the uploaded file.\n\nThe metadata stored in these marked columns might be used as tokens to send personalized messages.",
        "$id": "/mapping",
        "$async": false,
        "type": "object",
        "additionalProperties": false,
        "anyOf": [
          {
            "required": [
              "0"
            ]
          },
          {
            "required": [
              "1"
            ]
          },
          {
            "required": [
              "2"
            ]
          },
          {
            "required": [
              "3"
            ]
          },
          {
            "required": [
              "4"
            ]
          },
          {
            "required": [
              "5"
            ]
          },
          {
            "required": [
              "6"
            ]
          },
          {
            "required": [
              "7"
            ]
          },
          {
            "required": [
              "8"
            ]
          },
          {
            "required": [
              "9"
            ]
          }
        ],
        "properties": {
          "0": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "1": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "2": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "3": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "4": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "5": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "6": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "7": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "8": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          },
          "9": {
            "$ref": "#/components/parameters/UnsubscribeList_post_mapping_item"
          }
        }
      },
      "UnsubscribeList_name": {
        "description": "The name of the Unsubscribe List",
        "$id": "/name",
        "$async": false,
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50
      },
      "UnsubscribeList_number": {
        "$id": "/number",
        "$async": false,
        "type": "string",
        "isNotEmpty": true,
        "pattern": "^\\+?\\d{10,15}$",
        "description": "Phone number"
      },
      "UnsubscribeList_numbers": {
        "$id": "/numbers",
        "$async": false,
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "integer"
        },
        "default": [],
        "example": [
          "380502222233",
          "380643333322"
        ],
        "description": "Array of phone numbers that the Unsubscribe List consists of"
      },
      "UnsubscribeList_post_mapping_item": {
        "$id": "#/components/parameters/UnsubscribeList_post_mapping_item",
        "$async": false,
        "type": "string",
        "enum": [
          "phone_number"
        ],
        "description": ""
      },
      "Users_poolId": {
        "$id": "/poolId",
        "type": [
          "string",
          "null"
        ],
        "isNotEmpty": true,
        "minLength": 24,
        "maxLength": 36,
        "errorMessage": {
          "type": "Please choose a valid pool"
        },
        "description": ""
      },
      "apikey": {
        "schema": {
          "type": "string"
        },
        "example": "YOUR_COMPANY_API_KEY",
        "name": "apikey",
        "in": "header",
        "description": "You company api key",
        "required": true
      },
      "broadcast_broadcast_id": {
        "type": "integer",
        "description": "Broadcast ID"
      },
      "broadcast_broadcast_type_11": {
        "description": "Broadcast type for Base",
        "type": "integer",
        "enum": [
          11
        ]
      },
      "broadcast_broadcast_type_12": {
        "description": "Broadcast type for Smart",
        "type": "integer",
        "enum": [
          12
        ]
      },
      "broadcast_broadcast_type_13": {
        "description": "Broadcast type for Text Optimization",
        "type": "integer",
        "enum": [
          13
        ]
      },
      "broadcast_campaign_id": {
        "description": "An ID of a previously created active Campaign",
        "type": "integer",
        "example": 445
      },
      "broadcast_company_name": {
        "type": "string",
        "maxLength": 255,
        "description": "Company name"
      },
      "broadcast_conversion_threshold": {
        "description": "Upon reaching this conversion rate the main segment is sent with the text from the test segment that emerged as the winner or achieved the specified conversion rate (e.g. value 50 means 50% conversion)",
        "minimum": 0.1,
        "maximum": 100,
        "type": "number"
      },
      "broadcast_custom_parameter": {
        "type": "string",
        "maxLength": 160,
        "description": "Custom parameter"
      },
      "broadcast_custom_unsubscribe_destination": {
        "type": "string",
        "minLength": 0,
        "maxLength": 1024,
        "default": "",
        "description": ""
      },
      "broadcast_delay": {
        "type": "integer",
        "minimum": 0,
        "description": "The broadcast will be sent after the trigger event occurs + time of the indicated delay in minutes"
      },
      "broadcast_eb_type_CTR": {
        "type": "string",
        "enum": [
          "CTR"
        ],
        "description": "CTR Threshold Smart Broadcast"
      },
      "broadcast_eb_type_manual": {
        "description": "Eb_type for Standard",
        "type": "string",
        "enum": [
          "manual"
        ]
      },
      "broadcast_exp_date": {
        "example": "2021-09-25 13:55:58",
        "description": "The date when the broadcasts will expire (e.g. `2021-09-25 13:55:58`)",
        "type": "string"
      },
      "broadcast_filter": {
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "default": "disabled"
        },
        "name": "filter",
        "in": "query",
        "description": "filtering by the specific broadcast field.  Filter has a specific format:\n\n`?filter={parameter_name}={parameter_value},{parameter_name}...`\n\nAvailable parameters are:\n\n*name* - pattern for the broadcast name (the actual name will contain the given string)\n\n*type* - type of the broadcast\n\n - *10* - single broadcast\n\n - *11* - basic broadcast\n\n - *12* - smart broadcast\n\n - *13* - text optimisation broadcast\n\n*parent_id* - parent_id of the broadcast (type is automatically set to 3)\n\n*start_date* - start of the date range by which to filter\n\n*end_date* - end of the date range by which to filter\n\n*filterBy* - determines by which date broadcasts will be filtered (create date or send date)\n\n*create_date* - filters by the date of broadcast creation\n\n*send_date* - filters by the broadcasts send date\n\nFor example filter with such format:\n\n`?filter=name=sample,type=10,type=12,filterBy=create_date,start_date=06/01/2021 12:00 AM`\n\nWill find all the smart broadcasts (both approaches) that was created later than 06/01/2021 12:00 AM which name contains sample substring"
      },
      "broadcast_first_segment_size": {
        "description": "Count of the recipients whose messages will be sent within the first segment",
        "type": "integer",
        "minimum": 1
      },
      "broadcast_interval_time": {
        "type": "integer",
        "minimum": 60,
        "description": "Interval time"
      },
      "broadcast_message_bodies": {
        "type": "array",
        "minItems": 2,
        "maxItems": 5,
        "errorMessage": {
          "minItems": "Please add at least 2 message texts"
        },
        "items": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100000
        },
        "description": "Array of message bodies"
      },
      "broadcast_message_body": {
        "example": "Message body with {{link:123}}",
        "description": "Text of the message that the recipient will see; can contain text, links, and tokens",
        "type": "string",
        "minLength": 1,
        "maxLength": 100000
      },
      "broadcast_name": {
        "description": "Broadcast name",
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "broadcast_next_segment_size": {
        "description": "Count of the recipients whose messages will be sent within the next segments of a CTR Threshold broadcast",
        "type": "integer",
        "minimum": 1
      },
      "broadcast_period": {
        "type": "number",
        "minimum": 5,
        "maximum": 1440,
        "errorMessage": {
          "minimum": "Please note that the maxim value is 24 hours and minimum is 5 minutes",
          "maximum": "Please note that the maxim value is 24 hours and minimum is 5 minutes"
        },
        "description": "Waiting time for CTR of test segments, after which the main segment will be sent, in case that the CTR condition is accomplished"
      },
      "broadcast_recipient": {
        "example": "380567890234",
        "type": "string",
        "minLength": 10,
        "maxLength": 15,
        "pattern": "^\\d{10,15}$",
        "errorMessage": {
          "pattern": "Only numeric value can be used"
        },
        "description": "Phone number of the recipient"
      },
      "broadcast_recipient_cap": {
        "description": "Count of the recipients whose messages will be sent within the first (current if eb_type is manual) segment",
        "type": [
          "integer",
          "string"
        ],
        "pattern": "no_limit",
        "default": "no_limit",
        "minimum": 1
      },
      "broadcast_recipient_list_ids": {
        "description": "IDs of previously created Recipient Lists",
        "type": "string",
        "minLength": 0,
        "maxLength": 1000,
        "example": "2,3,4"
      },
      "broadcast_recipients": {
        "type": "array",
        "items": {
          "type": "object"
        },
        "minLength": 1,
        "maxLength": 100000,
        "description": "Json file with all needed data (phone number, first name, last name, URL ect. per each recipient)"
      },
      "broadcast_send_date": {
        "description": "Specific date and time for sending the broadcast (e.g.\"2020-07-31T14:25:49.614Z\")",
        "type": "string",
        "format": "date-time"
      },
      "broadcast_send_immediately_when_ctr_done": {
        "description": "Send immediately when CTR done",
        "type": "boolean",
        "example": true
      },
      "broadcast_sender": {
        "type": "string",
        "description": "Name of the Sender"
      },
      "broadcast_sender_id": {
        "example": 321,
        "type": "integer",
        "description": "ID of previously created sender"
      },
      "broadcast_sender_ids": {
        "description": "IDs of previously created Senders",
        "type": "string",
        "minLength": 0,
        "maxLength": 1000,
        "pattern": "^[0-9]+(,[0-9]+)*$",
        "errorMessage": {
          "pattern": "Only numeric sender_ids separated by comma can be used"
        }
      },
      "broadcast_sender_list_ids": {
        "description": "IDs of previously created Sedners Lists",
        "type": "string",
        "minLength": 0,
        "maxLength": 1000,
        "pattern": "^[0-9]+(,[0-9]+)*$",
        "errorMessage": {
          "pattern": "Only numeric sender_list_ids separated by comma can be used"
        }
      },
      "broadcast_sender_list_ids_to": {
        "type": "array",
        "minItems": 2,
        "maxItems": 5,
        "errorMessage": {
          "minItems": "Please add at least 2 sender list ids"
        },
        "items": {
          "type": "number"
        },
        "description": "IDs of previously created sender lists"
      },
      "broadcast_template_id": {
        "example": 332211,
        "description": "Id of the message template, if you want to use a specific template for message body",
        "type": "integer"
      },
      "broadcast_template_ids": {
        "example": "2,3,4,5,6",
        "description": "Array of template id, may be used instead of `message_bodies`",
        "type": "string"
      },
      "broadcast_test_segment_size": {
        "type": "number",
        "minimum": 50,
        "errorMessage": {
          "minimum": "test_segment_size should be bigger or relevant 50"
        },
        "description": "Amount of recipients in each test segment"
      },
      "broadcast_trigger_id": {
        "type": "integer",
        "description": "Id of the trigger that will be used to send the broadcast (may be used instead of `send_now`)"
      },
      "broadcast_type": {
        "type": "integer",
        "description": "Type of the broadcast"
      },
      "broadcast_type_10": {
        "description": "Broadcast type for Single",
        "type": "integer",
        "enum": [
          10
        ]
      },
      "broadcast_unsubscriber_list_ids": {
        "description": "IDs of previously created Unsubscribe Lists",
        "type": "string",
        "minLength": 0,
        "maxLength": 1000,
        "example": "321,456,768"
      },
      "broadcast_utc_offset": {
        "description": "Specific time zone, in minutes (min -720, max +720, e.g. for UTC+0 the value is 0)",
        "type": "integer",
        "minimum": -720,
        "maximum": 720
      },
      "campaign_end_date": {
        "type": "string",
        "format": "date-time",
        "description": "Campaign end date"
      },
      "campaign_name": {
        "example": "MyCampaign",
        "$id": "/name",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[^\\s']+(\\s+[^\\s]+)*$",
        "errorMessage": {
          "isNotEmpty": "Name cannot contain only whitespace or be empty",
          "pattern": "Please pay attention that in campaign name character ' and spaces at the beginning and at the end can not be used."
        },
        "description": "Campaign name"
      },
      "campaign_start_date": {
        "type": "string",
        "format": "date-time",
        "description": "Campaign start date"
      },
      "file": {
        "description": "An absolute path to the file on your device",
        "example": "/Users/userName/dir/recipients.csv",
        "type": "file"
      },
      "filter_enabled": {
        "schema": {
          "type": "boolean"
        },
        "name": "enabled",
        "in": "query",
        "description": "Fetch only active items"
      },
      "filter_filter": {
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "default": "disabled"
        },
        "name": "filter",
        "in": "query",
        "description": "filtering by the specific item field.  Filter has a specific format:\n\n`?filter={parameter_name}={parameter_value},{parameter_name}...`"
      },
      "filter_limit": {
        "schema": {
          "minimum": 1,
          "maximum": 100,
          "default": 10,
          "type": "integer"
        },
        "name": "limit",
        "in": "query",
        "description": "The number of items to fetch"
      },
      "filter_orderby": {
        "schema": {
          "type": "string",
          "maxLength": 50,
          "default": "create_date DESC"
        },
        "name": "orderby",
        "in": "query",
        "description": "Criteria and order by which the list will be sorted"
      },
      "filter_start": {
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0,
          "example": 0
        },
        "name": "start",
        "in": "query",
        "description": "The number of items to skip"
      },
      "id": {
        "schema": {
          "description": "Item Id",
          "type": "integer"
        },
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Item ID"
      },
      "item_enabled": {
        "example": true,
        "schema": {
          "type": "boolean",
          "default": true
        },
        "name": "enabled",
        "in": "query",
        "description": "`true` set item active, `false` - exclude for searches, submits and other activities"
      },
      "link_filter": {
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "default": "disabled"
        },
        "name": "filter",
        "in": "query",
        "description": "Filtering by the specific link name/url "
      },
      "linklist_filter": {
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "default": "disabled"
        },
        "name": "filter",
        "in": "query",
        "description": "Filtering by the specific link list name"
      },
      "linklist_linkIds": {
        "description": "Array of link lists ids",
        "type": "array",
        "items": {
          "type": "integer"
        }
      },
      "linklist_links": {
        "description": "An array of link objects",
        "type": "array",
        "items": {
          "required": [
            "url",
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "isNotEmpty": true,
              "minLength": 1,
              "maxLength": 50,
              "pattern": "^[^\\s]+(\\s+[^\\s]+)*$",
              "errorMessage": {
                "isNotEmpty": "Name cannot contain only whitespace or be empty",
                "pattern": "Name cannot contain whitespace at the start and end"
              }
            },
            "url": {
              "type": "string",
              "format": "uri",
              "isNotEmpty": true,
              "minLength": 1,
              "maxLength": 255,
              "errorMessage": {
                "isNotEmpty": "URL cannot contain only whitespace or be empty"
              }
            }
          }
        }
      },
      "linklist_mapping": {
        "description": "The markers to specify the type of stored data in the columns. The mapping structure should correspond to the structure presented in the uploaded file/array",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "0",
          "1"
        ],
        "properties": {
          "0": {
            "type": "string",
            "enum": [
              "name",
              "url"
            ]
          },
          "1": {
            "type": "string",
            "enum": [
              "name",
              "url"
            ]
          }
        }
      },
      "linklist_name": {
        "name": "name",
        "description": "Link List name",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[^\\s]+(\\s+[^\\s]+)*$",
        "errorMessage": {
          "isNotEmpty": "Name cannot contain only whitespace or be empty",
          "pattern": "Name cannot contain whitespace at the start and end"
        }
      },
      "platform_based_links": {
        "description": "Links based on detected user platform",
        "type": "object",
        "example": {
          "bot_redirect": "https://foot32.com/desktop",
          "preview_url": "https://foot12.com",
          "ios": "https://foot12.com/6rt543"
        },
        "properties": {
          "bot_redirect": {
            "type": "string",
            "description": "The recipients who click the link from the PC, will be redirected to this link"
          },
          "preview_url": {
            "type": "string",
            "description": "Will be used to show the preview of your main link"
          },
          "ios": {
            "type": "string",
            "description": "The recipients who click the link from the ios devices, will be redirected to this link"
          },
          "adnriod": {
            "type": "string",
            "description": "The recipients who click the link from the android devices, will be redirected to this link"
          }
        }
      },
      "sender_name": {
        "description": "Sender  name",
        "example": "FirstSender",
        "type": "string",
        "isNotEmpty": true,
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[^\\s]+(\\s+[^\\s]+)*$",
        "errorMessage": {
          "isNotEmpty": "Name cannot contain only whitespace or be empty",
          "pattern": "Name cannot contain whitespace at the start and end"
        }
      },
      "spinner_name": {
        "description": "Word Spinner name",
        "example": "Fit32",
        "type": "string"
      },
      "spinner_words": {
        "description": "An array of word synonyms",
        "example": [
          "wo",
          "three",
          "spinner",
          "greeetinnngsss",
          "four",
          "test",
          "one",
          "five"
        ],
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "trigger_filter": {
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "default": "disabled"
        },
        "name": "filter",
        "in": "query",
        "description": "filtering by the specific trigger name"
      }
    },
    "responses": {
      "RecipientListAdd": {
        "content": {
          "application/json": {
            "example": {
              "errorCode": 0,
              "errorMessage": "",
              "errorType": "",
              "executionTime": 0.012664016,
              "result": {
                "inserted": 2,
                "total": 2,
                "wrong": 0,
                "duplicate": 0,
                "recipient_list_id": 267628
              }
            }
          }
        }
      },
      "RecipientListPreview": {
        "content": {
          "application/json": {
            "example": {
              "data": [
                [
                  "phone_number",
                  "first_name"
                ],
                [
                  "6593333311",
                  "Anthony"
                ],
                [
                  "6593333322",
                  "Bob"
                ],
                [
                  "6593333333",
                  "Jonathan"
                ],
                [
                  "6593333344",
                  "Alex"
                ]
              ],
              "isAllNum": [
                true,
                false
              ],
              "isExceedLength50": [
                false,
                false
              ],
              "isExceedLength255": [
                false,
                false
              ],
              "isExceedLength5000": [
                false,
                false
              ]
            },
            "schema": {
              "type": "object",
              "properties": {
                "errorCode": {
                  "type": "integer",
                  "default": 0
                },
                "errorMessage": {
                  "type": "string",
                  "default": ""
                },
                "errorType": {
                  "type": "string",
                  "default": ""
                },
                "executionTime": {
                  "type": "float",
                  "default": 0.01234
                },
                "result": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CampaignUserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "campaign_id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "company_id": {
            "type": "integer"
          }
        }
      },
      "campaign_create": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "is_default": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "is_default": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "type": "boolean"
          },
          "userList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "campaign_id": {
                  "type": "integer"
                },
                "user_id": {
                  "type": "integer"
                },
                "company_id": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "DeliveryReport": {
        "type": "object",
        "properties": {
          "broadcast_id": {
            "type": "integer"
          },
          "sent": {
            "type": "integer"
          },
          "delivered": {
            "type": "integer"
          },
          "undelivered": {
            "type": "integer"
          },
          "rejected": {
            "type": "integer"
          },
          "expired": {
            "type": "integer"
          },
          "failed": {
            "type": "integer"
          }
        }
      },
      "SimpleSuccess": {
        "description": "Successful operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errorCode": {
                  "type": "integer",
                  "default": 0
                },
                "errorMessage": {
                  "type": "string",
                  "default": ""
                },
                "errorType": {
                  "type": "string",
                  "default": ""
                },
                "executionTime": {
                  "type": "float",
                  "default": 0.01234
                },
                "result": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "example": {
              "errorCode": 0,
              "errorMessage": "",
              "errorType": "",
              "executionTime": 0.012125844,
              "result": true
            }
          }
        }
      }
    },
    "requestBodies": {
      "Broadcasts_get": {
        "type": "object",
        "properties": {
          "start": {
            "$ref": "#/components/parameters/filter_start"
          },
          "limit": {
            "$ref": "#/components/parameters/filter_limit"
          },
          "filter": {
            "$ref": "#/components/parameters/filter_filter"
          }
        }
      },
      "Broadcasts_list": {
        "$id": "list",
        "$async": false,
        "type": "object",
        "required": [],
        "properties": {
          "$ref": "#/components/parameters/filter_filter",
          "start": {
            "$ref": "#/components/parameters/filter_start"
          },
          "limit": {
            "$ref": "#/components/parameters/filter_limit"
          }
        }
      },
      "Broadcasts_admin": {
        "$id": "admin",
        "$async": false,
        "type": "object",
        "required": [
          "limit",
          "start"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/parameters/filter_start"
          },
          "limit": {
            "$ref": "#/components/parameters/filter_limit"
          },
          "filter": {
            "$ref": "#/components/parameters/filter_filter"
          },
          "company_name": {
            "$ref": "#/components/parameters/broadcast_company_name"
          },
          "orderby": {
            "$ref": "#/components/parameters/filter_orderby"
          }
        }
      },
      "Broadcasts_preview": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/parameters/broadcast_type"
          },
          "recipient": {
            "$ref": "#/components/parameters/broadcast_recipient"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "template_ids": {
            "$ref": "#/components/parameters/broadcast_template_ids"
          }
        }
      },
      "Broadcasts_submit_common": {
        "type": "object",
        "required": [
          "name",
          "campaign_id",
          "sender_ids",
          "recipient_list_ids"
        ],
        "properties": {
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          }
        },
        "additionalProperties": false
      },
      "Broadcasts_submitBase": {
        "type": "object",
        "required": [
          "broadcast_type",
          "campaign_id",
          "message_body",
          "name",
          "recipient_list_ids",
          "sender_ids"
        ],
        "properties": {
          "broadcast_type": {
            "description": "Broadcast type for Base",
            "type": "integer",
            "enum": [
              11
            ]
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "delay": {
            "$ref": "#/components/parameters/broadcast_delay"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "trigger_id": {
            "$ref": "#/components/parameters/broadcast_trigger_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          }
        },
        "example": {
          "name": "broadcast",
          "campaign_id": 1,
          "broadcast_type": 11,
          "unsubscriber_list_ids": "",
          "sender_ids": "23",
          "recipient_list_ids": "12",
          "message_body": "broadcast message"
        }
      },
      "Broadcasts_submitSmart_Standart": {
        "$id": "submitSmart",
        "$async": false,
        "type": "object",
        "required": [
          "broadcast_type",
          "campaign_id",
          "message_body",
          "name",
          "recipient_list_ids",
          "eb_type",
          "sender_ids",
          "first_segment_size"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_12"
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "eb_type": {
            "$ref": "#/components/parameters/broadcast_eb_type_manual"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          }
        },
        "example": {
          "name": "manual",
          "campaign_id": 1,
          "broadcast_type": 12,
          "unsubscriber_list_ids": "",
          "sender_ids": "23",
          "recipient_list_ids": "12",
          "message_body": "man message",
          "send_date": "2021-03-01T12:41:38.837Z",
          "utc_offset": 120,
          "eb_type": "manual",
          "first_segment_size": "3"
        }
      },
      "Broadcasts_submitSmart_CTR": {
        "type": "object",
        "required": [
          "broadcast_type",
          "campaign_id",
          "message_body",
          "name",
          "recipient_list_ids",
          "eb_type",
          "first_segment_size",
          "next_segment_size",
          "conversion_threshold",
          "sender_ids"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_12"
          },
          "eb_type": {
            "$ref": "#/components/parameters/broadcast_eb_type_CTR"
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "conversion_threshold": {
            "$ref": "#/components/parameters/broadcast_conversion_threshold"
          },
          "next_segment_size": {
            "$ref": "#/components/parameters/broadcast_next_segment_size"
          },
          "exp_date": {
            "$ref": "#/components/parameters/broadcast_exp_date"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          }
        },
        "example": {
          "name": "CTR",
          "campaign_id": 57568,
          "broadcast_type": 12,
          "eb_type": "CTR",
          "sender_ids": "143871",
          "recipient_list_ids": 109242,
          "message_body": "broadcast message {{link:132451}}",
          "first_segment_size": 1,
          "next_segment_size": 1,
          "conversion_threshold": 25
        }
      },
      "Broadcasts_submit_message_body": {
        "type": "object",
        "required": [
          "name",
          "campaign_id",
          "sender_ids",
          "recipient_list_ids",
          "message_body"
        ],
        "properties": {
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          }
        },
        "additionalProperties": false
      },
      "Broadcasts_submitTextOptimization": {
        "type": "object",
        "required": [
          "broadcast_type",
          "campaign_id",
          "name",
          "period",
          "recipient_cap",
          "recipient_list_ids",
          "sender_ids",
          "message_bodies",
          "conversion_threshold",
          "test_segment_size"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_13"
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "period": {
            "$ref": "#/components/parameters/broadcast_period"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "test_segment_size": {
            "$ref": "#/components/parameters/broadcast_test_segment_size"
          },
          "conversion_threshold": {
            "$ref": "#/components/parameters/broadcast_conversion_threshold"
          },
          "message_bodies": {
            "$ref": "#/components/parameters/broadcast_message_bodies"
          },
          "send_immediately_when_ctr_done": {
            "$ref": "#/components/parameters/broadcast_send_immediately_when_ctr_done"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "sender_list_ids_to": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids_to"
          },
          "template_ids": {
            "$ref": "#/components/parameters/broadcast_template_ids"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          }
        },
        "example": {
          "name": "Text optimisation",
          "campaign_id": 1,
          "test_segment_size": "100",
          "broadcast_type": 13,
          "recipient_list_ids": "79419",
          "sender_ids": "144548",
          "unsubscriber_list_ids": "",
          "utc_offset": 180,
          "message_bodies": [
            "Text 1 {{link:132451}}",
            "Text 2 {{link:132451}}"
          ],
          "conversion_threshold": "25",
          "period": 120,
          "recipient_cap": "no_limit",
          "send_immediately_when_ctr_done": false
        }
      },
      "Broadcasts_estimateTextOptimization": {
        "type": "object",
        "required": [
          "test_segment_size",
          "recipient_list_ids",
          "message_bodies",
          "broadcast_type"
        ],
        "properties": {
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "test_segment_size": {
            "$ref": "#/components/parameters/broadcast_test_segment_size"
          },
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_12"
          },
          "message_bodies": {
            "$ref": "#/components/parameters/broadcast_message_bodies"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          },
          "template_ids": {
            "$ref": "#/components/parameters/broadcast_template_ids"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "send_immediately_when_ctr_done": {
            "$ref": "#/components/parameters/broadcast_send_immediately_when_ctr_done"
          }
        },
        "example": {
          "test_segment_size": "50",
          "broadcast_type": 13,
          "recipient_list_ids": "129161",
          "unsubscriber_list_ids": "",
          "message_bodies": [
            "{{link_list:36238}} Test segment 1",
            "{{link:223955}} Test segment 2"
          ]
        }
      },
      "Broadcasts_estimate": {
        "$id": "estimate",
        "$async": false,
        "type": "object",
        "required": [],
        "properties": {
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "template_ids": {
            "$ref": "#/components/parameters/broadcast_template_ids"
          },
          "recipient": {
            "$ref": "#/components/parameters/broadcast_recipient"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "next_segment_size": {
            "$ref": "#/components/parameters/broadcast_next_segment_size"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          }
        }
      },
      "Broadcasts_estimate_common": {
        "$id": "estimate",
        "$async": false,
        "type": "object",
        "required": [
          "message_body"
        ],
        "properties": {
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "recipient": {
            "$ref": "#/components/parameters/broadcast_recipient"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          }
        }
      },
      "Broadcasts_estimate_base": {
        "type": "object",
        "required": [
          "broadcast_type",
          "message_body",
          "recipient_list_ids"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_11"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          }
        },
        "example": {
          "broadcast_type": 11,
          "recipient_list_ids": "288696",
          "unsubscriber_list_ids": "",
          "message_body": "sample"
        }
      },
      "Broadcasts_estimate_base_response_example": {
        "broadcast_type": 11,
        "recipient_list_ids": "288696",
        "unsubscriber_list_ids": "",
        "message_body": "sample"
      },
      "Broadcasts_estimate_TO_response_example": {
        "test_segment_size": "50",
        "broadcast_type": 13,
        "recipient_list_ids": "129161",
        "unsubscriber_list_ids": "",
        "message_bodies": [
          "{{link_list:36238}} Test segment 1",
          "{{link:223955}} Test segment 2"
        ]
      },
      "Broadcasts_estimate_standard": {
        "type": "object",
        "required": [
          "broadcast_type",
          "eb_type",
          "first_segment_size",
          "message_body",
          "recipient_list_ids"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_12"
          },
          "eb_type": {
            "$ref": "#/components/parameters/broadcast_eb_type_manual"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          }
        },
        "example": {
          "broadcast_type": 12,
          "message_body": "message  {{link:233648}} ",
          "eb_type": "manual",
          "first_segment_size": "10",
          "time_limit": 0,
          "recipient_cap": "no_limit",
          "recipient_list_ids": "132885",
          "unsubscriber_list_ids": ""
        }
      },
      "Broadcasts_estimate_CTR": {
        "type": "object",
        "required": [
          "broadcast_type",
          "eb_type",
          "message_body",
          "first_segment_size",
          "next_segment_size",
          "recipient_list_ids"
        ],
        "properties": {
          "broadcast_type": {
            "$ref": "#/components/parameters/broadcast_broadcast_type_12"
          },
          "eb_type": {
            "$ref": "#/components/parameters/broadcast_eb_type_CTR"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "next_segment_size": {
            "$ref": "#/components/parameters/broadcast_next_segment_size"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          }
        },
        "example": {
          "broadcast_type": 12,
          "message_body": "message  {{link:233248}} ",
          "eb_type": "CTR",
          "first_segment_size": "15",
          "next_segment_size": "25",
          "recipient_list_ids": "132995",
          "unsubscriber_list_ids": ""
        }
      },
      "Broadcasts_edit": {
        "$id": "edit",
        "$async": false,
        "type": "object",
        "required": [
          "broadcast_id"
        ],
        "properties": {
          "broadcast_id": {
            "$ref": "#/components/parameters/broadcast_broadcast_id"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "campaign_id": {
            "$ref": "#/components/parameters/broadcast_campaign_id"
          },
          "sender_id": {
            "$ref": "#/components/parameters/broadcast_sender_id"
          },
          "sender_ids": {
            "$ref": "#/components/parameters/broadcast_sender_ids"
          },
          "sender_list_ids": {
            "$ref": "#/components/parameters/broadcast_sender_list_ids"
          },
          "recipient": {
            "$ref": "#/components/parameters/broadcast_recipient"
          },
          "recipient_list_ids": {
            "$ref": "#/components/parameters/broadcast_recipient_list_ids"
          },
          "unsubscriber_list_ids": {
            "$ref": "#/components/parameters/broadcast_unsubscriber_list_ids"
          },
          "custom_unsubscribe_destination": {
            "$ref": "#/components/parameters/broadcast_custom_unsubscribe_destination"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          },
          "template_id": {
            "$ref": "#/components/parameters/broadcast_template_id"
          },
          "delay": {
            "$ref": "#/components/parameters/broadcast_delay"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          },
          "interval_time": {
            "$ref": "#/components/parameters/broadcast_interval_time"
          },
          "exp_date": {
            "$ref": "#/components/parameters/broadcast_exp_date"
          },
          "conversion_threshold": {
            "$ref": "#/components/parameters/broadcast_conversion_threshold"
          },
          "first_segment_size": {
            "$ref": "#/components/parameters/broadcast_first_segment_size"
          },
          "next_segment_size": {
            "$ref": "#/components/parameters/broadcast_next_segment_size"
          },
          "recipient_cap": {
            "$ref": "#/components/parameters/broadcast_recipient_cap"
          }
        }
      },
      "Broadcasts_combinedsubmit": {
        "$id": "combinedsubmit",
        "$async": false,
        "type": "object",
        "required": [
          "recipients",
          "message_body"
        ],
        "properties": {
          "recipients": {
            "$ref": "#/components/parameters/broadcast_recipients"
          },
          "name": {
            "$ref": "#/components/parameters/broadcast_name"
          },
          "sender": {
            "$ref": "#/components/parameters/broadcast_sender"
          },
          "sender_id": {
            "$ref": "#/components/parameters/broadcast_sender_id"
          },
          "send_date": {
            "$ref": "#/components/parameters/broadcast_send_date"
          },
          "utc_offset": {
            "$ref": "#/components/parameters/broadcast_utc_offset"
          },
          "message_body": {
            "$ref": "#/components/parameters/broadcast_message_body"
          }
        }
      },
      "Broadcasts_deleteCancelledAction": {
        "$id": "deleteCancelledAction",
        "$async": false,
        "type": "object",
        "required": [],
        "properties": {
          "broadcast_id": {
            "$ref": "#/components/parameters/broadcast_broadcast_id"
          }
        }
      }
    },
    "schemas": {
      "CustomTextTemplate": {
        "title": "Text template",
        "type": "object",
        "required": [
          "type",
          "text",
          "title"
        ],
        "properties": {
          "type": {
            "const": "TEXT",
            "description": "Message type",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Template title",
            "maxLength": 64,
            "minLength": 1
          },
          "text": {
            "type": "string",
            "description": "Template text",
            "maxLength": 500,
            "minLength": 1
          }
        }
      },
      "CustomCardTemplate": {
        "title": "Card template",
        "type": "object",
        "required": [
          "type",
          "description",
          "title"
        ],
        "properties": {
          "type": {
            "const": "CARD",
            "description": "Message type",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Card title",
            "maxLength": 25,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Card description",
            "maxLength": 25,
            "minLength": 1
          },
          "media": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/cardVideoSchema"
              },
              {
                "$ref": "#/components/schemas/cardImageSchema"
              }
            ]
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/suggestionSchema"
            },
            "minItems": 1,
            "maxItems": 4,
            "description": "Choice options of card"
          }
        }
      },
      "CustomListTemplate": {
        "type": "object",
        "title": "List Template",
        "required": [
          "type",
          "text",
          "suggestions"
        ],
        "properties": {
          "type": {
            "const": "LIST",
            "description": "Message type",
            "type": "string"
          },
          "text": {
            "type": "string",
            "description": "Button menu text",
            "maxLength": 64,
            "minLength": 1
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/buttonMenuSuggestionSchema"
            },
            "minItems": 1,
            "maxItems": 4,
            "description": "Choice options of button menu"
          }
        }
      },
      "CustomCarouselTemplate": {
        "type": "object",
        "required": [
          "type",
          "title",
          "description",
          "content"
        ],
        "properties": {
          "type": {
            "const": "CAROUSEL",
            "description": "Message type",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Carousel title",
            "maxLength": 50,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Carousel description",
            "maxLength": 50,
            "minLength": 1
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/carouselContentItemSchema"
            },
            "minItems": 1,
            "maxItems": 10,
            "description": "Array of items in a carousel"
          }
        }
      },
      "TextTemplate": {
        "title": "Text template",
        "type": "object",
        "required": [
          "type",
          "text",
          "title"
        ],
        "properties": {
          "type": {
            "const": "TEXT",
            "description": "Message type",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Template title",
            "maxLength": 64,
            "minLength": 1
          },
          "text": {
            "type": "string",
            "description": "Template text",
            "maxLength": 500,
            "minLength": 1
          }
        }
      },
      "CreateTextTemplate": {
        "title": "Create Text Template",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template",
            "example": "sample_issue_resolution"
          },
          "language": {
            "type": "string",
            "description": "The language of the template. The same template name can be used for multiple language versions. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/). Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "en"
          },
          "category": {
            "type": "string",
            "description": "The required category of the template. The category determines what the template will be used for. Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "UTILITY",
            "enum": [
              "UTILITY",
              "AUTHENTICATION",
              "MARKETING"
            ]
          },
          "allow_category_change": {
            "type": "boolean",
            "description": "An optional parameter which, when set to `true`, can avoid template rejection due to mis-categorization.\nIncluding this parameter, with a value of `true`, will allow Meta to re-assign the template to a different category as appropriate.\n",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "components": {
            "type": "array",
            "description": "An array of objects representing the parts of the template itself.",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "minProperties": 0,
              "properties": {
                "type": {
                  "type": "string",
                  "example": "BODY",
                  "description": "The type of template component. `HEADER`, `FOOTER`, and `BUTTONS` are optional, a `BODY` is always a required component of a template.",
                  "enum": [
                    "HEADER",
                    "BODY",
                    "FOOTER",
                    "BUTTONS"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "The format of the template component. For a Text Template, `format` is always `TEXT` for `HEADER`, `BODY` or `FOOTER` components.",
                  "example": "TEXT",
                  "enum": [
                    "TEXT"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text to be displayed in this template component. EIther `plain text` or `text with placeholders {{1}}`.",
                  "example": "Your parcel from {{1}} is due to arrive on {{2}} between {{3}} and {{4}}."
                },
                "example": {
                  "type": "object",
                  "description": "Must be included when placeholders are used in the text.",
                  "properties": {
                    "body_text": {
                      "type": "array",
                      "description": "An array containing one array. The inner array contains strings, with one item for each placeholder used in the `text`. Must be included when format is `text` and placeholders are included in the text.",
                      "example": "[['Courier','May 1st', '3:00PM', '4:00PM']]",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "buttons": {
                  "type": "array",
                  "description": "Where `type` is set to `BUTTONS`, an array of button objects representing the properties of each button. ",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of button.",
                        "example": "QUICK_REPLY",
                        "enum": [
                          "QUICK_REPLY",
                          "URL",
                          "PHONE_NUMBER"
                        ]
                      },
                      "text": {
                        "type": "string",
                        "description": "The text to appear on the button.",
                        "example": "Yes"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URL to which the end-user will be directed when hitting the button. Must be set when `type` is `URL`.",
                        "example": "https://example.com/special-offer-opt-in"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number to which a phone call would be placed by the end-user when hitting the button. Must be set when `type` is `PHONE_NUMBER`.",
                        "example": "8001111111"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "type",
              "format"
            ]
          }
        },
        "required": [
          "name",
          "language",
          "category",
          "components"
        ]
      },
      "CreateMediaTemplate": {
        "title": "Create Media Template",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template",
            "example": "sample_issue_resolution"
          },
          "language": {
            "type": "string",
            "description": "The language of the template. The same template name can be used for multiple language versions. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/). Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "en"
          },
          "category": {
            "type": "string",
            "description": "The required category of the template. The category determines what the template will be used for. Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "UTILITY",
            "enum": [
              "UTILITY",
              "AUTHENTICATION",
              "MARKETING"
            ]
          },
          "allow_category_change": {
            "type": "boolean",
            "description": "An optional parameter which, when set to `true`, can avoid template rejection due to mis-categorization.\nIncluding this parameter, with a value of `true`, will allow Meta to re-assign the template to a different category as appropriate.\n",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "components": {
            "type": "array",
            "description": "An array of objects representing the parts of the template itself.",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "minProperties": 0,
              "properties": {
                "type": {
                  "type": "string",
                  "example": "HEADER",
                  "description": "The type of template component. `HEADER`, `FOOTER`, and `BUTTONS` are optional, a `BODY` is always a required component of a template.",
                  "enum": [
                    "HEADER",
                    "BODY",
                    "FOOTER",
                    "BUTTONS"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "The format of the template component. Where `type` is `HEADER` can be `TEXT`, `IMAGE`, `DOCUMENT`, or `VIDEO`. Where type is `BODY` or `FOOTER`, must be `TEXT`.",
                  "example": "IMAGE",
                  "enum": [
                    "TEXT",
                    "IMAGE",
                    "DOCUMENT",
                    "VIDEO"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text to be displayed in this template component. EIther `plain text` or `text with placeholders {{1}}`.\n**Note: when using text with placeholders, you must include the `example` parameter in the component object.**\n"
                },
                "example": {
                  "type": "object",
                  "description": "Must be included when the `type` is `HEADER` and `format` is one of `IMAGE`, `DOCUMENT`, or `VIDEO`, or when the `format` is `text` and placeholders are used.\nNot allowed for other component types.'\n",
                  "properties": {
                    "header_handle": {
                      "type": "string",
                      "description": "The identifier or 'handle' of a file received in the response to a Media Upload. Must be included when `format` is `IMAGE`, `DOCUMENT`, or `VIDEO`.",
                      "example": "h:3:MjAyMi0wOC0wNCUyMDExXzE0XzQ0Ljc0Mjk0NV9XaGF0c0FwcCUyMEltYWdlJTIwMjAyMi0wOC0wNCUyMGF0JTIwMTEuMDcuMzclMjBBTS5qcGVn:aW1hZ2UvanBlZw==:ARZBgKmPpdCDKM9p8VulwOuNGrHg5RZYIrvwYWpn5YgJezdnoufigT9OTwtRYfAhP4EbpvJik7GZv5QGT7cU7k1Fqu3fnDxEe5XkdIypjSgngQ:e:1662475718:ARauPjU_zJe83Ukp5pY"
                    },
                    "body_text": {
                      "type": "array",
                      "description": "An array containing one array. The inner array contains strings, with one item for each placeholder used in the `text`. Must be included when format is `text` and placeholders are included in the text.",
                      "example": "[['Courier','May 1st', '3:00PM', '4:00PM']]",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "buttons": {
                  "type": "array",
                  "description": "Where `type` is set to `BUTTONS`, an array of button objects representing the properties of each button. ",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of button.",
                        "example": "QUICK_REPLY",
                        "enum": [
                          "QUICK_REPLY",
                          "URL",
                          "PHONE_NUMBER",
                          "OTP"
                        ]
                      },
                      "text": {
                        "type": "string",
                        "description": "The text to appear on the button.",
                        "example": "Yes"
                      },
                      "otp_type": {
                        "type": "string",
                        "description": "The type of OTP button. Mandatory if the button `type` is `OTP`",
                        "enum": [
                          "COPY_CODE",
                          "ONE_TAP"
                        ],
                        "example": "ONE_TAP"
                      },
                      "autofill_text": {
                        "type": "string",
                        "description": "Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "Autofill"
                      },
                      "package_name": {
                        "type": "string",
                        "description": "Your Android app's package name. Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "com.example.myapp"
                      },
                      "signature_hash": {
                        "type": "string",
                        "description": "Your app signing key hash. See [App Signing Key Hash](https://developers.facebook.com/docs/whatsapp/business-management-api/authentication-templates#app-signing-key-hash). Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "K8a%2FAINcGX7"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URL to which the end-user will be directed when hitting the button. Must be set when `type` is `URL`.",
                        "example": "https://example.com/special-offer-opt-in"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number to which a phone call would be placed by the end-user when hitting the button. Must be set when `type` is `PHONE_NUMBER`.",
                        "example": "8001111111"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "type",
              "format"
            ]
          }
        },
        "required": [
          "name",
          "language",
          "category",
          "components"
        ]
      },
      "UpdateTextTemplate": {
        "title": "Update Text Template",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template",
            "example": "sample_issue_resolution"
          },
          "language": {
            "type": "string",
            "description": "The language of the template. The same template name can be used for multiple language versions. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/). Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "en"
          },
          "category": {
            "type": "string",
            "description": "The required category of the template. The category determines what the template will be used for. Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "UTILITY",
            "enum": [
              "UTILITY",
              "AUTHENTICATION",
              "MARKETING"
            ]
          },
          "allow_category_change": {
            "type": "boolean",
            "description": "An optional parameter which, when set to `true`, can avoid template rejection due to mis-categorization.\nIncluding this parameter, with a value of `true`, will allow Meta to re-assign the template to a different category as appropriate.\n",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "components": {
            "type": "array",
            "description": "An array of objects representing the parts of the template itself.",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "minProperties": 0,
              "properties": {
                "type": {
                  "type": "string",
                  "example": "BODY",
                  "description": "The type of template component. `HEADER`, `FOOTER`, and `BUTTONS` are optional, a `BODY` is always a required component of a template.",
                  "enum": [
                    "HEADER",
                    "BODY",
                    "FOOTER",
                    "BUTTONS"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "The format of the template component. For a Text Template, `format` is always `TEXT` for `HEADER`, `BODY` or `FOOTER` components.",
                  "example": "TEXT",
                  "enum": [
                    "TEXT"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text to be displayed in this template component. EIther `plain text` or `text with placeholders {{1}}`.",
                  "example": "Your parcel from {{1}} is due to arrive on {{2}} between {{3}} and {{4}}."
                },
                "example": {
                  "type": "object",
                  "description": "Must be included when placeholders are used in the text.",
                  "properties": {
                    "body_text": {
                      "type": "array",
                      "description": "An array containing one array. The inner array contains strings, with one item for each placeholder used in the `text`. Must be included when format is `text` and placeholders are included in the text.",
                      "example": "[['Courier','May 1st', '3:00PM', '4:00PM']]",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "buttons": {
                  "type": "array",
                  "description": "Where `type` is set to `BUTTONS`, an array of button objects representing the properties of each button. ",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of button.",
                        "example": "QUICK_REPLY",
                        "enum": [
                          "QUICK_REPLY",
                          "URL",
                          "PHONE_NUMBER"
                        ]
                      },
                      "text": {
                        "type": "string",
                        "description": "The text to appear on the button.",
                        "example": "Yes"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URL to which the end-user will be directed when hitting the button. Must be set when `type` is `URL`.",
                        "example": "https://example.com/special-offer-opt-in"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number to which a phone call would be placed by the end-user when hitting the button. Must be set when `type` is `PHONE_NUMBER`.",
                        "example": "8001111111"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "type",
              "format"
            ]
          }
        },
        "required": [
          "name",
          "language",
          "category",
          "components"
        ]
      },
      "UpdateMediaTemplate": {
        "title": "Update Media Template",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template",
            "example": "sample_issue_resolution"
          },
          "language": {
            "type": "string",
            "description": "The language of the template. The same template name can be used for multiple language versions. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/). Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "en"
          },
          "category": {
            "type": "string",
            "description": "The required category of the template. The category determines what the template will be used for. Note: Adding new languages on *legacy* template categories has been disabled by Meta, see the documentation for [Language Variants](/messages/whatsapp-template-management/overview#language-variants) and [Categories](/messages/whatsapp-template-management/overview#template-categories)",
            "example": "UTILITY",
            "enum": [
              "UTILITY",
              "AUTHENTICATION",
              "MARKETING"
            ]
          },
          "allow_category_change": {
            "type": "boolean",
            "description": "An optional parameter which, when set to `true`, can avoid template rejection due to mis-categorization.\nIncluding this parameter, with a value of `true`, will allow Meta to re-assign the template to a different category as appropriate.\n",
            "example": true,
            "enum": [
              true,
              false
            ]
          },
          "components": {
            "type": "array",
            "description": "An array of objects representing the parts of the template itself.",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "minProperties": 0,
              "properties": {
                "type": {
                  "type": "string",
                  "example": "HEADER",
                  "description": "The type of template component. `HEADER`, `FOOTER`, and `BUTTONS` are optional, a `BODY` is always a required component of a template.",
                  "enum": [
                    "HEADER",
                    "BODY",
                    "FOOTER",
                    "BUTTONS"
                  ]
                },
                "format": {
                  "type": "string",
                  "description": "The format of the template component. Where `type` is `HEADER` can be `TEXT`, `IMAGE`, `DOCUMENT`, or `VIDEO`. Where type is `BODY` or `FOOTER`, must be `TEXT`.",
                  "example": "IMAGE",
                  "enum": [
                    "TEXT",
                    "IMAGE",
                    "DOCUMENT",
                    "VIDEO"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "The text to be displayed in this template component. EIther `plain text` or `text with placeholders {{1}}`.\n**Note: when using text with placeholders, you must include the `example` parameter in the component object.**\n"
                },
                "example": {
                  "type": "object",
                  "description": "Must be included when the `type` is `HEADER` and `format` is one of `IMAGE`, `DOCUMENT`, or `VIDEO`, or when the `format` is `text` and placeholders are used.\nNot allowed for other component types.'\n",
                  "properties": {
                    "header_handle": {
                      "type": "string",
                      "description": "The identifier or 'handle' of a file received in the response to a Media Upload. Must be included when `format` is `IMAGE`, `DOCUMENT`, or `VIDEO`.",
                      "example": "h:3:MjAyMi0wOC0wNCUyMDExXzE0XzQ0Ljc0Mjk0NV9XaGF0c0FwcCUyMEltYWdlJTIwMjAyMi0wOC0wNCUyMGF0JTIwMTEuMDcuMzclMjBBTS5qcGVn:aW1hZ2UvanBlZw==:ARZBgKmPpdCDKM9p8VulwOuNGrHg5RZYIrvwYWpn5YgJezdnoufigT9OTwtRYfAhP4EbpvJik7GZv5QGT7cU7k1Fqu3fnDxEe5XkdIypjSgngQ:e:1662475718:ARauPjU_zJe83Ukp5pY"
                    },
                    "body_text": {
                      "type": "array",
                      "description": "An array containing one array. The inner array contains strings, with one item for each placeholder used in the `text`. Must be included when format is `text` and placeholders are included in the text.",
                      "example": "[['Courier','May 1st', '3:00PM', '4:00PM']]",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "buttons": {
                  "type": "array",
                  "description": "Where `type` is set to `BUTTONS`, an array of button objects representing the properties of each button. ",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of button.",
                        "example": "QUICK_REPLY",
                        "enum": [
                          "QUICK_REPLY",
                          "URL",
                          "PHONE_NUMBER",
                          "OTP"
                        ]
                      },
                      "text": {
                        "type": "string",
                        "description": "The text to appear on the button.",
                        "example": "Yes"
                      },
                      "otp_type": {
                        "type": "string",
                        "description": "The type of OTP button. Mandatory if the button `type` is `OTP`",
                        "enum": [
                          "COPY_CODE",
                          "ONE_TAP"
                        ],
                        "example": "ONE_TAP"
                      },
                      "autofill_text": {
                        "type": "string",
                        "description": "Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "Autofill"
                      },
                      "package_name": {
                        "type": "string",
                        "description": "Your Android app's package name. Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "com.example.myapp"
                      },
                      "signature_hash": {
                        "type": "string",
                        "description": "Your app signing key hash. See [App Signing Key Hash](https://developers.facebook.com/docs/whatsapp/business-management-api/authentication-templates#app-signing-key-hash). Mandatory if `otp_type` is `ONE_TAP`",
                        "example": "K8a%2FAINcGX7"
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "A URL to which the end-user will be directed when hitting the button. Must be set when `type` is `URL`.",
                        "example": "https://example.com/special-offer-opt-in"
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number to which a phone call would be placed by the end-user when hitting the button. Must be set when `type` is `PHONE_NUMBER`.",
                        "example": "8001111111"
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "type",
              "format"
            ]
          }
        },
        "required": [
          "name",
          "language",
          "category",
          "components"
        ]
      },
      "TemplateComponentStandard": {
        "title": "TemplateComponentStandard",
        "type": "object",
        "description": "A template component of `type` other than `BUTTONS`",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of template component.",
            "example": "BODY",
            "enum": [
              "HEADER",
              "BODY",
              "FOOTER"
            ]
          },
          "format": {
            "type": "string",
            "description": "The format of the template component. Where `type` is `HEADER` can be `TEXT`, `IMAGE`, `DOCUMENT`, or `VIDEO`. Where type is `BODY` or `FOOTER`, must be `TEXT`.",
            "example": "TEXT"
          },
          "text": {
            "type": "string",
            "description": "The text to be displayed in this template component. EIther `plain text` or `text with placeholders {{1}}`.",
            "example": "Your parcel from {{1}} is due to arrive on {{2}} between {{3}} and {{4}}."
          }
        }
      },
      "TemplateComponentButtons": {
        "title": "TemplateComponentButtons",
        "type": "object",
        "description": "A template component with a `type` of `BUTTONS`",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of template component.",
            "example": "BUTTONS",
            "enum": [
              "BUTTONS"
            ]
          },
          "buttons": {
            "type": "array",
            "description": "An array of objects representing button components.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of button",
                  "enum": [
                    "QUICK_REPLY",
                    "URL",
                    "PHONE_NUMBER"
                  ],
                  "example": "QUICK_REPLY"
                },
                "text": {
                  "type": "string",
                  "description": "The text displayed on the button.",
                  "example": "Yes"
                },
                "url": {
                  "type": "string",
                  "description": "URL to which the end-user will be directed when hitting the button.\n",
                  "example": "https://example.com/special-offer-opt-in",
                  "format": "uri"
                },
                "phone_number": {
                  "type": "string",
                  "description": "Phone number to which a phone call would be placed by the end-user when hitting the button.",
                  "example": "8001111111"
                }
              }
            }
          }
        }
      },
      "ErrorResponse400": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Message template \\\"components\\\" param contains unexpected field(s)"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "component of type BUTTONS has unexpected field(s) (text)."
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "2f4461e1-43a6-4383-8502-dc6a2ec1786b"
          }
        },
        "description": "Response body for 400 error responses",
        "title": "400ErrorResponse"
      },
      "ErrorResponse401": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Unauthorized"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "Check that you're using the correct credentials, and that your account has this feature enabled."
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "85292fc4-4503-4d2e-81a1-0b6f85b3f0e4"
          }
        },
        "description": "Response body for 401 error responses",
        "title": "401ErrorResponse"
      },
      "ErrorResponse404": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Not Found"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "WABA was not found."
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "85292fc4-4503-4d2e-81a1-0b6f85b3f0e4"
          }
        },
        "description": "Response body for 404 error responses",
        "title": "404ErrorResponse"
      },
      "ErrorResponse422": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Invalid params"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "(#100) Param category must be one of {UTILITY, AUTHENTICATION, MARKETING}."
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "5b2ecda4-607d-457c-9d16-6d89f3fc6dcf"
          }
        },
        "description": "Response body for 422 error responses",
        "title": "422ErrorResponse"
      },
      "ErrorResponse429": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Rate Limit Hit"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "Please wait, then retry your request"
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "85292fc4-4503-4d2e-81a1-0b6f85b3f0e4"
          }
        },
        "description": "Response body for 429 error responses",
        "title": "429ErrorResponse"
      },
      "ErrorResponse500": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "URL for the documentation regarding the error."
          },
          "title": {
            "type": "string",
            "description": "The title of the error.",
            "example": "Internal error"
          },
          "detail": {
            "type": "string",
            "description": "A description of the error.",
            "example": "There was an error processing your request in the Platform."
          },
          "instance_id": {
            "type": "string",
            "description": "The instance ID for the request that generated the error.",
            "example": "85292fc4-4503-4d2e-81a1-0b6f85b3f0e4"
          }
        },
        "description": "Response body for 500 error responses",
        "title": "500ErrorResponse"
      },
      "Location": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Location",
            "x-tab-id": "Location",
            "type": "object",
            "required": [
              "message_type",
              "custom"
            ],
            "description": "Location message payload",
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom",
                "description": "The type of message to send. You must provide `custom` in this field"
              },
              "custom": {
                "type": "object",
                "required": [
                  "type",
                  "location"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "location"
                    ]
                  },
                  "location": {
                    "type": "object",
                    "required": [
                      "longitude",
                      "latitude"
                    ],
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "description": "Location latitude"
                      },
                      "longitude": {
                        "type": "number",
                        "description": "Location longitude"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Contact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Contact",
            "x-tab-id": "Contact",
            "type": "object",
            "required": [
              "message_type",
              "phone",
              "firstname",
              "lastname",
              "custom"
            ],
            "description": "Contact message payload",
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom",
                "description": "The type of message to send. You must provide `custom` in this field"
              },
              "custom": {
                "type": "object",
                "required": [
                  "type",
                  "contacts"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "contacts"
                    ]
                  },
                  "contacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "city": {
                                "type": "string",
                                "example": "Menlo Park"
                              },
                              "country": {
                                "type": "string",
                                "example": "United States"
                              },
                              "country_code": {
                                "type": "string",
                                "example": "us"
                              },
                              "state": {
                                "type": "string",
                                "example": "CA"
                              },
                              "street": {
                                "type": "string",
                                "example": "1 Hacker Way"
                              },
                              "type": {
                                "type": "string",
                                "example": "HOME"
                              },
                              "zip": {
                                "type": "string",
                                "example": "94025"
                              }
                            }
                          }
                        },
                        "birthday": {
                          "type": "string",
                          "format": "date",
                          "example": "2012-08-18"
                        },
                        "emails": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "format": "email",
                                "example": "test@fb.com"
                              },
                              "type": {
                                "type": "string",
                                "example": "WORK"
                              }
                            }
                          }
                        },
                        "name": {
                          "type": "object",
                          "properties": {
                            "first_name": {
                              "type": "string",
                              "example": "John"
                            },
                            "formatted_name": {
                              "type": "string",
                              "example": "John Smith"
                            },
                            "last_name": {
                              "type": "string",
                              "example": "Smith"
                            }
                          }
                        },
                        "org": {
                          "type": "object",
                          "properties": {
                            "company": {
                              "type": "string",
                              "example": "WhatsApp"
                            },
                            "department": {
                              "type": "string",
                              "example": "Design"
                            },
                            "title": {
                              "type": "string",
                              "example": "Manager"
                            }
                          }
                        },
                        "phones": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "phone": {
                                "type": "string",
                                "example": "+1 (940) 555-1234"
                              },
                              "type": {
                                "type": "string",
                                "example": "HOME"
                              },
                              "wa_id": {
                                "type": "string",
                                "example": "16505551234"
                              }
                            }
                          }
                        },
                        "urls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "example": "https://www.facebook.com"
                              },
                              "type": {
                                "type": "string",
                                "example": "WORK"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "WaButtonMenu": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Button Menu",
            "x-tab-id": "WaButtonMenu",
            "type": "object",
            "required": [
              "message_type",
              "phone",
              "firstname",
              "lastname",
              "custom"
            ],
            "description": "Contact message payload",
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom",
                "description": "The type of message to send. You must provide `custom` in this field"
              },
              "custom": {
                "type": "object",
                "required": [
                  "type",
                  "interactive"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "interactive"
                    ]
                  },
                  "template_id": {
                    "type": "string",
                    "description": "Omni template ID"
                  },
                  "interactive": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "button"
                        ],
                        "example": "button"
                      },
                      "header": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "text"
                            ],
                            "example": "text"
                          },
                          "text": {
                            "type": "string",
                            "example": "Delivery time"
                          }
                        }
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "Which time would you like us to deliver your order at?"
                          }
                        }
                      },
                      "footer": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "Please allow 15 mins either side of your chosen time"
                          }
                        }
                      },
                      "action": {
                        "type": "object",
                        "properties": {
                          "buttons": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "reply"
                                  ],
                                  "example": "reply"
                                },
                                "reply": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "slot-1"
                                    },
                                    "title": {
                                      "type": "string",
                                      "example": "15:00"
                                    }
                                  }
                                }
                              }
                            },
                            "example": [
                              {
                                "type": "reply",
                                "reply": {
                                  "id": "slot-1",
                                  "title": "15:00"
                                }
                              },
                              {
                                "type": "reply",
                                "reply": {
                                  "id": "slot-2",
                                  "title": "16:30"
                                }
                              },
                              {
                                "type": "reply",
                                "reply": {
                                  "id": "slot-3",
                                  "title": "17:15"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "WaList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "List",
            "x-tab-id": "WaList",
            "type": "object",
            "required": [
              "message_type",
              "custom"
            ],
            "description": "Contact message payload",
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom",
                "description": "The type of message to send. You must provide `custom` in this field"
              },
              "custom": {
                "type": "object",
                "required": [
                  "type",
                  "interactive"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "interactive"
                    ],
                    "example": "interactive"
                  },
                  "interactive": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "list"
                        ],
                        "example": "list"
                      },
                      "header": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "text"
                            ],
                            "example": "text"
                          },
                          "text": {
                            "type": "string",
                            "example": "Select which pill you would like"
                          }
                        }
                      },
                      "body": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "You will be presented with a list of options"
                          }
                        }
                      },
                      "footer": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "There are no wrong choices"
                          }
                        }
                      },
                      "action": {
                        "type": "object",
                        "properties": {
                          "button": {
                            "type": "string",
                            "example": "Select"
                          },
                          "sections": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "example": "Section A - pills"
                                },
                                "rows": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "row1"
                                      },
                                      "title": {
                                        "type": "string",
                                        "example": "Red"
                                      },
                                      "description": {
                                        "type": "string",
                                        "example": "Take the red pill"
                                      }
                                    }
                                  }
                                },
                                "example": [
                                  {
                                    "title": "Section A - pills",
                                    "rows": [
                                      {
                                        "id": "row1",
                                        "title": "Red",
                                        "description": "Take the red pill"
                                      },
                                      {
                                        "id": "row2",
                                        "title": "Blue",
                                        "description": "Take the blue pill"
                                      },
                                      {
                                        "id": "row3",
                                        "title": "Green",
                                        "description": "Take the green pill"
                                      }
                                    ]
                                  },
                                  {
                                    "title": "Section B - no pills",
                                    "rows": [
                                      {
                                        "id": "row4",
                                        "title": "Nothing",
                                        "description": "Do not take a pill"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Media": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Media",
            "x-tab-id": "Media",
            "type": "object",
            "required": [
              "media"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "media"
                ],
                "example": "media",
                "description": "The type of message to send. You must provide `media` in this field"
              },
              "media": {
                "required": [
                  "src",
                  "category"
                ],
                "properties": {
                  "category": {
                    "type": "string",
                    "enum": [
                      "VIDEO",
                      "AUDIO",
                      "VOICE",
                      "APPLICATION",
                      "UNSPECIFIED"
                    ],
                    "description": "Media file category"
                  },
                  "name": {
                    "type": "string",
                    "description": "Image file name(optional)"
                  },
                  "src": {
                    "$ref": "#/components/schemas/MediaFile",
                    "description": "Media file full size data"
                  },
                  "thumbnail": {
                    "$ref": "#/components/schemas/MediaFile",
                    "description": "Image file thumbnail data"
                  },
                  "preview": {
                    "$ref": "#/components/schemas/MediaFile",
                    "description": "Image file preview data"
                  }
                }
              }
            }
          }
        ]
      },
      "MediaFile": {
        "type": "object",
        "required": [
          "mime",
          "uri",
          "size"
        ],
        "properties": {
          "mime": {
            "type": "string",
            "description": "Media file mime"
          },
          "size": {
            "type": "number",
            "description": "Media file size in bytes"
          },
          "uri": {
            "type": "string",
            "description": "Media file URL"
          }
        }
      },
      "CreateCustomerRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "minLength": 3,
            "maxLength": 15,
            "pattern": "^[0-9]+$",
            "description": "The phone number of the customer",
            "example": "145044111206"
          },
          "name": {
            "type": "string",
            "maxLength": 32,
            "description": "The name of the customer",
            "example": "John Smith"
          }
        },
        "required": [
          "phone"
        ]
      },
      "CreateTemplateRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "minLength": 10,
            "maxLength": 15,
            "pattern": "^[0-9]+$",
            "description": "The phone number of the customer",
            "example": "145044111206"
          },
          "name": {
            "type": "string",
            "description": "The name of the customer",
            "example": "John Smith"
          }
        },
        "required": [
          "phone",
          "name"
        ]
      },
      "UpdateCustomerRequest": {
        "type": "object",
        "properties": {
          "chatbot_enabled": {
            "type": "object",
            "description": "Whether chatbot is enabled for conversations with current customer",
            "example": {
              "property1": "ENABLED_AUTO",
              "property2": "ENABLED_AUTO"
            },
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ENABLED_AUTO",
                "ENABLED_MANUALLY",
                "DISABLED_AUTO",
                "DISABLED_MANUALLY"
              ],
              "format": "uuid"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the customer",
            "example": "John Smith",
            "maxLength": 32
          }
        }
      },
      "CustomSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successfully processed"
          }
        }
      },
      "FacebookTemplate": {
        "type": "object",
        "required": [
          "id",
          "category",
          "status",
          "language",
          "name",
          "body",
          "header",
          "buttons",
          "footer"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Template ID"
          },
          "category": {
            "type": "string",
            "enum": [
              "MARKETING",
              "UTILITY",
              "AUTHENTICATION"
            ],
            "description": "Template category"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "PENDING",
              "REJECTED",
              "IN_APPEAL",
              "PENDING_DELETION",
              "DELETED",
              "DISABLED"
            ],
            "description": "Template status"
          },
          "language": {
            "type": "string",
            "description": "Language of the template"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "body": {
            "type": "string",
            "description": "Body text block for template"
          },
          "header": {
            "type": "object",
            "required": [
              "type",
              "value"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "Header type for template",
                "enum": [
                  "VIDEO",
                  "IMAGE",
                  "TEXT",
                  "DOCUMENT",
                  "NONE",
                  "CTA",
                  "QUICK_REPLY",
                  "OTP"
                ]
              },
              "value": {
                "type": "string",
                "format": "uri",
                "description": "Header value (URL)"
              }
            }
          },
          "buttons": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "NONE",
                  "CALL_TO_ACTION",
                  "QUICK_REPLY"
                ],
                "description": "Button type for template"
              }
            }
          },
          "footer": {
            "type": "string",
            "description": "Footer text block for template"
          }
        }
      },
      "MediaObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A UUID representing the object.",
            "example": "aaaaaaaa-bbbb-cccc-dddd-0123456789ab"
          },
          "original_file_name": {
            "type": "string",
            "description": "The filename of the object as it was originally uploaded.",
            "example": "test.wav"
          },
          "mime_type": {
            "type": "string",
            "description": "The IETF MIME type of the file.",
            "example": "audio/vnd.wave"
          },
          "account_id": {
            "type": "string",
            "description": "The ID of your Nexmo account. This is the same as your API key.",
            "example": "abcd1234"
          },
          "store_id": {
            "type": "string",
            "description": "An internal identifier of how the file is stored.",
            "example": "s3"
          },
          "max_downloads_allowed": {
            "type": "integer",
            "description": "The maximum number of times the file may be downloaded.",
            "example": 0
          },
          "times_downloaded": {
            "type": "integer",
            "description": "The number of times the file has been downloaded.",
            "example": 1
          },
          "etag": {
            "type": "string",
            "description": "An identifier for the content. This will change if the content of the file has been changed (i.e. if you upload a new version of the file). For more information see Wikipedia: [HTTP ETag](https://en.wikipedia.org/wiki/HTTP_ETag)",
            "example": "aaaaaaaabbbbccccdddd0123456789ab"
          },
          "media_size": {
            "type": "integer",
            "description": "The size of the file in bytes",
            "example": 1234567
          },
          "time_created": {
            "type": "string",
            "description": "A timestamp for the time that the file was created",
            "example": "2020-01-01T14:00:00.000Z"
          },
          "time_last_updated": {
            "type": "string",
            "description": "A timestamp for the time that the file was last modified",
            "example": "2020-01-01T14:00:00.000Z"
          },
          "public": {
            "type": "boolean",
            "description": "Whether the item is available for download without authentication.",
            "example": false
          },
          "metadata_primary": {
            "type": "string",
            "description": "A user set string containing metadata about the media file."
          },
          "metadata_secondary": {
            "type": "string",
            "description": "A user set string containing further metadata about the media file."
          }
        }
      },
      "NewCustomer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatbot_enabled": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ENABLED_AUTO",
                "ENABLED_MANUALLY"
              ],
              "format": "uuid"
            }
          },
          "phone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "subscriptions": {
            "type": "object",
            "format": "uuid",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "CANCELLED"
              ]
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "chatbot_notification_received": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatbot_enabled": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ENABLED_AUTO",
                "ENABLED_MANUALLY"
              ],
              "format": "uuid"
            }
          },
          "phone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "subscriptions": {
            "type": "object",
            "format": "uuid",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "CANCELLED"
              ]
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "last_message_time": {
            "type": "string",
            "format": "date-time"
          },
          "telegram_chat_id": {
            "type": "string"
          },
          "chatbot_notification_received": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "example": {
          "id": "76fdcf10-2352-4da1-ab84-4b1f7ddf8cbd",
          "chatbot_enabled": {
            "03dbaafc-a2fe-4aca-9658-dc23dffbfc18": "ENABLED_AUTO"
          },
          "phone": "145044111206",
          "name": "John Smith",
          "country": "US",
          "subscriptions": {
            "56a342e6-fa7b-4959-be4c-d78cecfcd885": "ACTIVE"
          },
          "created": "2024-04-16T10:51:28.924Z",
          "modified": "2024-04-26T13:33:44.677Z",
          "last_message_time": "2024-04-27T13:33:44.677Z",
          "telegram_chat_id": "364870593",
          "chatbot_notification_received": {}
        }
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "chatbot": {
            "type": "object",
            "properties": {
              "story_id": {
                "type": "string"
              },
              "origin": {
                "type": "string"
              }
            }
          },
          "keyword_events_messages": {
            "type": "object",
            "properties": {
              "opt_out_message": {
                "type": "string"
              },
              "help_message": {
                "type": "string"
              }
            }
          },
          "welcome_message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agent"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      },
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "config": {
            "type": "object",
            "properties": {
              "bot_name": {
                "type": "string"
              },
              "access_token": {
                "type": "string"
              }
            }
          }
        }
      },
      "TemplateParameters": {
        "type": "array",
        "description": "The parameters are an array of strings, with the first string being used for `{{1}}` in the template, with the second being `{{2}}` etc. Only required if the template specified by `name` contains parameters.",
        "example": [
          "Verification",
          "2526",
          "5"
        ],
        "items": {
          "type": "string"
        }
      },
      "Image": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Image",
            "x-tab-id": "Image",
            "type": "object",
            "required": [
              "image",
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "image"
                ],
                "example": "image",
                "description": "The type of message to send. You must provide `image` in this field"
              },
              "image": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "caption": {
                    "type": "string",
                    "description": "Additional text to the image.",
                    "example": "My Caption"
                  },
                  "url": {
                    "type": "string",
                    "description": "The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png",
                    "example": "https://example.com/image.jpg"
                  }
                }
              }
            }
          }
        ]
      },
      "Audio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Audio",
            "x-tab-id": "Audio",
            "type": "object",
            "required": [
              "audio",
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "audio"
                ],
                "example": "audio",
                "description": "The type of message to send. You must provide `audio` in this field"
              },
              "audio": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "url",
                    "description": "The URL of the audio attachment.",
                    "example": "https://example.com/audio.mp3"
                  }
                }
              }
            }
          }
        ]
      },
      "Video": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Video",
            "x-tab-id": "Video",
            "type": "object",
            "required": [
              "video",
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "video"
                ],
                "example": "video",
                "description": "The type of message to send. You must provide `video` in this field"
              },
              "video": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp\n> Note: Only supports video codec H.264 and audio codec AAC\n",
                    "format": "url",
                    "example": "https://example.com/video.mp4"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Additional text to accompany the file."
                  }
                }
              }
            }
          }
        ]
      },
      "Unsupported": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Unsupported",
            "x-tab-id": "Unsupported",
            "type": "object",
            "required": [
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "unsupported"
                ],
                "example": "unsupported",
                "description": "The type of message to send. Will be `unsupported` if the type of message received from user is not supported by the channel."
              }
            }
          }
        ]
      },
      "File": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "File",
            "x-tab-id": "File",
            "type": "object",
            "required": [
              "file",
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "file"
                ],
                "example": "file",
                "description": "The type of message to send. You must provide `file` in this field"
              },
              "file": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "example": "https://example.com/file.pdf"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Additional text to accompany the file."
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional parameter that specifies the name of the file being sent. If not included, the value for caption will be used as the file name. If neither name or caption are included, the file name will be parsed from the url."
                  }
                }
              }
            }
          }
        ]
      },
      "Template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Template",
            "x-tab-id": "Template",
            "type": "object",
            "required": [
              "template"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "template"
                ],
                "example": "template",
                "description": "The type of message to send. You must provide `template` in this field"
              },
              "template": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "9b6b4fcb_da19_4a26_8fe8_78074a91b584:verify",
                    "description": "The name of the template. For WhatsApp use your WhatsApp namespace (available via Facebook Business Manager), followed by a colon : and the name of the template to use."
                  },
                  "parameters": {
                    "$ref": "#/components/schemas/TemplateParameters"
                  }
                }
              }
            }
          }
        ]
      },
      "Custom": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Custom",
            "x-tab-id": "Custom",
            "type": "object",
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "custom"
                ],
                "example": "custom",
                "description": "The type of message to send. You must provide `custom` in this field"
              },
              "custom": {
                "type": "object",
                "description": "A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely.",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "Text": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMessageType"
          },
          {
            "title": "Text",
            "x-tab-id": "Text",
            "description": "The text of message to send.",
            "required": [
              "text",
              "message_type"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "text"
                ],
                "example": "text",
                "description": "The type of message to send. You must provide `text` in this field"
              },
              "text": {
                "type": "string",
                "example": "Hey! this is my awesome message!"
              }
            }
          }
        ]
      },
      "TextReceive": {
        "allOf": [
          {
            "title": "Text",
            "x-tab-id": "Text",
            "description": "The text of received message.",
            "required": [
              "text"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "text"
                ],
                "example": "text",
                "description": "The type of received message."
              },
              "text": {
                "type": "string",
                "example": "Hey! this is my awesome message!"
              }
            }
          }
        ]
      },
      "ImageReceive": {
        "allOf": [
          {
            "title": "Image",
            "x-tab-id": "Image",
            "description": "Image data",
            "required": [
              "image"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "image"
                ],
                "example": "image",
                "description": "The type of received message."
              },
              "image": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "FileReceive": {
        "allOf": [
          {
            "title": "File",
            "x-tab-id": "File",
            "description": "File data",
            "required": [
              "file"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "file"
                ],
                "example": "file",
                "description": "The type of received message."
              },
              "file": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "AudioReceive": {
        "allOf": [
          {
            "title": "audio",
            "x-tab-id": "audio",
            "description": "Audio data",
            "required": [
              "audio"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "audio"
                ],
                "example": "audio",
                "description": "The type of received message."
              },
              "audio": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "LocationReceive": {
        "allOf": [
          {
            "title": "location",
            "x-tab-id": "location",
            "description": "Location data",
            "required": [
              "location"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "location"
                ],
                "example": "location",
                "description": "The type of message to send. You must provide `location` in this field"
              },
              "location": {
                "required": [
                  "lat",
                  "long"
                ],
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number",
                    "example": 40.34772,
                    "description": "Latitude of the location."
                  },
                  "long": {
                    "type": "number",
                    "example": -74.18847,
                    "description": "Longitude of the location."
                  },
                  "name": {
                    "type": "string",
                    "example": "Vonage",
                    "description": "Name of the location."
                  },
                  "address": {
                    "type": "string",
                    "example": "23 Main St, Holmdel, NJ 07733, USA",
                    "description": "Address of the location. Only displayed if `name` is present."
                  }
                }
              }
            }
          }
        ]
      },
      "ReplyReceive": {
        "allOf": [
          {
            "title": "Reply",
            "x-tab-id": "Reply",
            "type": "object",
            "required": [
              "reply"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "reply"
                ],
                "example": "reply",
                "description": "The type of message to send. You must provide `custom` in this field."
              },
              "reply": {
                "required": [
                  "id",
                  "title"
                ],
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "row1",
                    "description": "An identifier to help identify the exact interactive message response."
                  },
                  "title": {
                    "type": "string",
                    "example": "9am",
                    "description": "The title displayed on the interactive option chosen."
                  },
                  "description": {
                    "type": "string",
                    "example": "Select 9am appointmaent time",
                    "description": "A description that may be added to the interactive options presented (available only on interactive lists)."
                  }
                }
              }
            }
          }
        ]
      },
      "ButtonReceive": {
        "allOf": [
          {
            "title": "button",
            "x-tab-id": "button",
            "description": "Image data",
            "required": [
              "button"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "button"
                ],
                "example": "button",
                "description": "The type of received message."
              },
              "button": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ContactReceive": {
        "allOf": [
          {
            "title": "contact",
            "x-tab-id": "contact",
            "description": "Image data",
            "required": [
              "contact"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "contact"
                ],
                "example": "contact",
                "description": "The type of received message."
              },
              "contact": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ]
      },
      "StickerReceive": {
        "allOf": [
          {
            "title": "sticker",
            "x-tab-id": "sticker",
            "description": "Image data",
            "required": [
              "sticker"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "contact"
                ],
                "example": "contact",
                "description": "The type of received message."
              },
              "sticker": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "is_animated": {
                    "type": "boolean"
                  },
                  "is_video": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "VideoReceive": {
        "allOf": [
          {
            "title": "Video",
            "x-tab-id": "video",
            "description": "Video data",
            "required": [
              "video"
            ],
            "properties": {
              "message_type": {
                "type": "string",
                "enum": [
                  "video"
                ],
                "example": "video",
                "description": "The type of received message."
              },
              "video": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ChannelSms": {
        "allOf": [
          {
            "title": "Sms channel type",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "enum": [
                  "sms"
                ],
                "example": "text",
                "description": "The type of channel."
              }
            }
          }
        ]
      },
      "ChannelRcs": {
        "allOf": [
          {
            "title": "Rsc channel type",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "enum": [
                  "rcs"
                ],
                "example": "text",
                "description": "The type of channel."
              }
            }
          }
        ]
      },
      "ChannelViber": {
        "allOf": [
          {
            "title": "Viber channel type",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "enum": [
                  "viber"
                ],
                "example": "text",
                "description": "The type of channel."
              }
            }
          }
        ]
      },
      "ChannelWhatsapp": {
        "allOf": [
          {
            "title": "Whatsapp channel type",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "enum": [
                  "whatsapp"
                ],
                "example": "text",
                "description": "The type of channel."
              }
            }
          }
        ]
      },
      "ChannelTelegram": {
        "allOf": [
          {
            "title": "Telegram channel type",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "enum": [
                  "telegram"
                ],
                "example": "text",
                "description": "The type of channel."
              }
            }
          }
        ]
      },
      "MessageUuid": {
        "type": "string",
        "example": "b38c2869-af85-4a00-8552-51b53667fa11",
        "description": "The UUID of the message"
      },
      "ToNumber": {
        "type": "string",
        "minLength": 7,
        "maxLength": 15,
        "example": "447700900000",
        "description": "The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.\n"
      },
      "FromAgent": {
        "type": "string",
        "format": "uuid",
        "example": "b38c2869-af85-4a00-8552-51b53667fa11",
        "description": "Agent ID"
      },
      "ToId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "example": "0123456789",
        "description": "The ID of the message recipient\n"
      },
      "FromId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50,
        "example": "9876543210",
        "description": "The ID of the message sender\n"
      },
      "MessageSent": {
        "type": "object",
        "properties": {
          "message_uuid": {
            "type": "string",
            "example": "b38c2869-af85-4a00-8552-51b53667fa11",
            "description": "The UUID of the message"
          }
        }
      },
      "baseMessageType": {
        "type": "object",
        "properties": {
          "client_ref": {
            "type": "string",
            "description": "Client reference of up to 100 characters. The reference will be present in every message status.",
            "example": "b38c2869-af85-4a00-8552-51b53667fa11"
          },
          "webhook_url": {
            "type": "string",
            "description": "The URL of callback to which DLR statuses per single message will be sent",
            "example": "https://example.com/statuses_webhook"
          }
        }
      },
      "channelOptionsSms": {
        "type": "object",
        "required": [
          "to",
          "from",
          "channel"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "channel": {
            "type": "string",
            "description": "The channel to send to. You must provide `sms` in this field",
            "example": "sms",
            "enum": [
              "sms"
            ]
          }
        }
      },
      "channelOptionsRcs": {
        "type": "object",
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "channel": {
            "type": "string",
            "description": "The channel to send to. You must provide `rcs` in this field",
            "example": "rcs",
            "enum": [
              "rcs"
            ]
          }
        }
      },
      "channelOptionsViber": {
        "type": "object",
        "required": [
          "to",
          "from",
          "channel"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "channel": {
            "type": "string",
            "description": "The channel to send to. You must provide `viber` in this field",
            "example": "viber",
            "enum": [
              "viber"
            ]
          }
        }
      },
      "channelOptionsWhatsapp": {
        "type": "object",
        "required": [
          "to",
          "from",
          "channel"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "channel": {
            "description": "The channel to send to. You must provide `whatsapp` in this field",
            "type": "string",
            "example": "whatsapp",
            "enum": [
              "whatsapp"
            ]
          }
        }
      },
      "channelOptionsTelegram": {
        "type": "object",
        "properties": {
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "channel": {
            "description": "The channel to send to. You must provide `telegram` in this field",
            "type": "string",
            "example": "telegram",
            "enum": [
              "telegram"
            ]
          }
        }
      },
      "messageStatusBase": {
        "type": "object",
        "properties": {
          "message_uuid": {
            "$ref": "#/components/schemas/MessageUuid"
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "status": {
            "example": "read",
            "enum": [
              "submitted",
              "delivered",
              "rejected",
              "undeliverable",
              "read"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The datetime of when the event occurred, in `ISO 8601` format.",
            "example": "2020-01-01T14:00:00.000Z"
          },
          "error": {
            "type": "object",
            "description": "If the message encountered a problem a descriptive error will be supplied in this object.",
            "properties": {
              "type": {
                "type": "string",
                "format": "url",
                "description": "The type of error encountered, follow URL for more details",
                "example": 1000
              },
              "title": {
                "type": "string",
                "example": 1000,
                "description": "The error code encountered when sending the message."
              },
              "detail": {
                "type": "string",
                "example": "Throttled - You have exceeded the submission capacity allowed on this account. Please wait and retry",
                "description": "Text describing the error."
              },
              "instance": {
                "type": "string",
                "example": "mmd-12345-76543",
                "description": "The record id of this error's occurrence."
              }
            }
          },
          "client_ref": {
            "type": "string",
            "description": "Client reference of up to 100 characters. The reference will be present in every message status."
          }
        },
        "required": [
          "message_uuid",
          "channel",
          "to",
          "from",
          "timestamp",
          "status"
        ]
      },
      "messageStatusSMS": {
        "allOf": [
          {
            "$ref": "#/components/schemas/messageStatusBase"
          },
          {
            "title": "SMS",
            "x-tab-id": "SMS",
            "description": "SMS",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The channel sending to.",
                "example": "sms",
                "enum": [
                  "sms"
                ]
              }
            }
          }
        ]
      },
      "messageStatusWhatsApp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/messageStatusBase"
          },
          {
            "title": "WhatsApp",
            "x-tab-id": "WhatsApp",
            "description": "WhatsApp Status",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The channel sending to.",
                "example": "whatsapp",
                "enum": [
                  "whatsapp"
                ]
              }
            }
          }
        ]
      },
      "messageStatusViber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/messageStatusBase"
          },
          {
            "title": "Viber",
            "x-tab-id": "Viber",
            "description": "Viber status",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The channel sending to.",
                "example": "viber",
                "enum": [
                  "viber"
                ]
              }
            }
          }
        ]
      },
      "messageStatusTelegram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/messageStatusBase"
          },
          {
            "title": "Telegram",
            "x-tab-id": "Telegram",
            "description": "Telegram status",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The channel sending to.",
                "example": "telegram",
                "enum": [
                  "telegram"
                ]
              }
            }
          }
        ]
      },
      "messageStatusRcs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/messageStatusBase"
          },
          {
            "title": "RCS",
            "x-tab-id": "RCS",
            "description": "RCS status",
            "properties": {
              "channel": {
                "type": "string",
                "description": "The channel sending to.",
                "example": "rcs",
                "enum": [
                  "rcs"
                ]
              }
            }
          }
        ]
      },
      "Timestamp": {
        "type": "string",
        "description": "The datetime of when the event occurred, in `ISO 8601` format.",
        "example": "2020-01-01T14:00:00.000Z"
      },
      "InboundViberMessageCommon": {
        "title": "Viber",
        "x-tab-id": "Viber",
        "required": [
          "channel",
          "message_uuid",
          "to",
          "from",
          "timestamp"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "The channel that the message came in on",
            "enum": [
              "viber_service"
            ],
            "example": "viber_service"
          },
          "context": {
            "type": "object",
            "description": "Object containing contextual details for the inbound message when it is a response to another message.",
            "properties": {
              "message_uuid": {
                "type": "string",
                "description": "The ID of the message being replied to.",
                "example": "1234567890abcdef"
              }
            }
          },
          "message_uuid": {
            "$ref": "#/components/schemas/MessageUuid"
          },
          "to": {
            "$ref": "#/components/schemas/ToId"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "inboundMessageCommon": {
        "required": [
          "to",
          "from",
          "message_uuid",
          "message_type",
          "channel",
          "timestamp"
        ],
        "properties": {
          "message_uuid": {
            "type": "string",
            "description": "2way message id"
          },
          "to": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "from": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "timestamp": {
            "type": "string",
            "format": "date",
            "description": "The datetime of when webhook was sent"
          }
        }
      },
      "WaInboundMessageCommon": {
        "type": "object",
        "x-tab-id": "WaInboundMessageCommon",
        "required": [
          "channel",
          "message_uuid",
          "to",
          "from",
          "timestamp",
          "context_status"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "The channel that the message came in on",
            "enum": [
              "whatsapp"
            ],
            "example": "whatsapp"
          },
          "message_uuid": {
            "type": "string",
            "description": "2way message id"
          },
          "to": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "from": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "context_status": {
            "type": "string",
            "description": "Whether or not there is a context for this inbound message or not. If there is a context, and it is `available`, the context\ndetails will be contained in a `context` object. If there is a context, but it is `unavailable`, or if there is no context for\nmessage (`none`), then there will be no `context` object inluded in the body.\n",
            "enum": [
              "none",
              "available",
              "unavailable"
            ],
            "example": "available"
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "provider_message": {
            "type": "string",
            "description": "A message from the channel provider, which may contain a description, error codes or other information"
          }
        }
      },
      "Context": {
        "type": "object",
        "description": "This is only present for the Inbound Message where the user is quoting another message. It provides information about the quoted message and/or the product message being responded to.\n",
        "required": [
          "message_uuid",
          "message_from"
        ],
        "properties": {
          "message_uuid": {
            "type": "string",
            "example": "aaaaaaaa-bbbb-cccc-dddd-0123456789ab",
            "description": "The UUID of the message being quoted."
          },
          "message_from": {
            "type": "string",
            "example": "447700900000",
            "description": "The phone number of the **original sender** of the message being quoted in the [E.164](https://en.wikipedia.org/wiki/E.164) format."
          }
        }
      },
      "Profile": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The WhatsApp number's displayed profile name",
            "example": "Jane Smith"
          }
        }
      },
      "inboundEventsCommon": {
        "required": [
          "to",
          "from",
          "message_id",
          "message_type",
          "channel",
          "received_at",
          "timestamp"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "description": "The channel that the message came in on",
            "enum": [
              "whatsapp",
              "viber",
              "telegram",
              "sms",
              "rcs"
            ],
            "example": "whatsapp"
          },
          "message_id": {
            "type": "string",
            "description": "2way message id"
          },
          "client_ref": {
            "type": "string",
            "description": "Client reference of up to 100 characters. The reference will be present in every message status."
          },
          "to": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "from": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp",
            "description": "Time when webhook was sent"
          },
          "received_at": {
            "$ref": "#/components/schemas/Timestamp",
            "description": "Time when 2way has received the message"
          }
        }
      },
      "inboundMessageSMS": {
        "title": "SMS",
        "type": "object",
        "required": [
          "channel",
          "message_uuid",
          "to",
          "from",
          "timestamp",
          "text"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "enum": [
              "sms"
            ],
            "description": "The channel the message came in on",
            "example": "sms"
          },
          "message_uuid": {
            "$ref": "#/components/schemas/MessageUuid"
          },
          "to": {
            "$ref": "#/components/schemas/ToNumber"
          },
          "from": {
            "$ref": "#/components/schemas/FromAgent"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "text": {
            "example": "Hello From MMDSmart!",
            "type": "string",
            "description": "The UTF-8 encoded text of the inbound message.\n"
          },
          "sms": {
            "description": "Channel specific metadata for SMS",
            "type": "object",
            "properties": {
              "total_count": {
                "type": "string",
                "example": "2",
                "description": "The number of inbound SMS messages concatenated together to comprise this message. SMS messages are 160 characters, if an inbound message exceeds that size they are concatenated together to forma single message. This number indicates how many messages formed this webhook."
              },
              "num_messages": {
                "type": "string",
                "example": "2",
                "description": "The number of inbound SMS messages concatenated together to comprise this message. SMS messages are 160 characters, if an inbound message exceeds that size they are concatenated together to forma single message. This number indicates how many messages formed this webhook."
              },
              "keyword": {
                "type": "string",
                "example": "HELLO",
                "description": "The first word of the message sent to uppercase."
              }
            }
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          }
        }
      },
      "webhook": {
        "description": "Webhook for inbound channel",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://my-amazing-site/inbound",
            "description": "Webhook url."
          }
        }
      }
    }
  }
}