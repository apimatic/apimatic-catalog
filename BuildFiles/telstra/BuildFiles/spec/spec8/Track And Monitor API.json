{
  "openapi": "3.0.0",
  "info": {
    "version": "v1.8.2",
    "title": "Track and Monitor API",
    "description": "\n# Introduction\nNever stop to wonder where your things are again with Telstra Track and Monitor™ API.\n\nThis API will allow you to interact with your Telstra Track and Monitor IoT devices so that you can get device locations and get detailed device information across a wide range of networks;\n* CAT-M1 (Australia’s largest LPWAN network [IoT network coverage](https://www.telstra.com.au/business-enterprise/solutions/internet-of-things/iot-coverage)),\n* Telstra Air® Wi-Fi (Australia’s largest Wi-Fi network with more than 1 million points),\n* A Bluetooth Community.\n\nCoverage can be affected by local building density, terrain and vegetation. Speed and performance may vary with your location, device, and demand on the network. Refer to [Online Coverage Maps](https://www.telstra.com.au/business-enterprise/solutions/internet-of-things/iot-coverage).\n\n# Features\nThe Track and Monitor API provides the features below.\n\n| Feature | Description |\n| --- | --- |\n| `Last known location` | Provides the last known location with latitude, longitude and the DateTime stamp of when the last location signal was sent |\n| `Device details` | Returns details on Track and Monitor devices including estimated battery level, estimated temperature and tracking status |\n| `Device profile selection` | Change a device's profile to modify it's reporting characteristics and usage of onboard sensors |\n| `Location history` | Provides a history list of the location (latitude and longitude) of a device in a given date range, with a DateTime stamp for each location entry |\n| `Sensor history` | Provides a history list of the sensors of specific devices, with a DateTime stamp for each sensor entry |\n| `Zones` | Provides information on all geozones associated with the account |\n\n# Getting Access to the API\n\n## Requirements\nThe prerequisites before you can access and start using the Track and Monitor API are:\n1. You must be a Telstra Business customer (contact your Account Exec if you are an existing Telstra customer, or email telstradev@team.telstra.com if you want to create a new Business account)\n2. You will need to sign a contract between your Telstra Business customer account and Telstra. Track and Monitor IoT devices can be purchased only after signing the contract.\n\nFor more details see [Track and Monitor](https://www.telstra.com.au/business-enterprise/solutions/internet-of-things/vehicles-and-assets/track-and-monitor)\n\n\n# Frequently Asked Questions\n\n**Q: Is there a way we can have the maximum records pulled increased from 1,000 per call?**\n\nA. 1,000 response quota is set at all API levels. This can't be increased to ensure performance is maintained across the applications. \n\n**Q: What records will be returned if the response is trimmed to 1000 due to the max limit?**\n\nA. Records will be returned depending on the `$orderby` query parameter. \n\n**Q: Are access restriction policies in place on the API? e.g., calls rate limits by key, or bandwidth quotas**\n\nA. There are some limits applied at the API Gateway level, but you shouldn't hit these limits from our current experience.\n\n**Q: Is it possible to get sensory history and location history at the same time?**\n\nA. Not in the same API call. The best option is to call the API's separately for a consistent time interval across various sensor types for a given `deviceId`. \n\n**Q: Is there a id or record that links location and sensor history records together?**\n\nA. Sensor values and location may be recorded at independent times from each other. While signal date times may align for location and sensor records, no assumptions should be made about the synchronisation of records from different sensors and location.\n\n## Additional Notes\n\nAll `string <date-time>` fields are rounded when pulled from database to a precision of 1000 ms for API use. eg 2021-03-11T14:17:45.295Z, keep this in mind when doing comparisons of date-time values.\n\n## Run in Postman\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/ae408c4f5c9070338dbe)\n\nThe above button will provide a postman collection (containing all API calls)\n"
  },
  "paths": {
    "/v2/oauth/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Get OAuth2 Access Token",
        "description": "Returns an OAuth2 access token, token type and expiry.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2TokenRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuth2Token"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://tapi.telstra.com/v2/oauth/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'client_id=XXXXXXXXXXXX&client_secret=XXXXXXXXXXXX&grant_type=client_credentials&scope=LOT_DEVICES_READ'\n"
          }
        ]
      }
    },
    "/application/lot/v1/devices": {
      "get": {
        "tags": [
          "Device"
        ],
        "description": "Get Devices matching filter and arguments.\n\nAny property of the device schema can be used to filter. For a list of all device properties, see the response schema for 200 OK below.\nProperty names will need to be converted to PascalCase to use as a filter variable, ie serialNumber -> SerialNumber\n\nExample filters: \n- By serialNumber: `/devices?$filter=SerialNumber eq '12345678'`\n- By numerical comparison on lastBatteryLevel: `/devices?$filter=LastBatteryLevel le 30`\n- Multiple filters: `/devices?$filter=LastBatteryLevel le 40 and LastBatteryLevel le 60`\n\nPlease see section 4.5 of [ODATA Standard](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/) for more detailed information on how to use the `$filter` system query.\n\n\n**Device Type Ids**\n\nThe response parameter `deviceTypeId` uses a numeric value to represent the device type for the returned record. The table below contains the numeric device type id mappings to device type.\n\n| deviceTypeId | Device Type                      |\n| ------------ | -------------------------------- |\n| 1            | Bluetooth Tracking Tag           | \n| 2            | Mobile Devices                   | \n| 3            | Wifi Tag                         | \n| 4            | CAT-M1 Solar Tracking Unit       | \n| 8            | CAT-M1 Rechargeable Tracking Tag | \n| 10           | CAT-M1 Tracking Unit             | \n| 11           | Bluetooth Tracking Unit          | \n",
        "summary": "Get Devices by filter",
        "operationId": "Device_GetItems",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "description": "Filter using the [ODATA Standard](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/) and any property in response schema.",
            "schema": {
              "$ref": "#/components/schemas/ODataQueryOptionsDeviceDTO",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "LOT_DEVICES_READ"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://tapi.telstra.com/application/lot/v1/devices?$filter=SerialNumber+eq+%2712345678%27' \\\n-H 'Authorization: Bearer XXXXXXXXXXXX'\n"
          }
        ]
      }
    },
    "/application/lot/v1/devices/{deviceId}/profileChanges": {
      "post": {
        "tags": [
          "Device"
        ],
        "description": "Applies a profile to a device. Profiles configure how often devices report, what form of communication they use (Wi-Fi, GPS, etc.) and how they react to sensors.\n\nA profile change will take effect the next time the device checks in. \n\nA Wi-Fi and GPS profile is best for most customers. It's recommended for assets moving between urban locations, including indoor or storage. \n\nThe device scans for Wi-Fi access points and records the SSID and signal strength and uploads this data via the Telstra Cat-M1 network for location calculation. Therefore, a location can be identified where it is not possible to gain a GPS location, while also using less power. When the device does not observe nearby Wi-Fi access points, it will conduct a GPS scan.\n\nA GPS only profile is best for assets that are only outdoors or in rural areas.\n\nProfile selection is only available for the device types below. The available profiles for each device are also listed in the respective tables.  \n\n**CAT-M1 Tracking Unit (deviceTypeId = 10)**\n\n| Profile                        | Profile Id                           | Battery Usage  |\n|--------------------------------|--------------------------------------|----------------|\n| 24 hours Wi-Fi and GPS (Default)| f0b73c24-1127-4836-acac-b13d3d180a52 | Low            |\n| 24 hours GPS only              | 81a99fa3-703a-4627-ae05-92330d1351ab | Low            |\n| 24 hours Wi-Fi and GPS, plus start and stop movement reporting. Stop movement triggered after 15 minutes | e587796d-0f9e-4291-814b-bd50c4c5ad87 | Low |\n| 24 hours Wi-Fi and GPS, plus start and stop movement reporting. Stop movement triggered after 30 minutes | 54a8981a-5d70-4323-9ec6-be6dd17980e7 | Low | \n| 12 hours Wi-Fi and GPS         | 12b1a5e2-34c7-4c21-a012-3e3db9a32196 | Medium         |\n| 12 hours GPS only              | 0e563f0f-4d81-485a-90e5-31ae9db577ad | Medium         |\n| 24 hours Wi-Fi and GPS, plus start, stop and hourly reporting during movement. Stop movement triggered after 15 minutes | f18c1b1b-c746-4690-be3c-6e009dde095f | Medium | \n| 24 hours Wi-Fi and GPS, plus start, stop and hourly reporting during movement. Stop movement triggered after 30 minutes | baa94979-c61e-4f9e-8ea4-dfcbd5b09fbd | Medium |\n| 24 hours Wi-Fi and GPS, plus reporting when G force exceeds 2.5G | 4b68b02c-20bf-40ca-8a64-deea72fff21c | Medium | \n| 24 hours Wi-Fi and GPS, plus reporting when G force exceeds 5G | 5bebb777-417d-471c-afd7-5d67b61797b0 | Medium | \n| 6 hours Wi-Fi and GPS          | b82883a9-30d0-4f27-93d4-e3bfc6379a77 | High  |\n| 6 hours GPS only               | 5fe6cb9e-35a7-4334-9fd1-675f97ede003 | High  |\n| Recovery - 24 hours Wi-Fi and GPS, plus start, stop and 10 minute reporting during movement | b990ff99-80ae-4c8f-aaae-eff261df5337 | High  |\n| 24 hours Wi-Fi and GPS, plus Runtime monitoring | c56b79bb-b08d-4668-a413-755ac50c8859 | High |\n\n**CAT-M1 Rechargeable Tracking Tag (deviceTypeId = 8)**\n\n| Profile                                                  | Profile Id                           | Battery Usage  |\n|----------------------------------------------------------|--------------------------------------|----------------|\n| 20 minutes (moving), 12 hours (stationary) Wi-Fi and GPS | d21c1f62-eea5-4efd-97f5-796371199a75 | Low            |\n| 5 minutes (moving), 6 hours (stationary) Wi-Fi and GPS   | 87cbd7b7-e783-4c3c-8e92-5aa3055dd494 | Low            |\n| 5 minutes, Powered or Recovery                           | 5ee0d3f4-9266-4e36-88e3-7c74655714cd | Medium         |\n",
        "summary": "Change Device Profile",
        "operationId": "Device_ChangeProfile",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The deviceId of the device to apply a profile to.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceProfileChangeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The profile change was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceProfileChangeDTO"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X POST -H 'Authorization: Bearer XXXXXXXXXXXX' \\\n    -H \"Content-Type: application/json\" \\ \n    -d '{\"profileId\": \"5fe6cb9e-35a7-4334-9fd1-675f97ede003\"}' \\\n    https://tapi.telstra.com/application/lot/v1/devices/291f022e-66b9-46c9-bda5-f202e26b8acc/profileChanges\n"
          }
        ]
      }
    },
    "/application/lot/v1/devices/history": {
      "get": {
        "tags": [
          "Location History"
        ],
        "description": "Returns location history for a requested interval of time. \n\nA maximum of 1000 device locations are returned.\n\nThe `interval` parameter specifies the granularity in time that history records will be returned from the requested interval.\n\nFor a request with a chosen interval value `X`, the requested date range `[startDate, endDate]` will be broken into windows\n\n`L = [startDate, startDate + X), [startDate + X, startDate +2X), ..., [startDate + (N-1)X, endDate]`, where N is the discrete number of contiguous time windows of size `X` that fit in the requested date range.\n\nThe list of records will be compiled from the newest location record in each of these smaller windows. If there is no reported location record for a given window then no record will be returned for that time period.\n\nThe pseudocode below provides the flow for the generation of history records using the chosen interval parameter `X`. \n\n```\nN = (endDate - startDate) div X\nH = []\nL = [startDate, startDate + X), [startDate + X, startDate +2*X), ... [startDate + (N-1)*X, endDate]\nFOR every window in L:\n  IF location record exists in window\n    H.push(newest location record in window)\nRETURN H\n```\n\n## Available Interval Values \n\nThe `interval` parameter can take different granularities depending on the requested date interval length, ie between `startDate` and `endDate`. These are provided in the table below. \n\n| Date Range            | Interval Options (mins)               |\n|-----------------------|---------------------------------------|\n| 1 day to 6 days       | 1  \\|\\| 10 \\|\\| 60 (1 hour)           |\n| 7 days to 29 days     | 10 \\|\\| 60 (1 hour) \\|\\| 1440 (1 day) |\n| 30 days to 6 months   | 60 (1 hour) \\|\\| 1440 (1 day)         |\n| 6 months to 12 months | 60 (1 hour) \\|\\| 1440 (1 day)         |\n\n\nNote: As of April 2021 address is no longer provided via this endpoint. To find address please use a reverse geolocation api with the given lat and long.\n",
        "summary": "Get Device Location in Intervals",
        "operationId": "Device_LocationHistoryInIntervals_GetItems",
        "parameters": [
          {
            "name": "serialNumber",
            "in": "query",
            "required": true,
            "description": "The serial number of the device from which history is required.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "description": "The start date in ISO 8601 format (e.g. \"2018-01-01T12:00:00%2B00:00\") and UTC time. Records will be returned from a range inclusive of this start time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "description": "The end date in ISO 8601 format (e.g. \"2018-01-01T12:00:00%2B00:00\") and UTC time. Records will be returned from a range inclusive of this end time.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "required": true,
            "description": "The granularity of returned history records over time, in minutes. Refer to description above for more detail on how to choose this parameter.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceLocationDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "LOT_DEVICES_READ"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://tapi.telstra.com/application/lot/v1/devices/history?startDate=2018-12-01T06:00:00%2B00:00&endDate=2018-12-04T06:00:00%2B00:00&interval=60&serialNumber=12345678' \\\n-H 'Authorization: Bearer XXXXXXXXXXXX'\n"
          }
        ]
      }
    },
    "/application/lot/v1/devices/location": {
      "get": {
        "tags": [
          "Location History"
        ],
        "description": "Returns device locations for all devices within your subscription. A maximum of 1000 records is returned in any one query.\n\nIt is recommended to provide the API data filters via OData which will allow the consumer control over what results are returned using query options, as well as increase performance of the API.\n\nAt a minimum, we expect you to provide an `UpdatedAt` filter, to restrict the time period of data you are searching for along with `$skip`, `$top` and `$orderby` parameters. We suggest you order by `UpdatedAt`, to ensure your results are consistent with your filter query option.\n\nFiltering on datetime fields with an interval greater than 365 days is not supported. \n\nFor example, to find all device locations after a particular time period you can provide the filter below. This will also limit the response to 100 records with the first 100 skipped and will return a count with the number of records available.  \n\n`/devices/location?$filter=UpdatedAt gt datetimeoffset'2019-04-05T05:30:48Z'&$inlinecount=allpages&$orderby=UpdatedAt desc&$skip=100&$top=100`\n\nNote: As of April 2021 address is no longer provided via this endpoint. To find address please use a reverse geolocation api with the given lat and long.\n",
        "summary": "Get Device Location History items",
        "operationId": "Device_LocationHistory_GetItems",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "description": "Filter using the [ODATA Standard](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/) and any property in the response schema. Datetime intervals exceeding 365 days are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "required": false,
            "description": "Suggested to order by `UpdatedAt desc`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "description": "Number of records to skip. IMPORTANT - it is mandatory to pass in the `orderby` parameter first in the URL when using a skip to paginate data",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "description": "Maximum number of records to return. Note - if `top` is used before `skip` it is possible to skip over `top` values",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceLocationDTO"
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenDateTimeResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "LOT_DEVICES_READ"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://tapi.telstra.com/application/lot/v1/devices/location?$filter=UpdatedAt gt datetimeoffset'2019-04-05T05:30:48Z'&$inlinecount=allpages&$orderby=UpdatedAt desc&$skip=100$top=100' \\\n-H 'Authorization: Bearer XXXXXXXXXXXX'\n"
          }
        ]
      }
    },
    "/application/lot/v1/devices/sensorhistory": {
      "get": {
        "tags": [
          "Sensor History"
        ],
        "description": "Returns a historical list of all sensor values for all devices within your subscription. A maximum of 1000 records is returned in any one query.\n\nInclude parameter `deviceId` for a historical list of *a specific device* within your subscription.  eg d14c68e0-0e01-4fbd-8c89-a831a25a3b94, this value is a guid and as such should not include quotations.\n\nIf you are unsure of the devices on your subscription please use the device endpoint to retrieve their `deviceId`.\n\nIt is recommended to provide the API data filters via OData which will allow the consumer control over what results are returned using query options, as well as increase performance of the API.\n\nAt a minimum, we recommended you to provide a `SignalDateTime` filter, to restrict the time period of data you are searching for along with `$top` and `$orderby` parameters.\n\nFiltering on datetime fields with an interval greater than 365 days is not supported. \n\nFor example, to find all sensor history with a particular `DeviceTypeId` and `SensorTypeId` you can provide the following filter\n\n```$filter=DeviceTypeId eq 4 and SensorTypeId eq 3&$orderby=SignalDateTime desc&$inlinecount=allpages&$top=100```. This query will give you the top 100 records and a count of all records available. All ordered by `SignalDateTime`.\n\nOur CAT-M1 Solar and CAT-M1 tracking units are our only devices that are equipped to report sensor values. The available sensor values for each of these device types are given in the table below.\n\n**CAT-M1 Solar Tracking Unit (deviceTypeId = 4)**\n\n| SensorTypeId | Name                  | DataType | Description                                                                |\n| ------------ | --------------------- | -------- | ---------------------------------------------------------------------------|\n| 1            | IsCharging            | Boolean  | A value indicating whether the device battery is being charged.            |\n| 2            | IsExtPowered          | Boolean  | A value indicating whether an external battery is attached to the device.  |\n| 3            | IsMoving              | Boolean  | A value indicating whether the device is moving.                           |\n| 4            | Bearing               | Int64    | Current direction of the device. A person's way of standing or moving.     |\n| 5            | Floor                 | Int64    | A floor level where the device is located.                                 |\n| 6            | Altitude              | Double   | Current altitude of the device. In relation to sea level or ground level.  |\n| 7            | Speed                 | Double   | Current speed of the device in cm/s.                                       |\n| 8            | IsDoorOpen            | Boolean  | A value indicating whether a door is open.                                 |\n| 20           | Current               | Int32    | Charging Current.                                                          |\n| 21           | SolarmA               | Int32    | Charging Solar mA.                                                         |\n| 22           | SolarmV               | Int32    | Charging Solar mV.                                                         |\n| 23           | Voltage               | Int32    | Charging Voltage.                                                          |\n\n\n**CAT-M1 Tracking Unit (deviceTypeId = 10)**\n\n| SensorTypeId | Name                  | DataType | Description                                                                |\n| ------------ | --------------------- | -------- | ---------------------------------------------------------------------------|\n| 9            | StatusCodes           | String   | The description of each status code is defined in the table below          |\n| 10           | HasStatusCode         | Boolean  | A value indicating whether one or more status codes exists                 | \n| 11           | PayloadId             | Int64    | Count of payload / cellular transmissions.                                 | \n| 13           | WifiOnTime            | Int64    | In seconds                                                                 | \n| 14           | GpsOnTime             | Int64    | In seconds                                                                 | \n| 15           | CellularOnTime        | Int64    | In seconds                                                                 | \n| 16           | TimeInShippingMode    | Int64    | In seconds                                                                 | \n| 17           | TimeOutOfShippingMode | Int64    | In seconds                                                                 | \n| 18           | ButtonCount           | Int64    | Magnet swipes for this device type                                         | \n| 19           | ResetCount            | Int64    | Number of reboots                                                          | \n| 24           | HighAccelerationCount | Int32    | The number of high acceleration events this device has experienced. A high acceleration event is recorded only when your device is on a profile which includes high g force forced check in. A high acceleration event is recorded when the device experiences an impact with a force greater than the threshold configured in its profile. |\n| 25           | TimeInMotion          | Int64    | TimeInMotion  is set to the cumulative seconds in use (Run Time or Time in motion), and is updated each time the device checks in over Cat-M1. |\n| 26           | BatterySnapshot       | String   | Json containing analytic values from when battery is changed. In the case of a new device, values will be zero (0). Except the battery identifier, sourceId. |\n| 27           | ImpactForce           | Double   | ImpactForce is the actual reported G-force at the time of impact, and is updated each time the device detects impact above the defined threshold (motionSensitivity); then checks in over Cat-M1. |\n\n**Cat-M1 Tracking Unit Status Codes**\n\n| Code\t| Status Text                                                                                             |\n| ----- | ------------------------------------------------------------------------------------------------------- |\n| CEL04 |\tInsufficient network coverage  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      |\n| CEL05 |\tUnable to connect to platform. Device assistance from manufacturer required \t\t\t\t\t              \t  |\n| CEL10 |\tDevice captured too many records while out of coverage; oldest records removed  \t\t\t\t\t              |\n| ENV01 |\tDevice operated outside recommended operating temperature (5'C to 50'C)  \t\t\t\t\t\t\t                  |\n| ENV02 |\tDevice operated outside absolute minimum or maximum operating temperature conditions (-20'C to 60'C)    |\n| GPS02 |\tFailed to obtain GPS and therefore location is not available  \t\t\t\t\t\t\t\t\t\t                      |\n| GPS03 |\tFailed to obtain a quality GPS reading and therefore location is not available                \t\t\t\t  |\n| OPE02 |\tUpload forced by quadruple magnet swipe \t\t\t\t\t\t\t\t\t\t\t                        \t\t        \t\t  |\n| OPE03 |\tDevice activated successfully \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                    \t\t  |\n| OPE05 |\tDevice has failed to activate\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      \t  |\n| OPE11 |\tScheduled tracking event delayed due to temperature \t\t\t\t\t                          \t\t\t\t\t\t\t  |\n| OPE12 |\tScheduled tracking event delayed due to battery status \t\t\t\t                        \t\t\t\t\t\t\t\t  |\n| OPE15 |\tMotion start event recorded  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                        \t                |\n| OPE16 |\tMotion stop event recorded  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      \t  |\n| OPE17 |\tHigh G Force (impact) event recorded  \t\t\t\t\t\t\t\t\t\t\t\t                        \t        \t\t\t  |\n| PWR02 |\tLow battery, please replace  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                        \t                |\n| TST13 |\tDevice oriented incorrectly. To ensure your device functions correctly, mount according to instructions in the device Quick Start Guide|\n| WIF02 |\tInsufficient Wi-Fi networks within range to calculate location  \t\t\t\t\t\t\t\t\t                      |\n\n\n| \t\t\t\t\t\t\t\t\t\t\t\t\t\t               \tOther Codes (Telstra Internal) \t\t\t\t\t\t\t\t\t\t                 \t|\n| --------------------------------------------------------------------------------------------------------------- |\n|CEL01,CEL02,CEL03,CEL06,CEL07,CEL08,CEL09,CEL18,CEL17,CEL21,CEL22,GPS01,OPE01,OPE04,OPE06,     \t\t              |\n|OPE07,OPE08,OPE09,OPE10,OPE13,OPE14,OTA01,OTA02,OTA03,OTA04,OTA05,OTA06,OTA07,OTA08,OTA09, \t\t                 \t|\n|OTA10,OTA11,OTA12,OTA13,OTA14,OTA15,OTA16,OTA17,OTA18,OTA19,PWR01,PWR03,SNS01,SNS02,SNS04,                       |\n|SYS01,SYS02,SYS03,SYS04,SYS05,SYS06,SYS07,SYS08,TST01,TST02,TST03,TST04,TST05,TST06,TST07,                       |\n|TST08,TST09,TST10,TST11,TST12,TST14,TST15,TST16,WIF01\t\t\t\t\t                                                  |                \n",
        "summary": "Get Sensor History",
        "operationId": "Device_SensorValuesHistory_GetItem",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "required": true,
            "description": "The globally unique identifier (GUID). eg \"d14c68e0-0e01-4fbd-8c89-a831a25a3b94\"",
            "schema": {
              "type": "guid"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "description": "Filter using the [ODATA Standard](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/) and any property in the response schema. Datetime intervals exceeding 365 days are not supported.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "description": "Number of records to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "description": "Maximum number of records to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "required": false,
            "description": "Sort the result-set in ascending or descending order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceSensorHistoryValueDTO"
                  }
                }
              }
            }
          },
          "403": {
            "description": "FORBIDDEN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenDateTimeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "LOT_DEVICES_READ"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://tapi.telstra.com/application/lot/v1/devices/sensorhistory?deviceId=d14c68e0-0e01-4fbd-8c89-a831a25a3b94&$filter=SignalDateTime gt datetimeoffset'2020-01-25T23:02:28Z' and SensorTypeId eq 3&$orderby=SignalDateTime desc&$inlinecount=allpages&$top=100' \\\n-H 'Authorization: Bearer XXXXXXXXXXXX'\n"
          }
        ]
      }
    },
    "/application/lot/v1/zones": {
      "get": {
        "tags": [
          "Zones"
        ],
        "description": "Returns all geozones associated with the account.\n\nA maximum of 1000 zones are returned.\n\nThere are two types of geozone:\n\n**Geozone 'Circular Geozone'**\n\n  A circular geozone is defined by a center (given by a latitude and longitude) as well as a radius determining the size of the circle.\n\n**Polygon 'Custom Geozone'**\n\n  The area of a custom geozone is defined by the region property. This is an object made up of:\n    **coordinateSystemId -** references the [coordinateSystem](https://developers.arcgis.com/javascript/3/jshelp/ref_coordsystems.html) used by the coordinates\n    **wellKnownText -** [a standard format for representing Geo information](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)\n\nNote: As of April 2021 address is no longer provided via this endpoint. To find address please use a reverse geolocation api with the given lat and long.\n\nNote: No zone will have a region and a radius\n",
        "summary": "Get all zones",
        "operationId": "Zone_GetItems",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "description": "Filter using the [ODATA Standard](https://www.odata.org/documentation/odata-version-2-0/uri-conventions/) and any property in the response schema.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "required": false,
            "description": "Number of records to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "required": false,
            "description": "Maximum number of records to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "required": false,
            "description": "Sort the result-set in ascending or descending order",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "required": false,
            "description": "Comma seperated list of fields to expand, i.e `Region`, `Categories`, `Categories,Region`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ZoneDTO"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "OAuth2": [
              "LOT_DEVICES_READ"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n'https://tapi.telstra.com/application/lot/v1/zones' \\\n-H 'Authorization: Bearer XXXXXXXXXXXX'\n"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://tapi.telstra.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "description": "Token request is a POST method, the GET method has been deprecated.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://tapi.telstra.com/v2/oauth/token",
            "scopes": {
              "LOT_DEVICES_READ": "Access to read Track and Monitor device information"
            }
          }
        }
      }
    },
    "schemas": {
      "Object": {
        "type": "object",
        "properties": {}
      },
      "OAuth2TokenRequestBody": {
        "type": "object",
        "required": [
          "client_id",
          "client_secret",
          "grant_type",
          "scope"
        ],
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Your granted developer client key. Go to https://dev.telstra.com/user/me/apps to retrieve your client key."
          },
          "client_secret": {
            "type": "string",
            "description": "Your granted developer client secret. Go to https://dev.telstra.com/user/me/apps to retrieve your client secret."
          },
          "grant_type": {
            "type": "string",
            "description": "Use 'client_credentials'. This specifies the OAuth grant type."
          },
          "scope": {
            "type": "string",
            "description": "Use 'LOT_DEVICES_READ'. This is the only supported scope at present. This specifies that the granted token be authorized to have read access."
          }
        }
      },
      "OAuth2Token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "OAuth access token. This token should be kept secret."
          },
          "token_type": {
            "type": "string",
            "description": "OAuth token type."
          },
          "expires_in": {
            "type": "string",
            "description": "OAuth token expiry time in seconds. Tokens expire in one hour."
          }
        }
      },
      "ForbiddenDateTimeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "FILTER_MAX_DATE_RANGE_EXCEEDED - if filter included a date interval greater than 365 days."
          }
        }
      },
      "DeviceDTO": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "Specifies if the device has been removed (true) from your subscription."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this device record was last updated, in ISO 8601 format and UTC time."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this device record was created, in ISO 8601 format and UTC time."
          },
          "version": {
            "type": "string",
            "description": "A string that changes each time the device record is updated."
          },
          "id": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this resource."
          },
          "radiosTurnedOff": {
            "type": "boolean",
            "description": "Specifies if the radios of the device are presently on or off."
          },
          "notes": {
            "type": "string",
            "description": "Custom notes added to the device."
          },
          "lastTemperature": {
            "format": "double",
            "type": "number",
            "description": "The last reported device temperature, in degrees Celsius. Will be -1000 if a temperatue has never been reported for this device."
          },
          "lastCommunicatedDateTime": {
            "format": "date-time",
            "type": "string",
            "description": "The last time a device communicated, populated for only catm1 devices. In ISO 8601 format and UTC time.ISO 8601 format and UTC time."
          },
          "lastSignalDateTime": {
            "format": "date-time",
            "type": "string",
            "description": "The last time a signal was received from this device, in ISO 8601 format and UTC time."
          },
          "lastRSSISignalLevel": {
            "format": "int32",
            "type": "integer",
            "description": "The last reported received signal strength indicator (RSSI) when the device was detected via WiFi or Bluetooth. Will default to -1000 if an RSSI was never reported."
          },
          "lastAccuracy": {
            "format": "double",
            "type": "number",
            "description": "The radial accuracy from the last received location, in metres. Will be -1000 if a location has never been reported for this device."
          },
          "lastLatitude": {
            "format": "double",
            "type": "number",
            "description": "The last reported latitude of the device, with the corresponding longitude in lastLongitude. Will be -1000 if a location has never been reported for this device."
          },
          "lastLongitude": {
            "format": "double",
            "type": "number",
            "description": "The last reported longitude of the device, with the corresponding longitude in lastLatitude. Will be -1000 if a location has never been reported for this device."
          },
          "isTracked": {
            "type": "boolean",
            "description": "Whether the device is currently being tracked."
          },
          "isLost": {
            "type": "boolean",
            "description": "Whether the device is in lost mode."
          },
          "lastBatteryLevel": {
            "format": "int32",
            "type": "integer",
            "description": "The last reported battery level from the device, as a value between 0-100. Will be -1 if a battery level has never been reported for this device."
          },
          "deviceTypeId": {
            "format": "int32",
            "type": "integer",
            "description": "Device Types - 1 (Bluetooth Tracking Tag), 2 (Mobile Devices), 3 (Wifi Tag),  4 (CAT-M1 Solar Tracking Unit), 8 (CAT-M1 Rechargeable Tracking Tag), 10 (CAT-M1 Tracking Unit), 11 (Bluetooth Tracking Unit)."
          },
          "serialNumber": {
            "type": "string",
            "description": "The unique hardware serial number of the device."
          },
          "bluetoothId": {
            "type": "string",
            "description": "The 6 byte globally unique bluetooth address for this device."
          },
          "deviceFriendlyName": {
            "type": "string",
            "description": "A human readable description of the device."
          },
          "deviceId": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this device."
          },
          "latestFirmware": {
            "type": "boolean",
            "description": "Whether the device is on latest firmware."
          }
        }
      },
      "DeviceProfileChangeDTO": {
        "type": "object",
        "required": [
          "profileId"
        ],
        "properties": {
          "profileId": {
            "type": "string",
            "description": "The id of the profile to apply to the device."
          }
        }
      },
      "DeviceSensorHistoryValueDTO": {
        "type": "object",
        "properties": {
          "deviceSensorHistoryValueId": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this sensor record."
          },
          "deviceId": {
            "type": "string",
            "description": "The unique device Id for the device that reported this sensor value."
          },
          "sensorTypeId": {
            "type": "integer",
            "description": "The sensor type for this value. Please see the tables above for the possible sensors available for the given device type."
          },
          "deviceTypeId": {
            "format": "int32",
            "type": "integer",
            "description": "Device Types - 1 (Bluetooth Tracking Tag), 2 (Mobile Devices), 3 (Wifi Tag),  4 (CAT-M1 Solar Tracking Unit), 8 (CAT-M1 Rechargeable Tracking Tag), 10 (CAT-M1 Tracking Unit), 11 (Bluetooth Tracking Unit)."
          },
          "booleanSensorValue": {
            "type": "boolean",
            "description": "The boolean value of the sensor. This field is only present if the sensor value of this record is of a boolean type."
          },
          "numberSensorValue": {
            "type": "number",
            "description": "The numerical value of the sensor. This field is only present if the sensor value of this record is of a numerical type."
          },
          "sensorName": {
            "type": "string",
            "description": "The sensor name corresponding to the sensor type for this record."
          },
          "sensorValue": {
            "type": "string",
            "description": "The sensor value as a string."
          },
          "signalDateTime": {
            "format": "date-time",
            "type": "string",
            "description": "When the sensor value was recorded, in ISO 8601 format and UTC time."
          },
          "id": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this resource."
          },
          "version": {
            "type": "string",
            "description": "A string that changes value to denote a new version each time this record is modified."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this sensor history record was created, in ISO 8601 format and UTC time."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this device record was last updated, in ISO 8601 format and UTC time."
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "DeviceLocationDTO": {
        "type": "object",
        "properties": {
          "deviceLocationId": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this location record."
          },
          "deviceId": {
            "type": "string",
            "description": "The unique 36 character id of the device that represents this record."
          },
          "longitude": {
            "format": "double",
            "type": "number",
            "description": "The longitude of the device in this location record."
          },
          "latitude": {
            "format": "double",
            "type": "number",
            "description": "The latitude of the device in this location record."
          },
          "accuracy": {
            "format": "double",
            "type": "number",
            "description": "The radial accuracy for this location measurement, in metres."
          },
          "batteryLevel": {
            "format": "int32",
            "type": "integer",
            "description": "The battery level reported by the device when it recorded it's location."
          },
          "signalDateTime": {
            "format": "date-time",
            "type": "string",
            "description": "When the device recorded it's location, in ISO 8601 format and UTC time."
          },
          "temperature": {
            "format": "double",
            "type": "number",
            "description": "The recorded temperature in degrees Celsius."
          },
          "id": {
            "type": "string",
            "description": "A 36 character string that uniquely identifies this resource."
          },
          "version": {
            "type": "string",
            "description": "A string that changes value to denote a new version each time this record is modified."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this location record was created, in ISO 8601 format and UTC time."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this location record was updated, in ISO 8601 format and UTC time. Location records can be updated if we receive telemetry from another source that provides greater accuracy"
          },
          "deleted": {
            "type": "boolean",
            "description": "Specifies if the device has been removed (true) from your subscription."
          }
        }
      },
      "ZoneDTO": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this zone was last updated, in ISO 8601 format and UTC time."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When this zone was created, in ISO 8601 format and UTC time."
          },
          "version": {
            "type": "string",
            "description": "A string that changes value to denote a new version each time this record is modified."
          },
          "id": {
            "type": "string",
            "description": "A unique id that identifies this record."
          },
          "isHomeZone": {
            "type": "boolean",
            "description": "Whether the zone has been set as the home zone."
          },
          "radius": {
            "type": "number",
            "description": "The radius of the zone's circle in metres."
          },
          "longitude": {
            "type": "number",
            "description": "The centre longitude of the zone, only populated for circular zones."
          },
          "latitude": {
            "type": "number",
            "description": "The centre latitude of the zone, only populated for circular zones."
          },
          "iconName": {
            "type": "string"
          },
          "friendlyName": {
            "type": "string",
            "description": "The human friendly name assigned to the zone."
          },
          "region": {
            "type": "object",
            "description": "Contains a geospatial representation of the 'Custom Geozone' type, ie polygon zones.",
            "properties": {
              "coordinateSystemId": {
                "type": "number",
                "description": "References the coordinateSystem used by the coordinates"
              },
              "wellKnownText": {
                "type": "string",
                "description": "The polygon zone's coordinates in wellKnownText format. See [here](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) for more details."
              }
            }
          },
          "categories": {
            "type": "array",
            "description": "The list of categories assigned to the geozone.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "createdAt": {
                  "format": "date-time",
                  "type": "string"
                },
                "updatedAt": {
                  "format": "date-time",
                  "type": "string"
                },
                "deleted": {
                  "type": "boolean"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "The type of the geozone, either 'Geozone' for a circular zone or 'Custom' for a polygone zone."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The unique id for the subscription that this zone belongs to."
          },
          "euid": {
            "type": "string",
            "description": "The unique id for the user that this zone belongs to."
          },
          "zoneId": {
            "type": "string",
            "description": "A unique id that identifies this zone."
          }
        }
      },
      "ODataQueryOptionsDeviceDTO": {
        "type": "object",
        "properties": {
          "ifmatch": {
            "$ref": "#/components/schemas/Object"
          },
          "ifnonematch": {
            "$ref": "#/components/schemas/Object"
          },
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "request": {
            "$ref": "#/components/schemas/Object"
          },
          "rawvalues": {
            "$ref": "#/components/schemas/ODataRawQueryOptions"
          },
          "selectexpand": {
            "$ref": "#/components/schemas/SelectExpandQueryOption"
          },
          "filter": {
            "$ref": "#/components/schemas/FilterQueryOption"
          },
          "orderby": {
            "$ref": "#/components/schemas/OrderByQueryOption"
          },
          "skip": {
            "$ref": "#/components/schemas/SkipQueryOption"
          },
          "top": {
            "$ref": "#/components/schemas/TopQueryOption"
          },
          "inlinecount": {
            "$ref": "#/components/schemas/InlineCountQueryOption"
          },
          "validator": {
            "$ref": "#/components/schemas/ODataQueryValidator"
          }
        }
      },
      "ODataQueryContext": {
        "type": "object",
        "properties": {
          "model": {
            "$ref": "#/components/schemas/IEdmModel"
          },
          "elementType": {
            "$ref": "#/components/schemas/IEdmType"
          },
          "elementClrType": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ODataRawQueryOptions": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "readOnly": true
          },
          "orderBy": {
            "type": "string",
            "readOnly": true
          },
          "top": {
            "type": "string",
            "readOnly": true
          },
          "skip": {
            "type": "string",
            "readOnly": true
          },
          "select": {
            "type": "string",
            "readOnly": true
          },
          "expand": {
            "type": "string",
            "readOnly": true
          },
          "inlineCount": {
            "type": "string",
            "readOnly": true
          },
          "format": {
            "type": "string",
            "readOnly": true
          },
          "skipToken": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SelectExpandQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "rawSelect": {
            "type": "string",
            "readOnly": true
          },
          "rawExpand": {
            "type": "string",
            "readOnly": true
          },
          "validator": {
            "$ref": "#/components/schemas/SelectExpandQueryValidator"
          },
          "selectExpandClause": {
            "$ref": "#/components/schemas/SelectExpandClause"
          }
        }
      },
      "FilterQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "validator": {
            "$ref": "#/components/schemas/FilterQueryValidator"
          },
          "filterClause": {
            "$ref": "#/components/schemas/FilterClause"
          },
          "rawValue": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "OrderByQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "orderByNodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderByNode"
            },
            "readOnly": true
          },
          "rawValue": {
            "type": "string",
            "readOnly": true
          },
          "validator": {
            "$ref": "#/components/schemas/OrderByQueryValidator"
          },
          "orderByClause": {
            "$ref": "#/components/schemas/OrderByClause"
          }
        }
      },
      "SkipQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "rawValue": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "format": "int32",
            "type": "integer",
            "readOnly": true
          },
          "validator": {
            "$ref": "#/components/schemas/SkipQueryValidator"
          }
        }
      },
      "TopQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "rawValue": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "format": "int32",
            "type": "integer",
            "readOnly": true
          },
          "validator": {
            "$ref": "#/components/schemas/TopQueryValidator"
          }
        }
      },
      "InlineCountQueryOption": {
        "type": "object",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/ODataQueryContext"
          },
          "rawValue": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "format": "int32",
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "ODataQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "IEdmModel": {
        "type": "object",
        "properties": {
          "schemaElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmSchemaElement"
            },
            "readOnly": true
          },
          "vocabularyAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmVocabularyAnnotation"
            },
            "readOnly": true
          },
          "referencedModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEdmModel"
            },
            "readOnly": true
          },
          "directValueAnnotationsManager": {
            "$ref": "#/components/schemas/IEdmDirectValueAnnotationsManager"
          }
        }
      },
      "IEdmType": {
        "type": "object",
        "properties": {
          "typeKind": {
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "SelectExpandQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "SelectExpandClause": {
        "type": "object",
        "properties": {
          "selectedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectItem"
            },
            "readOnly": true
          },
          "allSelected": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "FilterQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "FilterClause": {
        "type": "object",
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/SingleValueNode"
          },
          "rangeVariable": {
            "$ref": "#/components/schemas/RangeVariable"
          },
          "itemType": {
            "$ref": "#/components/schemas/IEdmTypeReference"
          }
        }
      },
      "OrderByNode": {
        "type": "object",
        "properties": {
          "direction": {
            "format": "int32",
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "OrderByQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "OrderByClause": {
        "type": "object",
        "properties": {
          "thenBy": {
            "$ref": "#/components/schemas/OrderByClause"
          },
          "expression": {
            "$ref": "#/components/schemas/SingleValueNode"
          },
          "direction": {
            "format": "int32",
            "enum": [
              0,
              1
            ],
            "type": "integer",
            "readOnly": true
          },
          "rangeVariable": {
            "$ref": "#/components/schemas/RangeVariable"
          },
          "itemType": {
            "$ref": "#/components/schemas/IEdmTypeReference"
          }
        }
      },
      "SkipQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "TopQueryValidator": {
        "type": "object",
        "properties": {}
      },
      "IEdmSchemaElement": {
        "type": "object",
        "properties": {
          "schemaElementKind": {
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer",
            "readOnly": true
          },
          "namespace": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "IEdmVocabularyAnnotation": {
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string",
            "readOnly": true
          },
          "term": {
            "$ref": "#/components/schemas/IEdmTerm"
          },
          "target": {
            "$ref": "#/components/schemas/IEdmVocabularyAnnotatable"
          }
        }
      },
      "IEdmDirectValueAnnotationsManager": {
        "type": "object",
        "properties": {}
      },
      "SelectItem": {
        "type": "object",
        "properties": {}
      },
      "SingleValueNode": {
        "type": "object",
        "properties": {
          "typeReference": {
            "$ref": "#/components/schemas/IEdmTypeReference"
          },
          "kind": {
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20
            ],
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "RangeVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "typeReference": {
            "$ref": "#/components/schemas/IEdmTypeReference"
          },
          "kind": {
            "format": "int32",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "IEdmTypeReference": {
        "type": "object",
        "properties": {
          "isNullable": {
            "type": "boolean",
            "readOnly": true
          },
          "definition": {
            "$ref": "#/components/schemas/IEdmType"
          }
        }
      },
      "IEdmTerm": {
        "type": "object",
        "properties": {
          "termKind": {
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "readOnly": true
          },
          "schemaElementKind": {
            "format": "int32",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "integer",
            "readOnly": true
          },
          "namespace": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "IEdmVocabularyAnnotatable": {
        "type": "object",
        "properties": {}
      }
    }
  }
}