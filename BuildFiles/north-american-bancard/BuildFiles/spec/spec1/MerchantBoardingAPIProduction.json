{
  "openapi": "3.0.3",
  "info": {
    "title": "Merchant Boarding API",
    "version": "1.37",
    "description": "\n# Overview\nThe ISV Enrollment API is an all-in-one API that enables software partners to submit merchant applications. </br>The ISV Enrollment API offers a seamless, streamlined experience, that adds value to existing technology by</br> simplifying and extending existing platform capabilities and functionalities.\n## Getting Started\n Before starting with enrollment application process, the client needs to create an application template using</br> Partner Portalâ€™s Enrollment tool or a predefined system template can be used. The template defines the</br>equipment and pricing options that will be applied to the application. Each template has a unique Template </br>ID, referred to as Plan ID within the API specification.\n\nAuthentication is required every time an API request is made. Authentication is granted through the use of a</br> token. A token is granted when a user calls the authentication endpoint and\nsubmits a valid Client ID </br> and Client Secret pair. A Client ID and Client Secret are provided when a user initially requests access to the </br>API. See Authentication section for more details.\n ## Resource URLs\n - Sandbox:\n    - ISV Enrollment API: https://enrollment-api-sandbox.paymentshub.com/enroll\n\n\n - Production:\n    - ISV Enrollment API: https://enrollment-api.paymentshub.com/enroll",
    "contact": {
      "name": "API Support",
      "email": "developers@paymentshub.com"
    }
  },
  "servers": [
    {
      "url": "https://enrollment-api.paymentshub.com",
      "description": "Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "API key to authorize requests.</br><b> A Bearer Token is needed to be set in the Authorization header of every API call.</b></br> For additional support you can contact us."
      }
    },
    "schemas": {
      "numberPercentage": {
        "title": "numberPercentage",
        "description": "Percentage of the business that the Principal has ownership of. Number in percentage format. Range 0 ~ 100. One of the Principals must have greater than 75% ownership.",
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 100,
        "example": 50.8
      },
      "businessStatisticsAmount": {
        "title": "businessStatisticsAmount",
        "description": "Business transaction statistics amount.",
        "type": "number",
        "format": "float",
        "minimum": 1,
        "maximum": 99999999.99,
        "default": 1,
        "example": 1001
      },
      "applicationDocumentId": {
        "title": "applicationDocumentId",
        "description": "Auto-generated number associated with the document that can be used to access it. This is the value returned in the fileId parameter from the Attach Document endpoint.",
        "type": "number",
        "format": "int32",
        "minimum": 1,
        "example": 12345
      },
      "twoFactorAuthCode": {
        "title": "twoFactorAuthCode",
        "description": "Two-Factor Authentication code.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "example": "1234"
      },
      "name": {
        "title": "name",
        "description": "Person's first or last name.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 40,
        "example": "John"
      },
      "socialSecurityNumber": {
        "title": "socialSecurityNumber",
        "description": "Social Security Number (SSN). For initial merchant application creation, SSN could be 4 or 9 digits. For final application submission, SSN must be 9 digits.",
        "type": "string",
        "format": "string",
        "pattern": "^(\\d{9}|\\d{4})$",
        "minLength": 9,
        "maxLength": 9,
        "default": null,
        "example": "987654321",
        "nullable": true
      },
      "dateOfBirth": {
        "title": "dateOfBirth",
        "description": "Date of birth in YYYY-MM-DD format.",
        "type": "string",
        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
        "minLength": 10,
        "maxLength": 10,
        "example": "1999-01-31"
      },
      "driverLicenseNumber": {
        "title": "driverLicenseNumber",
        "description": "Driver's license number (Required if driver's license issued state is entered).",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 40,
        "nullable": true,
        "default": null,
        "example": "ABC1234567890"
      },
      "driverLicenseIssuedState": {
        "title": "driverLicenseIssuedState",
        "description": "Address State (abbreviated) in which the driver's license was issued (Required if driver's license number is entered).",
        "type": "string",
        "format": "string",
        "minLength": 2,
        "maxLength": 2,
        "nullable": true,
        "default": null,
        "enum": [
          "AK",
          "AL",
          "AR",
          "AZ",
          "CA",
          "CO",
          "CT",
          "DC",
          "DE",
          "FL",
          "GA",
          "GU",
          "HI",
          "IA",
          "ID",
          "IL",
          "IN",
          "KS",
          "KY",
          "LA",
          "MA",
          "MD",
          "ME",
          "MI",
          "MN",
          "MO",
          "MP",
          "MS",
          "MT",
          "NC",
          "ND",
          "NE",
          "NH",
          "NJ",
          "NM",
          "NV",
          "NY",
          "OH",
          "OK",
          "OR",
          "PA",
          "PR",
          "RI",
          "SC",
          "SD",
          "TN",
          "TX",
          "UT",
          "VA",
          "VI",
          "VT",
          "WA",
          "WI",
          "WV",
          "WY",
          null
        ],
        "example": "MI"
      },
      "phoneNumber": {
        "title": "phoneNumber",
        "description": "Phone number.",
        "type": "string",
        "format": "string",
        "pattern": "^\\d{10}$",
        "minLength": 10,
        "maxLength": 10,
        "default": null,
        "example": "1234567890"
      },
      "email": {
        "title": "email",
        "description": "Email address.",
        "type": "string",
        "format": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9._%+-]{0,63}@(?:[A-Za-z0-9-]{1,63}\\.)+[A-Za-z]{2,63}$",
        "minLength": 3,
        "maxLength": 255,
        "default": null,
        "example": "email@example.com"
      },
      "street": {
        "title": "street",
        "description": "Street Address Line 1.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 80,
        "default": null,
        "example": "250 Stephenson Hwy"
      },
      "street2": {
        "title": "street2",
        "description": "Street Address Line 2.",
        "type": "string",
        "format": "string",
        "minLength": 0,
        "maxLength": 80,
        "default": null,
        "example": "Suite 100"
      },
      "city": {
        "title": "city",
        "description": "Address City.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 40,
        "default": null,
        "example": "Troy"
      },
      "state": {
        "title": "state",
        "description": "Address State (abbreviated).",
        "type": "string",
        "format": "string",
        "minLength": 2,
        "maxLength": 2,
        "enum": [
          "AK",
          "AL",
          "AR",
          "AZ",
          "CA",
          "CO",
          "CT",
          "DC",
          "DE",
          "FL",
          "GA",
          "GU",
          "HI",
          "IA",
          "ID",
          "IL",
          "IN",
          "KS",
          "KY",
          "LA",
          "MA",
          "MD",
          "ME",
          "MI",
          "MN",
          "MO",
          "MP",
          "MS",
          "MT",
          "NC",
          "ND",
          "NE",
          "NH",
          "NJ",
          "NM",
          "NV",
          "NY",
          "OH",
          "OK",
          "OR",
          "PA",
          "PR",
          "RI",
          "SC",
          "SD",
          "TN",
          "TX",
          "UT",
          "VA",
          "VI",
          "VT",
          "WA",
          "WI",
          "WV",
          "WY"
        ],
        "example": "MI"
      },
      "zipCode": {
        "title": "zipCode",
        "description": "Address zip code.",
        "type": "string",
        "format": "string",
        "minLength": 5,
        "maxLength": 10,
        "pattern": "^(\\d{5}$|^\\d{5}-\\d{4})$",
        "default": null,
        "example": "48083-1234"
      },
      "amexAccountNumber": {
        "title": "amexAccountNumber",
        "description": "AMEX Account Number",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 255,
        "example": "test-account-12345",
        "nullable": true
      },
      "amexMonthlyVolume": {
        "title": "amexMonthlyVolume",
        "description": "AMEX Monthly Volume",
        "type": "number",
        "format": "float",
        "minimum": 0.0,
        "maximum": 8000000.0,
        "example": "12345.67",
        "nullable": true
      },
      "amexAnnualVolumeThresholdExceeded": {
        "title": "AMEX Annual Volume Threshold Exceeded",
        "description": "Set amexAnnualVolumeThresholdExceeded to true if AMEX annual volume is greater than $1,000,000.00. If amexAnnualVolumeThresholdExceeded is set to true, then AMEX account number is required.",
        "type": "boolean",
        "format": "boolean",
        "example": true,
        "nullable": true
      },
      "agentGroupId": {
        "title": "agentGroupId",
        "description": "Agent group ID.",
        "type": "integer",
        "format": "int32",
        "example": 1234,
        "nullable": true
      },
      "agentGroupName": {
        "title": "agentGroupName",
        "description": "Agent group name.",
        "type": "string",
        "format": "string",
        "example": "ABC corp agent group",
        "nullable": true
      },
      "agent": {
        "title": "agent",
        "description": "Agent or Sales Rep ID.",
        "type": "integer",
        "format": "int32",
        "example": 12345
      },
      "highRiskPercentOfBusinessTransactionsCbd": {
        "title": "highRiskPercentOfBusinessTransactionsCbd",
        "description": "Percent of CBD business transactions",
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 100,
        "nullable": true,
        "example": 10
      },
      "isCannabis": {
        "title": "isCannabis",
        "description": "High risk business type flag - cannabis",
        "type": "boolean",
        "format": "boolean",
        "nullable": false,
        "example": false
      },
      "isCbd": {
        "title": "isCbd",
        "description": "High risk business type flag - CBD",
        "type": "boolean",
        "format": "boolean",
        "nullable": false,
        "example": false
      },
      "isKratom": {
        "title": "isKratom",
        "description": "High risk business type flag - kratom",
        "type": "boolean",
        "format": "boolean",
        "nullable": false,
        "example": false
      },
      "isSexuallyExplicitProducts": {
        "title": "isSexuallyExplicitProducts",
        "description": "High risk business type flag - sexually explicit product",
        "type": "boolean",
        "format": "boolean",
        "nullable": false,
        "example": false
      },
      "applicationName": {
        "title": "applicationName",
        "description": "String that can be used to identify the application.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 255,
        "example": "Joe's Pizza Shop application for location #123 in Troy"
      },
      "externalKey": {
        "title": "externalKey",
        "description": "Unique identifier for application.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "pattern": "^(?!.*/).*$",
        "example": "123abc"
      },
      "planId": {
        "title": "planId",
        "description": "The value for the Plan ID field will be the Template ID number available in Partner Portal. Plans refers to the application templates that are used to define payment equipment and pricing details for an application. These templates (or plans) are created in Partner Portal. For step-by-step instructions about obtaining a Plan ID, please refer to the Merchant Boarding API <a href='/products/fintech-tools/merchant-boarding-api/integration'>Integration Guide</a>.<br><br>Partner Portal has <a href='https://enrollment-sandbox.nab.nabancard.io/home' target='_blank'>Sandbox</a> and <a href='https://enrollment-sandbox.nab.nabancard.io/home' target='_blank'>Production</a> environments that correspond to the Sandbox and Production environments of the API. Your template must be created in the Partner Portal environment that corresponds to the API environment you wish to use. When testing in Sandbox or using the Try Now feature, a Sandbox Template ID must be used.",
        "type": "integer",
        "format": "int32",
        "example": 12345
      },
      "equipmentCostToMerchant": {
        "title": "equipmentCostToMerchant",
        "description": "Total cost of the equipment to be charged to the merchant. This amount will be ACH from the merchantâ€™s account. If greater than 0, a $5 ACH fee will be charged to the Agent.",
        "type": "number",
        "format": "float",
        "default": 0,
        "minimum": 0,
        "maximum": 999999.99,
        "example": 25
      },
      "accountSetupFee": {
        "title": "accountSetupFee",
        "description": "Account setup fee charged to the merchant. Agents can set the fee in the application template, but if an override is required at the merchant level, this property can be used.",
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 15.5
      },
      "discountFrequency": {
        "title": "discountFrequency",
        "description": "Discount frequency.",
        "type": "string",
        "format": "string",
        "default": "Daily",
        "enum": ["Daily", "Monthly"],
        "example": "Daily"
      },
      "equipmentId": {
        "title": "equipmentId",
        "description": "Numeric code corresponding to a piece of equipment.",
        "type": "integer",
        "format": "int32",
        "example": 809
      },
      "equipmentQuantity": {
        "title": "equipmentQuantity",
        "description": "Total number of devices per equipmentId.",
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "default": 1,
        "example": 5
      },
      "shippingDestination": {
        "title": "shippingDestination",
        "description": "Destination address where equipment will be shipped. If the value is set to `SHIP TO`, then the `shipTo` property within `businessAddress` is required. <br/><br/>AGENT - Agent address.<br/>CORPORATE - Corporate address<br/> DBA - Storefront address. DBA and Corporate address may be the same for some businesses<br/>OWNER1 - Primary principal address<br/>SHIP TO - Specified shipping address",
        "type": "string",
        "format": "string",
        "default": "DBA",
        "enum": ["AGENT", "CORPORATE", "DBA", "OWNER1", "SHIP TO"],
        "example": "DBA"
      },
      "shippingDeliveryMethod": {
        "title": "shippingDeliveryMethod",
        "description": "Shipping delivery method.",
        "type": "string",
        "format": "string",
        "default": "Ground",
        "enum": [
          "2nd Day Air",
          "Ground",
          "Next Day Air 8:00am",
          "Next Day Air 10:30am",
          "Next Day Air Saver 3:00pm",
          "Pick Up"
        ],
        "example": "Ground"
      },
      "principalTitle": {
        "title": "principalTitle",
        "description": "Principal designation.",
        "type": "string",
        "format": "string",
        "default": "owner",
        "enum": ["ceo", "manager", "owner", "partner", "president", "vice president"],
        "example": "owner"
      },
      "principalIsPersonalGuarantor": {
        "title": "principalIsPersonalGuarantor",
        "description": "Denotes whether the specified principal is a personal guarantor.",
        "type": "boolean",
        "format": "boolean",
        "default": false,
        "example": true
      },
      "businessDbaName": {
        "title": "businessDbaName",
        "description": "The operating name of the business.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 75,
        "example": "Joe's Pizza"
      },
      "businessCorporateName": {
        "title": "businessCorporateName",
        "description": "Business' legal name. If the corporate name is longer than 30 characters, please only provide the first 30 characters. Do not use an abbreviation.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 30,
        "example": "Joe Pizza Inc."
      },
      "businessIndustryType": {
        "title": "businessIndustryType",
        "description": "Type of payment processing industry.<br/>internet - Digital payment processing<br/>moto - Mail Order/Telephone Order. Payment processing that takes place when a customer provides their payment information via phone or mail<br/>restaurant - Restaurant business payment processing<br/>retail - Retail business payment processing",
        "type": "string",
        "format": "string",
        "enum": ["internet", "moto", "restaurant", "retail"],
        "example": "restaurant"
      },
      "businessType": {
        "title": "businessType",
        "description": "Type of business<br/><br/>A-Association/Estate/Trust<br/>C-Corporation<br/>G-Government<br/>I-International Organization<br/>L-LLC<br/>M-Medical/Legal Corporation<br/>N-Non-Profit<br/>P-Partnership<br/>S-Sole Proprietor<br/>T-Tax Exempt Organization",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 1,
        "enum": ["A", "C", "G", "I", "L", "M", "N", "P", "S", "T"],
        "example": "C"
      },
      "federalTaxIdNumber": {
        "title": "federalTaxIdNumber",
        "description": "Employer Identification Number (EIN) or Federal Tax Identification Number (TIN) assigned by the Internal Revenue Service (IRS).",
        "type": "string",
        "format": "string",
        "minLength": 9,
        "maxLength": 9,
        "pattern": "^\\d{9}$",
        "example": "123456789"
      },
      "federalTaxIdType": {
        "title": "federalTaxIdType",
        "description": "Type of Federal Tax Identification Number. EIN is typically used to identify a corporation. SSN is typically used to identify a sole proprietorship.",
        "type": "string",
        "format": "string",
        "minLength": 3,
        "maxLength": 3,
        "enum": ["SSN", "EIN"],
        "example": "SSN"
      },
      "mcc": {
        "title": "mcc",
        "description": "Merchant Category Code assigned by a payment card organization to a merchant/payee.",
        "type": "string",
        "format": "string",
        "pattern": "^\\d{4}$",
        "minLength": 4,
        "maxLength": 4,
        "example": "5812"
      },
      "url": {
        "title": "url",
        "description": "Website URL.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "example": "https://www.test-site.com"
      },
      "websiteCustomerServiceEmail": {
        "title": "websiteCustomerServiceEmail",
        "description": "Customer service email address listed on the website.",
        "type": "string",
        "format": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9._%+-]{0,63}@(?:[A-Za-z0-9-]{1,63}\\.)+[A-Za-z]{2,63}$",
        "minLength": 3,
        "maxLength": 255,
        "default": null,
        "example": "customer-service-email@example.com"
      },
      "websiteCustomerServicePhoneNumber": {
        "title": "websiteCustomerServicePhoneNumber",
        "description": "Customer service phone number listed on the website.",
        "type": "string",
        "format": "string",
        "pattern": "^\\d{10}$",
        "minLength": 10,
        "maxLength": 10,
        "default": null,
        "example": "1234567890"
      },
      "statementDeliveryMethod": {
        "title": "statementDeliveryMethod",
        "description": "Monthly statement delivery method.",
        "type": "string",
        "format": "string",
        "default": "electronic",
        "enum": ["paper", "electronic"],
        "example": "paper"
      },
      "merchandiseServicesSold": {
        "title": "merchandiseServicesSold",
        "description": "List of merchant services and products offered.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 255,
        "default": null,
        "example": "Computer electronics, peripherals and hardware"
      },
      "yearsInBusiness": {
        "title": "yearsInBusiness",
        "description": "This property is used in conjunction with the property 'monthsInBusiness.' If a business was started X years and Y months ago, enter the number of years X in this field. For example, if a business was started on 2000-02-01 and the current date is 2020-07-30, the business was started 20 years and 6 months ago, so yearsInBusiness should be equal to 20.",
        "type": "number",
        "minimum": 0,
        "maximum": 500,
        "default": null,
        "example": 25
      },
      "monthsInBusiness": {
        "title": "monthsInBusiness",
        "description": "This property is used in conjunction with the property 'yearsInBusiness.' If a business was started X years and Y months ago, enter the number of months Y in this field. For example, if a business was started on 2000-02-01 and the current date is 2020-07-30, the business was started 20 years and 6 months ago, so monthsInBusiness should be equal to 6.",
        "minimum": 0,
        "maximum": 11,
        "type": "number",
        "default": null,
        "example": 2
      },
      "bankRoutingNumber": {
        "title": "bankRoutingNumber",
        "description": "Bank routing number used to identify a financial banking institution in a transaction.",
        "type": "string",
        "format": "string",
        "minLength": 9,
        "maxLength": 9,
        "pattern": "^\\d{9}$",
        "example": "000000001"
      },
      "bankAccountNumber": {
        "title": "bankAccountNumber",
        "description": "Bank account number.",
        "type": "string",
        "format": "string",
        "minLength": 1,
        "maxLength": 17,
        "pattern": "^[A-Za-z0-9]{1,17}$",
        "example": "1234567890"
      },
      "bankAccountType": {
        "title": "bankAccountType",
        "description": "Type of bank account.",
        "type": "string",
        "format": "string",
        "enum": ["checking", "savings"],
        "example": "checking"
      },
      "corporateId": {
        "title": "corporateId",
        "description": "EPX Corporation ID.",
        "type": "string",
        "format": "string",
        "default": null,
        "example": "12345"
      },
      "divisionId": {
        "title": "divisionId",
        "description": "EPX Division ID.",
        "type": "string",
        "format": "string",
        "default": null,
        "example": "98765"
      },
      "createCorporate": {
        "title": "createCorporate",
        "description": "Denotes whether a new Corporation needs to be created.",
        "type": "boolean",
        "default": false,
        "example": true
      },
      "createDivision": {
        "title": "createDivision",
        "description": "Denotes whether a new Division needs to be created.",
        "type": "boolean",
        "default": false,
        "example": true
      },
      "merchantId": {
        "title": "merchantId",
        "description": "Merchant identification number.",
        "type": "string",
        "format": "string",
        "example": "1234567891234",
        "minLength": 1,
        "pattern": "^\\d*$"
      },
      "applicationStatus": {
        "title": "applicationStatus",
        "description": "Application processing status. Value will be one of the following<br/><br/><b>Merchant Approved</b> <span style='color: #707A7E'>will be returned when when the application has been completed by the merchant.</span><br/><b>Validation Error</b> <span style='color: #707A7E'>will be returned when a value submitted on the application does not pass validation.</span><br/><b>Finalized</b> <span style='color: #707A7E'>will be returned when the application is processing.</span><br/><b>Work in Progress</b> <span style='color: #707A7E'>will be returned when the application is open.</span><br/><b>Sent to System</b> <span style='color: #707A7E'>will be returned when the application has been submitted to Underwriting.</span><br/><b>Waiting for Merchant</b> <span style='color: #707A7E'>will be returned when the application has been sent to the merchant.</span>",
        "type": "string",
        "example": "finalized"
      },
      "underwritingStatus": {
        "title": "underwritingStatus",
        "description": "Application underwriting status. Value will be one of the following:<br/><br/><b>Enrollment</b> <span style='color: #707A7E'>will be returned when the merchant application is going through the background processes that occur prior to Underwriting decisioning, such as credit history, KYC verification, etc.</span><br/><b>Pending</b> <span style='color: #707A7E'>will be returned when the merchant application was received by Underwriting and is under their review.</span><br/><b>Approved</b> <span style='color: #707A7E'>will be returned when the merchant application has been approved and the merchant can now start processing on the account.</span><br/><b>Declined</b> <span style='color: #707A7E'>will be returned when the merchant application was declined by Underwriting.</span><br/><b>Withdrawn</b> <span style='color: #707A7E'>will be returned when the merchant application was withdrawn by the merchant or agent.</span><br/><b>Fraud</b> <span style='color: #707A7E'>will be returned when the merchant account was flagged as potentially fraudulent.</span><br/><b>Closed</b> <span style='color: #707A7E'>will be returned when the merchant has closed their account and is no longer processing payments.</span><br/><b>Closed by Collections</b> <span style='color: #707A7E'>will be returned when the merchant's prior collections balance has been satisfied and the account is closed.</span><br/><b>Closed by Risk</b> <span style='color: #707A7E'>will be returned when the account has been closed by Risk due to failure to process within the approved parameters of the merchant's agreement.</span><br/><b>Approved Collections</b> <span style='color: #707A7E'>will be returned when the merchant has an unresolved collections balance and the account is being managed by the internal Collections department.</span><br/><b>Collections</b> <span style='color: #707A7E'>will be returned when the merchant has an unresolved collections balance that has been referred to an Outside Collections Agency or Collections Attorney.</span>",
        "type": "string",
        "example": "Enrollment"
      },
      "merchantEnrollmentUrl": {
        "title": "merchantEnrollmentUrl",
        "description": "Enrollment website URL for merchant completion.",
        "type": "string"
      },
      "applicationSentToMerchantAt": {
        "title": "applicationSentToMerchantAt",
        "description": "Denotes timestamp for enrollment application sent to merchant for completion.",
        "type": "string"
      },
      "applicationStartedOn": {
        "title": "applicationStartedOn",
        "description": "Denotes timestamp for enrollment application started by merchant.",
        "type": "string"
      },
      "applicationCompletedOn": {
        "title": "applicationCompletedOn",
        "description": "Denotes timestamp for enrollment application submitted by merchant."
      },
      "ipAddress": {
        "title": "IP address of the merchant.",
        "description": "Public IP address of the merchant. Compatible versions: IPv4, IPv6.",
        "type": "string",
        "minLength": 1,
        "example": "127.0.0.1"
      },
      "signatureDate": {
        "title": "Merchant signature timestamp.",
        "description": "Timestamp representing digital merchant signature capture date.",
        "type": "string",
        "minLength": 1,
        "pattern": "^\\d{4}-\\d{2}-\\d{2}(?: \\d{2}:\\d{2}:\\d{2})?(?:\\.[0-9]\\d{0,5})?(?:[+-][0-9]\\d{0,5})?$",
        "example": "2020-01-01 01:01:01"
      },
      "pciFeeBillingFrequency": {
        "title": "PCI fee billing frequency",
        "description": "Billing frequency for PCI fee.",
        "type": "string",
        "default": "ANNUAL",
        "enum": ["MONTHLY", "ANNUAL", "monthly", "annual", "Monthly", "Annual"],
        "example": "ANNUAL"
      },
      "rewardRate": {
        "title": "Reward rate",
        "description": "Reward rate.",
        "type": "string",
        "enum": ["MQ", "Q", "20", "30", "40", "50", "60", "70", "80", "90", "95"],
        "example": "Q"
      },
      "qualifiedRate": {
        "title": "Qualified rate",
        "description": "Qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "amexQualifiedRate": {
        "title": "AMEX qualified rate",
        "description": "AMEX qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "midQualifiedBump": {
        "title": "Mid-qualified bump",
        "description": "Mid-qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "nonQualifiedBump": {
        "title": "Non-qualified bump",
        "description": "Non-qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "nonQualifiedTransactionFeeBump": {
        "title": "Non-qualified transaction fee bump",
        "description": "Non-qualified transaction fee.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 999999.99,
        "example": 1.25
      },
      "interchangeDuesAssessmentsBasisPoint": {
        "title": "Interchange dues assessments basis points",
        "description": "Interchange dues assessments basis points.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 1000,
        "example": 25
      },
      "amexInterchangeDuesAssessmentsBasisPoint": {
        "title": "AMEX Interchange dues assessments basis points",
        "description": "AMEX Interchange dues assessments basis points.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 1000,
        "example": 25
      },
      "qualifiedCheckCardRate": {
        "title": "Qualified checkcard rate",
        "description": "Qualified checkcard rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "qualifiedAmexTransactionFee": {
        "title": "Qualified AMEX transaction fee",
        "description": "Qualified AMEX transaction fee",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 999999.99,
        "example": 1.25
      },
      "qualifiedCheckCardTransactionFee": {
        "title": "Qualified Checkcard Transaction fee",
        "description": "Qualified Checkcard Transaction fee.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 999999.99,
        "example": 1.25
      },
      "qualifiedTransactionFee": {
        "title": "Qualified transaction fee",
        "description": "Qualified transaction fee.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 999999.99,
        "example": 1.25
      },
      "ebtInterchangeDuesAssessmentsBasisPoint": {
        "title": "EBT interchange dues assessments basis points",
        "description": "EBT interchange dues assessments basis points.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 1000,
        "example": 25
      },
      "ebtQualifiedRate": {
        "title": "EBT qualified rate",
        "description": "EBT qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "debitInterchangeDuesAssessmentsBasisPoint": {
        "title": "Debit Interchange dues assessments basis points",
        "description": "Debit Interchange dues assessments basis points.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 1000,
        "example": 25
      },
      "debitQualifiedRate": {
        "title": "Debit qualified rate",
        "description": "Debit qualified rate.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "achTransactionFee": {
        "title": "ACH transaction fee",
        "description": "ACH transaction fee.",
        "type": "number",
        "nullable": true,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "batchHeader": {
        "title": "Batch header fee",
        "description": "Batch header fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "edgeFlatFee": {
        "title": "Edge flat rate fee amount",
        "description": "Edge flat rate fee amount.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "chargeBackFee": {
        "title": "Chargeback fee",
        "description": "Chargeback fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "debitGatewayFee": {
        "title": "Debit gateway fee",
        "description": "Debit gateway fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "debitTransactionFee": {
        "title": "Debit transaction fee",
        "description": "Debit transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "ebtTransactionFee": {
        "title": "EBT transaction fee",
        "description": "EBT transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "gatewayTransactionFee": {
        "title": "Gateway transaction fee",
        "description": "Gateway transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "interchangeTransactionPassthroughCheckcardFee": {
        "title": "Interchange transaction passthrough checkcard fee",
        "description": "Interchange transaction passthrough checkcard fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "interchangeTransactionPassthroughCreditFee": {
        "title": "Interchange transaction passthrough credit fee",
        "description": "Interchange transaction passthrough credit fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "internetGatewayMonthlyFee": {
        "title": "Internet gateway fee (monthly)",
        "description": "Internet gateway fee (monthly).",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "internetTransactionFee": {
        "title": "Internet transaction fee",
        "description": "Internet transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "mcclaimsFee": {
        "title": "MC claims fee",
        "description": "MC claims fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "merchantClubFee": {
        "title": "Payments Hub fee",
        "description": "Payments Hub fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlyBasicServiceFee": {
        "title": "Monthly basic service fee",
        "description": "Monthly basic service fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlyDiscountFee": {
        "title": "Monthly discount fee",
        "description": "Monthly discount fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 99,
        "example": 10
      },
      "monthlyHostingFee": {
        "title": "Monthly hosting fee",
        "description": "Monthly hosting fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlyMinimumDiscountFee": {
        "title": "Monthly minimum discount fee",
        "description": "Monthly minimum discount fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlyMinimumFee": {
        "title": "Monthly minimum fee",
        "description": "Monthly minimum fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlyRegulatoryFee": {
        "title": "Monthly regulatory fee",
        "description": "Monthly regulatory fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "monthlySoftwareFeePerDevice": {
        "title": "Monthly software fee (per device)",
        "description": "Monthly software fee (per device).",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "processorAuthorizationFee": {
        "title": "Processor authorization fee",
        "description": "Processor authorization fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "retrievalFee": {
        "title": "Retrieval fee",
        "description": "Retrieval fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "returnItemSupportFee": {
        "title": "Return item support fee",
        "description": "Return item support fee.",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "settledTransactionFee": {
        "title": "Settled transaction fee",
        "description": "Settled transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "technologyFee": {
        "title": "Technology fee",
        "description": "Technology fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "travelAndEntertainmentDraftCaptureTransactionFee": {
        "title": "TED (Travel and Entertainment Draft) capture transaction fee",
        "description": "TED (Travel and Entertainment Draft) capture transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "wirelessMonthlyFee": {
        "title": "Wireless fee (Monthly)",
        "description": "Wireless fee (Monthly).",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "wirelessTransactionFee": {
        "title": "Wireless transaction fee",
        "description": "Wireless transaction fee.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 999999.9999,
        "example": 1.25
      },
      "edgePercentFee": {
        "title": "Edge flat rate percentage rate",
        "description": "Edge flat rate percentage rate.",
        "type": "number",
        "nullable": false,
        "minimum": 0,
        "maximum": 99,
        "example": 0.25
      },
      "enableDebitInterchangeBilling": {
        "title": "Enable debit interchange billing",
        "description": "Enable debit interchange billing",
        "type": "boolean",
        "nullable": false,
        "example": true
      },
      "enableNetworkAccessBrandFees": {
        "title": "Enable network access brand fees",
        "description": "Enable network access brand fees (such as Discover network access brand fee, AMEX network access brand fee, PayPal network access brand fee, Mastercard network access brand fee, and Visa network access brand fee).",
        "type": "boolean",
        "nullable": false,
        "example": true
      },
      "waiveTerminationFee": {
        "title": "Waive terminal fee",
        "description": "Waive terminal fee.",
        "type": "boolean",
        "nullable": false,
        "example": false
      },
      "enableInterchangeTransactionPassthroughFee": {
        "title": "Enable interchange transaction passthrough fees",
        "description": "Enable interchange transaction passthrough fees (interchange transaction passthrough checkcard fee and interchange transaction passthrough credit fee).",
        "type": "boolean",
        "nullable": false,
        "example": true
      },
      "enablePassthroughAssessment": {
        "title": "Enable passthrough assessment",
        "description": "Enable passthrough assessment.",
        "type": "boolean",
        "nullable": false,
        "example": false
      },
      "paginationLinkToSelf": {
        "title": "Pagination link to current search results",
        "description": "Pagination link to the current search results.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "example": "/enroll/search?pageNumber=1&pageSize=100"
      },
      "paginationLinkToNext": {
        "title": "Pagination link to next set of search results (if available)",
        "description": "Pagination link to the next set of search results (if available). If the property \"next\" is not present in the response, it indicates that there are no more records available based on search criteria.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "example": "/enroll/search?pageNumber=2&pageSize=100"
      },
      "paginationLinkToPrevious": {
        "title": "Pagination link to previous set of search results (if available)",
        "description": "Pagination link to the previous set of search results (if available). If the property \"previous\" is not present in the response, it indicates that there are no previous records available based on search criteria.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "example": "/enroll/search?pageNumber=2&pageSize=100"
      },
      "paginationPageNumber": {
        "title": "Page number.",
        "description": "Indicates the current page number for paginated results. Page numbers start at 1.",
        "type": "integer",
        "format": "integer",
        "nullable": false,
        "default": 1,
        "minimum": 1,
        "maximum": 999999999999999,
        "example": 1500
      },
      "paginationPageSize": {
        "title": "Page size",
        "description": "Indicates how many results to return per page.",
        "type": "integer",
        "format": "integer",
        "nullable": false,
        "default": 100,
        "minimum": 1,
        "maximum": 100,
        "example": 50
      },
      "findBy": {
        "title": "A comma-separated list of search terms to filter the results",
        "description": "A comma-separated list of search terms to filter the results based on matching search term criteria. You can search for applications and narrow the results using these search qualifiers in combination.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "example": "byAgent:12345,submission:open"
      },
      "paginationTotal": {
        "title": "Pagination total search results",
        "description": "Indicates the total number of records available to be fetched, based on search criteria.",
        "type": "integer",
        "format": "integer",
        "nullable": false,
        "example": 55000
      },
      "paginationCurrentResultCount": {
        "title": "Pagination current result count",
        "description": "Indicates the total number of records fetched within current list.",
        "type": "integer",
        "format": "integer",
        "minimum": 0,
        "nullable": false,
        "example": 50
      },
      "paginationHasMoreResults": {
        "title": "Pagination has more results",
        "description": "Pagination has more page(s) of items after current list that can be fetched.",
        "type": "boolean",
        "format": "boolean",
        "nullable": false,
        "example": true
      },
      "underwritingBank": {
        "title": "Underwriting bank.",
        "description": "Underwriting bank.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "example": "TBB"
      },
      "underwritingStatusCode": {
        "title": "Status code for merchant application",
        "description": "Status code to set merchant application status.",
        "type": "string",
        "format": "string",
        "nullable": false,
        "enum": ["A"],
        "example": "A"
      },
      "eligibleUnderwritingBank": {
        "title": "List of eligible underwriting banks a merchant application is qualified for.",
        "description": "List of eligible underwriting banks a merchant application is qualified for.",
        "type": "array",
        "items": {
          "type": "string",
          "example": ["BMO", "TBB", "CTZ"]
        }
      },
      "grantType": {
        "title": "grantType",
        "description": "Oauth token grantType.",
        "type": "string",
        "example": "client_credentials"
      },
      "scope": {
        "title": "scope",
        "description": "Oauth token scope",
        "type": "string",
        "example": "all"
      },
      "clientId": {
        "title": "clientId",
        "description": "Oauth token clientId",
        "type": "string",
        "example": "example_sandbox"
      },
      "clientSecret": {
        "title": "clientSecret",
        "description": "Oauth token clientSecret",
        "type": "string"
      },
      "accessToken": {
        "title": "accessToken",
        "description": "Oauth token accessToken",
        "type": "string"
      },
      "tokenType": {
        "title": "tokenType",
        "description": "Oauth token tokenType",
        "type": "string",
        "example": "bearer"
      },
      "expiresIn": {
        "title": "expiresIn",
        "description": "Oauth token expiresIn",
        "type": "number",
        "example": 300
      },
      "oauthTokenModel": {
        "title": "oauthTokenModel",
        "description": "oauth token request object",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "grant_type": {
                "$ref": "#/components/schemas/grantType"
              },
              "scope": {
                "$ref": "#/components/schemas/scope"
              },
              "client_id": {
                "$ref": "#/components/schemas/clientId"
              },
              "client_secret": {
                "$ref": "#/components/schemas/clientSecret"
              }
            }
          },
          {
            "required": ["grant_type", "scope", "client_id", "client_secret"]
          }
        ]
      },
      "enrollmentPrincipalModel": {
        "title": "enrollmentPrincipalModel",
        "description": "Business principal object.",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/name"
          },
          "lastName": {
            "$ref": "#/components/schemas/name"
          },
          "socialSecurityNumber": {
            "$ref": "#/components/schemas/socialSecurityNumber"
          },
          "driverLicenseNumber": {
            "$ref": "#/components/schemas/driverLicenseNumber"
          },
          "driverLicenseIssuedState": {
            "$ref": "#/components/schemas/driverLicenseIssuedState"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/dateOfBirth"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "street": {
            "$ref": "#/components/schemas/street"
          },
          "street2": {
            "$ref": "#/components/schemas/street2"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "zipCode": {
            "$ref": "#/components/schemas/zipCode"
          },
          "equityOwnershipPercentage": {
            "$ref": "#/components/schemas/numberPercentage"
          },
          "title": {
            "$ref": "#/components/schemas/principalTitle"
          },
          "isPersonalGuarantor": {
            "$ref": "#/components/schemas/principalIsPersonalGuarantor"
          }
        }
      },
      "enrollmentPrincipalWithAllRequiredValuesModel": {
        "title": "enrollmentPrincipalWithAllRequiredValuesModel",
        "description": "Business principal model with all required properties.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentPrincipalModel"
          },
          {
            "properties": {
              "socialSecurityNumber": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/socialSecurityNumber"
                  },
                  {
                    "pattern": "^\\d{9}$",
                    "minLength": 9,
                    "maxLength": 9
                  }
                ]
              }
            }
          },
          {
            "required": [
              "firstName",
              "lastName",
              "socialSecurityNumber",
              "dateOfBirth",
              "phoneNumber",
              "email",
              "street",
              "city",
              "state",
              "zipCode",
              "equityOwnershipPercentage",
              "title",
              "isPersonalGuarantor"
            ]
          }
        ]
      },
      "enrollmentBusinessContactModel": {
        "title": "enrollmentBusinessContactModel",
        "description": "Primary business contact information for communication.",
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/name"
          },
          "lastName": {
            "$ref": "#/components/schemas/name"
          },
          "socialSecurityNumber": {
            "description": "Social security number (SSN).",
            "type": "string",
            "format": "string",
            "pattern": "^\\d{9}$",
            "minLength": 9,
            "maxLength": 9,
            "example": "987654321",
            "default": null,
            "nullable": true
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/dateOfBirth"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "street": {
            "$ref": "#/components/schemas/street"
          },
          "street2": {
            "$ref": "#/components/schemas/street2"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "zipCode": {
            "$ref": "#/components/schemas/zipCode"
          }
        }
      },
      "enrollmentBusinessContactWithAllRequiredValuesModel": {
        "title": "enrollmentBusinessContactWithAllRequiredValuesModel",
        "description": "Primary business contact information for communication with all required properties.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentBusinessContactModel"
          },
          {
            "properties": {
              "socialSecurityNumber": {
                "description": "Social security number (SSN).",
                "type": "string",
                "format": "string",
                "pattern": "^\\d{9}$",
                "minLength": 9,
                "maxLength": 9,
                "example": "987654321"
              }
            }
          },
          {
            "required": [
              "firstName",
              "lastName",
              "email",
              "phoneNumber",
              "socialSecurityNumber",
              "dateOfBirth",
              "street",
              "city",
              "state",
              "zipCode"
            ]
          }
        ]
      },
      "enrollmentBankAccountModel": {
        "title": "enrollmentBankAccountModel",
        "description": "Bank account object.",
        "type": "object",
        "properties": {
          "abaRouting": {
            "$ref": "#/components/schemas/bankRoutingNumber"
          },
          "demandDepositAccount": {
            "$ref": "#/components/schemas/bankAccountNumber"
          },
          "accountType": {
            "$ref": "#/components/schemas/bankAccountType"
          }
        }
      },
      "enrollmentBankAccountWithAllRequiredValuesModel": {
        "title": "enrollmentBankAccountWithAllRequiredValuesModel",
        "description": "Bank account object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentBankAccountModel"
          },
          {
            "required": ["abaRouting", "demandDepositAccount", "accountType"]
          }
        ]
      },
      "businessWebsitesModel": {
        "title": "businessWebsitesModel",
        "description": "Collection of business website(s) and related details.<br> Property `url` is required, when object is not empty.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "url": {
              "$ref": "#/components/schemas/url"
            },
            "websiteCustomerServiceEmail": {
              "$ref": "#/components/schemas/websiteCustomerServiceEmail"
            },
            "websiteCustomerServicePhoneNumber": {
              "$ref": "#/components/schemas/websiteCustomerServicePhoneNumber"
            }
          }
        }
      },
      "enrollmentShipToAddressModel": {
        "title": "enrollmentShipToAddressModel",
        "description": "Ship to address model. Required property when `shippingDestination` property value is set to `SHIP TO`.",
        "type": "object",
        "properties": {
          "street": {
            "title": "ship to street",
            "description": "Ship to Street Address Line 1.",
            "type": "string",
            "format": "string",
            "minLength": 1,
            "maxLength": 30,
            "default": null,
            "example": "250 Stephenson Hwy"
          },
          "street2": {
            "title": "ship to street2",
            "description": "Ship to Street Address Line 2.",
            "type": "string",
            "format": "string",
            "minLength": 0,
            "maxLength": 30,
            "default": null,
            "example": "Suite 100"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "zipCode": {
            "$ref": "#/components/schemas/zipCode"
          }
        }
      },
      "enrollmentBusinessAddressModel": {
        "title": "enrollmentBusinessAddressModel",
        "description": "Business address object.",
        "type": "object",
        "properties": {
          "street": {
            "$ref": "#/components/schemas/street"
          },
          "street2": {
            "$ref": "#/components/schemas/street2"
          },
          "city": {
            "$ref": "#/components/schemas/city"
          },
          "state": {
            "$ref": "#/components/schemas/state"
          },
          "zipCode": {
            "$ref": "#/components/schemas/zipCode"
          }
        }
      },
      "enrollmentBusinessAddressWithAllRequiredValuesModel": {
        "title": "enrollmentBusinessAddressWithAllRequiredValuesModel",
        "description": "Business address object with all required values.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentBusinessAddressModel"
          },
          {
            "required": ["street", "city", "state", "zipCode"]
          }
        ]
      },
      "enrollmentPercentOfBusinessTransactionsModel": {
        "title": "enrollmentPercentOfBusinessTransactionsModel",
        "description": "Types of business transactions with their cumulative percentages. The sum of all sub-properties must be exactly equal to 100.",
        "type": "object",
        "properties": {
          "cardSwiped": {
            "description": "Cumulative percentage for card-swiped transaction types.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "example": 5.5
          },
          "keyedCardPresentNotImprinted": {
            "description": "Cumulative percentage for card-present transaction types.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "example": 20.5
          },
          "mailOrPhoneOrder": {
            "description": "Cumulative percentage for mail or phone order transaction types.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "example": 25
          },
          "internet": {
            "description": "Cumulative percentage for online transaction types.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "example": 49
          }
        }
      },
      "enrollmentBusinessEbtModel": {
        "title": "enrollmentBusinessEbtModel",
        "description": "Electronic Benefits Transfer (EBT) related preferences.",
        "type": "object",
        "properties": {
          "ebtFood": {
            "title": "ebtFood",
            "description": "Accept EBT food stamps benefits.",
            "type": "boolean",
            "example": false
          },
          "ebtCash": {
            "title": "ebtCash",
            "description": "Accept EBT cash benefits.",
            "type": "boolean",
            "example": true
          },
          "ebtAccountNumber": {
            "title": "ebtAccountNumber",
            "description": "Account number for SNAP benefits.",
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "example": "ebtsnap12345"
          }
        }
      },
      "enrollmentBusinessModel": {
        "title": "enrollmentBusinessModel",
        "description": "Business object.",
        "type": "object",
        "properties": {
          "dbaName": {
            "$ref": "#/components/schemas/businessDbaName"
          },
          "corporateName": {
            "$ref": "#/components/schemas/businessCorporateName"
          },
          "businessType": {
            "$ref": "#/components/schemas/businessType"
          },
          "industryType": {
            "$ref": "#/components/schemas/businessIndustryType"
          },
          "federalTaxIdNumber": {
            "$ref": "#/components/schemas/federalTaxIdNumber"
          },
          "federalTaxIdType": {
            "$ref": "#/components/schemas/federalTaxIdType"
          },
          "mcc": {
            "$ref": "#/components/schemas/mcc"
          },
          "phone": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "websites": {
            "$ref": "#/components/schemas/businessWebsitesModel"
          },
          "averageTicketAmount": {
            "$ref": "#/components/schemas/businessStatisticsAmount"
          },
          "averageMonthlyVolume": {
            "$ref": "#/components/schemas/businessStatisticsAmount"
          },
          "highTicketAmount": {
            "$ref": "#/components/schemas/businessStatisticsAmount"
          },
          "statementDeliveryMethod": {
            "$ref": "#/components/schemas/statementDeliveryMethod"
          },
          "yearsInBusiness": {
            "$ref": "#/components/schemas/yearsInBusiness"
          },
          "monthsInBusiness": {
            "$ref": "#/components/schemas/monthsInBusiness"
          },
          "merchandiseServicesSold": {
            "$ref": "#/components/schemas/merchandiseServicesSold"
          },
          "percentOfBusinessTransactions": {
            "$ref": "#/components/schemas/enrollmentPercentOfBusinessTransactionsModel"
          },
          "ebt": {
            "$ref": "#/components/schemas/enrollmentBusinessEbtModel"
          },
          "businessContact": {
            "$ref": "#/components/schemas/enrollmentBusinessContactModel"
          },
          "businessAddress": {
            "type": "object",
            "properties": {
              "dba": {
                "$ref": "#/components/schemas/enrollmentBusinessAddressModel"
              },
              "corporate": {
                "$ref": "#/components/schemas/enrollmentBusinessAddressModel"
              },
              "shipTo": {
                "$ref": "#/components/schemas/enrollmentShipToAddressModel"
              }
            }
          }
        }
      },
      "enrollmentBusinessWithAllRequiredValuesModel": {
        "title": "enrollmentBusinessWithAllRequiredValuesModel",
        "description": "Business object with all required values.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentBusinessModel"
          },
          {
            "properties": {
              "businessContact": {
                "$ref": "#/components/schemas/enrollmentBusinessContactWithAllRequiredValuesModel"
              },
              "businessAddress": {
                "type": "object",
                "properties": {
                  "dba": {
                    "$ref": "#/components/schemas/enrollmentBusinessAddressWithAllRequiredValuesModel"
                  },
                  "corporate": {
                    "$ref": "#/components/schemas/enrollmentBusinessAddressWithAllRequiredValuesModel"
                  },
                  "shipTo": {
                    "$ref": "#/components/schemas/enrollmentShipToAddressModel"
                  }
                },
                "required": ["dba", "corporate"]
              }
            }
          },
          {
            "required": [
              "averageMonthlyVolume",
              "averageTicketAmount",
              "businessAddress",
              "businessContact",
              "businessType",
              "corporateName",
              "dbaName",
              "email",
              "federalTaxIdNumber",
              "federalTaxIdType",
              "highTicketAmount",
              "mcc",
              "merchandiseServicesSold",
              "percentOfBusinessTransactions",
              "phone"
            ]
          }
        ]
      },
      "enrollmentShippingModel": {
        "title": "enrollmentShippingModel",
        "description": "Shipping information model",
        "type": "object",
        "properties": {
          "shippingDestination": {
            "$ref": "#/components/schemas/shippingDestination"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/shippingDeliveryMethod"
          }
        }
      },
      "enrollmentEquipmentModel": {
        "title": "enrollmentEquipmentModel",
        "description": "Equipment object. Using this object will override the equipment dataset in the template\n\nIf no values are provided, the default values from the template are used\n\nTo override the quantity of a piece of equipment set within the template, the equipment ID with desired quantity of equipment should be entered.\n\nIf an equipment ID is entered that does not match the list of equipment within the specified template, an error is received\n\nTo override template equipment, the template must include only unique IDs. If a template includes multiple instances of the same equipment ID, an error will be received. For example, equipment cannot be overridden on a template that includes an ICT220 with a PIN-pad and an ICT220 without a PIN-pad.",
        "type": "object",
        "properties": {
          "equipmentId": {
            "$ref": "#/components/schemas/equipmentId"
          },
          "quantity": {
            "$ref": "#/components/schemas/equipmentQuantity"
          }
        },
        "required": ["equipmentId"]
      },
      "enrollmentEquipmentPlanModel": {
        "title": "enrollmentEquipmentPlanModel",
        "description": "Equipment Plan object.",
        "type": "object",
        "properties": {
          "planId": {
            "$ref": "#/components/schemas/planId"
          },
          "equipmentCostToMerchant": {
            "$ref": "#/components/schemas/equipmentCostToMerchant"
          },
          "accountSetupFee": {
            "$ref": "#/components/schemas/accountSetupFee"
          },
          "discountFrequency": {
            "$ref": "#/components/schemas/discountFrequency"
          },
          "equipment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/enrollmentEquipmentModel"
            }
          }
        }
      },
      "enrollmentEpxHierarchyModel": {
        "title": "enrollmentEpxHierarchyModel",
        "description": "Enrollment EPX customer hierarchy object.",
        "type": "object",
        "properties": {
          "corporateId": {
            "$ref": "#/components/schemas/corporateId"
          },
          "divisionId": {
            "$ref": "#/components/schemas/divisionId"
          },
          "createCorporate": {
            "$ref": "#/components/schemas/createCorporate"
          },
          "createDivision": {
            "$ref": "#/components/schemas/createDivision"
          }
        }
      },
      "enrollmentMerchantSignatureModel": {
        "title": "enrollmentMerchantSignatureModel",
        "description": "Enrollment merchant signature model.",
        "type": "object",
        "properties": {
          "ipAddress": {
            "$ref": "#/components/schemas/ipAddress"
          },
          "signatureDate": {
            "$ref": "#/components/schemas/signatureDate"
          }
        },
        "required": ["ipAddress", "signatureDate"]
      },
      "enrollmentApplicationModel": {
        "title": "enrollmentApplicationModel",
        "description": "Enrollment application object.",
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agent"
          },
          "applicationName": {
            "$ref": "#/components/schemas/applicationName"
          },
          "externalKey": {
            "$ref": "#/components/schemas/externalKey"
          },
          "plan": {
            "$ref": "#/components/schemas/enrollmentEquipmentPlanModel"
          },
          "shipping": {
            "$ref": "#/components/schemas/enrollmentShippingModel"
          },
          "principals": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/enrollmentPrincipalModel"
            }
          },
          "business": {
            "$ref": "#/components/schemas/enrollmentBusinessModel"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/enrollmentBankAccountModel"
          },
          "epxHierarchy": {
            "$ref": "#/components/schemas/enrollmentEpxHierarchyModel"
          }
        }
      },
      "oauthTokenSuccessfulResponseModel": {
        "title": "oauthTokenSuccessfulResponseModel",
        "description": "Oauth token post request object",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "$ref": "#/components/schemas/accessToken"
              },
              "token_type": {
                "$ref": "#/components/schemas/tokenType"
              },
              "expires_in": {
                "$ref": "#/components/schemas/expiresIn"
              },
              "scope": {
                "$ref": "#/components/schemas/scope"
              }
            }
          }
        }
      },
      "enrollmentMinimalApplicationPostRequestModel": {
        "title": "enrollmentMinimalApplicationPostRequestModel",
        "description": "Minimum object for POST request to create a new application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentApplicationModel"
          },
          {
            "properties": {
              "plan": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/enrollmentEquipmentPlanModel"
                  },
                  {
                    "required": ["planId"]
                  }
                ]
              }
            }
          },
          {
            "required": ["agent", "applicationName", "externalKey", "plan"]
          }
        ]
      },
      "enrollmentApplicationPatchRequestModel": {
        "title": "enrollmentApplicationPatchRequestModel",
        "description": "Application object for PATCH request to update an existing application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentApplicationModel"
          }
        ]
      },
      "enrollmentApplicationAdditionalInformationAgentDataModel": {
        "title": "enrollmentApplicationAdditionalInformationAgentDataModel",
        "description": "Enrollment application additional agent information object",
        "type": "object",
        "properties": {
          "agentGroupId": {
            "$ref": "#/components/schemas/agentGroupId"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationAmericanExpressInformationModel": {
        "title": "enrollmentApplicationAdditionalInformationAmericanExpressInformationModel",
        "description": "Enrollment application additional information - AMEX related information model.",
        "type": "object",
        "properties": {
          "accountNumber": {
            "$ref": "#/components/schemas/amexAccountNumber"
          },
          "amexMonthlyVolume": {
            "$ref": "#/components/schemas/amexMonthlyVolume"
          },
          "amexAnnualVolumeThresholdExceeded": {
            "$ref": "#/components/schemas/amexAnnualVolumeThresholdExceeded"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationHighRiskBusinessTypeFlagsModel": {
        "title": "enrollmentApplicationAdditionalInformationHighRiskBusinessTypeFlagsModel",
        "description": "Enrollment application additional information - high risk business type flag related information model.",
        "type": "object",
        "properties": {
          "isCannabis": {
            "$ref": "#/components/schemas/isCannabis"
          },
          "isCbd": {
            "$ref": "#/components/schemas/isCbd"
          },
          "isKratom": {
            "$ref": "#/components/schemas/isKratom"
          },
          "isSexuallyExplicitProducts": {
            "$ref": "#/components/schemas/isSexuallyExplicitProducts"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationHighRiskPercentOfBusinessTransactionsModel": {
        "title": "enrollmentApplicationAdditionalInformationHighRiskPercentOfBusinessTransactionsModel",
        "description": "Enrollment application additional information - high risk percent of business transaction related information model.",
        "type": "object",
        "properties": {
          "cbd": {
            "$ref": "#/components/schemas/highRiskPercentOfBusinessTransactionsCbd"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationAcceptedPaymentTypesDataModel": {
        "title": "enrollmentApplicationAdditionalInformationAcceptedPaymentTypesDataModel",
        "description": "Enrollment application additional information - accepted payment types data model.",
        "type": "object",
        "properties": {
          "americanExpress": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationAmericanExpressInformationModel"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationHighRiskBusinessDataModel": {
        "title": "enrollmentApplicationAdditionalInformationHighRiskBusinessDataModel",
        "description": "Enrollment application additional information - high risk business data model.",
        "type": "object",
        "properties": {
          "businessTypeFlags": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationHighRiskBusinessTypeFlagsModel"
          },
          "highRiskPercentOfBusinessTransactions": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationHighRiskPercentOfBusinessTransactionsModel"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationModel": {
        "title": "enrollmentApplicationAdditionalInformationModel",
        "description": "Enrollment application additional information model.",
        "type": "object",
        "properties": {
          "agentData": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationAgentDataModel"
          },
          "acceptedPaymentTypes": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationAcceptedPaymentTypesDataModel"
          },
          "highRiskBusinessData": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationHighRiskBusinessDataModel"
          }
        }
      },
      "enrollmentApplicationAdditionalInformationPatchRequestModel": {
        "title": "enrollmentApplicationAdditionalInformationPatchRequestModel",
        "description": "Enrollment application additional information model (PATCH request - Update application additional information)",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationModel"
          }
        ]
      },
      "enrollmentApplicationAgentInformationPatchRequestModel": {
        "title": "enrollmentApplicationAgentInformationPatchRequestModel",
        "description": "Enrollment application agent information model (PATCH request - Update application agent related information)",
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agent"
          }
        },
        "required": ["agent"]
      },
      "enrollmentApplicationPricingAdditionalFeesPatchRequestModel": {
        "type": "object",
        "properties": {
          "achTransactionFee": {
            "$ref": "#/components/schemas/achTransactionFee"
          },
          "batchHeader": {
            "$ref": "#/components/schemas/batchHeader"
          },
          "chargeBackFee": {
            "$ref": "#/components/schemas/chargeBackFee"
          },
          "debitGatewayFee": {
            "$ref": "#/components/schemas/debitGatewayFee"
          },
          "debitTransactionFee": {
            "$ref": "#/components/schemas/debitTransactionFee"
          },
          "ebtTransactionFee": {
            "$ref": "#/components/schemas/ebtTransactionFee"
          },
          "gatewayTransactionFee": {
            "$ref": "#/components/schemas/gatewayTransactionFee"
          },
          "internetGatewayMonthlyFee": {
            "$ref": "#/components/schemas/internetGatewayMonthlyFee"
          },
          "internetTransactionFee": {
            "$ref": "#/components/schemas/internetTransactionFee"
          },
          "mcclaimsFee": {
            "$ref": "#/components/schemas/mcclaimsFee"
          },
          "merchantClubFee": {
            "$ref": "#/components/schemas/merchantClubFee"
          },
          "monthlyBasicServiceFee": {
            "$ref": "#/components/schemas/monthlyBasicServiceFee"
          },
          "monthlyDiscountFee": {
            "$ref": "#/components/schemas/monthlyDiscountFee"
          },
          "monthlyHostingFee": {
            "$ref": "#/components/schemas/monthlyHostingFee"
          },
          "monthlyMinimumDiscountFee": {
            "$ref": "#/components/schemas/monthlyMinimumDiscountFee"
          },
          "monthlyMinimumFee": {
            "$ref": "#/components/schemas/monthlyMinimumFee"
          },
          "monthlyRegulatoryFee": {
            "$ref": "#/components/schemas/monthlyRegulatoryFee"
          },
          "monthlySoftwareFeePerDevice": {
            "$ref": "#/components/schemas/monthlySoftwareFeePerDevice"
          },
          "processorAuthorizationFee": {
            "$ref": "#/components/schemas/processorAuthorizationFee"
          },
          "retrievalFee": {
            "$ref": "#/components/schemas/retrievalFee"
          },
          "returnItemSupportFee": {
            "$ref": "#/components/schemas/returnItemSupportFee"
          },
          "settledTransactionFee": {
            "$ref": "#/components/schemas/settledTransactionFee"
          },
          "technologyFee": {
            "$ref": "#/components/schemas/technologyFee"
          },
          "travelAndEntertainmentDraftCaptureTransactionFee": {
            "$ref": "#/components/schemas/travelAndEntertainmentDraftCaptureTransactionFee"
          },
          "wirelessMonthlyFee": {
            "$ref": "#/components/schemas/wirelessMonthlyFee"
          },
          "wirelessTransactionFee": {
            "$ref": "#/components/schemas/wirelessTransactionFee"
          }
        }
      },
      "enrollmentApplicationPricingPatchRequestModel": {
        "title": "enrollmentApplicationPricingPatchRequestModel",
        "description": "Enrollment application pricing model (PATCH request - Update application pricing)",
        "type": "object",
        "properties": {
          "qualifiedRate": {
            "$ref": "#/components/schemas/qualifiedRate"
          },
          "amexQualifiedRate": {
            "$ref": "#/components/schemas/amexQualifiedRate"
          },
          "qualifiedTransactionFee": {
            "$ref": "#/components/schemas/qualifiedTransactionFee"
          },
          "midQualifiedBump": {
            "$ref": "#/components/schemas/midQualifiedBump"
          },
          "nonQualifiedBump": {
            "$ref": "#/components/schemas/nonQualifiedBump"
          },
          "nonQualifiedTransactionFeeBump": {
            "$ref": "#/components/schemas/nonQualifiedTransactionFeeBump"
          },
          "interchangeDuesAssessmentsBasisPoint": {
            "$ref": "#/components/schemas/interchangeDuesAssessmentsBasisPoint"
          },
          "amexInterchangeDuesAssessmentsBasisPoint": {
            "$ref": "#/components/schemas/amexInterchangeDuesAssessmentsBasisPoint"
          },
          "ebtInterchangeDuesAssessmentsBasisPoint": {
            "$ref": "#/components/schemas/ebtInterchangeDuesAssessmentsBasisPoint"
          },
          "ebtQualifiedRate": {
            "$ref": "#/components/schemas/ebtQualifiedRate"
          },
          "debitInterchangeDuesAssessmentsBasisPoint": {
            "$ref": "#/components/schemas/debitInterchangeDuesAssessmentsBasisPoint"
          },
          "debitQualifiedRate": {
            "$ref": "#/components/schemas/debitQualifiedRate"
          },
          "qualifiedCheckCardRate": {
            "$ref": "#/components/schemas/qualifiedCheckCardRate"
          },
          "qualifiedCheckCardTransactionFee": {
            "$ref": "#/components/schemas/qualifiedCheckCardTransactionFee"
          },
          "rewardRate": {
            "$ref": "#/components/schemas/rewardRate"
          },
          "accountSetupFee": {
            "$ref": "#/components/schemas/accountSetupFee"
          },
          "interchangeTransactionPassthroughCreditFee": {
            "$ref": "#/components/schemas/interchangeTransactionPassthroughCreditFee"
          },
          "interchangeTransactionPassthroughCheckcardFee": {
            "$ref": "#/components/schemas/interchangeTransactionPassthroughCheckcardFee"
          },
          "equipmentCostToMerchant": {
            "$ref": "#/components/schemas/equipmentCostToMerchant"
          },
          "pciFeeBillingFrequency": {
            "$ref": "#/components/schemas/pciFeeBillingFrequency"
          },
          "edgeFlatFee": {
            "$ref": "#/components/schemas/edgeFlatFee"
          },
          "edgePercentFee": {
            "$ref": "#/components/schemas/edgePercentFee"
          },
          "enableInterchangeTransactionPassthroughFee": {
            "$ref": "#/components/schemas/enableInterchangeTransactionPassthroughFee"
          },
          "enablePassthroughAssessment": {
            "$ref": "#/components/schemas/enablePassthroughAssessment"
          },
          "enableNetworkAccessBrandFees": {
            "$ref": "#/components/schemas/enableNetworkAccessBrandFees"
          },
          "waiveTerminationFee": {
            "$ref": "#/components/schemas/waiveTerminationFee"
          },
          "additionalFees": {
            "$ref": "#/components/schemas/enrollmentApplicationPricingAdditionalFeesPatchRequestModel"
          }
        }
      },
      "enrollmentUnderwritingPatchRequestModel": {
        "title": "enrollmentUnderwritingPatchRequestModel",
        "description": "Enrollment underwriting update request.",
        "type": "object",
        "properties": {
          "underwritingBank": {
            "$ref": "#/components/schemas/underwritingBank"
          }
        },
        "required": ["underwritingBank"]
      },
      "enrollmentUnderwritingStatusUpdatePatchRequestModel": {
        "title": "enrollmentUnderwritingStatusUpdatePatchRequestModel",
        "description": "Enrollment underwriting status update PATCH request.",
        "type": "object",
        "properties": {
          "underwritingStatusCode": {
            "$ref": "#/components/schemas/underwritingStatusCode"
          }
        },
        "required": ["underwritingStatusCode"]
      },
      "enrollmentApplicationMerchantCompletionRequestModel": {
        "title": "enrollmentApplicationMerchantCompletionRequestModel",
        "description": "Application object for merchant completion.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentMinimalApplicationPostRequestModel"
          },
          {
            "properties": {
              "plan": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/enrollmentEquipmentPlanModel"
                  },
                  {
                    "required": ["planId"]
                  }
                ]
              },
              "principals": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/enrollmentPrincipalModel"
                    },
                    {
                      "required": ["email", "isPersonalGuarantor", "phoneNumber"]
                    }
                  ]
                }
              },
              "business": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/enrollmentBusinessModel"
                  },
                  {
                    "required": ["percentOfBusinessTransactions"]
                  }
                ]
              }
            }
          },
          {
            "required": ["agent", "applicationName", "business", "externalKey", "plan", "principals"]
          }
        ]
      },
      "enrollmentApplicationEnrichRequestModel": {
        "title": "enrollmentApplicationEnrichRequestModel",
        "description": "Application model for POST request to create a new application.",
        "allOf": [
          {
            "$ref": "#/components/schemas/enrollmentMinimalApplicationPostRequestModel"
          },
          {
            "properties": {
              "principals": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 1,
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/enrollmentPrincipalModel"
                    },
                    {
                      "required": [
                        "email",
                        "equityOwnershipPercentage",
                        "firstName",
                        "isPersonalGuarantor",
                        "lastName",
                        "phoneNumber",
                        "socialSecurityNumber"
                      ]
                    }
                  ]
                }
              }
            }
          },
          {
            "required": ["agent", "applicationName", "externalKey", "plan", "principals"]
          }
        ]
      },
      "enrollmentApplicationTwoFactorInitiateRequestModel": {
        "title": "enrollmentApplicationTwoFactorInitiateRequestModel",
        "description": "Two-factor authentication initialization request model.",
        "type": "object",
        "properties": {
          "externalKey": {
            "$ref": "#/components/schemas/externalKey"
          }
        },
        "required": ["externalKey"]
      },
      "enrollmentApplicationTwoFactorValidateRequestModel": {
        "title": "enrollmentApplicationTwoFactorValidateRequestModel",
        "description": "Two-Factor Authentication code verification request object.",
        "type": "object",
        "properties": {
          "externalKey": {
            "$ref": "#/components/schemas/externalKey"
          },
          "code": {
            "$ref": "#/components/schemas/twoFactorAuthCode"
          }
        },
        "required": ["externalKey", "code"]
      },
      "enrollmentOneClickSubmitApplicationWithAllRequiredValuesModel": {
        "title": "enrollmentOneClickSubmitApplicationWithAllRequiredValuesModel",
        "description": "One-click-submit application object.",
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/agent"
          },
          "applicationName": {
            "$ref": "#/components/schemas/applicationName"
          },
          "externalKey": {
            "$ref": "#/components/schemas/externalKey"
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/enrollmentEquipmentPlanModel"
              },
              {
                "required": ["planId"]
              }
            ]
          },
          "shipping": {
            "$ref": "#/components/schemas/enrollmentShippingModel"
          },
          "principals": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/enrollmentPrincipalWithAllRequiredValuesModel"
            }
          },
          "business": {
            "$ref": "#/components/schemas/enrollmentBusinessWithAllRequiredValuesModel"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/enrollmentBankAccountWithAllRequiredValuesModel"
          }
        },
        "required": ["agent", "applicationName", "externalKey", "plan", "principals", "business", "bankAccount"]
      },
      "enrollmentOneClickSubmitApplicationWithMerchantSignatureRequestModel": {
        "title": "enrollmentOneClickSubmitApplicationWithMerchantSignatureRequestModel",
        "description": "Enrollment one click submit application with merchant signature request model.",
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/enrollmentOneClickSubmitApplicationWithAllRequiredValuesModel"
          },
          "merchantSignature": {
            "$ref": "#/components/schemas/enrollmentMerchantSignatureModel"
          }
        },
        "required": ["application", "merchantSignature"]
      },
      "enrollmentEnricherModel": {
        "title": "enrollmentEnricherModel",
        "description": "Data validation response object.",
        "type": "object",
        "properties": {
          "isTwoFactorAuthenticated": {
            "description": "Denotes whether application has passed Two-Factor Authentication.",
            "type": "boolean"
          },
          "isVerified": {
            "description": "Denotes whether application data has been validated.",
            "type": "boolean"
          }
        }
      },
      "enrollmentTwoFactorModel": {
        "title": "enrollmentTwoFactorModel",
        "description": "Two-Factor Authentication object.",
        "type": "object",
        "properties": {
          "requestId": {
            "description": "Unique request ID for Two-Factor Authentication.",
            "type": "string"
          },
          "phone": {
            "description": "Phone number for Two-Factor Authentication.",
            "type": "string"
          },
          "verified": {
            "description": "Denotes whether Two-Factor Authentication is successful.",
            "type": "boolean"
          }
        }
      },
      "enrollmentStatusModel": {
        "title": "enrollmentStatusModel",
        "description": "Application status response object.",
        "type": "object",
        "properties": {
          "merchantId": {
            "$ref": "#/components/schemas/merchantId"
          },
          "applicationStatus": {
            "$ref": "#/components/schemas/applicationStatus"
          },
          "underwritingStatus": {
            "$ref": "#/components/schemas/underwritingStatus"
          }
        }
      },
      "enrollmentMerchantCompletionStatusModel": {
        "title": "enrollmentMerchantCompletionStatusModel",
        "description": "Enrollment Response Data - Merchant completion status model.",
        "type": "object",
        "properties": {
          "merchantEnrollmentUrl": {
            "$ref": "#/components/schemas/merchantEnrollmentUrl"
          },
          "applicationSentToMerchantAt": {
            "$ref": "#/components/schemas/applicationSentToMerchantAt"
          },
          "applicationStartedOn": {
            "$ref": "#/components/schemas/applicationStartedOn"
          },
          "applicationCompletedOn": {
            "$ref": "#/components/schemas/applicationCompletedOn"
          },
          "ipAddress": {
            "$ref": "#/components/schemas/ipAddress"
          },
          "signatureDate": {
            "$ref": "#/components/schemas/signatureDate"
          }
        }
      },
      "enrollmentApplicationDocumentModel": {
        "title": "enrollmentApplicationDocumentModel",
        "description": "Application document object.",
        "type": "object",
        "properties": {
          "fileName": {
            "title": "enrollmentApplicationDocumentModelPropertyFileName",
            "description": "Application filename.",
            "type": "string",
            "format": "string",
            "minLength": 1,
            "example": "application-12345.pdf"
          },
          "fileType": {
            "title": "enrollmentApplicationDocumentModelPropertyFileType",
            "description": "Application document type. To view a list of all valid document types, refer to the <a href='/products/fintech-tools/merchant-boarding-api/enrollment/sandbox/lookups#get/enroll/document/type/list'>Get List of Document Types</a> endpoint.",
            "type": "string",
            "format": "string",
            "minLength": 1,
            "example": "MERCHANT APPLICATION"
          },
          "attachment": {
            "title": "enrollmentApplicationDocumentModelPropertyAttachment",
            "description": "Base64 encoded string for the document to be attached to the merchant enrollment application.",
            "type": "string",
            "format": "string",
            "example": "SGVsbG8gV29ybGQh="
          }
        }
      },
      "enrollmentSuccessfulResponseModel": {
        "title": "enrollmentSuccessfulResponseModel",
        "description": "Success response object.",
        "type": "object",
        "properties": {
          "success": {
            "title": "enrollmentSuccessfulResponseModelPropertySuccess",
            "description": "Denotes whether a request was successful.",
            "type": "boolean",
            "default": "success"
          },
          "data": {
            "title": "enrollmentSuccessfulResponseModelPropertyData",
            "description": "Denotes the response data, containing application or application sub-properties.",
            "type": "object"
          },
          "link": {
            "title": "enrollmentSuccessfulResponseModelPropertyLink",
            "description": "URL for the resource.",
            "type": "string"
          }
        }
      },
      "agentGroupListResponseDataModel": {
        "title": "agentGroupListResponseDataModel",
        "description": "Agent group list response data model.",
        "type": "object",
        "properties": {
          "groupId": {
            "$ref": "#/components/schemas/agentGroupId"
          },
          "groupName": {
            "$ref": "#/components/schemas/agentGroupName"
          }
        },
        "required": ["groupId", "groupName"]
      },
      "agentGroupListResponseModel": {
        "title": "agentGroupListResponseModel",
        "description": "Agent group list response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/agentGroupListResponseDataModel"
            }
          },
          "link": {
            "type": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "merchantCategoryCodesListResponseDataModel": {
        "title": "merchantCategoryCodesListResponseDataModel",
        "description": "Merchant category codes list response data model.",
        "type": "object",
        "properties": {
          "mcc": {
            "$ref": "#/components/schemas/mcc"
          },
          "description": {
            "description": "Description for the merchant category codes.",
            "type": "string"
          },
          "averageTicketAmount": {
            "description": "Average ticket amount is a metric that provides details on the average amount of sales per customer.",
            "type": "string"
          },
          "averageMonthlyVolume": {
            "description": "Average monthly volume is a metric that provides details on the average monthly sales processed value.",
            "type": "string"
          },
          "highTicketAmount": {
            "description": "A high ticket amount is the highest dollar amount that a merchant expects to charge in a single transaction.",
            "type": "string"
          },
          "isCbdAllowed": {
            "description": "Denotes whether cannabidiol (CBD) products are allowed under a specific merchant category code.",
            "type": "boolean"
          },
          "isSexuallyExplicitProductsAllowed": {
            "description": "Denotes whether sexually explicit products are allowed under a specific merchant category code.",
            "type": "boolean"
          },
          "isCannabisAllowed": {
            "description": "Denotes whether cannabis products are allowed under a specific merchant category code.",
            "type": "boolean"
          }
        }
      },
      "merchantCategoryCodesListResponseModel": {
        "title": "merchantCategoryCodeApplicationResponseModel",
        "description": "Merchant Category Code List response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/merchantCategoryCodesListResponseDataModel"
            }
          },
          "link": {
            "type": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "bankDetailsByAbaRoutingResponseDataModel": {
        "title": "bankDetailsByAbaRoutingResponseDataModel",
        "description": "Get bank details by ABA routing number response data model.",
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "nullable": true,
            "properties": {
              "abaRouting": {
                "type": "string"
              },
              "bankName": {
                "type": "string"
              },
              "bankAddress": {
                "type": "string"
              },
              "bankCity": {
                "type": "string"
              },
              "bankState": {
                "type": "string"
              },
              "bankZipCode": {
                "type": "string"
              },
              "bankZipCodeExtension": {
                "type": "string"
              },
              "bankPhoneNumberAreaCode": {
                "type": "string"
              },
              "bankPhoneNumberPrefix": {
                "type": "string"
              },
              "bankPhoneNumberSuffix": {
                "type": "string"
              }
            }
          }
        }
      },
      "bankDetailsByAbaRoutingResponseModel": {
        "title": "bankDetailsByAbaRoutingResponseModel",
        "description": "Get bank details by ABA routing number response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bankDetailsByAbaRoutingResponseDataModel"
            }
          },
          "link": {
            "type": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "enrollmentJsonSearchCompleteApplicationResponseMetaModel": {
        "title": "enrollmentJsonSearchCompleteApplicationResponseDataMetaModel",
        "description": "Enrollment JSON search complete application response data meta model.",
        "type": "object",
        "properties": {
          "pagination": {
            "description": "Pagination search result related information.",
            "type": "object",
            "properties": {
              "links": {
                "description": "Pagination search result links.",
                "type": "object",
                "properties": {
                  "self": {
                    "$ref": "#/components/schemas/paginationLinkToSelf"
                  },
                  "next": {
                    "$ref": "#/components/schemas/paginationLinkToNext"
                  },
                  "previous": {
                    "$ref": "#/components/schemas/paginationLinkToPrevious"
                  }
                },
                "required": ["self"]
              },
              "pageNumber": {
                "$ref": "#/components/schemas/paginationPageNumber"
              },
              "pageSize": {
                "$ref": "#/components/schemas/paginationPageSize"
              },
              "total": {
                "$ref": "#/components/schemas/paginationTotal"
              },
              "currentResultCount": {
                "$ref": "#/components/schemas/paginationCurrentResultCount"
              },
              "hasMoreResults": {
                "$ref": "#/components/schemas/paginationHasMoreResults"
              }
            },
            "required": ["links", "pageNumber", "pageSize", "total", "currentResultCount", "hasMoreResults"]
          }
        },
        "required": ["pagination"]
      },
      "enrollmentJsonSearchCompleteApplicationResponseDataModel": {
        "title": "enrollmentJsonSearchCompleteApplicationResponseDataModel",
        "description": "Enrollment JSON search complete application response data model.",
        "type": "object",
        "properties": {
          "result": {
            "description": "Dataset of records based on search criteria. If no data is found matching search criteria, then returns an empty array.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/enrollmentSuccessfulResponseDataModel"
            },
            "minItems": 0,
            "nullable": false
          },
          "meta": {
            "$ref": "#/components/schemas/enrollmentJsonSearchCompleteApplicationResponseMetaModel"
          }
        },
        "required": ["result", "meta"]
      },
      "enrollmentJsonSearchCompleteApplicationSuccessResponseModel": {
        "title": "enrollmentJsonSearchCompleteApplicationSuccessResponseModel",
        "description": "Enrollment JSON search complete application response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "format": "string",
            "enum": ["success"]
          },
          "data": {
            "$ref": "#/components/schemas/enrollmentJsonSearchCompleteApplicationResponseDataModel"
          },
          "link": {
            "type": "string",
            "format": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "enrollmentUnderwritingSuccessResponseDataModel": {
        "title": "enrollmentUnderwritingSuccessResponseDataModel",
        "description": "Enrollment underwriting related information successful response data model.",
        "type": "object",
        "properties": {
          "underwritingBank": {
            "$ref": "#/components/schemas/underwritingBank"
          },
          "eligibleUnderwritingBank": {
            "$ref": "#/components/schemas/eligibleUnderwritingBank"
          }
        }
      },
      "enrollmentUnderwritingSuccessResponseModel": {
        "title": "enrollmentUnderwritingSuccessResponseModel",
        "description": "Enrollment underwriting related information successful response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "format": "string",
            "enum": ["success"]
          },
          "data": {
            "$ref": "#/components/schemas/enrollmentUnderwritingSuccessResponseDataModel"
          },
          "link": {
            "type": "string",
            "format": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "enrollmentUnderwritingStatusUpdatePatchSuccessResponseDataModel": {
        "title": "enrollmentUnderwritingStatusUpdatePatchSuccessResponseDataModel",
        "description": "Enrollment application underwriting status update successful response data model",
        "type": "object",
        "properties": {
          "underwritingStatusCode": {
            "$ref": "#/components/schemas/underwritingStatusCode"
          },
          "underwritingStatus": {
            "$ref": "#/components/schemas/underwritingStatus"
          }
        },
        "required": ["underwritingStatusCode", "underwritingStatus"]
      },
      "enrollmentUnderwritingStatusUpdatePatchSuccessResponseModel": {
        "title": "enrollmentUnderwritingStatusUpdatePatchSuccessResponseModel",
        "description": "Enrollment application underwriting status update successful response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "format": "string",
            "enum": ["success"]
          },
          "data": {
            "$ref": "#/components/schemas/enrollmentUnderwritingSuccessResponseDataModel"
          },
          "link": {
            "type": "string",
            "format": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "enrollmentAdditionalInformationSuccessResponseModel": {
        "title": "enrollmentAdditionalInformationSuccessResponseModel",
        "description": "Enrollment application related additional information successful response model.",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "format": "string",
            "enum": ["success"]
          },
          "data": {
            "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationModel"
          },
          "link": {
            "type": "string",
            "format": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "enrollmentSuccessfulResponseDataModel": {
        "title": "enrollmentSuccessfulResponseDataModel",
        "description": "Success response object.",
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/enrollmentApplicationModel"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/enrollmentTwoFactorModel"
          },
          "enricher": {
            "$ref": "#/components/schemas/enrollmentEnricherModel"
          },
          "status": {
            "$ref": "#/components/schemas/enrollmentStatusModel"
          },
          "merchantCompletionStatus": {
            "$ref": "#/components/schemas/enrollmentMerchantCompletionStatusModel"
          }
        }
      },
      "enrollmentValidationResponseDataModel": {
        "title": "enrollmentValidationResponseDataModel",
        "description": "Enrollment validation response data model.",
        "type": "object",
        "properties": {
          "readyToSubmit": {
            "type": "boolean"
          },
          "errors": {
            "description": "validation response data errors.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "object"
              }
            ]
          }
        }
      },
      "enrollmentErrorResponseModel": {
        "title": "enrollmentErrorResponseModel",
        "description": "Error response object.",
        "type": "object",
        "properties": {
          "status": {
            "title": "enrollmentErrorResponseModelPropertyTitle",
            "description": "Response status",
            "type": "string",
            "default": "error"
          },
          "data": {
            "title": "enrollmentErrorResponseModelPropertyData",
            "description": "Error message.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "link": {
            "title": "enrollmentErrorResponseModelPropertyLink",
            "description": "URL for the resource.",
            "type": "string"
          }
        }
      },
      "versionResponseModel": {
        "title": "versionResponseModel",
        "description": "Version check response object.",
        "type": "object",
        "properties": {
          "env": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": ["env", "name", "version"]
      },
      "statusResponseDataModel": {
        "title": "statusResponseDataModel",
        "description": "Status check response data object.",
        "type": "object",
        "properties": {
          "checks": {
            "type": "object"
          },
          "view": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "globalStatus": {
            "type": "string"
          }
        },
        "required": ["checks", "view", "globalStatus"]
      },
      "statusResponseModel": {
        "title": "statusResponseModel",
        "description": "Status check response object.",
        "type": "object",
        "required": ["status", "data", "link"],
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/statusResponseDataModel"
          },
          "link": {
            "type": "string"
          }
        }
      },
      "500InternalServerErrorApiResponseModel": {
        "title": "500InternalServerErrorApiResponseModel",
        "description": "500 Internal Server Error",
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "link": {
            "type": "string"
          }
        },
        "required": ["status", "data", "link"]
      },
      "401UnauthorizedApiResponseModel": {
        "title": "401UnauthorizedApiResponseModel",
        "description": "401 Unauthorized",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": ["message"]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/oauth/token": {
      "servers": [
        {
          "url": "https://enrollment-api-auth.paymentshub.com"
        }
      ],
      "post": {
        "summary": "Get Authentication Token",
        "description": "The Authentication endpoint is used to retrieve the token needed to call the application endpoints. A token is granted when a user calls the Authentication endpoint and submits a matching Client ID and Client Secret pair. For more information about authentication, please refer to the Merchant Boarding API Integration Guide.",
        "operationId": "postOauthToken",
        "security": [],
        "tags": ["application"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oauthTokenModel"
              },
              "examples": {
                "oauthTokenRequest": {
                  "summary": "Enrollment authentication flow.",
                  "value": {
                    "grant_type": "client_credentials",
                    "scope": "all",
                    "client_id": "example_sandbox",
                    "client_secret": "example"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [],
        "responses": {
          "201": {
            "description": "Returns Authentication Token Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauthTokenSuccessfulResponseModel"
                },
                "examples": {
                  "201SuccessResponse": {
                    "summary": "Get ouath token successful response.",
                    "value": {
                      "data": {
                        "access_token": "example_token",
                        "token_type": "bearer",
                        "expires_in": 300,
                        "scope": "create"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application": {
      "post": {
        "summary": "Create New Application",
        "description": "Create a new enrollment application by using a plan ID. For information about obtaining a plan ID, please refer to the Merchant Boarding API <a href='/products/fintech-tools/merchant-boarding-api/integration'>Integration Guide</a>. Fields required to create and save a new application are identified by the Required attribute in this endpoint. Fields required to submit an application to Underwriting are identified by the Required attribute in the <a href='/products/fintech-tools/merchant-boarding-api/enrollment/sandbox/application#post/enroll/one-click-submit-application'>One-Click Create And Submit</a> endpoint.",
        "operationId": "postApplication",
        "tags": ["application"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentMinimalApplicationPostRequestModel"
              },
              "examples": {
                "validMinimalApplication": {
                  "summary": "A valid minimal application.",
                  "value": {
                    "agent": 12345,
                    "applicationName": "Joe's spaceage Stereo - Vermont",
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                    "plan": {
                      "planId": 12345
                    }
                  }
                },
                "validMinimalMerchantCompletionApplication": {
                  "summary": "A valid minimal merchant completion application.",
                  "value": {
                    "agent": 12345,
                    "applicationName": "Joe's spaceage Stereo - Vermont",
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                    "plan": {
                      "planId": 18595
                    },
                    "principals": [
                      {
                        "phoneNumber": "1234567890",
                        "email": "example@email.com",
                        "isPersonalGuarantor": true
                      }
                    ],
                    "business": {
                      "percentOfBusinessTransactions": {
                        "cardSwiped": 65,
                        "keyedCardPresentNotImprinted": 20,
                        "mailOrPhoneOrder": 0,
                        "internet": 15
                      }
                    }
                  }
                },
                "validApplication": {
                  "summary": "A valid enrollment application.",
                  "value": {
                    "agent": 12345,
                    "applicationName": "Joe's spaceage Stereo - Vermont",
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                    "plan": {
                      "planId": 12345,
                      "equipmentCostToMerchant": 325.49,
                      "accountSetupFee": 10.99,
                      "discountFrequency": "Daily",
                      "equipment": [
                        {
                          "equipmentId": 621,
                          "quantity": 1
                        },
                        {
                          "equipmentId": 809,
                          "quantity": 3
                        },
                        {
                          "equipmentId": 1054,
                          "quantity": 2
                        }
                      ]
                    },
                    "shipping": {
                      "shippingDestination": "DBA",
                      "deliveryMethod": "Ground"
                    },
                    "principals": [
                      {
                        "firstName": "Jane",
                        "lastName": "Jackson",
                        "socialSecurityNumber": "123456789",
                        "dateOfBirth": "1955-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "street": "123 Selah Way",
                        "street2": "Suite 123",
                        "zipCode": "12345",
                        "city": "South Burlington",
                        "state": "VT",
                        "equityOwnershipPercentage": 50,
                        "title": "ceo",
                        "isPersonalGuarantor": true,
                        "driverLicenseNumber": "ABC1234567890",
                        "driverLicenseIssuedState": "MI"
                      },
                      {
                        "firstName": "Jeremy",
                        "lastName": "Coelman",
                        "socialSecurityNumber": "123456789",
                        "dateOfBirth": "1977-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "street": "1234 Finwood Drive",
                        "zipCode": "12345",
                        "city": "Red Bank",
                        "state": "NJ",
                        "equityOwnershipPercentage": 50,
                        "title": "manager",
                        "isPersonalGuarantor": false
                      }
                    ],
                    "business": {
                      "corporateName": "Joe's Spaceage Stereo",
                      "dbaName": "Jo Jackson Spaceage Stereo",
                      "businessType": "C",
                      "industryType": "restaurant",
                      "federalTaxIdNumber": "123567890",
                      "federalTaxIdType": "EIN",
                      "mcc": "0742",
                      "phone": "1234567890",
                      "email": "user@example.com",
                      "websites": [
                        {
                          "url": "https://example.com",
                          "websiteCustomerServiceEmail": "customer-service-email@example.com",
                          "websiteCustomerServicePhoneNumber": "1234567890"
                        }
                      ],
                      "averageTicketAmount": 5000,
                      "averageMonthlyVolume": 1250000,
                      "highTicketAmount": 125000,
                      "merchandiseServicesSold": "Audio components and services",
                      "percentOfBusinessTransactions": {
                        "cardSwiped": 65,
                        "keyedCardPresentNotImprinted": 20,
                        "mailOrPhoneOrder": 0,
                        "internet": 15
                      },
                      "ebt": {
                        "ebtFood": true,
                        "ebtCash": false,
                        "ebtAccountNumber": "test-account-12345"
                      },
                      "businessContact": {
                        "firstName": "Roy",
                        "lastName": "Martin",
                        "socialSecurityNumber": "123456789",
                        "dateOfBirth": "1947-11-05",
                        "street": "123 Late Avenue",
                        "street2": "",
                        "zipCode": "12345",
                        "city": "South Burington",
                        "state": "VT",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com"
                      },
                      "statementDeliveryMethod": "electronic",
                      "businessAddress": {
                        "dba": {
                          "street": "1234 Clinton St",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        },
                        "corporate": {
                          "street": "1234 Sun Valley Rd",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        },
                        "shipTo": {
                          "street": "1234 Saint James Drive",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        }
                      }
                    },
                    "bankAccount": {
                      "abaRouting": "000000001",
                      "accountType": "checking",
                      "demandDepositAccount": "0123456789012"
                    }
                  }
                },
                "invalidApplication": {
                  "summary": "Invalid application example.",
                  "value": {
                    "agent": 12345
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation postApplication\n     *\n     * Create New Application.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMinimalApplicationPostRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function postApplication($body = null)\n    {\n        list($response) = $this->postApplicationWithHttpInfo($body);\n        return $response;\n    }\n\n    /**\n     * Operation postApplicationWithHttpInfo\n     *\n     * Create New Application.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMinimalApplicationPostRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function postApplicationWithHttpInfo($body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->postApplicationRequest($body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 201:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Create New Application.\n * Create new enrollment application by using a plan ID.\n * @param {Object} opts Optional parameters\n * @param {module:api/ApplicationApi~postApplicationCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\npostApplication(opts, callback) {\n  opts = opts || {};\n  let postBody = opts['body'];\n\n  let pathParams = {};\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = ['application/json'];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/application', 'POST',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the created application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "201SuccessResponse": {
                    "summary": "An example for 201 successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Vermont",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 325.49,
                            "accountSetupFee": 10.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "123 Selah Way",
                              "street2": "Suite 123",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Jane",
                              "lastName": "Jackson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "ceo",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            },
                            {
                              "street": "1234 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": null,
                              "driverLicenseIssuedState": null
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567890",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "123 West Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://example.com",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1234 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1234 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "1234 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "9999999999999",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/application"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestErrorResponse": {
                    "summary": "An example for 400 bad request error response for duplicate external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application external key '0aa000a-000a-00a0-00a0-00000aa00a0' is already in use"
                      },
                      "link": "/enroll/application"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "plan.planId": ["should be integer"],
                          "plan.discountFrequency": [
                            "should be equal to one of the allowed values - [ Daily, Monthly ]"
                          ],
                          "principals[0].firstName": ["should NOT be shorter than 1 characters"],
                          "plan.equipment": ["equipment object cannot contain duplicate equipmentId"],
                          "principals": ["principals object should have exactly one personal guarantor"],
                          "business.percentOfBusinessTransactions": [
                            "sum of percentOfBusinessTransactions should be 100"
                          ]
                        }
                      },
                      "link": "/enroll/application"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/one-click-submit-application": {
      "post": {
        "summary": "One-Click Create and Submit",
        "description": "This endpoint is used to create a new processing application, validate, and submit it to Underwriting using a single endpoint.",
        "operationId": "postOneClickSubmitApplication",
        "tags": ["application"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentOneClickSubmitApplicationWithAllRequiredValuesModel"
              },
              "examples": {
                "validApplication": {
                  "summary": "A valid enrollment application with all required properties.",
                  "value": {
                    "agent": 12345,
                    "applicationName": "Joe's spaceage Stereo - Vermont",
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                    "plan": {
                      "planId": 12345,
                      "equipmentCostToMerchant": 325.49,
                      "accountSetupFee": 10.99,
                      "discountFrequency": "Daily",
                      "equipment": [
                        {
                          "equipmentId": 621,
                          "quantity": 1
                        },
                        {
                          "equipmentId": 809,
                          "quantity": 3
                        },
                        {
                          "equipmentId": 1054,
                          "quantity": 2
                        }
                      ]
                    },
                    "shipping": {
                      "shippingDestination": "DBA",
                      "deliveryMethod": "Ground"
                    },
                    "principals": [
                      {
                        "firstName": "Joseph",
                        "lastName": "Jackson",
                        "socialSecurityNumber": "123456789",
                        "driverLicenseNumber": "ABC1234567890",
                        "driverLicenseIssuedState": "MI",
                        "dateOfBirth": "1955-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "street": "123 Selah Way",
                        "street2": "Suite 123",
                        "zipCode": "12345",
                        "city": "South Burlington",
                        "state": "VT",
                        "equityOwnershipPercentage": 50,
                        "title": "ceo",
                        "isPersonalGuarantor": true
                      },
                      {
                        "firstName": "Jeremy",
                        "lastName": "Coelman",
                        "socialSecurityNumber": "123456789",
                        "dateOfBirth": "1977-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "street": "3601 Finwood Drive",
                        "zipCode": "12345",
                        "city": "Red Bank",
                        "state": "NJ",
                        "equityOwnershipPercentage": 50,
                        "title": "manager",
                        "isPersonalGuarantor": false
                      }
                    ],
                    "business": {
                      "corporateName": "Joe's Spaceage Stereo",
                      "dbaName": "Jo Jackson Spaceage Stereo",
                      "businessType": "C",
                      "industryType": "restaurant",
                      "federalTaxIdNumber": "123567654",
                      "federalTaxIdType": "EIN",
                      "mcc": "0742",
                      "phone": "1234567890",
                      "email": "user@example.com",
                      "websites": [
                        {
                          "url": "https://spaceagestereos.biz",
                          "websiteCustomerServiceEmail": "customer-service-email@example.com",
                          "websiteCustomerServicePhoneNumber": "1234567890"
                        }
                      ],
                      "averageTicketAmount": 5000,
                      "averageMonthlyVolume": 1250000,
                      "highTicketAmount": 125000,
                      "merchandiseServicesSold": "Audio components and services",
                      "yearsInBusiness": 10,
                      "monthsInBusiness": 10,
                      "percentOfBusinessTransactions": {
                        "cardSwiped": 65,
                        "keyedCardPresentNotImprinted": 20,
                        "mailOrPhoneOrder": 0,
                        "internet": 15
                      },
                      "ebt": {
                        "ebtFood": true,
                        "ebtCash": false,
                        "ebtAccountNumber": "test-account-12345"
                      },
                      "businessContact": {
                        "firstName": "Roy",
                        "lastName": "Martin",
                        "socialSecurityNumber": "123456789",
                        "dateOfBirth": "1947-11-05",
                        "street": "828 Late Avenue",
                        "street2": "",
                        "zipCode": "12345",
                        "city": "South Burington",
                        "state": "VT",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com"
                      },
                      "statementDeliveryMethod": "electronic",
                      "businessAddress": {
                        "dba": {
                          "street": "1072 Clinton St",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        },
                        "corporate": {
                          "street": "1447 Sun Valley Rd",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        },
                        "shipTo": {
                          "street": "4735 Saint James Drive",
                          "city": "South Burlington",
                          "state": "VT",
                          "zipCode": "12345"
                        }
                      }
                    },
                    "bankAccount": {
                      "abaRouting": "000000001",
                      "accountType": "checking",
                      "demandDepositAccount": "9999999999999"
                    }
                  }
                },
                "invalidApplication": {
                  "summary": "Invalid application example.",
                  "value": {
                    "agent": 12345
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation postOneClickSubmitApplication\n     *\n     * Create new application and submit for processing to underwriting.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentOneClickSubmitApplicationWithAllRequiredValuesModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function postOneClickSubmitApplication($body = null)\n    {\n        list($response) = $this->postOneClickSubmitApplicationWithHttpInfo($body);\n        return $response;\n    }\n\n    /**\n     * Operation postOneClickSubmitApplicationWithHttpInfo\n     *\n     * Create new application and submit for processing to underwriting.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentOneClickSubmitApplicationWithAllRequiredValuesModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function postOneClickSubmitApplicationWithHttpInfo($body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->postOneClickSubmitApplicationRequest($body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Create new application and submit for processing to underwriting.\n     * Create new enrollment application by using a plan ID and submit for processing.\n     * @param {Object} opts Optional parameters\n     * @param {module:api/ApplicationApi~postOneClickSubmitApplicationCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    postOneClickSubmitApplication(opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/one-click-submit-application', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns created application and underwriting status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "201SuccessResponse": {
                    "summary": "An example for 201 successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Vermont",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 325.49,
                            "accountSetupFee": 10.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "722 Selah Way",
                              "street2": "Suite 125",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph",
                              "lastName": "Jackson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "ceo",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            },
                            {
                              "street": "3601 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://spaceagestereos.biz",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "9999999999999",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": "0000000000001",
                          "applicationStatus": "finalized",
                          "underwritingStatus": "Enrollment"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/one-click-submit-application"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestErrorResponse": {
                    "summary": "An example for 400 bad request error response for duplicate external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application external key '0aa000a-000a-00a0-00a0-00000aa00a0' is already in use"
                      },
                      "link": "/enroll/one-click-submit-application"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/one-click-submit-application"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "plan.planId": ["should be integer"],
                          "plan.discountFrequency": [
                            "should be equal to one of the allowed values - [ Daily, Monthly ]"
                          ],
                          "principals[0].firstName": ["should NOT be shorter than 1 characters"],
                          "plan.equipment": ["equipment object cannot contain duplicate equipmentId"],
                          "principals": ["principals object should have exactly one personal guarantor"],
                          "business.percentOfBusinessTransactions": [
                            "sum of percentOfBusinessTransactions should be 100"
                          ]
                        }
                      },
                      "link": "/enroll/one-click-submit-application"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/key/{externalKey}": {
      "get": {
        "summary": "Get Application by External Key",
        "description": "This endpoint is used to retrieve an existing application by referencing the external key associated with the application.",
        "operationId": "getApplicationByExternalKey",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationByExternalKey\n     *\n     * Get Application by External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getApplicationByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationByExternalKeyWithHttpInfo\n     *\n     * Get Application by External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getApplicationByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Get Application by External Key.\n * Get enrollment application by external key.\n * @param {module:api/ApplicationApi~getApplicationByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\ngetApplicationByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/application/key/{externalKey}', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an existing application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Vermont",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 325.49,
                            "accountSetupFee": 10.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "722 Selah Way",
                              "street2": "Suite 125",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph",
                              "lastName": "Jackson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "ceo",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            },
                            {
                              "street": "3601 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://spaceagestereos.biz",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "9999999999999",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Application",
        "description": "Update an existing application using the PATCH method.",
        "operationId": "patchApplicationByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationPatchRequestModel"
              },
              "examples": {
                "validApplication": {
                  "summary": "A valid enrollment application to update",
                  "value": {
                    "applicationName": "Joe's spaceage Stereo - Redmond",
                    "plan": {
                      "equipment": [
                        {
                          "equipmentId": 621,
                          "quantity": 1
                        },
                        {
                          "equipmentId": 791,
                          "quantity": 0
                        },
                        {
                          "equipmentId": 809,
                          "quantity": 3
                        },
                        {
                          "equipmentId": 994,
                          "quantity": 0
                        },
                        {
                          "equipmentId": 1054,
                          "quantity": 2
                        }
                      ],
                      "equipmentCostToMerchant": 15,
                      "accountSetupFee": 0.99
                    },
                    "principals": [
                      {
                        "street": "790 Selah Drive",
                        "street2": "Suite 125",
                        "city": "South Burlington",
                        "state": "VT",
                        "zipCode": "12345",
                        "firstName": "Joseph Jr.",
                        "lastName": "Jameson",
                        "socialSecurityNumber": "123456789",
                        "driverLicenseNumber": "ABC1234567891",
                        "driverLicenseIssuedState": "GA",
                        "dateOfBirth": "1955-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "equityOwnershipPercentage": 40,
                        "title": "owner",
                        "isPersonalGuarantor": true
                      },
                      {
                        "street": "3601 Finwood Drive",
                        "street2": null,
                        "city": "Red Bank",
                        "state": "NJ",
                        "zipCode": "12345",
                        "firstName": "Jeremy",
                        "lastName": "Coelman",
                        "socialSecurityNumber": "123456789",
                        "driverLicenseNumber": "ABC1234567891",
                        "driverLicenseIssuedState": "GA",
                        "dateOfBirth": "1977-12-25",
                        "phoneNumber": "1234567890",
                        "email": "user@example.com",
                        "equityOwnershipPercentage": 50,
                        "title": "manager",
                        "isPersonalGuarantor": false
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation patchApplicationByExternalKey\n     *\n     * Patch Application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationPatchRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function patchApplicationByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->patchApplicationByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation patchApplicationByExternalKeyWithHttpInfo\n     *\n     * Patch Application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationPatchRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function patchApplicationByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->patchApplicationByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "Javascript",
            "source": "/**\n * Patch Application.\n * Update Existing Application using method PATCH.\n * @param {Object} opts Optional parameters\n * @param {module:api/ApplicationApi~patchApplicationByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\npatchApplicationByExternalKey(externalKey, opts, callback) {\n  opts = opts || {};\n  let postBody = opts['body'];\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = ['application/json'];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/application/key/{externalKey}', 'PATCH',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns updated application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully updated enrollment application",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Redmond",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 15,
                            "accountSetupFee": 0.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "790 Selah Drive",
                              "street2": "Suite 125",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph Jr.",
                              "lastName": "Jameson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 40,
                              "title": "owner",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567891",
                              "driverLicenseIssuedState": "GA"
                            },
                            {
                              "street": "3601 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": "ABC1234567891",
                              "driverLicenseIssuedState": "GA"
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://spaceagestereos.biz",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "000000000001",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "Unable to find application by external key",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "plan.equipmentCostToMerchant": ["should be number"],
                          "plan.equipment": ["should be array"],
                          "principals": ["should be array"]
                        }
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/mid/{merchantId}": {
      "get": {
        "summary": "Get Application by MID",
        "description": "This endpoint is used to retrieve an existing application by referencing the Merchant ID (MID).",
        "operationId": "get-enroll-application-mid-merchantId",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationByMerchantId\n     *\n     * Get application by merchant ID (MID).\n     *\n     * @param  \\Swagger\\Client\\Model\\MerchantId $merchant_id Merchant identification number.. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getApplicationByMerchantId($merchant_id)\n    {\n        list($response) = $this->getApplicationByMerchantIdWithHttpInfo($merchant_id);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationByMerchantIdWithHttpInfo\n     *\n     * Get application by merchant ID (MID).\n     *\n     * @param  \\Swagger\\Client\\Model\\MerchantId $merchant_id Merchant identification number.. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationByMerchantIdWithHttpInfo($merchant_id)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getApplicationByMerchantIdRequest($merchant_id);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get application by merchant ID (MID).\n     * Get enrollment application by merchant ID (MID).\n     * @param {module:api/ApplicationApi~getApplicationByMerchantIdCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    getApplicationByMerchantId(merchantId, callback) {\n      let postBody = null;\n\n      let pathParams = {\n        'merchantId': merchantId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/mid/{merchantId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identification number created when Merchant Processing Account is created.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/merchantId"
            },
            "example": "00000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns existing application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "Example Response": {
                    "summary": "An example of a successful response",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Vermont",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 325.49,
                            "accountSetupFee": 10.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "722 Selah Way",
                              "street2": "Suite 125",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph",
                              "lastName": "Jackson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "ceo",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567891",
                              "driverLicenseIssuedState": "GA"
                            },
                            {
                              "street": "3601 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": "ABC1234567891",
                              "driverLicenseIssuedState": "GA"
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://spaceagestereos.biz",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "11111111111111",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "sent to system",
                          "underwritingStatus": "Pending"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/application/mid/00000000001"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided merchant ID.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with merchant ID '00000000001' not found"
                      },
                      "link": "/application/mid/00000000001"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/pricing/key/{externalKey}": {
      "get": {
        "summary": "Get Application Pricing",
        "description": "Get application pricing details by application external key.",
        "operationId": "getApplicationPricingDetailsByExternalKey",
        "tags": ["application-pricing"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationPricingDetailsByExternalKey\n     *\n     * Get application pricing details by external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getApplicationPricingDetailsByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationPricingDetailsByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationPricingDetailsByExternalKeyWithHttpInfo\n     *\n     * Get application pricing details by external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationPricingDetailsByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getApplicationPricingDetailsByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get application pricing details by external key.\n     * Get application pricing details by application external key.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {module:api/ApplicationPricingApi~getApplicationPricingDetailsByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getApplicationPricingDetailsByExternalKey(externalKey, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling getApplicationPricingDetailsByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/pricing/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Return pricing details for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "industryType": "Retail",
                        "pricingModel": "tiered",
                        "isFlatRatePricing": false,
                        "isEdgePricing": true,
                        "qualifiedRate": 2.69,
                        "midQualifiedBump": 0.17,
                        "nonQualifiedBump": 0.67,
                        "nonQualifiedTransactionFeeBump": 0.15,
                        "interchangeDuesAssessmentsBasisPoint": null,
                        "amexInterchangeDuesAssessmentsBasisPoint": null,
                        "ebtInterchangeDuesAssessmentsBasisPoint": null,
                        "debitInterchangeDuesAssessmentsBasisPoint": null,
                        "ebtQualifiedRate": null,
                        "debitQualifiedRate": null,
                        "qualifiedAmexTransactionFee": null,
                        "qualifiedCheckCardRate": 0.16,
                        "qualifiedCheckCardTransactionFee": 1.5,
                        "amexQualifiedRate": 0.12,
                        "rewardRate": "MQ",
                        "qualifiedTransactionFee": 1.25,
                        "accountSetupFee": 255,
                        "annualFee": 1,
                        "enableDebitInterchangeBilling": false,
                        "enablePassthroughAssessment": true,
                        "enableInterchangeTransactionPassthroughFee": true,
                        "interchangeTransactionPassthroughCreditFee": 0,
                        "interchangeTransactionPassthroughCheckcardFee": 0,
                        "enableNetworkAccessBrandFees": true,
                        "edgeEnabled": false,
                        "edgeFlatFee": 0,
                        "edgePercentFee": 0,
                        "waiveTerminationFee": true,
                        "isPayAsYouGo": false,
                        "pciFeeBillingFrequency": "ANNUAL",
                        "pciFee": 145,
                        "additionalFees": {
                          "accountCancellationFee": 1,

                          "achTransactionFee": 0.11,
                          "addressVerificationServiceFee": 1,
                          "authorizationFee": 1,
                          "batchHeader": 0.112,
                          "chargeBackFee": 0.113,
                          "creditCardConvenienceMinimum": 1,
                          "debitGatewayFee": 0.114,
                          "debitSettledTransactionFee": 0.129,
                          "debitTransactionFee": 0.115,
                          "dialpayTransactionFee": 1,
                          "ebtSettledTransactionFee": 0.149,
                          "ebtTransactionFee": 0.116,
                          "firstDataCheckMidqualSurcharge": 1,
                          "firstDataCheckNonqualSurcharge": 1,
                          "firstDataCreditCheckPerItem": 1,
                          "firstDataCreditMidqualSurcharge": 1,
                          "firstDataCreditNonqualSurcharge": 1,
                          "gatewayTransactionFee": 1.2,
                          "giftCardBalanceInquiryFee": 1,
                          "giftCardNetworkAccessFee": 1,
                          "giftCardReportTransactionFee": 1,
                          "internetGatewayMonthlyFee": 0.117,
                          "internetSetupFee": 1,
                          "internetTransactionFee": 0.118,
                          "mcclaimsFee": 0.403,
                          "merchantClubFee": 0.119,
                          "minimumVolumeFeeL1": 1,
                          "monthlyBasicServiceFee": 0.12,
                          "monthlyDiscountFee": 80,
                          "monthlyDebitNetworkParticipationFee": 1,
                          "monthlyHostingFee": 1,
                          "monthlyMinimumDiscountFee": 0.121,
                          "monthlyMinimumFee": 1.9,
                          "monthlyRegulatoryFee": 2.1,
                          "monthlySoftwareFeePerDevice": 0.122,
                          "payanywhereAdditionalEquipmentFee": 1,
                          "payanywhereGatewayFee": 1,
                          "payanywhereTransactionFee": 1,
                          "pinDebitConvenienceFlat": 1,
                          "pinDebitConvenienceMinimum": 1,
                          "printerCashDrawerMonthlyRentalFee": 1,
                          "printerMonthlyRentalFee": 1,
                          "processorAuthorizationFee": 0.22,
                          "retrievalFee": 0.123,
                          "returnItemSupportFee": 0.49,
                          "settledTransactionFee": 0.124,
                          "technologyFee": 0.99,
                          "smartTerminalA920EthernetDockRentalFee": 1,
                          "smartTerminalWirelessMonthlyPerDeviceFee": 1,
                          "smartTerminalWirelessTransactionFee": 1,
                          "statementMailingFee": 0,
                          "touchToneTransactionFee": 1,
                          "travelAndEntertainmentDraftCaptureTransactionFee": 0.125,
                          "visaCheckCardFee": 1,
                          "voiceAuthorizationFee": 1,
                          "wirelessActivationFee": 1,
                          "wirelessMonthlyFee": 0.126,
                          "wirelessTransactionFee": 0.123,
                          "creditCardConveniencePercent": 0.1,
                          "pinDebitConveniencePercent": 1
                        },
                        "equipmentCostToMerchant": 211.5
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Unable to get pricing details for application by application external key",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to get pricing details for application"
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Application Pricing",
        "description": "The Update Application Pricing endpoint uses the PATCH method to give Partners the ability to edit pricing fields directly on applications. Please refer to the <a href='/products/fintech-tools/merchant-boarding-api/integration#pricing-conditions' target='_blank'>'Pricing Field Conditions'</a> section of the Merchant Boarding API Integration Guide for the field mapping conditions required to successfully update specific pricing field values. Once an application has been created, this endpoint can be leveraged to set customized values for applicable pricing fields without creating a new template. Any changes made using this endpoint will only affect the application specified by the external key and will not change the template.",
        "operationId": "patchApplicationPricingByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationPricingPatchRequestModel"
              },
              "examples": {
                "validApplicationPricingPatchRequest": {
                  "summary": "A valid application pricing update request",
                  "value": {
                    "equipmentCostToMerchant": 20.5,
                    "qualifiedRate": 0.69,
                    "amexQualifiedRate": 0.12,
                    "qualifiedTransactionFee": 0.99,
                    "interchangeDuesAssessmentsBasisPoint": null,
                    "amexInterchangeDuesAssessmentsBasisPoint": null,
                    "ebtInterchangeDuesAssessmentsBasisPoint": null,
                    "ebtQualifiedRate": null,
                    "debitInterchangeDuesAssessmentsBasisPoint": null,
                    "debitQualifiedRate": null,
                    "qualifiedCheckCardRate": null,
                    "qualifiedCheckCardTransactionFee": 1.5,
                    "accountSetupFee": 10.12,
                    "interchangeTransactionPassthroughCreditFee": 1.45,
                    "interchangeTransactionPassthroughCheckcardFee": 2.45,
                    "pciFeeBillingFrequency": "ANNUAL",
                    "enableInterchangeTransactionPassthroughFee": false,
                    "enablePassthroughAssessment": false,
                    "enableNetworkAccessBrandFees": true,
                    "waiveTerminationFee": false,
                    "additionalFees": {
                      "achTransactionFee": 0,
                      "batchHeader": 0,
                      "chargeBackFee": 15,
                      "debitGatewayFee": 0,
                      "debitTransactionFee": 0,
                      "ebtTransactionFee": 0,
                      "gatewayTransactionFee": 0,
                      "internetGatewayMonthlyFee": 0,
                      "internetTransactionFee": 0,
                      "mcclaimsFee": 0,
                      "merchantClubFee": 14.95,
                      "monthlyBasicServiceFee": 5,
                      "monthlyDiscountFee": 0,
                      "monthlyHostingFee": 0,
                      "monthlyMinimumDiscountFee": 25,
                      "monthlyMinimumFee": 0,
                      "monthlyRegulatoryFee": 0,
                      "monthlySoftwareFeePerDevice": 11.99,
                      "processorAuthorizationFee": 0,
                      "retrievalFee": 15,
                      "returnItemSupportFee": 0,
                      "travelAndEntertainmentDraftCaptureTransactionFee": 0,
                      "wirelessMonthlyFee": 0,
                      "wirelessTransactionFee": 0
                    }
                  }
                },
                "invalidApplicationPricingPatchRequest": {
                  "summary": "An invalid application pricing update request",
                  "value": {
                    "equipmentCostToMerchant": null,
                    "qualifiedRate": "",
                    "amexQualifiedRate": "",
                    "qualifiedTransactionFee": "",
                    "midQualifiedBump": "",
                    "nonQualifiedBump": "",
                    "nonQualifiedTransactionFeeBump": "",
                    "interchangeDuesAssessmentsBasisPoint": "",
                    "amexInterchangeDuesAssessmentsBasisPoint": "",
                    "ebtInterchangeDuesAssessmentsBasisPoint": "",
                    "ebtQualifiedRate": "",
                    "debitInterchangeDuesAssessmentsBasisPoint": "",
                    "debitQualifiedRate": "",
                    "qualifiedCheckCardRate": "",
                    "qualifiedCheckCardTransactionFee": "",
                    "rewardRate": "",
                    "accountSetupFee": null,
                    "interchangeTransactionPassthroughCreditFee": null,
                    "interchangeTransactionPassthroughCheckcardFee": null,
                    "equipmentCostToMerchan": null,
                    "pciFeeBillingFrequency": "frequency",
                    "edgeFlatFee": "",
                    "edgePercentFee": "",
                    "enableInterchangeTransactionPassthroughFee": "",
                    "enablePassthroughAssessment": "",
                    "enableNetworkAccessBrandFees": "",
                    "waiveTerminationFee": "",
                    "additionalFees": {
                      "achTransactionFee": null,
                      "batchHeader": null,
                      "chargeBackFee": null,
                      "debitGatewayFee": null,
                      "debitTransactionFee": null,
                      "ebtTransactionFee": null,
                      "gatewayTransactionFee": null,
                      "internetGatewayMonthlyFee": null,
                      "internetTransactionFee": null,
                      "mcclaimsFee": null,
                      "merchantClubFee": null,
                      "monthlyBasicServiceFee": null,
                      "monthlyDiscountFee": null,
                      "monthlyHostingFee": null,
                      "monthlyMinimumDiscountFee": null,
                      "monthlyMinimumFee": null,
                      "monthlyRegulatoryFee": null,
                      "monthlySoftwareFeePerDevice": null,
                      "processorAuthorizationFee": null,
                      "retrievalFee": null,
                      "returnItemSupportFee": null,
                      "travelAndEntertainmentDraftCaptureTransactionFee": null,
                      "wirelessMonthlyFee": null,
                      "wirelessTransactionFee": null
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation patchApplicationPricingByExternalKey\n     *\n     * Patch (Update) application pricing.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationPricingPatchRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function patchApplicationPricingByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->patchApplicationPricingByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation patchApplicationPricingByExternalKeyWithHttpInfo\n     *\n     * Patch (Update) application pricing.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationPricingPatchRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function patchApplicationPricingByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->patchApplicationPricingByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Callback function to receive the result of the patchApplicationPricingByExternalKey operation.\n     * @callback moduleapi/ApplicationPricingApi~patchApplicationPricingByExternalKeyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentSuccessfulResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Patch (Update) application pricing.\n     * Update existing application pricing using method PATCH.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationPricingPatchRequestModel} opts.body \n     * @param {module:api/ApplicationPricingApi~patchApplicationPricingByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    patchApplicationPricingByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling patchApplicationPricingByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/pricing/key/{externalKey}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return updated pricing details for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully updated enrollment application pricing.",
                    "value": {
                      "status": "success",
                      "data": {
                        "industryType": "Retail",
                        "pricingModel": "tiered",
                        "isFlatRatePricing": false,
                        "isEdgePricing": true,
                        "qualifiedRate": 2.69,
                        "midQualifiedBump": 0.17,
                        "nonQualifiedBump": 0.67,
                        "nonQualifiedTransactionFeeBump": 0.15,
                        "interchangeDuesAssessmentsBasisPoint": null,
                        "amexInterchangeDuesAssessmentsBasisPoint": null,
                        "ebtInterchangeDuesAssessmentsBasisPoint": null,
                        "debitInterchangeDuesAssessmentsBasisPoint": null,
                        "ebtQualifiedRate": null,
                        "debitQualifiedRate": null,
                        "qualifiedCheckCardRate": 0.16,
                        "qualifiedCheckCardTransactionFee": 1.5,
                        "amexQualifiedRate": 0.12,
                        "rewardRate": "MQ",
                        "qualifiedTransactionFee": 1.25,
                        "accountSetupFee": 255,
                        "annualFee": 1,
                        "enablePassthroughAssessment": true,
                        "enableInterchangeTransactionPassthroughFee": true,
                        "interchangeTransactionPassthroughCreditFee": 0,
                        "interchangeTransactionPassthroughCheckcardFee": 0,
                        "enableNetworkAccessBrandFees": true,
                        "edgeEnabled": false,
                        "edgeFlatFee": null,
                        "edgePercentFee": null,
                        "waiveTerminationFee": true,
                        "isPayAsYouGo": false,
                        "pciFeeBillingFrequency": "ANNUAL",
                        "pciFee": 145,
                        "additionalFees": {
                          "accountCancellationFee": 1,
                          "addressVerificationServiceFee": 1,
                          "authorizationFee": 1,
                          "achTransactionFee": 0.11,
                          "batchHeader": 0.112,
                          "chargeBackFee": 0.113,
                          "creditCardConvenienceMinimum": 1,
                          "debitGatewayFee": 0.114,
                          "debitTransactionFee": 0.115,
                          "dialpayTransactionFee": 1,
                          "ebtTransactionFee": 0.116,
                          "firstDataCheckMidqualSurcharge": 1,
                          "firstDataCheckNonqualSurcharge": 1,
                          "firstDataCreditCheckPerItem": 1,
                          "firstDataCreditMidqualSurcharge": 1,
                          "firstDataCreditNonqualSurcharge": 1,
                          "gatewayTransactionFee": 1,
                          "giftCardBalanceInquiryFee": 1,
                          "giftCardNetworkAccessFee": 1,
                          "giftCardReportTransactionFee": 1,
                          "internetGatewayMonthlyFee": 0.117,
                          "internetSetupFee": 1,
                          "internetTransactionFee": 0.118,
                          "mcclaimsFee": 1,
                          "merchantClubFee": 0.119,
                          "minimumVolumeFeeL1": 1,
                          "monthlyBasicServiceFee": 0.12,
                          "monthlyDebitNetworkParticipationFee": 1,
                          "monthlyDiscountFee": 1,
                          "monthlyHostingFee": 1,
                          "monthlyMinimumDiscountFee": 0.121,
                          "monthlyMinimumFee": 1,
                          "monthlyRegulatoryFee": 1,
                          "monthlySoftwareFeePerDevice": 0.122,
                          "payanywhereAdditionalEquipmentFee": 1,
                          "payanywhereGatewayFee": 1,
                          "payanywhereTransactionFee": 1,
                          "pinDebitConvenienceFlat": 1,
                          "pinDebitConvenienceMinimum": 1,
                          "printerCashDrawerMonthlyRentalFee": 1,
                          "printerMonthlyRentalFee": 1,
                          "processorAuthorizationFee": 1,
                          "retrievalFee": 0.123,
                          "returnItemSupportFee": 1,
                          "settledTransactionFee": 0.124,
                          "smartTerminalA920EthernetDockRentalFee": 1,
                          "smartTerminalWirelessMonthlyPerDeviceFee": 1,
                          "smartTerminalWirelessTransactionFee": 1,
                          "statementMailingFee": 0,
                          "touchToneTransactionFee": 1,
                          "technologyFee": 0.99,
                          "travelAndEntertainmentDraftCaptureTransactionFee": 0.125,
                          "visaCheckCardFee": 1,
                          "voiceAuthorizationFee": 1,
                          "wirelessActivationFee": 1,
                          "wirelessMonthlyFee": 0.126,
                          "wirelessTransactionFee": 0.123,
                          "creditCardConveniencePercent": 0.1,
                          "pinDebitConveniencePercent": 1
                        },
                        "equipmentCostToMerchant": 211.5
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request with validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400ErrorBadRequestResponse": {
                    "summary": "Pricing validation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "pricing.edgeFlatFee": [
                            "Unable to update fee when edge pricing is enabled",
                            "Unable to update fee when cash discount program is enabled"
                          ],
                          "pricing.edgePercentFee": [
                            "Unable to update fee when edge pricing is enabled",
                            "Unable to update fee when cash discount program is enabled"
                          ],
                          "pricing.enableInterchangeTransactionPassthroughFee": [
                            "Unable to update fee flag when flat rate is enabled"
                          ],
                          "pricing.enableNetworkAccessBrandFees": [
                            "Unable to update fee flag when flat rate is enabled"
                          ],
                          "pricing.enablePassthroughAssessment": [
                            "Unable to update fee flag when flat rate is enabled"
                          ],
                          "pricing.midQualifiedBump": ["Unable to update fee based on provided surcharge table"],
                          "pricing.nonQualifiedBump": ["Unable to update fee based on provided surcharge table"],
                          "pricing.nonQualifiedTransactionFeeBump": [
                            "Unable to update fee based on provided surcharge table"
                          ],
                          "pricing.qualifiedCheckCardRate": ["Unable to update fee when flat rate is enabled"],
                          "pricing.qualifiedRate": ["Unable to update fee when cash discount program is enabled"]
                        }
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  },
                  "400ErrorUnableToUpdateApplicationPricingResponse": {
                    "summary": "Unable to update enrollment application pricing.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to update application pricing"
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Schema validation error within request body response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "Schema validation error.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "qualifiedRate": ["should be number"],
                          "amexQualifiedRate": ["should be number"],
                          "qualifiedTransactionFee": ["should be number"],
                          "midQualifiedBump": ["should be number"],
                          "nonQualifiedBump": ["should be number"],
                          "nonQualifiedTransactionFeeBump": ["should be number"],
                          "interchangeDuesAssessmentsBasisPoint": ["should be number"],
                          "amexInterchangeDuesAssessmentsBasisPoint": ["should be number"],
                          "ebtInterchangeDuesAssessmentsBasisPoint": ["should be number"],
                          "ebtQualifiedRate": ["should be number"],
                          "debitInterchangeDuesAssessmentsBasisPoint": ["should be number"],
                          "debitQualifiedRate": ["should be number"],
                          "qualifiedCheckCardRate": ["should be number"],
                          "qualifiedCheckCardTransactionFee": ["should be number"],
                          "rewardRate": [
                            "should be equal to one of the allowed values - [ MQ, Q, 20, 30, 40, 50, 60, 70, 80, 90, 95 ]"
                          ],
                          "accountSetupFee": ["should be number"],
                          "interchangeTransactionPassthroughCreditFee": ["should be number"],
                          "interchangeTransactionPassthroughCheckcardFee": ["should be number"],
                          "equipmentCostToMerchant": ["should be number"],
                          "pciFeeBillingFrequency": [
                            "should be equal to one of the allowed values - [ MONTHLY, ANNUAL, monthly, annual, Monthly, Annual ]"
                          ],
                          "edgeFlatFee": ["should be number"],
                          "edgePercentFee": ["should be number"],
                          "enableInterchangeTransactionPassthroughFee": ["should be boolean"],
                          "enablePassthroughAssessment": ["should be boolean"],
                          "enableNetworkAccessBrandFees": ["should be boolean"],
                          "waiveTerminationFee": ["should be boolean"],
                          "additionalFees.achTransactionFee": ["should be number"],
                          "additionalFees.batchHeader": ["should be number"],
                          "additionalFees.chargeBackFee": ["should be number"],
                          "additionalFees.debitGatewayFee": ["should be number"],
                          "additionalFees.debitTransactionFee": ["should be number"],
                          "additionalFees.ebtTransactionFee": ["should be number"],
                          "additionalFees.gatewayTransactionFee": ["should be number"],
                          "additionalFees.internetGatewayMonthlyFee": ["should be number"],
                          "additionalFees.internetTransactionFee": ["should be number"],
                          "additionalFees.mcclaimsFee": ["should be number"],
                          "additionalFees.merchantClubFee": ["should be number"],
                          "additionalFees.monthlyBasicServiceFee": ["should be number"],
                          "additionalFees.monthlyDiscountFee": ["should be number"],
                          "additionalFees.monthlyHostingFee": ["should be number"],
                          "additionalFees.monthlyMinimumDiscountFee": ["should be number"],
                          "additionalFees.monthlyMinimumFee": ["should be number"],
                          "additionalFees.monthlyRegulatoryFee": ["should be number"],
                          "additionalFees.processorAuthorizationFee": ["should be number"],
                          "additionalFees.retrievalFee": ["should be number"],
                          "additionalFees.returnItemSupportFee": ["should be number"],
                          "additionalFees.travelAndEntertainmentDraftCaptureTransactionFee": ["should be number"],
                          "additionalFees.wirelessMonthlyFee": ["should be number"],
                          "additionalFees.wirelessTransactionFee": ["should be number"]
                        }
                      },
                      "link": "/enroll/application/pricing/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/validate/{externalKey}": {
      "get": {
        "summary": "Validate Application",
        "description": "This endpoint is used to validate that the data entered in the application meets the parameter requirements before submitting the application to underwriting.",
        "operationId": "getValidateApplicationByExternalKey",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getValidateApplicationByExternalKey\n     *\n     * Validate Application by External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentValidationResponseDataModel\n     */\n    public function getValidateApplicationByExternalKey($external_key)\n    {\n        list($response) = $this->getValidateApplicationByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getValidateApplicationByExternalKeyWithHttpInfo\n     *\n     * Validate Application by External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentValidationResponseDataModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getValidateApplicationByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentValidationResponseDataModel';\n        $request = $this->getValidateApplicationByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentValidationResponseDataModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Validate Application by External Key.\n * Validate enrollment application by external key.\n * @param {module:api/ApplicationApi~getValidateApplicationByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentValidationResponseDataModel}\n */\ngetValidateApplicationByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentValidationResponseDataModel;\n\n  return this.apiClient.callApi(\n    '/application/validate/{externalKey}', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentValidationResponseDataModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully validated enrollment application.",
                    "value": {
                      "status": "success",
                      "data": {
                        "readyToSubmit": true,
                        "errors": []
                      },
                      "link": "/enroll/application/validate/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to locate application by external key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided external key",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/validate/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "business.businessType": ["should be string"],
                          "business.industryType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ internet, moto, restaurant, retail ]"
                          ],
                          "business.federalTaxIdType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ SSN, EIN ]"
                          ],
                          "business.averageTicketAmount": ["should be number"],
                          "business.averageMonthlyVolume": ["should be number"],
                          "business.highTicketAmount": ["should be number"],
                          "bankAccount.accountType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ checking, savings ]"
                          ],
                          "principals[0].firstName": ["should be string"],
                          "principals[0].lastName": ["should be string"],
                          "principals[0].socialSecurityNumber": ["should be string"],
                          "principals[0].dateOfBirth": ["should be string"],
                          "principals[0].street": ["should be string"],
                          "principals[0].city": ["should be string"],
                          "principals[0].state": ["should be string"],
                          "business.corporateName": ["should be string"],
                          "business.dbaName": ["should be string"],
                          "business.federalTaxIdNumber": ["should be string"],
                          "business.mcc": ["should be string"],
                          "business.phone": ["should be string"],
                          "business.email": ["should be string"],
                          "business.websites[0].url": [
                            "should have property url for business industry type internet",
                            "should have property url when percent of business transactions for internet is greater than 0"
                          ],
                          "business.businessContact.firstName": ["should be string"],
                          "business.businessContact.lastName": ["should be string"],
                          "business.businessContact.socialSecurityNumber": ["should be string"],
                          "business.businessContact.dateOfBirth": ["should be string"],
                          "business.businessContact.street": ["should be string"],
                          "business.businessContact.city": ["should be string"],
                          "business.businessContact.state": ["should be string"],
                          "business.businessContact.zipCode": ["should be string"],
                          "business.businessContact.phoneNumber": ["should be string"],
                          "business.businessContact.email": ["should be string"],
                          "business.businessAddress.dba.street": ["should be string"],
                          "business.businessAddress.dba.city": ["should be string"],
                          "business.businessAddress.dba.state": ["should be string"],
                          "business.businessAddress.dba.zipCode": ["should be string"],
                          "business.businessAddress.corporate.street": ["should be string"],
                          "business.businessAddress.corporate.city": ["should be string"],
                          "business.businessAddress.corporate.state": ["should be string"],
                          "business.businessAddress.corporate.zipCode": ["should be string"],
                          "bankAccount.abaRouting": ["should be string"],
                          "bankAccount.demandDepositAccount": ["should be string"]
                        }
                      },
                      "link": "/enroll/application/validate/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/submit/{externalKey}": {
      "put": {
        "summary": "Submit Application",
        "description": "This endpoint is used to submit a completed application. When the user submits an application, its data is validated before the submission process completes. If any data is invalid, the application will not be submitted. The response data object will include a description of the parameter requirements where the error occurred. It is recommended that you use the Application Validation endpoint before submitting to ensure all data will be accepted.",
        "operationId": "putSubmitApplicationByExternalKey",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation putSubmitApplicationByExternalKey\n     *\n     * Submit Application By External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function putSubmitApplicationByExternalKey($external_key)\n    {\n        list($response) = $this->putSubmitApplicationByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation putSubmitApplicationByExternalKeyWithHttpInfo\n     *\n     * Submit Application By External Key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function putSubmitApplicationByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->putSubmitApplicationByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Submit Application By External Key.\n * Submit Application By External Key for processing to underwriting.\n * @param {module:api/ApplicationApi~putSubmitApplicationByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\nputSubmitApplicationByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/application/submit/{externalKey}', 'PUT',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful application submission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully submitted enrollment application.",
                    "value": {
                      "status": "success",
                      "data": {
                        "merchantId": "0000000000001",
                        "applicationStatus": "finalized",
                        "underwritingStatus": "Enrollment"
                      },
                      "link": "/enroll/application/submit/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to locate application by external key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/submit/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "business.businessType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ A, C, G, I, L, M, N, P, S, T ]"
                          ],
                          "business.industryType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ internet, moto, restaurant, retail ]"
                          ],
                          "business.federalTaxIdType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ SSN, EIN ]"
                          ],
                          "business.averageTicketAmount": ["should be number"],
                          "business.averageMonthlyVolume": ["should be number"],
                          "business.highTicketAmount": ["should be number"],
                          "business.businessContact": ["should be object"],
                          "business.businessAddress": ["should be object"],
                          "bankAccount": ["should be object"],
                          "principals[0].firstName": ["should be string"],
                          "principals[0].lastName": ["should be string"],
                          "principals[0].socialSecurityNumber": [
                            "should NOT be shorter than 9 characters",
                            "should match pattern \"^\\d{9}$\""
                          ],
                          "principals[0].dateOfBirth": ["should be string"],
                          "principals[0].street": ["should be string"],
                          "principals[0].city": ["should be string"],
                          "principals[0].state": ["should be string"],
                          "principals[0].zipCode": ["should be string"],
                          "business.corporateName": ["should be string"],
                          "business.dbaName": ["should be string"],
                          "business.federalTaxIdNumber": ["should be string"],
                          "business.mcc": ["should be string"],
                          "business.phone": ["should be string"],
                          "business.email": ["should be string"]
                        }
                      },
                      "link": "/enroll/application/submit/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/merchant/send/key/{externalKey}": {
      "put": {
        "summary": "Send Application to Merchant",
        "description": "This endpoint is used to send an application to a merchant for completion. The application is sent by external key.",
        "operationId": "putSendApplicationByExternalKeyForMerchantCompletion",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation putSendApplicationByExternalKeyForMerchantCompletion\n     *\n     * Send application by external key for merchant completion.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function putSendApplicationByExternalKeyForMerchantCompletion($external_key)\n    {\n        list($response) = $this->putSendApplicationByExternalKeyForMerchantCompletionWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation putSendApplicationByExternalKeyForMerchantCompletionWithHttpInfo\n     *\n     * Send application by external key for merchant completion.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function putSendApplicationByExternalKeyForMerchantCompletionWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->putSendApplicationByExternalKeyForMerchantCompletionRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Send application by external key for merchant completion.\n     * Send application by external key for merchant completion.\n     * @param {module:api/MerchantApi~putSendApplicationByExternalKeyForMerchantCompletionCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    putSendApplicationByExternalKeyForMerchantCompletion(externalKey, callback) {\n      let postBody = null;\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/merchant/send/key/{externalKey}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Application successfully sent to merchant for completion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully submitted enrollment application for merchant completion.",
                    "value": {
                      "status": "success",
                      "data": {
                        "merchantId": null,
                        "applicationStatus": "waiting for merchant",
                        "underwritingStatus": "Pending Submission"
                      },
                      "link": "/enroll/application/merchant/submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400ErrorBadRequestResponse": {
                    "summary": "Application already processed error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' has been already submitted"
                      },
                      "link": "/enroll/application/merchant/submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to locate application by external key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/merchant/submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "business.percentOfBusinessTransactions": [
                            "should have required property 'percentOfBusinessTransactions'",
                            "sum of percentOfBusinessTransactions should be 100"
                          ],
                          "principals": ["should have required property 'principals'"]
                        }
                      },
                      "link": "/enroll/application/merchant/submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/merchant-signature/key/{externalKey}": {
      "put": {
        "summary": "Add Merchant Signature to Application",
        "description": "Add a merchant's signature to an existing application by referencing the application's external key.",
        "operationId": "putAddMerchantSignatureByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentMerchantSignatureModel"
              },
              "examples": {
                "validMerchantSignature": {
                  "summary": "A valid merchant signature request object.",
                  "value": {
                    "ipAddress": "127.0.0.1",
                    "signatureDate": "2020-10-21 18:00:00-04"
                  }
                },
                "invalidMerchantSignatureWithInvalidIp": {
                  "summary": "Invalid merchant signature request object with invalid value for IP address.",
                  "value": {
                    "ipAddress": "random-ip",
                    "signatureDate": "2020-10-21 18:00:00-04"
                  }
                },
                "invalidMerchantSignatureWithInvalidSignatureDate": {
                  "summary": "Invalid merchant signature request object with invalid value for merchant signature date.",
                  "value": {
                    "ipAddress": "127.0.0.1",
                    "signatureDate": "1/1/1"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation putAddMerchantSignatureByExternalKey\n     *\n     * Add merchant signature to an existing application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMerchantSignatureModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function putAddMerchantSignatureByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->putAddMerchantSignatureByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation putAddMerchantSignatureByExternalKeyWithHttpInfo\n     *\n     * Add merchant signature to an existing application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMerchantSignatureModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function putAddMerchantSignatureByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->putAddMerchantSignatureByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 401:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Add merchant signature to an existing application.\n     * Add merchant signature to an existing application.\n     * @param {Object} opts Optional parameters\n     * @param {module:api/MerchantApi~putAddMerchantSignatureByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    putAddMerchantSignatureByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/merchant-signature/key/{externalKey}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return enrollment application with merchant signature details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "Example Response": {
                    "summary": "An example of a successful response",
                    "value": {
                      "status": "error",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Redmond",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 123,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 1234,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 567,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 5678,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 890,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 15,
                            "accountSetupFee": 0.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "790 Selah Drive",
                              "street2": "Suite 125",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph Jr.",
                              "lastName": "Jameson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 40,
                              "title": "owner",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            },
                            {
                              "street": "3601 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": null,
                              "driverLicenseIssuedState": null
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567890",
                            "federalTaxIdType": "EIN",
                            "mcc": "1234",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://website.com",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "1111111111111",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": "127.0.0.1",
                          "signatureDate": "2020-10-21 18:00:00-04"
                        },
                        "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request with validation errors response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestValidationErrorResponse": {
                    "summary": "Unable to add merchant signature to existing application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application already has a merchant signature"
                      },
                      "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Requires authorization.",
                      "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "ipAddress": ["must be a valid IP address"],
                          "signatureDate": [
                            "must be a non-empty, non-null string and match pattern \"^\\d{4}-\\d{2}-\\d{2}(?: \\d{2}:\\d{2}:\\d{2})?(?:\\.[0-9]\\d{0,5})?(?:[+-][0-9]\\d{0,5})?$\"'"
                          ]
                        }
                      },
                      "link": "/enroll/application/merchant-signature/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/merchant-signature-submit/key/{externalKey}": {
      "put": {
        "summary": "Add Merchant Signature to Application & Submit",
        "description": "Add a merchant's signature to an existing application by referencing the application's external key and submit the application to Underwriting for processing.",
        "operationId": "putAddMerchantSignatureAndSubmitByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentMerchantSignatureModel"
              },
              "examples": {
                "validMerchantSignature": {
                  "summary": "A valid merchant signature request object.",
                  "value": {
                    "ipAddress": "127.0.0.1",
                    "signatureDate": "2020-10-21 18:00:00-04"
                  }
                },
                "invalidMerchantSignatureWithInvalidIp": {
                  "summary": "Invalid merchant signature request object with invalid value for IP address.",
                  "value": {
                    "ipAddress": "random-ip",
                    "signatureDate": "2020-10-21 18:00:00-04"
                  }
                },
                "invalidMerchantSignatureWithInvalidSignatureDate": {
                  "summary": "Invalid merchant signature request object with invalid value for merchant signature date.",
                  "value": {
                    "ipAddress": "127.0.0.1",
                    "signatureDate": "1/1/1"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation putAddMerchantSignatureAndSubmitByExternalKey\n     *\n     * Add merchant signature to existing application and submit application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMerchantSignatureModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function putAddMerchantSignatureAndSubmitByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->putAddMerchantSignatureAndSubmitByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation putAddMerchantSignatureAndSubmitByExternalKeyWithHttpInfo\n     *\n     * Add merchant signature to existing application and submit application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentMerchantSignatureModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function putAddMerchantSignatureAndSubmitByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->putAddMerchantSignatureAndSubmitByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 401:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Add merchant signature to existing application and submit application.\n     * Add merchant signature to existing application and submit application to underwriting for processing.\n     * @param {Object} opts Optional parameters\n     * @param {module:api/MerchantApi~putAddMerchantSignatureAndSubmitByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    putAddMerchantSignatureAndSubmitByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/merchant-signature-submit/key/{externalKey}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful application submission with merchant signature response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "Example Response": {
                    "summary": "An example of a successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "merchantId": "0000000000001",
                        "applicationStatus": "finalized",
                        "underwritingStatus": "Enrollment"
                      },
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request with validation errors response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestValidationErrorResponse": {
                    "summary": "Unable to add merchant signature to existing application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application already has a merchant signature"
                      },
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Requires authorization.",
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "business.businessType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ A, C, G, I, L, M, N, P, S, T ]"
                          ],
                          "business.industryType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ internet, moto, restaurant, retail ]"
                          ],
                          "business.federalTaxIdType": [
                            "should be string",
                            "should be equal to one of the allowed values - [ SSN, EIN ]"
                          ],
                          "business.averageTicketAmount": ["should be number"],
                          "business.averageMonthlyVolume": ["should be number"],
                          "business.highTicketAmount": ["should be number"],
                          "business.percentOfBusinessTransactions": [
                            "should be object",
                            "sum of percentOfBusinessTransactions should be 100"
                          ],
                          "business.businessContact": ["should be object"],
                          "business.businessAddress": ["should be object"],
                          "bankAccount": ["should be object"],
                          "principals": ["should NOT have fewer than 1 items"],
                          "business.corporateName": ["should be string"],
                          "business.dbaName": ["should be string"],
                          "business.federalTaxIdNumber": ["should be string"],
                          "business.mcc": ["should be string"],
                          "business.phone": ["should be string"],
                          "business.email": ["should be string"]
                        }
                      },
                      "link": "/enroll/application/merchant-signature-submit/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/one-click-submit-merchant": {
      "post": {
        "summary": "One-Click Create & Submit With Signature",
        "description": "Create enrollment application with a merchant signature and submit application for underwriting processing.",
        "operationId": "postOneClickSubmitApplicationWithMerchantSignature",
        "tags": ["application"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentOneClickSubmitApplicationWithMerchantSignatureRequestModel"
              },
              "examples": {
                "validOneClickSubmitAppWithMerchantSignatureRequestBody": {
                  "summary": "A valid request body with application object and merchant signature object.",
                  "value": {
                    "application": {
                      "agent": 12345,
                      "applicationName": "Joe's spaceage Stereo - Vermont",
                      "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                      "plan": {
                        "planId": 12345,
                        "equipmentCostToMerchant": 325.49,
                        "accountSetupFee": 10.99,
                        "discountFrequency": "Daily",
                        "equipment": [
                          {
                            "equipmentId": 621,
                            "quantity": 1
                          },
                          {
                            "equipmentId": 809,
                            "quantity": 3
                          },
                          {
                            "equipmentId": 1054,
                            "quantity": 2
                          }
                        ]
                      },
                      "shipping": {
                        "shippingDestination": "DBA",
                        "deliveryMethod": "Ground"
                      },
                      "principals": [
                        {
                          "firstName": "Joseph",
                          "lastName": "Jackson",
                          "socialSecurityNumber": "123456789",
                          "driverLicenseNumber": "ABC1234567890",
                          "driverLicenseIssuedState": "MI",
                          "dateOfBirth": "1955-12-25",
                          "phoneNumber": "1234567890",
                          "email": "jojackson@msn.com",
                          "street": "722 Selah Way",
                          "street2": "Suite 125",
                          "zipCode": "12345",
                          "city": "South Burlington",
                          "state": "VT",
                          "equityOwnershipPercentage": 50,
                          "title": "ceo",
                          "isPersonalGuarantor": true
                        },
                        {
                          "firstName": "Jeremy",
                          "lastName": "Coelman",
                          "socialSecurityNumber": "123123123",
                          "dateOfBirth": "1977-12-25",
                          "phoneNumber": "1234567890",
                          "email": "jerrycole@spaceagestereo.com",
                          "street": "3601 Finwood Drive",
                          "zipCode": "12345",
                          "city": "Red Bank",
                          "state": "NJ",
                          "equityOwnershipPercentage": 50,
                          "title": "manager",
                          "isPersonalGuarantor": false
                        }
                      ],
                      "business": {
                        "corporateName": "Joe's Spaceage Stereo",
                        "dbaName": "Jo Jackson Spaceage Stereo",
                        "businessType": "C",
                        "industryType": "restaurant",
                        "federalTaxIdNumber": "123567654",
                        "federalTaxIdType": "EIN",
                        "mcc": "0742",
                        "phone": "1234567890",
                        "email": "joejackson@spaceagestereo.com",
                        "websites": [
                          {
                            "url": "https://spaceagestereos.biz",
                            "websiteCustomerServiceEmail": "customer-service-email@example.com",
                            "websiteCustomerServicePhoneNumber": "1234567890"
                          }
                        ],
                        "averageTicketAmount": 5000,
                        "averageMonthlyVolume": 1250000,
                        "highTicketAmount": 125000,
                        "percentOfBusinessTransactions": {
                          "cardSwiped": 65,
                          "keyedCardPresentNotImprinted": 20,
                          "mailOrPhoneOrder": 0,
                          "internet": 15
                        },
                        "ebt": {
                          "ebtFood": true,
                          "ebtCash": false,
                          "ebtAccountNumber": "test-account-12345"
                        },
                        "businessContact": {
                          "firstName": "Roy",
                          "lastName": "Martin",
                          "socialSecurityNumber": "123456789",
                          "dateOfBirth": "1947-11-05",
                          "street": "828 Late Avenue",
                          "street2": "",
                          "zipCode": "12345",
                          "city": "South Burington",
                          "state": "VT",
                          "phoneNumber": "1234567890",
                          "email": "roymartin@spaceagestereo.com"
                        },
                        "statementDeliveryMethod": "electronic",
                        "businessAddress": {
                          "dba": {
                            "street": "1072 Clinton St",
                            "city": "South Burlington",
                            "state": "VT",
                            "zipCode": "12345"
                          },
                          "corporate": {
                            "street": "1447 Sun Valley Rd",
                            "city": "South Burlington",
                            "state": "VT",
                            "zipCode": "12345"
                          },
                          "shipTo": {
                            "street": "4735 Saint James Drive",
                            "city": "South Burlington",
                            "state": "VT",
                            "zipCode": "12345"
                          }
                        }
                      },
                      "bankAccount": {
                        "abaRouting": "000000001",
                        "accountType": "checking",
                        "demandDepositAccount": "000000000001"
                      }
                    },
                    "merchantSignature": {
                      "ipAddress": "127.0.0.1",
                      "signatureDate": "2020-10-21 18:00:00-04"
                    }
                  }
                },
                "invalidOneClickSubmitAppWithMerchantSignatureRequestBody": {
                  "summary": "An invalid request body with invalid application object and invalid merchant signature object.",
                  "value": {
                    "application": {
                      "agent": 12345,
                      "applicationName": "Joe's spaceage Stereo - Vermont",
                      "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0"
                    },
                    "merchantSignature": {
                      "ipAddress": "random-ip",
                      "signatureDate": "2020"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation postOneClickSubmitApplicationWithMerchantSignature\n     *\n     * Create enrollment application with a merchant signature and submit application for underwriting processing.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentOneClickSubmitApplicationWithMerchantSignatureRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function postOneClickSubmitApplicationWithMerchantSignature($body = null)\n    {\n        list($response) = $this->postOneClickSubmitApplicationWithMerchantSignatureWithHttpInfo($body);\n        return $response;\n    }\n\n    /**\n     * Operation postOneClickSubmitApplicationWithMerchantSignatureWithHttpInfo\n     *\n     * Create enrollment application with a merchant signature and submit application for underwriting processing.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentOneClickSubmitApplicationWithMerchantSignatureRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function postOneClickSubmitApplicationWithMerchantSignatureWithHttpInfo($body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->postOneClickSubmitApplicationWithMerchantSignatureRequest($body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 401:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Create enrollment application with a merchant signature and submit application for underwriting processing.\n     * Create enrollment application with a merchant signature and submit application for underwriting processing.\n     * @param {Object} opts Optional parameters\n     * @param {module:api/MerchantApi~postOneClickSubmitApplicationWithMerchantSignatureCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    postOneClickSubmitApplicationWithMerchantSignature(opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/one-click-submit-merchant', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return newly created enrollment application with merchant signature details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully created a new enrollment application with merchant signature.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Redmond",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 15,
                            "accountSetupFee": 0.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "790 Street",
                              "street2": "Suite 100",
                              "city": "South City",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph Jr.",
                              "lastName": "Jameson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "email@example.com",
                              "equityOwnershipPercentage": 40,
                              "title": "owner",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "MI"
                            },
                            {
                              "street": "3601 Drive",
                              "street2": null,
                              "city": "Example City",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123123123",
                              "dateOfBirth": "1977-12-25",
                              "phoneNumber": "1234567890",
                              "email": "email@example.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": null,
                              "driverLicenseIssuedState": null
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "joejackson@spaceagestereo.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": null,
                            "yearsInBusiness": null,
                            "monthsInBusiness": null,
                            "businessContact": {
                              "street": "828 Avenue",
                              "street2": null,
                              "city": "South City",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "example@email.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://website.com",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Road",
                                "street2": null,
                                "city": "South City",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Street",
                                "street2": null,
                                "city": "South City",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Drive",
                                "street2": null,
                                "city": "West City",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "000000000001",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": "127.0.0.1",
                          "signatureDate": "2020-10-21 18:00:00-04"
                        }
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request with validation errors response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestWithDuplicateExternalKeyErrorResponse": {
                    "summary": "An example for 400 bad request error response for duplicate external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application external key '0aa000a-000a-00a0-00a0-00000aa00a0' is already in use"
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  },
                  "400BadRequestWithInvalidPlanIdErrorResponse": {
                    "summary": "An example for 400 bad request error response for invalid plan ID.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Template not found: '1859544'"
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Requires authorization.",
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "Unable to find application by external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agent": ["should be integer"],
                          "externalKey": ["should match pattern \"^(?!.*/).*$\""],
                          "plan.planId": ["should be integer"],
                          "plan.equipmentCostToMerchant": ["should be number"],
                          "plan.discountFrequency": [
                            "should be equal to one of the allowed values - [ Daily, Monthly ]"
                          ],
                          "shipping.shippingDestination": [
                            "should be equal to one of the allowed values - [ AGENT, CORPORATE, DBA, OWNER1, SHIP TO ]"
                          ],
                          "shipping.deliveryMethod": [
                            "should be equal to one of the allowed values - [ 2nd Day Air, Ground, Next Day Air 8:00am, Next Day Air 10:30am, Next Day Air Saver 3:00pm, Pick Up ]"
                          ],
                          "business.corporateName": ["should be string"],
                          "business.statementDeliveryMethod": [
                            "should be equal to one of the allowed values - [ electronic, paper ]"
                          ],
                          "bankAccount.abaRouting": [
                            "should NOT be shorter than 9 characters",
                            "should match pattern \"^\\d{9}$\""
                          ],
                          "bankAccount.demandDepositAccount": ["should be string"],
                          "bankAccount.accountType": [
                            "should be equal to one of the allowed values - [ checking, savings ]"
                          ],
                          "business.dbaName": ["should have required property 'dbaName'"],
                          "business.businessType": ["should have required property 'businessType'"],
                          "business.federalTaxIdNumber": ["should have required property 'federalTaxIdNumber'"],
                          "business.federalTaxIdType": ["should have required property 'federalTaxIdType'"],
                          "business.mcc": ["should have required property 'mcc'"],
                          "business.phone": ["should have required property 'phone'"],
                          "business.email": ["should have required property 'email'"],
                          "business.averageTicketAmount": ["should have required property 'averageTicketAmount'"],
                          "business.averageMonthlyVolume": ["should have required property 'averageMonthlyVolume'"],
                          "business.highTicketAmount": ["should have required property 'highTicketAmount'"],
                          "business.businessContact.firstName": ["should have required property 'firstName'"],
                          "business.businessContact.lastName": ["should have required property 'lastName'"],
                          "business.businessContact.socialSecurityNumber": [
                            "should have required property 'socialSecurityNumber'"
                          ],
                          "business.businessContact.dateOfBirth": ["should have required property 'dateOfBirth'"],
                          "business.businessContact.street": ["should have required property 'street'"],
                          "business.businessContact.city": ["should have required property 'city'"],
                          "business.businessContact.state": ["should have required property 'state'"],
                          "business.businessContact.zipCode": ["should have required property 'zipCode'"],
                          "business.businessAddress.dba.street": ["should have required property 'street'"],
                          "business.businessAddress.dba.city": ["should have required property 'city'"],
                          "business.businessAddress.dba.state": ["should have required property 'state'"],
                          "business.businessAddress.dba.zipCode": ["should have required property 'zipCode'"],
                          "business.businessAddress.corporate.street": ["should have required property 'street'"],
                          "business.businessAddress.corporate.city": ["should have required property 'city'"],
                          "business.businessAddress.corporate.state": ["should have required property 'state'"],
                          "business.businessAddress.corporate.zipCode": ["should have required property 'zipCode'"],
                          "principals": [
                            "principals object should have exactly one personal guarantor",
                            "sum of principals equity ownership percentage should be in range [ 76 ~ 100 ]"
                          ],
                          "business.percentOfBusinessTransactions": [
                            "sum of percentOfBusinessTransactions should be 100"
                          ]
                        }
                      },
                      "link": "/enroll/one-click-submit-merchant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/pdf/key/{externalKey}": {
      "get": {
        "summary": "Get Application PDF",
        "description": "This endpoint is used to retrieve a downloadable PDF of an application by external key.",
        "operationId": "getApplicationPdfByExternalKey",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationPdfByExternalKey\n     *\n     * Get application PDF by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return string\n     */\n    public function getApplicationPdfByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationPdfByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationPdfByExternalKeyWithHttpInfo\n     *\n     * Get application PDF by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of string, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationPdfByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = 'string';\n        $request = $this->getApplicationPdfByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        'string',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Get application PDF by application external key.\n * Get application PDF by application external key.\n * @param {module:api/ApplicationDocumentsApi~getApplicationPdfByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link 'String'}\n */\ngetApplicationPdfByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/pdf', 'application/json'];\n  let returnType = 'String';\n\n  return this.apiClient.callApi(\n    '/application/pdf/key/{externalKey}', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Return application PDF.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "base64"
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty string and cannot be null"]
                        }
                      },
                      "link": "/enroll/application/pdf/key/null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/pdf-raw/key/{externalKey}": {
      "get": {
        "summary": "Get Application Raw PDF",
        "description": "This endpoint is used to retrieve the raw PDF version of an application by external key. The application PDF is returned as a base64 formatted string.",
        "operationId": "getApplicationPdfRawByExternalKey",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationPdfRawByExternalKey\n     *\n     * Get raw application PDF (base64 formatted string) by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getApplicationPdfRawByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationPdfRawByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationPdfRawByExternalKeyWithHttpInfo\n     *\n     * Get raw application PDF (base64 formatted string) by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationPdfRawByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getApplicationPdfRawByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Get raw application PDF (base64 formatted string) by application external key.\n * Get raw application PDF (base64 formatted string) by application external key.\n * @param {module:api/ApplicationDocumentsApi~getApplicationPdfRawByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\ngetApplicationPdfRawByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/application/pdf-raw/key/{externalKey}', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Return raw PDF application in base64 encoded string format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": "JVBERi0xLjQKJeLjz9MKNCAwIG9iaiBbXQplbmRvYmogCjcgMCBvYmogCjw8Ci9GaWx0ZXIgL0ZsYXRlRGVjb2RlCi9MZW5ndGggNDE5Cj4+CnN0cmVhbQp4nF1Ty26DMBC88xU+poeIYDC0EkLKo5E49KHSnqoeCCwRUjHIkANSGVsbG8gV29ybGQh==",
                      "link": "/enroll/application/pdf-raw/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty string and cannot be null"]
                        }
                      },
                      "link": "/enroll/application/pdf-raw/key/null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/underwriting/key/{externalKey}": {
      "get": {
        "summary": "Get Underwriting Bank Details",
        "description": "Get information about the Underwriting bank related to an existing application.",
        "operationId": "getApplicationUnderwritingDetailsByExternalKey",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationUnderwritingDetailsByExternalKey\n     *\n     * Get application underwriting related details by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel\n     */\n    public function getApplicationUnderwritingDetailsByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationUnderwritingDetailsByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationUnderwritingDetailsByExternalKeyWithHttpInfo\n     *\n     * Get application underwriting related details by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationUnderwritingDetailsByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel';\n        $request = $this->getApplicationUnderwritingDetailsByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get application underwriting related details by application external key.\n     * Get application underwriting related details by application external key.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {module:api/ApplicationUnderwritingApi~getApplicationUnderwritingDetailsByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getApplicationUnderwritingDetailsByExternalKey(externalKey, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling getApplicationUnderwritingDetailsByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentUnderwritingSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/underwriting/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Return underwriting related details for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentUnderwritingSuccessResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "underwritingBank": "BMO",
                        "eligibleUnderwritingBank": ["BMO", "MBMAC", "MBMAS"]
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid agent client affiliation response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenAgentClientAffiliationResponse": {
                    "summary": "An example for 403 forbidden agent client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Unable to get underwriting details for application by application external key",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to get underwriting related information"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Underwriting Bank",
        "description": "Update Underwriting bank for an existing application. If an invalid bank is provided during the update operation, a default valid Underwriting bank is automatically assigned based on the eligibility criteria.",
        "operationId": "patchApplicationUnderwritingDetailsByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentUnderwritingPatchRequestModel"
              },
              "examples": {
                "validApplicationUnderwritingPatchRequest": {
                  "summary": "A valid enrollment underwriting update request.",
                  "value": {
                    "underwritingBank": "BMO"
                  }
                },
                "invalidApplicationUnderwritingPatchRequest": {
                  "summary": "An invalid enrollment underwriting update request.",
                  "value": {
                    "underwritingBank": 1234567890
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation patchApplicationUnderwritingDetailsByExternalKey\n     *\n     * Patch (Update) application underwriting related details.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentUnderwritingPatchRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel\n     */\n    public function patchApplicationUnderwritingDetailsByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->patchApplicationUnderwritingDetailsByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation patchApplicationUnderwritingDetailsByExternalKeyWithHttpInfo\n     *\n     * Patch (Update) application underwriting related details.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentUnderwritingPatchRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function patchApplicationUnderwritingDetailsByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel';\n        $request = $this->patchApplicationUnderwritingDetailsByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentUnderwritingSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 415:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Patch (Update) application underwriting related details.\n     * Update existing application underwriting related details using method PATCH. If an invalid underwriting bank is provided during update operation, a default valid underwriting bank is automatically assigned based on the eligibility criteria.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentUnderwritingPatchRequestModel} opts.body \n     * @param {module:api/ApplicationUnderwritingApi~patchApplicationUnderwritingDetailsByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    patchApplicationUnderwritingDetailsByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling patchApplicationUnderwritingDetailsByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentUnderwritingSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/underwriting/key/{externalKey}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return updated underwriting related details for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentUnderwritingSuccessResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully updated enrollment application underwriting related details.",
                    "value": {
                      "status": "success",
                      "data": {
                        "underwritingBank": "BMO",
                        "eligibleUnderwritingBank": ["BMO", "TBB", "CTZ"]
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestResponse": {
                    "summary": "An example for 400 Bad request error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "underwritingBank": ["should be string"]
                        }
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid agent client affiliation response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenAgentClientAffiliationResponse": {
                    "summary": "An example for 403 forbidden agent client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application for provided external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Schema validation error within request body response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "Schema validation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "underwritingBank": ["should be string"]
                        }
                      },
                      "link": "/enroll/application/underwriting/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/application/additional-info/key/{externalKey}": {
      "get": {
        "summary": "Get Additional Information by Application",
        "description": "Get additional information associated with an application by application external key.",
        "operationId": "getApplicationAdditionalInfoByExternalKey",
        "tags": ["application"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getApplicationAdditionalInfoByExternalKey\n     *\n     * Get application related additional information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel\n     */\n    public function getApplicationAdditionalInfoByExternalKey($external_key)\n    {\n        list($response) = $this->getApplicationAdditionalInfoByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getApplicationAdditionalInfoByExternalKeyWithHttpInfo\n     *\n     * Get application related additional information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getApplicationAdditionalInfoByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel';\n        $request = $this->getApplicationAdditionalInfoByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Callback function to receive the result of the getApplicationAdditionalInfoByExternalKey operation.\n     * @callback moduleapi/ApplicationAdditionalInfoApi~getApplicationAdditionalInfoByExternalKeyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentAdditionalInformationSuccessResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get application related additional information by application external key.\n     * Get application related additional information by application external key.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {module:api/ApplicationAdditionalInfoApi~getApplicationAdditionalInfoByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getApplicationAdditionalInfoByExternalKey(externalKey, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling getApplicationAdditionalInfoByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentAdditionalInformationSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/additional-info/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Return additional information for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentAdditionalInformationSuccessResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response with valid values.",
                    "value": {
                      "status": "success",
                      "data": {
                        "agentData": {
                          "agentGroupId": 12345
                        },
                        "acceptedPaymentTypes": {
                          "americanExpress": {
                            "accountNumber": "123-test-4567",
                            "amexAnnualVolumeThresholdExceeded": false,
                            "amexMonthlyVolume": 12456
                          }
                        },
                        "highRiskBusinessData": {
                          "businessTypeFlags": {
                            "isCannabis": true,
                            "isCbd": true,
                            "isKratom": false,
                            "isSexuallyExplicitProducts": true
                          },
                          "highRiskPercentOfBusinessTransactions": {
                            "cbd": 9
                          }
                        }
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  },
                  "200SuccessResponseWithNullValues": {
                    "summary": "An example for 200 OK successful response with null property values where allowed and falsy values.",
                    "value": {
                      "status": "success",
                      "data": {
                        "agentData": {
                          "agentGroupId": null
                        },
                        "acceptedPaymentTypes": {
                          "americanExpress": {
                            "accountNumber": null,
                            "amexAnnualVolumeThresholdExceeded": null,
                            "amexMonthlyVolume": null
                          }
                        },
                        "highRiskBusinessData": {
                          "businessTypeFlags": {
                            "isCannabis": false,
                            "isCbd": false,
                            "isKratom": false,
                            "isSexuallyExplicitProducts": false
                          },
                          "highRiskPercentOfBusinessTransactions": {
                            "cbd": null
                          }
                        }
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "An example for 403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to retrieve additional application information by external key"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Additional Information by Application",
        "description": "Update additional information associated with an application by application external key.",
        "operationId": "patchApplicationAdditionalInfoByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationAdditionalInformationPatchRequestModel"
              },
              "examples": {
                "validApplicationAdditionalInformationPatchRequest": {
                  "summary": "A valid enrollment application additional information update request.",
                  "value": {
                    "agentData": {
                      "agentGroupId": 1
                    },
                    "acceptedPaymentTypes": {
                      "americanExpress": {
                        "accountNumber": "123-test-2344",
                        "amexAnnualVolumeThresholdExceeded": false,
                        "amexMonthlyVolume": 11111
                      }
                    },
                    "highRiskBusinessData": {
                      "businessTypeFlags": {
                        "isCbd": false,
                        "isCannabis": true,
                        "isKratom": true,
                        "isSexuallyExplicitProducts": true
                      },
                      "highRiskPercentOfBusinessTransactions": {
                        "cbd": 10
                      }
                    }
                  }
                },
                "invalidApplicationAdditionalInformationPatchRequest": {
                  "summary": "An invalid enrollment underwriting update request.",
                  "value": {
                    "agentData": {
                      "agentGroupId": "random-agent-id"
                    },
                    "acceptedPaymentTypes": {
                      "americanExpress": {
                        "accountNumber": 1234567890,
                        "amexAnnualVolumeThresholdExceeded": "true",
                        "amexMonthlyVolume": "12345678"
                      }
                    },
                    "highRiskBusinessData": {
                      "businessTypeFlags": {
                        "isCbd": "false",
                        "isCannabis": "true",
                        "isKratom": "false",
                        "isSexuallyExplicitProducts": "false"
                      },
                      "highRiskPercentOfBusinessTransactions": {
                        "cbd": "101"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation patchApplicationAdditionalInfoByExternalKey\n     *\n     * Update application related additional information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationAdditionalInformationPatchRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel\n     */\n    public function patchApplicationAdditionalInfoByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->patchApplicationAdditionalInfoByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation patchApplicationAdditionalInfoByExternalKeyWithHttpInfo\n     *\n     * Update application related additional information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationAdditionalInformationPatchRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function patchApplicationAdditionalInfoByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel';\n        $request = $this->patchApplicationAdditionalInfoByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 415:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Callback function to receive the result of the patchApplicationAdditionalInfoByExternalKey operation.\n     * @callback moduleapi/ApplicationAdditionalInfoApi~patchApplicationAdditionalInfoByExternalKeyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentAdditionalInformationSuccessResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update application related additional information by application external key.\n     * Patch (Update) application related additional information by application external key.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationAdditionalInformationPatchRequestModel} opts.body \n     * @param {module:api/ApplicationAdditionalInfoApi~patchApplicationAdditionalInfoByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    patchApplicationAdditionalInfoByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling patchApplicationAdditionalInfoByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentAdditionalInformationSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/additional-info/key/{externalKey}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return updated additional information for enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentAdditionalInformationSuccessResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response with valid values.",
                    "value": {
                      "status": "success",
                      "data": {
                        "agentData": {
                          "agentGroupId": 12345
                        },
                        "acceptedPaymentTypes": {
                          "americanExpress": {
                            "accountNumber": "123-test-2345",
                            "amexAnnualVolumeThresholdExceeded": false,
                            "amexMonthlyVolume": 42314
                          }
                        },
                        "highRiskBusinessData": {
                          "businessTypeFlags": {
                            "isCbd": false,
                            "isCannabis": true,
                            "isKratom": true,
                            "isSexuallyExplicitProducts": true
                          },
                          "highRiskPercentOfBusinessTransactions": {
                            "cbd": 10
                          }
                        }
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  },
                  "200SuccessResponseWithNullValues": {
                    "summary": "An example for 200 OK successful response with null/falsy property values.",
                    "value": {
                      "status": "success",
                      "data": {
                        "agentData": {
                          "agentGroupId": null
                        },
                        "acceptedPaymentTypes": {
                          "americanExpress": {
                            "accountNumber": null,
                            "amexAnnualVolumeThresholdExceeded": null,
                            "amexMonthlyVolume": null
                          }
                        },
                        "highRiskBusinessData": {
                          "businessTypeFlags": {
                            "isCbd": false,
                            "isCannabis": false,
                            "isKratom": false,
                            "isSexuallyExplicitProducts": false
                          },
                          "highRiskPercentOfBusinessTransactions": {
                            "cbd": null
                          }
                        }
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestResponse": {
                    "summary": "An example for 400 Bad request error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agentData.agentGroupId": ["should be integer,null"]
                        }
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "An example for 403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agentData.agentGroupId": ["should be integer,null"],
                          "acceptedPaymentTypes.americanExpress.accountNumber": ["should be string,null"],
                          "acceptedPaymentTypes.americanExpress.amexMonthlyVolume": ["should be number,null"],
                          "acceptedPaymentTypes.americanExpress.amexAnnualVolumeThresholdExceeded": [
                            "should be boolean,null"
                          ],
                          "highRiskBusinessData.businessTypeFlags.isCannabis": ["should be boolean"],
                          "highRiskBusinessData.businessTypeFlags.isCbd": ["should be boolean"],
                          "highRiskBusinessData.businessTypeFlags.isKratom": ["should be boolean"],
                          "highRiskBusinessData.businessTypeFlags.isSexuallyExplicitProducts": ["should be boolean"],
                          "highRiskBusinessData.highRiskPercentOfBusinessTransactions.cbd": ["should be number,null"]
                        }
                      },
                      "link": "/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to update additional application information by external key"
                      },
                      "link": "/enroll/application/additional-info/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/application/agent-assign/key/{externalKey}": {
      "patch": {
        "summary": "Update Agent Information by Application",
        "description": "Update agent related information by application external key.",
        "operationId": "patchApplicationAgentInfoByExternalKey",
        "tags": ["application"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationAgentInformationPatchRequestModel"
              },
              "examples": {
                "validApplicationAgentInformationPatchRequest": {
                  "summary": "A valid agent information update request.",
                  "value": {
                    "agent": 11111
                  }
                },
                "invalidApplicationAgentInformationPatchRequest": {
                  "summary": "An invalid agent information update request.",
                  "value": {
                    "agent": "random-agent-id"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation patchApplicationAgentInfoByExternalKey\n     *\n     * Update application agent related information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationAgentInformationPatchRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel\n     */\n    public function patchApplicationAgentInfoByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->patchApplicationAgentInfoByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation patchApplicationAgentInfoByExternalKeyWithHttpInfo\n     *\n     * Update application agent related information by application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationAgentInformationPatchRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function patchApplicationAgentInfoByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel';\n        $request = $this->patchApplicationAgentInfoByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentAdditionalInformationSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 415:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "    /**\n     * Callback function to receive the result of the patchApplicationAgentInfoByExternalKey operation.\n     * @callback moduleapi/AgentApi~patchApplicationAgentInfoByExternalKeyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentAdditionalInformationSuccessResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Update application agent related information by application external key.\n     * Patch (Update) application agent related information by application external key.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationAgentInformationPatchRequestModel} opts.body \n     * @param {module:api/AgentApi~patchApplicationAgentInfoByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    patchApplicationAgentInfoByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling patchApplicationAgentInfoByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentAdditionalInformationSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/agent-assign/key/{externalKey}', 'PATCH',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return updated enrollment application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "Successfully updated enrollment application.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 11111,
                          "applicationName": "Joe's spaceage Stereo - Redmond",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 123,
                            "equipment": [
                              {
                                "equipmentId": 1234,
                                "quantity": 1
                              }
                            ],
                            "equipmentCostToMerchant": 15,
                            "accountSetupFee": 0.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "123 Selah Drive",
                              "street2": "Suite 1234",
                              "city": "South Burlington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph Jr.",
                              "lastName": "Jameson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-01",
                              "phoneNumber": "1234567890",
                              "email": "example@email.com",
                              "equityOwnershipPercentage": 40,
                              "title": "owner",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567890",
                              "driverLicenseIssuedState": "GA"
                            },
                            {
                              "street": "1234 Finwood Drive",
                              "street2": null,
                              "city": "Red Bank",
                              "state": "NJ",
                              "zipCode": "12345",
                              "firstName": "Jeremy",
                              "lastName": "Coelman",
                              "socialSecurityNumber": "123123123",
                              "dateOfBirth": "1977-12-01",
                              "phoneNumber": "1234567890",
                              "email": "jerrycole@spaceagestereo.com",
                              "equityOwnershipPercentage": 50,
                              "title": "manager",
                              "isPersonalGuarantor": false,
                              "driverLicenseNumber": null,
                              "driverLicenseIssuedState": null
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123456789",
                            "federalTaxIdType": "EIN",
                            "mcc": "1234",
                            "phone": "1234567890",
                            "email": "example@email.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": 10,
                            "monthsInBusiness": 10,
                            "businessContact": {
                              "street": "123 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "example@email.com"
                            },
                            "ebt": {
                              "ebtFood": true,
                              "ebtCash": false,
                              "ebtAccountNumber": "test-account-12345"
                            },
                            "websites": [
                              {
                                "url": "https://example.com",
                                "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                "websiteCustomerServicePhoneNumber": "1234567890"
                              }
                            ],
                            "percentOfBusinessTransactions": {
                              "cardSwiped": 65,
                              "keyedCardPresentNotImprinted": 20,
                              "mailOrPhoneOrder": 0,
                              "internet": 15
                            },
                            "businessAddress": {
                              "corporate": {
                                "street": "1234 Sun Valley Rd",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "12345 Clinton St",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "12345 Saint James Drive",
                                "street2": null,
                                "city": "South Burlington",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": {
                            "abaRouting": "000000001",
                            "demandDepositAccount": "012345678901",
                            "accountType": "checking"
                          },
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Invalid content type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agent": ["should be integer"]
                        }
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to update agent information by external key"
                      },
                      "link": "/application/agent-assign/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/search": {
      "get": {
        "summary": "Get Application Data",
        "description": "Get application data for all applications created using the authenticated client key. Results are returned in descending order of the applicationâ€™s creation timestamp. Users can optionally pass query parameters to assist when navigating the results. For example, if a user has created 30 applications and wishes to view applications 21 to 30, set pageSize to 10 and pageNumber to 3.<br><br>The following is an example of a URL with the pageNumber, pageSize, and findBy query parameters:<br>https://enrollment-api.paymentshub.com/enroll/search?pageNumber=3&pageSize=10&findBy=byAgent:12345,submission:open",
        "tags": ["lookups"],
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Selects a specific page of results to be returned.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/paginationPageNumber"
            },
            "example": "pageNumber=3"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Sets the number of search results (applications) that will be displayed on each page.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/paginationPageSize"
            },
            "example": "pageSize=10"
          },
          {
            "name": "findBy",
            "in": "query",
            "description": "Use a combination of key-value pairs within the `findBy` query parameter to narrow the search results. The value of this parameter is a comma-separated list of key-value pairs. Each key and value are separated by a colon. Only one findBy query parameter may be sent with each request. If multiple findBy query parameters are sent, only the last will be accepted and all previous findBy values will be overridden.<br><br> byAgent <span style='color: #707A7E'>Filter the search by agent ID. An agent ID must be a valid integer. <br>Example - `byAgent:12345`</span> <br><br> submission <span style='color: #707A7E'>Filter the search by the merchant application submission status. Valid values include `open`, `unsubmitted`, `sentToMerchant`, `completedByMerchant`, and `submitted`.<br><br> `open`: Returns applications that have not been submitted to underwriting for processing as well as applications that have not been sent to the merchant for completion.<br><br>`unsubmitted`: Returns applications that have not been submitted to underwriting for processing as well as applications that have been sent to the merchant for completion.<br><br>`sentToMerchant`: Returns applications that have been sent to the merchant for completion but have not yet been completed or submitted by the merchant <br><br>`completedByMerchant`: Returns applications that have been completed and submitted by the merchant. (Note: Based on the settings established when the agent's account was created with North American Bancard, the agent may need to submit the application to underwriting themselves after the merchant has completed it. To adjust these settings, please contact <a href = 'mailto: cssales@nabancard.com'>Customer Service</a>.)<br><br>`submitted`: Returns applications that have been submitted to underwriting for processing.</span>",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/findBy"
            },
            "example": "findBy=byAgent:12345,submission:open"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getJsonSearchApplicationComplete\n     *\n     * Search applications using query parameters.\n     *\n     * @param  \\Swagger\\Client\\Model\\PaginationPageNumber $page_number Page number for paginated results. (optional)\n     * @param  \\Swagger\\Client\\Model\\PaginationPageSize $page_size Number of search results to return per page. (optional)\n     * @param  \\Swagger\\Client\\Model\\FindBy $find_by Comma separated list of search terms to filter the results based on matching search term criteria.\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentJsonSearchCompleteApplicationSuccessResponseModel\n     */\n    public function getJsonSearchApplicationComplete($page_number = null, $page_size = null, $find_by = null)\n    {\n        list($response) = $this->getJsonSearchApplicationCompleteWithHttpInfo($page_number, $page_size, $find_by);\n        return $response;\n    }\n\n    /**\n     * Operation getJsonSearchApplicationCompleteWithHttpInfo\n     *\n     * Search applications using query parameters.\n     *\n     * @param  \\Swagger\\Client\\Model\\PaginationPageNumber $page_number Page number for paginated results. (optional)\n     * @param  \\Swagger\\Client\\Model\\PaginationPageSize $page_size Number of search results to return per page. (optional)\n     * @param  \\Swagger\\Client\\Model\\FindBy $find_by Comma separated list of search terms to filter the results based on matching search term criteria.\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentJsonSearchCompleteApplicationSuccessResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getJsonSearchApplicationCompleteWithHttpInfo($page_number = null, $page_size = null, $find_by = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentJsonSearchCompleteApplicationSuccessResponseModel';\n        $request = $this->getJsonSearchApplicationCompleteRequest($page_number, $page_size, $find_by);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentJsonSearchCompleteApplicationSuccessResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 500:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Search applications using query parameters.\n     * Search applications using query parameters. Query parameters are optional. If query parameters are not passed within query, then a default value is used for the query parameters.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/PaginationPageNumber} opts.pageNumber Page number for paginated results.\n     * @param {module:model/PaginationPageSize} opts.pageSize Number of search results to return per page.\n     * @param {module:model/FindBy} opts.findBy Comma separated list of search terms to filter the results based on matching search term criteria. You can search for applications and narrow the results using search qualifiers in combination.   By using a specialized search terms within &#x60;findBy&#x60; query param, you can narrow the results to match a certain criteria.   &lt;b&gt;byAgent&lt;/b&gt; - Filters search by matching the agent ID specified within the filter term. An agent ID has to be a valid integer. &lt;br&gt;Example - &#x60;byAgent:12345&#x60;    &lt;b&gt;submission&lt;/b&gt; - Filters search by matching the merchant application submission status within the filter term.&lt;br&gt;Valid values - &#x60;open&#x60;, &#x60;unsubmitted&#x60;, &#x60;sentToMerchant&#x60;, &#x60;completedByMerchant&#x60;, &#x60;submitted&#x60;.   &#x60;open&#x60; - Indicates application not submitted to underwriting for processing, not sent to merchant for completion.&lt;br&gt;&#x60;unsubmitted&#x60; - Indicates application not submitted to underwriting for processing, may include applications sent to merchant for completion (if any).&lt;br&gt;&#x60;sentToMerchant&#x60; - Indicates application sent to merchant for completion and has not yet been completed or submitted by merchant.&lt;br&gt;&#x60;completedByMerchant&#x60; - Indicates application completed and submitted by merchant. (NOTE: Based on the agent preferences an agent may need to submit the application to underwriting for processing, once merchant has completed and submitted the application).&lt;br&gt;&#x60;submitted&#x60; - Indicates application submitted to underwriting for processing.\n     * @param {module:api/SearchApi~getJsonSearchApplicationCompleteCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getJsonSearchApplicationComplete(opts, callback) {\n      opts = opts || {};\n      let postBody = null;\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        'pageNumber': opts['pageNumber'],'pageSize': opts['pageSize'],'findBy': opts['findBy']\n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentJsonSearchCompleteApplicationSuccessResponseModel;\n\n      return this.apiClient.callApi(\n        '/enroll/search', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search results with non-empty data result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentJsonSearchCompleteApplicationSuccessResponseModel"
                },
                "examples": {
                  "200SuccessResponseWithNonEmptyDataResult": {
                    "summary": "JSON search result successfully fetched.",
                    "value": {
                      "status": "success",
                      "data": {
                        "result": [
                          {
                            "application": {
                              "agent": 28273,
                              "applicationName": "Joe's spaceage Stereo - Redmond",
                              "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                              "plan": {
                                "planId": 12345,
                                "equipment": [
                                  {
                                    "equipmentId": 621,
                                    "quantity": 1
                                  },
                                  {
                                    "equipmentId": 791,
                                    "quantity": 0
                                  },
                                  {
                                    "equipmentId": 809,
                                    "quantity": 3
                                  },
                                  {
                                    "equipmentId": 994,
                                    "quantity": 0
                                  },
                                  {
                                    "equipmentId": 1054,
                                    "quantity": 2
                                  }
                                ],
                                "equipmentCostToMerchant": 15,
                                "accountSetupFee": 0.99,
                                "discountFrequency": "Daily"
                              },
                              "shipping": {
                                "deliveryMethod": "Ground",
                                "shippingDestination": "DBA"
                              },
                              "principals": [
                                {
                                  "street": "123 Street",
                                  "street2": "Suite 125",
                                  "city": "South Burlington",
                                  "state": "VT",
                                  "zipCode": "12345",
                                  "firstName": "Joseph Jr.",
                                  "lastName": "Jameson",
                                  "socialSecurityNumber": "123456789",
                                  "dateOfBirth": "1999-12-25",
                                  "phoneNumber": "1234567890",
                                  "email": "example@email.com",
                                  "equityOwnershipPercentage": 40,
                                  "title": "owner",
                                  "isPersonalGuarantor": true,
                                  "driverLicenseNumber": "ABC1234567890",
                                  "driverLicenseIssuedState": "MI"
                                },
                                {
                                  "street": "1234 Example Drive",
                                  "street2": null,
                                  "city": "Red Bank",
                                  "state": "NJ",
                                  "zipCode": "12345",
                                  "firstName": "Jeremy",
                                  "lastName": "Coelman",
                                  "socialSecurityNumber": "123123123",
                                  "dateOfBirth": "2000-12-25",
                                  "phoneNumber": "1234567890",
                                  "email": "example@email.com",
                                  "equityOwnershipPercentage": 50,
                                  "title": "manager",
                                  "isPersonalGuarantor": false,
                                  "driverLicenseNumber": null,
                                  "driverLicenseIssuedState": null
                                }
                              ],
                              "business": {
                                "corporateName": "Joe's Spaceage Stereo",
                                "dbaName": "Jo Jackson Spaceage Stereo",
                                "businessType": "C",
                                "industryType": "restaurant",
                                "federalTaxIdNumber": "123567654",
                                "federalTaxIdType": "EIN",
                                "mcc": "0742",
                                "phone": "1234567890",
                                "email": "example@email.com",
                                "statementDeliveryMethod": "electronic",
                                "averageTicketAmount": 5000,
                                "averageMonthlyVolume": 1250000,
                                "highTicketAmount": 125000,
                                "merchandiseServicesSold": "Audio components and services",
                                "yearsInBusiness": 10,
                                "monthsInBusiness": 10,
                                "businessContact": {
                                  "street": "123 Avenue",
                                  "street2": null,
                                  "city": "South Burington",
                                  "state": "VT",
                                  "zipCode": "12345",
                                  "firstName": "Roy",
                                  "lastName": "Martin",
                                  "socialSecurityNumber": "123456789",
                                  "dateOfBirth": "1999-05-24",
                                  "phoneNumber": "1234567890",
                                  "email": "example@email.com"
                                },
                                "ebt": {
                                  "ebtFood": true,
                                  "ebtCash": false,
                                  "ebtAccountNumber": "test-account-12345"
                                },
                                "websites": [
                                  {
                                    "url": "https://spaceagestereos.biz",
                                    "websiteCustomerServiceEmail": "customer-service-email@example.com",
                                    "websiteCustomerServicePhoneNumber": "1234567890"
                                  }
                                ],
                                "percentOfBusinessTransactions": {
                                  "cardSwiped": 65,
                                  "keyedCardPresentNotImprinted": 20,
                                  "mailOrPhoneOrder": 0,
                                  "internet": 15
                                },
                                "businessAddress": {
                                  "corporate": {
                                    "street": "123 Sun Valley Rd",
                                    "street2": null,
                                    "city": "South Burlington",
                                    "state": "VT",
                                    "zipCode": "12345"
                                  },
                                  "dba": {
                                    "street": "123 Clinton St",
                                    "street2": null,
                                    "city": "South Burlington",
                                    "state": "VT",
                                    "zipCode": "11111"
                                  },
                                  "shipTo": {
                                    "street": "123 Saint James Drive",
                                    "street2": null,
                                    "city": "South Burlington",
                                    "state": "VT",
                                    "zipCode": "22222"
                                  }
                                }
                              },
                              "bankAccount": {
                                "abaRouting": "000000001",
                                "demandDepositAccount": "01234567890",
                                "accountType": "checking"
                              },
                              "epxHierarchy": {
                                "corporateId": null,
                                "divisionId": null,
                                "createCorporate": false,
                                "createDivision": false
                              }
                            },
                            "status": {
                              "merchantId": null,
                              "applicationStatus": "work in progress",
                              "underwritingStatus": "Pending Submission"
                            },
                            "merchantCompletionStatus": {
                              "merchantEnrollmentUrl": null,
                              "applicationSentToMerchantAt": null,
                              "applicationStartedOn": null,
                              "applicationCompletedOn": null,
                              "ipAddress": "127.0.0.1",
                              "signatureDate": "2020-10-21 18:00:00-04"
                            }
                          },
                          {
                            "application": {
                              "agent": 12345,
                              "applicationName": "Joe's spaceage Stereo - Vermont",
                              "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                              "plan": {
                                "planId": 123,
                                "equipment": [
                                  {
                                    "equipmentId": 1234,
                                    "quantity": 1
                                  }
                                ],
                                "equipmentCostToMerchant": 0,
                                "accountSetupFee": 0,
                                "discountFrequency": "Daily"
                              },
                              "shipping": {
                                "deliveryMethod": "Ground",
                                "shippingDestination": "DBA"
                              },
                              "principals": [],
                              "business": {
                                "corporateName": null,
                                "dbaName": null,
                                "businessType": null,
                                "industryType": "retail",
                                "federalTaxIdNumber": null,
                                "federalTaxIdType": null,
                                "mcc": null,
                                "phone": null,
                                "email": null,
                                "statementDeliveryMethod": "electronic",
                                "averageTicketAmount": null,
                                "averageMonthlyVolume": null,
                                "highTicketAmount": null,
                                "merchandiseServicesSold": null,
                                "yearsInBusiness": null,
                                "monthsInBusiness": null,
                                "businessContact": null,
                                "ebt": null,
                                "websites": [],
                                "percentOfBusinessTransactions": null,
                                "businessAddress": null
                              },
                              "bankAccount": null,
                              "epxHierarchy": {
                                "corporateId": null,
                                "divisionId": null,
                                "createCorporate": false,
                                "createDivision": false
                              }
                            },
                            "enricher": {
                              "isTwoFactorAuthenticated": false,
                              "isVerified": false
                            },
                            "status": {
                              "merchantId": null,
                              "applicationStatus": "work in progress",
                              "underwritingStatus": "Pending Submission"
                            },
                            "merchantCompletionStatus": {
                              "merchantEnrollmentUrl": null,
                              "applicationSentToMerchantAt": null,
                              "applicationStartedOn": null,
                              "applicationCompletedOn": null,
                              "ipAddress": null,
                              "signatureDate": "2020-01-01 01:01:01"
                            }
                          }
                        ],
                        "meta": {
                          "pagination": {
                            "links": {
                              "self": "/enroll/search?pageNumber=2&pageSize=2",
                              "next": "/enroll/search?pageNumber=3&pageSize=2",
                              "previous": "/enroll/search?pageNumber=1&pageSize=2"
                            },
                            "pageNumber": 2,
                            "pageSize": 2,
                            "total": 500,
                            "currentResultCount": 2,
                            "hasMoreResults": true
                          }
                        }
                      },
                      "link": "/enroll/search"
                    }
                  },
                  "200SuccessResponseWithEmptyDataResult": {
                    "summary": "JSON search result with no results matching query criteria.",
                    "value": {
                      "status": "success",
                      "data": {
                        "result": [],
                        "meta": {
                          "pagination": {
                            "links": {
                              "self": "/enroll/search?pageNumber=99999999&pageSize=100"
                            },
                            "pageNumber": 99999999,
                            "pageSize": 100,
                            "total": 0,
                            "currentResultCount": 0,
                            "hasMoreResults": false
                          }
                        }
                      },
                      "link": "/enroll/search"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request response for JSON search complete application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestInvalidQueryParamsResponse": {
                    "summary": "Invalid query parameters for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "pageNumber": ["pageNumber must be a number between 1 and 999999999999999"],
                          "pageSize": ["pageSize must be a number between 1 and 100"]
                        }
                      },
                      "link": "/enroll/search"
                    }
                  },
                  "400BadRequestInvalidFindByQueryParamsResponse": {
                    "summary": "Invalid query parameters for findBy query params for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "byAgent": ["must be an integer"],
                          "submission": [
                            "should be equal to one of the allowed values - [open,unsubmitted,sentToMerchant,completedByMerchant,submitted]"
                          ],
                          "testTerm": ["invalid search term"],
                          "testTerm2": ["invalid search term"]
                        }
                      },
                      "link": "/enroll/search"
                    }
                  },
                  "400BadRequestInvalidSearchTermResponse": {
                    "summary": "Invalid search parameters provided for findBy query params for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid search term"
                      },
                      "link": "/enroll/search"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "An example for 403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/search"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to get search results"
                      },
                      "link": "/enroll/search"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/document/type/list": {
      "get": {
        "summary": "Get List of Document Types",
        "description": "This endpoint is used to retrieve a list of all available document types that can be attached to an application.",
        "operationId": "getDocumentTypeList",
        "tags": ["lookups"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getDocumentTypeList\n     *\n     * Get list of all document types.\n     *\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getDocumentTypeList()\n    {\n        list($response) = $this->getDocumentTypeListWithHttpInfo();\n        return $response;\n    }\n\n    /**\n     * Operation getDocumentTypeListWithHttpInfo\n     *\n     * Get list of all document types.\n     *\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getDocumentTypeListWithHttpInfo()\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getDocumentTypeListRequest();\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Get list of all document types.\n * Get list of all available document types.\n * @param {module:api/ApplicationDocumentsApi~getDocumentTypeListCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\ngetDocumentTypeList(callback) {\n  let postBody = null;\n\n  let pathParams = {};\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/document/type/list', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of available document types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "example": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "fileType": "BANK LETTER",
                          "fileTypeDescription": "Bank Letter"
                        },
                        {
                          "fileType": "BANK STATEMENT",
                          "fileTypeDescription": "Bank Statements"
                        },
                        {
                          "fileType": "BUSINESS INSTANT ID 2.0",
                          "fileTypeDescription": "Business Instant ID 2.0"
                        },
                        {
                          "fileType": "CONTRACT",
                          "fileTypeDescription": "Contract w/ T&C's"
                        },
                        {
                          "fileType": "CRIMINAL HISTORY",
                          "fileTypeDescription": "Criminal History"
                        },
                        {
                          "fileType": "DL & SS Card",
                          "fileTypeDescription": "DL & SS Card"
                        },
                        {
                          "fileType": "FFL",
                          "fileTypeDescription": "Federal Firearms License"
                        },
                        {
                          "fileType": "FINANCIAL STATEMENTS",
                          "fileTypeDescription": "Financial Statements"
                        },
                        {
                          "fileType": "FRESNO CBD/THC/CANNABIS QUESTIONNAIRE",
                          "fileTypeDescription": "Fresno CBD/THC/Cannabis Questionnaire"
                        },
                        {
                          "fileType": "INGESTIBLE CBD ATTESTATION",
                          "fileTypeDescription": "Ingestible CBD Attestation"
                        },
                        {
                          "fileType": "ITIN",
                          "fileTypeDescription": "ITIN/Valid for work SSN"
                        },
                        {
                          "fileType": "LN2PDF",
                          "fileTypeDescription": "Lexisnexis 2.0 PDF"
                        },
                        {
                          "fileType": "MERCHANT APPLICATION",
                          "fileTypeDescription": "Merchant application (signed)"
                        },
                        {
                          "fileType": "PA LOGO",
                          "fileTypeDescription": "Logo for Payanywhere"
                        },
                        {
                          "fileType": "PROCESSING STATEMENTS",
                          "fileTypeDescription": "Processing Statements"
                        },
                        {
                          "fileType": "PROOF OF OWNERSHIP",
                          "fileTypeDescription": "Proof of Ownership Documents"
                        },
                        {
                          "fileType": "PSOA",
                          "fileTypeDescription": "Personal Statement of Affairs"
                        },
                        {
                          "fileType": "SITE SURVEY",
                          "fileTypeDescription": "Site Survey"
                        },
                        {
                          "fileType": "SS-4 Form",
                          "fileTypeDescription": "SS-4 Form"
                        },
                        {
                          "fileType": "SUPPORT DOCUMENT",
                          "fileTypeDescription": "Supporting Document"
                        },
                        {
                          "fileType": "VOIDED CHECK",
                          "fileTypeDescription": "Voided Check"
                        }
                      ],
                      "link": "/enroll/document/type/list"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/document/list/key/{externalKey}": {
      "get": {
        "summary": "Get List of Attached Documents",
        "description": "This endpoint is used to retrieve a detailed list of all documents attached to an existing merchant application by external key.",
        "operationId": "getDocumentListByExternalKey",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getDocumentListByExternalKey\n     *\n     * Get all documents attached to application by external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getDocumentListByExternalKey($external_key)\n    {\n        list($response) = $this->getDocumentListByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getDocumentListByExternalKeyWithHttpInfo\n     *\n     * Get all documents attached to application by external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getDocumentListByExternalKeyWithHttpInfo($external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getDocumentListByExternalKeyRequest($external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n * Get all documents attached to application by external key.\n * Get all documents linked to an application using application external key.\n * @param {module:api/ApplicationDocumentsApi~getDocumentListByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n */\ngetDocumentListByExternalKey(externalKey, callback) {\n  let postBody = null;\n\n  let pathParams = {\n    'externalKey': externalKey\n  };\n  let queryParams = {};\n  let headerParams = {};\n  let formParams = {};\n\n  let authNames = ['bearerAuth'];\n  let contentTypes = [];\n  let accepts = ['application/json'];\n  let returnType = EnrollmentSuccessfulResponseModel;\n\n  return this.apiClient.callApi(\n    '/document/list/key/{externalKey}', 'GET',\n    pathParams, queryParams, headerParams, formParams, postBody,\n    authNames, contentTypes, accepts, returnType, callback\n  );\n}"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of documents attached to an application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "fileId": 70106,
                          "fileName": "meapi-25024-2.pdf",
                          "fileType": "MERCHANT APPLICATION",
                          "createdDate": "2020-08-06T04:32:12.588Z"
                        },
                        {
                          "fileId": 70123,
                          "fileName": "meapi-25024-21.pdf",
                          "fileType": "MERCHANT APPLICATION",
                          "createdDate": "2020-08-07T16:22:11.397Z"
                        }
                      ],
                      "link": "/enroll/document/list/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty string and cannot be null"]
                        }
                      },
                      "link": "/enroll/application/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty string and cannot be null"]
                        }
                      },
                      "link": "/enroll/document/list/key/null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/document/id/{applicationDocumentId}/key/{externalKey}": {
      "get": {
        "summary": "Get Details for Specific Document",
        "description": "This endpoint uses the document ID and application external key to retrieve details about a specific document attached to an existing application.",
        "operationId": "getDocumentByDocumentId",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getDocumentByDocumentIdAndExternalKey\n     *\n     * Get application document related details with document ID and application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ApplicationDocumentId $application_document_id Document ID to view document details. (required)\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getDocumentByDocumentIdAndExternalKey($application_document_id, $external_key)\n    {\n        list($response) = $this->getDocumentByDocumentIdAndExternalKeyWithHttpInfo($application_document_id, $external_key);\n        return $response;\n    }\n\n    /**\n     * Operation getDocumentByDocumentIdAndExternalKeyWithHttpInfo\n     *\n     * Get application document related details with document ID and application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ApplicationDocumentId $application_document_id Document ID to view document details. (required)\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getDocumentByDocumentIdAndExternalKeyWithHttpInfo($application_document_id, $external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getDocumentByDocumentIdAndExternalKeyRequest($application_document_id, $external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get application document related details with document ID and application external key.\n     * Get application document related details such as document ID, name of the document, type of document, etc. with document ID and application external key.\n     * @param {module:api/ApplicationDocumentsApi~getDocumentByDocumentIdAndExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    getDocumentByDocumentIdAndExternalKey(applicationDocumentId, externalKey, callback) {\n      let postBody = null;\n\n      let pathParams = {\n        'applicationDocumentId': applicationDocumentId,\n        'externalKey': externalKey\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/document/id/{applicationDocumentId}/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Auto-generated number associated with the document that can be used to access it. This is the value returned in the fileId parameter from the Attach Document endpoint.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/applicationDocumentId"
            },
            "example": 12345
          },
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "fileId": 123456,
                        "fileType": "MERCHANT APPLICATION",
                        "fileName": "meapi-20200812-1725-001.pdf",
                        "createdDate": "2020-08-12T21:28:52.257Z",
                        "contents": "SGVsbG8gd29ybGQ="
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Document not accessible error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenDocumentResponse": {
                    "summary": "An example for 403 forbidden document content error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to access document with document ID and external key"
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorDocumentNotFoundResponse": {
                    "summary": "An example for 404 not found error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "No document(s) found"
                      },
                      "link": "/enroll/document/id/1234567/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  },
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 application not found error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error within the request path.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "documentId": ["must be a non-zero positive number"]
                        }
                      },
                      "link": "/enroll/document/id/null/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Document",
        "description": "This endpoint uses the document ID to delete a specific document that was previously attached to an existing application.",
        "operationId": "deleteDocumentByDocumentId",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation deleteDocumentByDocumentIdAndExternalKey\n     *\n     * Delete application document with document ID and application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ApplicationDocumentId $application_document_id Document ID to view document details. (required)\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function deleteDocumentByDocumentIdAndExternalKey($application_document_id, $external_key)\n    {\n        list($response) = $this->deleteDocumentByDocumentIdAndExternalKeyWithHttpInfo($application_document_id, $external_key);\n        return $response;\n    }\n\n    /**\n     * Operation deleteDocumentByDocumentIdAndExternalKeyWithHttpInfo\n     *\n     * Delete application document with document ID and application external key.\n     *\n     * @param  \\Swagger\\Client\\Model\\ApplicationDocumentId $application_document_id Document ID to view document details. (required)\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function deleteDocumentByDocumentIdAndExternalKeyWithHttpInfo($application_document_id, $external_key)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->deleteDocumentByDocumentIdAndExternalKeyRequest($application_document_id, $external_key);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Delete application document with document ID and application external key.\n     * Delete application document with document ID and application external key.\n     * @param {module:api/ApplicationDocumentsApi~deleteDocumentByDocumentIdAndExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link module:model/EnrollmentSuccessfulResponseModel}\n     */\n    deleteDocumentByDocumentIdAndExternalKey(applicationDocumentId, externalKey, callback) {\n      let postBody = null;\n\n      let pathParams = {\n        'applicationDocumentId': applicationDocumentId,\n        'externalKey': externalKey\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/document/id/{applicationDocumentId}/key/{externalKey}', 'DELETE',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "applicationDocumentId",
            "in": "path",
            "description": "Auto-generated number associated with the document that can be used to access it. This is the value returned in the fileId parameter from the Attach Document endpoint.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/applicationDocumentId"
            },
            "example": "12345"
          },
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": "Document was deleted successfully",
                      "link": "/enroll/document/id/12345/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to delete document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400ErrorUnableToDeleteDocumentResponse": {
                    "summary": "An example for 400 bad request error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to delete document"
                      },
                      "link": "/enroll/document/id/1234567890/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Document not accessible error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenDocumentResponse": {
                    "summary": "An example for 403 forbidden document content error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to access document with document ID and external key"
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorDocumentNotFoundResponse": {
                    "summary": "An example for 404 document not found error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "No document(s) found"
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  },
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 application not found error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key 'aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/document/id/123456/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "documentId": ["must be a non-zero positive number"]
                        }
                      },
                      "link": "/enroll/document/id/null/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/document/upload/key/{externalKey}": {
      "put": {
        "summary": "Attach Document to Application",
        "description": "This endpoint is used to attach a new document to an existing application. Valid file extensions include .png, .gif, .jpeg, .jpg, .tiff, and .pdf. Each file may not exceed 6 MB.",
        "operationId": "putDocumentByExternalKey",
        "tags": ["application-documents"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation putDocumentByExternalKey\n     *\n     * Attach new document to existing merchant enrollment application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationDocumentModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function putDocumentByExternalKey($external_key, $body = null)\n    {\n        list($response) = $this->putDocumentByExternalKeyWithHttpInfo($external_key, $body);\n        return $response;\n    }\n\n    /**\n     * Operation putDocumentByExternalKeyWithHttpInfo\n     *\n     * Attach new document to existing merchant enrollment application.\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationDocumentModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function putDocumentByExternalKeyWithHttpInfo($external_key, $body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->putDocumentByExternalKeyRequest($external_key, $body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "    /**\n     * Callback function to receive the result of the putDocumentByExternalKey operation.\n     * @callback moduleapi/ApplicationDocumentsApi~putDocumentByExternalKeyCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentSuccessfulResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Attach new document to existing enrollment application.\n     * Attach new document to existing enrollment application.\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationDocumentModel} opts.body \n     * @param {module:api/ApplicationDocumentsApi~putDocumentByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    putDocumentByExternalKey(externalKey, opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling putDocumentByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/document/upload/key/{externalKey}', 'PUT',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationDocumentModel"
              },
              "examples": {
                "validEnrollmentApplicationDocumentRequest": {
                  "summary": "Valid enrollment application document request",
                  "description": "Valid enrollment application document request.",
                  "value": {
                    "fileName": "meapi-25024-22.pdf",
                    "fileType": "MERCHANT APPLICATION",
                    "attachment": "SGVsbG8gV29ybGQh="
                  }
                },
                "invalidEnrollmentApplicationDocumentRequest": {
                  "summary": "Invalid enrollment application document request",
                  "description": "Invalid enrollment application document request.",
                  "value": {
                    "fileName": 12345,
                    "fileType": "RANDOM_TYPE",
                    "attachment": "Hello World!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New document attached to application",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "fileId": 70172,
                        "fileType": "MERCHANT APPLICATION",
                        "fileName": "meapi-20200812-1725-001.pdf",
                        "createdDate": "2020-08-12T21:28:52.257Z"
                      },
                      "link": "/enroll/document/upload/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided within request object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400ErrorInvalidFileExtensionResponse": {
                    "summary": "An example for 400 bad request error for invalid file extension.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "file name should be name + extension. e.g:'filename.jpg',"
                      },
                      "link": "/enroll/document/upload/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/document/upload/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/document/upload/key/0aa000a-000a-00a0-00a0-00000aa00a0"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorUnprocessableEntityResponse": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty string and cannot be null"],
                          "fileName": ["must be a non-empty string and cannot be null"],
                          "fileType": ["must be a non-empty string and cannot be null"],
                          "attachment": ["must be a non-empty string and cannot be null"]
                        }
                      },
                      "link": "/enroll/document/upload/key/null"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/plan/list-all-by-agent/{agentId}": {
      "get": {
        "summary": "Get Application Plan Details by Agent",
        "description": "List all application plans and their details available to an agent by agent ID.",
        "operationId": "getListAllPlanByAgentId",
        "tags": ["lookups"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getListAllPlanByAgentId\n     *\n     * List all application plans and their details by agent ID.\n     *\n     * @param  \\Swagger\\Client\\Model\\Agent $agent_id Agent ID (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getListAllPlanByAgentId($agent_id)\n    {\n        list($response) = $this->getListAllPlanByAgentIdWithHttpInfo($agent_id);\n        return $response;\n    }\n\n    /**\n     * Operation getListAllPlanByAgentIdWithHttpInfo\n     *\n     * List all application plans and their details by agent ID.\n     *\n     * @param  \\Swagger\\Client\\Model\\Agent $agent_id Agent ID (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getListAllPlanByAgentIdWithHttpInfo($agent_id)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getListAllPlanByAgentIdRequest($agent_id);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "    /**\n     * Callback function to receive the result of the getListAllPlanByAgentId operation.\n     * @callback moduleapi/ApplicationPlanApi~getListAllPlanByAgentIdCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/EnrollmentSuccessfulResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * List all application plans and their details by agent ID.\n     * List all application plans and their details by agent ID.\n     * @param {module:model/Agent} agentId Agent ID\n     * @param {module:api/ApplicationPlanApi~getListAllPlanByAgentIdCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getListAllPlanByAgentId(agentId, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'agentId' is set\n      if (agentId === undefined || agentId === null) {\n        throw new Error(\"Missing the required parameter 'agentId' when calling getListAllPlanByAgentId\");\n      }\n\n      let pathParams = {\n        'agentId': agentId\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/plan/list-all-by-agent/{agentId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/agent"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Return list of all application plans and their details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "total": 3,
                        "planDetails": [
                          {
                            "agent": null,
                            "planId": 12345,
                            "planName": "Wireless Template",
                            "lastUpdatedAt": "2021-10-16 11:39:13.409108-05",
                            "isValidPlan": true,
                            "isSystemPlan": true,
                            "isFavoritePlan": false
                          },
                          {
                            "agent": 11111,
                            "planId": 12346,
                            "planName": "Joe's PayAnywhere Template",
                            "lastUpdatedAt": "2019-06-26 15:49:56.068912-04",
                            "isValidPlan": true,
                            "isSystemPlan": false,
                            "isFavoritePlan": false
                          },
                          {
                            "agent": 22222,
                            "planId": 12347,
                            "planName": "Joe's Counter-top with PIN debit Template",
                            "lastUpdatedAt": "2021-09-25 14:55:27.944971-04",
                            "isValidPlan": true,
                            "isSystemPlan": false,
                            "isFavoritePlan": true
                          }
                        ]
                      },
                      "link": "/enroll/plan/list-all-by-agent/12345"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestInvalidAgentIdResponse": {
                    "summary": "An example for 400 Bad request invalid agent ID error response",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agentId": ["must be an integer"]
                        }
                      },
                      "link": "/enroll/plan/list-all-by-agent/null"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid agent client affiliation response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenAgentClientAffiliationResponse": {
                    "summary": "An example for 403 forbidden agent client affiliation error response",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/plan/list-all-by-agent/99999"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/two-factor/initiate": {
      "post": {
        "summary": "Initiate 2FA",
        "description": "Initialize two-factor authentication on an existing application with a valid primary principal phone number.",
        "operationId": "postInitiateTwoFactorAuth",
        "tags": ["2FA"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationTwoFactorInitiateRequestModel"
              },
              "examples": {
                "twoFactorAuthInitiateValidRequest": {
                  "summary": "Initiate two-factor authentication valid request.",
                  "value": {
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0"
                  }
                },
                "twoFactorAuthInitiateInvalidRequest": {
                  "summary": "Initiate two-factor authentication invalid request.",
                  "value": {
                    "externalKey": ""
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation postInitiateTwoFactorAuth\n     *\n     * Initialize two-factor authentication on existing application.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationTwoFactorInitiateRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function postInitiateTwoFactorAuth($body = null)\n    {\n        list($response) = $this->postInitiateTwoFactorAuthWithHttpInfo($body);\n        return $response;\n    }\n\n    /**\n     * Operation postInitiateTwoFactorAuthWithHttpInfo\n     *\n     * Initialize two-factor authentication on existing application.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationTwoFactorInitiateRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function postInitiateTwoFactorAuthWithHttpInfo($body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->postInitiateTwoFactorAuthRequest($body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Initialize two-factor authentication on existing application.\n     * Initialize two-factor authentication on existing application with a valid primary principal phone number.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationTwoFactorInitiateRequestModel} opts.body \n     * @param {module:api/TwoFactorAuthApi~postInitiateTwoFactorAuthCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    postInitiateTwoFactorAuth(opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/two-factor/initiate', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Initiate two-factor authentication code for existing application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "requestId": "0aa000a-000a-00a0-00a0-00000aa00a0",
                        "phone": "1234567890",
                        "verified": false
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request example.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestMissingPrimaryPrincipalErrorResponse": {
                    "summary": "An example for 400 bad request error response for application with missing primary principal.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Two-factor authentication failure - Principal applicant information is missing"
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  },
                  "400BadRequestMissingPrimaryPrincipalPhoneErrorResponse": {
                    "summary": "An example for 400 bad request error response for application with missing phone number for primary principal.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Two-factor authentication failure - Primary principal phone number is missing"
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found example.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404NotFoundErrorResponse": {
                    "summary": "An example for 404 not found error response for application with non-existing external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "externalKey": ["must be a non-empty, non-null string and match pattern \"^(?!.*/).*$\""]
                        }
                      },
                      "link": "/enroll/two-factor/initiate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/two-factor/validate": {
      "post": {
        "summary": "Validate 2FA Code",
        "description": "Validate two-factor authentication code for an application using the external key.",
        "operationId": "postValidateTwoFactorAuthCode",
        "tags": ["2FA"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enrollmentApplicationTwoFactorValidateRequestModel"
              },
              "examples": {
                "twoFactorValidRequest": {
                  "summary": "Two-factor validation request.",
                  "value": {
                    "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                    "code": "1234"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation postValidateTwoFactorAuthCode\n     *\n     * Validate two-factor authentication code.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationTwoFactorValidateRequestModel $body body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function postValidateTwoFactorAuthCode($body = null)\n    {\n        list($response) = $this->postValidateTwoFactorAuthCodeWithHttpInfo($body);\n        return $response;\n    }\n\n    /**\n     * Operation postValidateTwoFactorAuthCodeWithHttpInfo\n     *\n     * Validate two-factor authentication code.\n     *\n     * @param  \\Swagger\\Client\\Model\\EnrollmentApplicationTwoFactorValidateRequestModel $body (optional)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function postValidateTwoFactorAuthCodeWithHttpInfo($body = null)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->postValidateTwoFactorAuthCodeRequest($body);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Validate two-factor authentication code.\n     * Validate two-factor authentication code for application by external key.\n     * @param {Object} opts Optional parameters\n     * @param {module:model/EnrollmentApplicationTwoFactorValidateRequestModel} opts.body \n     * @param {module:api/TwoFactorAuthApi~postValidateTwoFactorAuthCodeCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    postValidateTwoFactorAuthCode(opts, callback) {\n      opts = opts || {};\n      let postBody = opts['body'];\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = ['application/json'];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/two-factor/validate', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Validate two-factor authentication code for existing application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": {
                        "application": {
                          "agent": 12345,
                          "applicationName": "Joe's spaceage Stereo - Redmond",
                          "externalKey": "0aa000a-000a-00a0-00a0-00000aa00a0",
                          "plan": {
                            "planId": 12345,
                            "equipment": [
                              {
                                "equipmentId": 621,
                                "quantity": 1
                              },
                              {
                                "equipmentId": 791,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 809,
                                "quantity": 3
                              },
                              {
                                "equipmentId": 994,
                                "quantity": 0
                              },
                              {
                                "equipmentId": 1054,
                                "quantity": 2
                              }
                            ],
                            "equipmentCostToMerchant": 15,
                            "accountSetupFee": 0.99,
                            "discountFrequency": "Daily"
                          },
                          "shipping": {
                            "deliveryMethod": "Ground",
                            "shippingDestination": "DBA"
                          },
                          "principals": [
                            {
                              "street": "790 Example Drive",
                              "street2": "Suite 123",
                              "city": "South City",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Joseph Jr.",
                              "lastName": "Jameson",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1955-12-25",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com",
                              "equityOwnershipPercentage": 40,
                              "title": "owner",
                              "isPersonalGuarantor": true,
                              "driverLicenseNumber": "ABC1234567891",
                              "driverLicenseIssuedState": "GA"
                            }
                          ],
                          "business": {
                            "corporateName": "Joe's Spaceage Stereo",
                            "dbaName": "Jo Jackson Spaceage Stereo",
                            "businessType": "C",
                            "industryType": "restaurant",
                            "federalTaxIdNumber": "123567654",
                            "federalTaxIdType": "EIN",
                            "mcc": "0742",
                            "phone": "1234567890",
                            "email": "user@example.com",
                            "statementDeliveryMethod": "electronic",
                            "averageTicketAmount": 5000,
                            "averageMonthlyVolume": 1250000,
                            "highTicketAmount": 125000,
                            "merchandiseServicesSold": "Audio components and services",
                            "yearsInBusiness": null,
                            "monthsInBusiness": null,
                            "businessContact": {
                              "street": "828 Late Avenue",
                              "street2": null,
                              "city": "South Burington",
                              "state": "VT",
                              "zipCode": "12345",
                              "firstName": "Roy",
                              "lastName": "Martin",
                              "socialSecurityNumber": "123456789",
                              "dateOfBirth": "1947-11-05",
                              "phoneNumber": "1234567890",
                              "email": "user@example.com"
                            },
                            "ebt": null,
                            "websites": [],
                            "percentOfBusinessTransactions": null,
                            "businessAddress": {
                              "corporate": {
                                "street": "1447 Road",
                                "street2": null,
                                "city": "South City",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "dba": {
                                "street": "1072 Street",
                                "street2": null,
                                "city": "South City",
                                "state": "VT",
                                "zipCode": "12345"
                              },
                              "shipTo": {
                                "street": "4735 Drive",
                                "street2": null,
                                "city": "South City",
                                "state": "VT",
                                "zipCode": "12345"
                              }
                            }
                          },
                          "bankAccount": null,
                          "epxHierarchy": {
                            "corporateId": null,
                            "divisionId": null,
                            "createCorporate": false,
                            "createDivision": false
                          }
                        },
                        "enricher": {
                          "isTwoFactorAuthenticated": true,
                          "isVerified": false
                        },
                        "status": {
                          "merchantId": null,
                          "applicationStatus": "work in progress",
                          "underwritingStatus": "Pending Submission"
                        },
                        "merchantCompletionStatus": {
                          "merchantEnrollmentUrl": null,
                          "applicationSentToMerchantAt": null,
                          "applicationStartedOn": null,
                          "applicationCompletedOn": null,
                          "ipAddress": null,
                          "signatureDate": "2020-01-01 01:01:01"
                        }
                      },
                      "link": "/enroll/two-factor/validate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request example.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestErrorResponse": {
                    "summary": "An example for 400 bad request error response for invalid two-factor auth code.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Two-factor authentication failure - Invalid authentication code"
                      },
                      "link": "/enroll/two-factor/validate"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found example.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404NotFoundErrorResponse": {
                    "summary": "An example for 404 not found error response for application with non-existing external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '0aa000a-000a-00a0-00a0-00000aa00a0' not found"
                      },
                      "link": "/enroll/two-factor/validate"
                    }
                  }
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type response - Invalid content type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "415ErrorUnsupportedMediaTypeResponse": {
                    "summary": "Unsupported media type - Invalid content type",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Invalid content type"
                      },
                      "link": "/enroll/two-factor/validate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/two-factor/status/id/{requestId}/phone/{phone}": {
      "get": {
        "summary": "Get 2FA status",
        "description": "Get two-factor authentication status by request ID and phone number.",
        "operationId": "getTwoFactorAuthStatus",
        "tags": ["2FA"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getTwoFactorAuthStatus\n     *\n     * Get two-factor authentication status.\n     *\n     * @param  string $request_id Two-factor request ID. (required)\n     * @param  \\Swagger\\Client\\Model\\PhoneNumber $phone Phone number. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getTwoFactorAuthStatus($request_id, $phone)\n    {\n        list($response) = $this->getTwoFactorAuthStatusWithHttpInfo($request_id, $phone);\n        return $response;\n    }\n\n    /**\n     * Operation getTwoFactorAuthStatusWithHttpInfo\n     *\n     * Get two-factor authentication status.\n     *\n     * @param  string $request_id Two-factor request ID. (required)\n     * @param  \\Swagger\\Client\\Model\\PhoneNumber $phone Phone number. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getTwoFactorAuthStatusWithHttpInfo($request_id, $phone)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel';\n        $request = $this->getTwoFactorAuthStatusRequest($request_id, $phone);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 400:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get two-factor authentication status.\n     * Get two-factor authentication status by request ID and phone number.\n     * @param {String} requestId Two-factor request ID.\n     * @param {module:model/PhoneNumber} phone Phone number.\n     * @param {module:api/TwoFactorAuthApi~getTwoFactorAuthStatusCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getTwoFactorAuthStatus(requestId, phone, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'requestId' is set\n      if (requestId === undefined || requestId === null) {\n        throw new Error(\"Missing the required parameter 'requestId' when calling getTwoFactorAuthStatus\");\n      }\n      // verify the required parameter 'phone' is set\n      if (phone === undefined || phone === null) {\n        throw new Error(\"Missing the required parameter 'phone' when calling getTwoFactorAuthStatus\");\n      }\n\n      let pathParams = {\n        'requestId': requestId,'phone': phone\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/two-factor/status/id/{requestId}/phone/{phone}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Two-factor request ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            },
            "example": "0aa000a-000a-00a0-00a0-00000aa00a0"
          },
          {
            "name": "phone",
            "in": "path",
            "description": "Phone number.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/phoneNumber"
            },
            "example": "1234567890"
          }
        ],
        "responses": {
          "200": {
            "description": "Get two-factor authentication status for request ID + phone.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponseTwoFactorAuthVerified": {
                    "summary": "An example for 200 OK successful response with two-factor authentication verified successfully.",
                    "value": {
                      "status": "success",
                      "data": {
                        "requestId": "0aa000a-000a-00a0-00a0-00000aa00a0",
                        "phone": "1234567890",
                        "verified": true
                      },
                      "link": "/enroll/two-factor/status/id/0aa000a-000a-00a0-00a0-00000aa00a0/phone/1231234567"
                    }
                  },
                  "200SuccessResponseTwoFactorAuthPending": {
                    "summary": "An example for 200 OK successful response with two-factor authentication pending.",
                    "value": {
                      "status": "success",
                      "data": {
                        "requestId": "0aa000a-000a-00a0-00a0-00000aa00a0",
                        "phone": "1234567890",
                        "verified": false
                      },
                      "link": "/enroll/two-factor/status/id/0aa000a-000a-00a0-00a0-00000aa00a0/phone/1231234567"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request example.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "400BadRequestErrorResponse": {
                    "summary": "An example for 400 bad request error response for invalid request ID/phone.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to get two-factor authentication status"
                      },
                      "link": "/enroll/two-factor/status/id/0aa000a-000a-00a0-00a0-00000aa00a0/phone/1231234567"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/agent/{agentId}/group/list": {
      "get": {
        "summary": "Get Agent Groups by Agent ID",
        "description": "Get a list of all agent groups by agent ID.",
        "operationId": "getAgentGroupListByAgentId",
        "tags": ["lookups"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getAgentGroupListByAgentId\n     *\n     * Get list of all agent groups by agent ID.\n     *\n     * @param  \\Swagger\\Client\\Model\\Agent $agent_id Agent ID (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\AgentGroupListResponseModel\n     */\n    public function getAgentGroupListByAgentId($agent_id)\n    {\n        list($response) = $this->getAgentGroupListByAgentIdWithHttpInfo($agent_id);\n        return $response;\n    }\n\n    /**\n     * Operation getAgentGroupListByAgentIdWithHttpInfo\n     *\n     * Get list of all agent groups by agent ID.\n     *\n     * @param  \\Swagger\\Client\\Model\\Agent $agent_id Agent ID (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\AgentGroupListResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getAgentGroupListByAgentIdWithHttpInfo($agent_id)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\AgentGroupListResponseModel';\n        $request = $this->getAgentGroupListByAgentIdRequest($agent_id);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\AgentGroupListResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 403:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Callback function to receive the result of the getAgentGroupListByAgentId operation.\n     * @callback moduleapi/AgentApi~getAgentGroupListByAgentIdCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/AgentGroupListResponseModel{ data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * Get list of all agent groups by agent ID.\n     * Get list of all agent groups by agent ID.\n     * @param {module:model/Agent} agentId Agent ID\n     * @param {module:api/AgentApi~getAgentGroupListByAgentIdCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getAgentGroupListByAgentId(agentId, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'agentId' is set\n      if (agentId === undefined || agentId === null) {\n        throw new Error(\"Missing the required parameter 'agentId' when calling getAgentGroupListByAgentId\");\n      }\n\n      let pathParams = {\n        'agentId': agentId\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = AgentGroupListResponseModel;\n\n      return this.apiClient.callApi(\n        '/agent/{agentId}/group/list', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "description": "Agent ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/agent"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all agent group related details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGroupListResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "groupId": 1234,
                          "groupName": "ABC corp agent group"
                        }
                      ],
                      "link": "/enroll/agent/12345/group/list"
                    }
                  },
                  "200SuccessResponseWithNoGroupsFound": {
                    "summary": "An example for 200 OK successful response with no agent group data.",
                    "value": {
                      "status": "success",
                      "data": [],
                      "link": "/enroll/agent/12345/group/list"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid agent client affiliation response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ErrorForbiddenAgentClientAffiliationResponse": {
                    "summary": "An example for 403 forbidden agent client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/agent/11111/group/list"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "agentId": ["must be an integer"]
                        }
                      },
                      "link": "/agent/invalid-agent-id/group/list"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Unable to get agent group IDs by agent ID.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to get agent group IDs"
                      },
                      "link": "/agent/11111/group/list"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/mcc/list": {
      "get": {
        "summary": "Get List of Merchant Category Codes",
        "description": "Get a list of all Merchant Category Codes with details.",
        "operationId": "getMerchantCategoryCodesList",
        "tags": ["lookups"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getMerchantCategoryCodesList\n     *\n     * Get list of all merchant category codes and details.\n     *\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\MerchantCategoryCodesListResponseModel\n     */\n    public function getMerchantCategoryCodesList()\n    {\n        list($response) = $this->getMerchantCategoryCodesListWithHttpInfo();\n        return $response;\n    }\n\n    /**\n     * Operation getMerchantCategoryCodesListWithHttpInfo\n     *\n     * Get list of all merchant category codes and details.\n     *\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\MerchantCategoryCodesListResponseModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getMerchantCategoryCodesListWithHttpInfo()\n    {\n        $returnType = '\\Swagger\\Client\\Model\\MerchantCategoryCodesListResponseModel';\n        $request = $this->getMerchantCategoryCodesListRequest();\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\MerchantCategoryCodesListResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 404:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get list of all merchant category codes and details.\n     * Get list of all merchant category codes and details.\n     * @param {module:api/LookupsApi~getMerchantCategoryCodesListCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getMerchantCategoryCodesList(callback) {\n      \n      let postBody = null;\n\n      let pathParams = {\n        \n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MerchantCategoryCodesListResponseModel;\n\n      return this.apiClient.callApi(\n        '/mcc/list', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of all Merchant Category Codes and details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/merchantCategoryCodesListResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "200 success response",
                    "value": {
                      "status": "success",
                      "data": [
                        {
                          "mcc": "5262",
                          "description": "ONLINE MARKETPLACES",
                          "averageTicketAmount": "5000.00",
                          "averageMonthlyVolume": null,
                          "highTicketAmount": "550.00",
                          "isCbdAllowed": false,
                          "isSexuallyExplicitProductsAllowed": false,
                          "isCannabisAllowed": false
                        },
                        {
                          "mcc": "4411",
                          "description": "Steamship and Cruise Lines",
                          "averageTicketAmount": "10.00",
                          "averageMonthlyVolume": "5000.00",
                          "highTicketAmount": "550.00",
                          "isCbdAllowed": false,
                          "isSexuallyExplicitProductsAllowed": false,
                          "isCannabisAllowed": false
                        },
                        {
                          "mcc": "4511",
                          "description": "Airlines and Air Carriers (Not Elsewhere Classified)",
                          "averageTicketAmount": "1500.00",
                          "averageMonthlyVolume": "250000.00",
                          "highTicketAmount": "25000.00",
                          "isCbdAllowed": false,
                          "isSexuallyExplicitProductsAllowed": false,
                          "isCannabisAllowed": false
                        }
                      ],
                      "link": "/enroll/mcc/list"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Unable to retrieve merchant category codes list and details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorMerchantCategoryCodesListNotFoundResponse": {
                    "summary": "404 Not Found Error",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to retrieve merchant category codes list"
                      },
                      "link": "/enroll/mcc/list"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/bank/details/aba-routing/{abaRouting}": {
      "get": {
        "summary": "Get Bank Details",
        "description": "Get bank related details by ABA routing number.",
        "operationId": "getBankDetailsByAbaRouting",
        "tags": ["lookups"],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "    /**\n     * Operation getBankDetailsByAbaRouting\n     *\n     * Get bank details by routing number.\n     *\n     * @param  \\Swagger\\Client\\Model\\BankRoutingNumber $aba_routing Bank ABA routing number. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\BankDetailsByAbaRoutingResponseDataModel\n     */\n    public function getBankDetailsByAbaRouting($aba_routing)\n    {\n        list($response) = $this->getBankDetailsByAbaRoutingWithHttpInfo($aba_routing);\n        return $response;\n    }\n\n    /**\n     * Operation getBankDetailsByAbaRoutingWithHttpInfo\n     *\n     * Get bank details by routing number.\n     *\n     * @param  \\Swagger\\Client\\Model\\BankRoutingNumber $aba_routing Bank ABA routing number. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return array of \\Swagger\\Client\\Model\\BankDetailsByAbaRoutingResponseDataModel, HTTP status code, HTTP response headers (array of strings)\n     */\n    public function getBankDetailsByAbaRoutingWithHttpInfo($aba_routing)\n    {\n        $returnType = '\\Swagger\\Client\\Model\\BankDetailsByAbaRoutingResponseDataModel';\n        $request = $this->getBankDetailsByAbaRoutingRequest($aba_routing);\n\n        try {\n            $options = $this->createHttpClientOption();\n            try {\n                $response = $this->client->send($request, $options);\n            } catch (RequestException $e) {\n                throw new ApiException(\n                    \"[{$e->getCode()}] {$e->getMessage()}\",\n                    $e->getCode(),\n                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,\n                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null\n                );\n            }\n\n            $statusCode = $response->getStatusCode();\n\n            if ($statusCode < 200 || $statusCode > 299) {\n                throw new ApiException(\n                    sprintf(\n                        '[%d] Error connecting to the API (%s)',\n                        $statusCode,\n                        $request->getUri()\n                    ),\n                    $statusCode,\n                    $response->getHeaders(),\n                    $response->getBody()\n                );\n            }\n\n            $responseBody = $response->getBody();\n            if ($returnType === '\\SplFileObject') {\n                $content = $responseBody; //stream goes to serializer\n            } else {\n                $content = $responseBody->getContents();\n                if (!in_array($returnType, ['string','integer','bool'])) {\n                    $content = json_decode($content);\n                }\n            }\n\n            return [\n                ObjectSerializer::deserialize($content, $returnType, []),\n                $response->getStatusCode(),\n                $response->getHeaders()\n            ];\n\n        } catch (ApiException $e) {\n            switch ($e->getCode()) {\n                case 200:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\BankDetailsByAbaRoutingResponseDataModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 401:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n                case 422:\n                    $data = ObjectSerializer::deserialize(\n                        $e->getResponseBody(),\n                        '\\Swagger\\Client\\Model\\EnrollmentErrorResponseModel',\n                        $e->getResponseHeaders()\n                    );\n                    $e->setResponseObject($data);\n                    break;\n            }\n            throw $e;\n        }\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get bank details by routing number.\n     * Get bank related details by ABA routing number.\n     * @param {module:model/BankRoutingNumber} abaRouting Bank ABA routing number.\n     * @param {module:api/LookupsApi~getBankDetailsByAbaRoutingCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getBankDetailsByAbaRouting(abaRouting, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'abaRouting' is set\n      if (abaRouting === undefined || abaRouting === null) {\n        throw new Error(\"Missing the required parameter 'abaRouting' when calling getBankDetailsByAbaRouting\");\n      }\n\n      let pathParams = {\n        'abaRouting': abaRouting\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = BankDetailsByAbaRoutingResponseDataModel;\n\n      return this.apiClient.callApi(\n        '/bank/details/aba-routing/{abaRouting}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "parameters": [
          {
            "name": "abaRouting",
            "in": "path",
            "description": "Bank ABA routing number.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/bankRoutingNumber"
            },
            "example": "00000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Return bank details by ABA routing number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankDetailsByAbaRoutingResponseModel"
                },
                "examples": {
                  "200SuccessResponseWithValidBankData": {
                    "summary": "An example for 200 OK successful response with valid bank information.",
                    "value": {
                      "status": "success",
                      "data": {
                        "isValid": true,
                        "data": {
                          "abaRouting": "000000001",
                          "bankName": "TD BANK NA",
                          "bankAddress": "P.O. BOX 1234",
                          "bankCity": "LEWISTON",
                          "bankState": "ME",
                          "bankZipCode": "01234",
                          "bankZipCodeExtension": "5678",
                          "bankPhoneNumberAreaCode": "123",
                          "bankPhoneNumberPrefix": "456",
                          "bankPhoneNumberSuffix": "7890"
                        }
                      },
                      "link": "/enroll/bank/details/aba-routing/000000001"
                    }
                  },
                  "200SuccessResponseWithNoBankData": {
                    "summary": "An example for 200 OK successful response with no bank information.",
                    "value": {
                      "status": "success",
                      "data": {
                        "isValid": false,
                        "data": null
                      },
                      "link": "/enroll/bank/details/aba-routing/123123123"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Invalid authentication token.",
                      "link": "/enroll/bank/details/aba-routing/123123123"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "422ErrorResponseValidationErrors": {
                    "summary": "An example for 422 unprocessable entity error response for validation errors.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": {
                          "abaRouting": ["must be a non-empty, non-null string and match pattern \"^d{9}$\""]
                        }
                      },
                      "link": "/enroll/bank/details/aba-routing/1212"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/application/free-placement/pdf/key/{externalKey}": {
      "get": {
        "summary": "Get Free Placement Form PDF",
        "description": "Get a free equipment placement form PDF string buffer by application external key.",
        "operationId": "getFreePlacementPdfByExternalKey",
        "tags": ["application-documents"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "00000000-00000000-0000000000-00000000-000000000000"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "/**\n     * Operation getFreePlacementPdfByExternalKey\n     *\n     * Get free placement form PDF by external key\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return string\n     */\n    public function getFreePlacementPdfByExternalKey($external_key)\n    {\n        list($response) = $this->getFreePlacementPdfByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }\n"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get free placement form PDF by external key\n     * Get free placement form PDF string buffer by external key\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {module:api/ApplicationApi~getFreePlacementPdfByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getFreePlacementPdfByExternalKey(externalKey, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling getFreePlacementPdfByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/pdf', 'application/json'];\n      let returnType = 'Blob';\n\n      return this.apiClient.callApi(\n        '/application/free-placement/pdf/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return free placement form PDF response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": " ",
                      "link": "/enroll/application/free-placement/pdf/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Requires authorization.",
                      "link": "/enroll/application/free-placement/pdf/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "An example for 403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/free-placement/pdf/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '00000000-00000000-0000000000-00000000-000000000000' not found"
                      },
                      "link": "/enroll/application/free-placement/pdf/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to generate PDF from provided information"
                      },
                      "link": "/enroll/application/free-placement/pdf/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/application/free-placement/pdf-raw/key/{externalKey}": {
      "get": {
        "summary": "Get Free Placement Form Raw PDF",
        "description": "Get a free equipment placement form in raw format PDF string buffer by application external key.",
        "operationId": "getFreePlacementPdfRawByExternalKey",
        "tags": ["application-documents"],
        "parameters": [
          {
            "name": "externalKey",
            "in": "path",
            "description": "Enrollment application external key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/externalKey"
            },
            "example": "00000000-00000000-0000000000-00000000-000000000000"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": " * Operation getFreePlacementPdfRawByExternalKey\n     *\n     * Get free placement form raw PDF by external key\n     *\n     * @param  \\Swagger\\Client\\Model\\ExternalKey $external_key Enrollment application external key. (required)\n     *\n     * @throws \\Swagger\\Client\\ApiException on non-2xx response\n     * @throws \\InvalidArgumentException\n     * @return \\Swagger\\Client\\Model\\EnrollmentSuccessfulResponseModel\n     */\n    public function getFreePlacementPdfRawByExternalKey($external_key)\n    {\n        list($response) = $this->getFreePlacementPdfRawByExternalKeyWithHttpInfo($external_key);\n        return $response;\n    }"
          },
          {
            "lang": "JavaScript",
            "source": "/**\n     * Get free placement form raw PDF by external key\n     * Get free placement form raw PDF string buffer by external key\n     * @param {module:model/ExternalKey} externalKey Enrollment application external key.\n     * @param {module:api/ApplicationApi~getFreePlacementPdfRawByExternalKeyCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}\n     */\n    getFreePlacementPdfRawByExternalKey(externalKey, callback) {\n      \n      let postBody = null;\n      // verify the required parameter 'externalKey' is set\n      if (externalKey === undefined || externalKey === null) {\n        throw new Error(\"Missing the required parameter 'externalKey' when calling getFreePlacementPdfRawByExternalKey\");\n      }\n\n      let pathParams = {\n        'externalKey': externalKey\n      };\n      let queryParams = {\n        \n      };\n      let headerParams = {\n        \n      };\n      let formParams = {\n        \n      };\n\n      let authNames = ['bearerAuth'];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = EnrollmentSuccessfulResponseModel;\n\n      return this.apiClient.callApi(\n        '/application/free-placement/pdf-raw/key/{externalKey}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }"
          }
        ],
        "responses": {
          "200": {
            "description": "Return free placement form PDF raw (base64 encoded string format) response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentSuccessfulResponseModel"
                },
                "examples": {
                  "200SuccessResponse": {
                    "summary": "An example for 200 OK successful response.",
                    "value": {
                      "status": "success",
                      "data": "JVBEioxRJVioxBERJ==",
                      "link": "/enroll/application/free-placement/pdf-raw/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized response - Need authorized permission to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "401ErrorUnauthorizedResponse": {
                    "summary": "Unauthorized error response",
                    "value": {
                      "status": "error",
                      "data": "Requires authorization.",
                      "link": "/enroll/application/free-placement/pdf-raw/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "403ForbiddenAgentNotAffiliatedToClientResponse": {
                    "summary": "An example for 403 forbidden agent-client affiliation error response.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Agent is not affiliated to client token"
                      },
                      "link": "/enroll/application/free-placement/pdf-raw/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "404ErrorApplicationNotFoundResponse": {
                    "summary": "An example for 404 not found error for non-existent application external key.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Application with external key '00000000-00000000-0000000000-00000000-000000000000' not found"
                      },
                      "link": "/enroll/application/free-placement/pdf-raw/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enrollmentErrorResponseModel"
                },
                "examples": {
                  "500InternalServerErrorResponse": {
                    "summary": "Internal Server Error for JSON search complete application.",
                    "value": {
                      "status": "error",
                      "data": {
                        "errors": "Unable to generate PDF from provided information"
                      },
                      "link": "/enroll/application/free-placement/pdf-raw/key/00000000-00000000-0000000000-00000000-000000000000"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enroll/version": {
      "get": {
        "summary": "Get API Information",
        "description": "Get API-related information such as Environment, Version, and Name.",
        "operationId": "getVersion",
        "tags": ["miscellaneous"],
        "responses": {
          "200": {
            "description": "API related information to be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versionResponseModel"
                },
                "examples": {
                  "successResponse": {
                    "summary": "An example for a successful version response.",
                    "value": {
                      "env": "localhost",
                      "name": "Jarvis Enrollment API",
                      "version": "1.0.0"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401UnauthorizedApiResponseModel"
                },
                "examples": {
                  "401UnauthorizedApiResponse": {
                    "summary": "An example for an unauthorized API response.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "application",
      "description": "Manage merchant enrollment applications"
    },
    {
      "name": "lookups"
    },
    {
      "name": "application-documents",
      "description": "Manage documents related to enrollment applications"
    },
    {
      "name": "2FA",
      "description": "Two-Factor Authentication"
    },
    {
      "name": "miscellaneous"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Application",
      "tags": ["application"]
    },
    {
      "name": "Lookups",
      "tags": ["lookups"]
    },
    {
      "name": "Application Documents",
      "tags": ["application-documents"]
    },
    {
      "name": "2FA",
      "tags": ["2FA"]
    },
    {
      "name": "Miscellaneous",
      "tags": ["miscellaneous"]
    }
  ]
}
