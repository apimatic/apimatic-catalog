{
  "openapi": "3.0.3",
  "info": {
    "version": "1.1",
    "title": "Wire Payment API",
    "description": "Wire Payment API",
    "contact": {
      "name": "API Support",
      "url": "https://developer.svb.com/contact"
    }
  },
  "tags": [
    {
      "name": "Wires",
      "description": "Wires api endpoints"
    }
  ],
  "paths": {
    "/v1/payment/wires/{id}": {
      "get": {
        "summary": "Retrieve a Wire Payment",
        "operationId": "get-payments-wire",
        "description": "Get Wires Payment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wire"
                },
                "examples": {
                  "GET - WireResponse": {
                    "$ref": "#/components/examples/WireResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Bad Request Error": {
                    "$ref": "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Unauthorized Error": {
                    "$ref": "#/components/examples/UnauthorizedError"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              },
              "examples": {
                "Resource Not Found Error": {
                  "$ref": "#/components/examples/ResourceNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Internal Server Error": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Wires"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "description": "transaction id of wire",
            "required": true
          }
        ]
      },
      "delete": {
        "summary": "Delete a Wire Payment",
        "operationId": "delete-payment-wires",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Bad Request Error": {
                    "$ref": "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Internal Server Error": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        },
        "description": "Deletes the specific Scheduled Payment whose transaction Id is provided in the Path parameter",
        "tags": [
          "Wires"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "description": "transaction id of wire",
            "required": true
          }
        ]
      }
    },
    "/v1/payment/wires": {
      "post": {
        "summary": "Create a Wire Payment",
        "operationId": "post-payments-wire",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wire"
                },
                "examples": {
                  "POST - WireResponse": {
                    "$ref": "#/components/examples/WireResponse"
                  }
                }
              }
            },
            "headers": {
              "x-idempotency-key": {
                "schema": {
                  "type": "string"
                },
                "description": "unique ID in the form of RFC4122 UID for tracking purpose"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Bad Request Error": {
                    "$ref": "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Unauthorized Error": {
                    "$ref": "#/components/examples/UnauthorizedError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Internal Server Error": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        },
        "description": "Wires Payment Submission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireRequest"
              },
              "examples": {
                "POST - WireRequest": {
                  "$ref": "#/components/examples/WireRequest"
                }
              }
            }
          },
          "description": "Wire Request Body"
        },
        "tags": [
          "Wires"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "x-idempotency-key",
            "description": "unique ID in the form of RFC4122 UID for tracking purpose",
            "required": true
          },
          {
            "$ref": "#/components/parameters/x-jws-signature"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "type of payload"
          }
        ]
      },
      "get": {
        "summary": "Search Wire Payments",
        "operationId": "get-all-payment-wires",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WirePayments"
                },
                "examples": {
                  "GET-WirePayments": {
                    "$ref": "#/components/examples/WirePayments"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Bad Request Error": {
                    "$ref": "#/components/examples/BadRequestError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Unauthorized Error": {
                    "$ref": "#/components/examples/UnauthorizedError"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Resource Not Found Error": {
                    "$ref": "#/components/examples/ResourceNotFoundError"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                },
                "examples": {
                  "Internal Server Error": {
                    "$ref": "#/components/examples/InternalServerError"
                  }
                }
              }
            }
          }
        },
        "description": "Returns all wire payments placed by a client within a date range. If a client has more than 1 account this will return payments from all accounts.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-jws-signature"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/date_notime"
            },
            "in": "query",
            "name": "processing_date_after",
            "description": "Processing Date is the date of payment execution date as provided by the user and for Get request processing_date_after is the starting processing date for filter criteria"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/date_notime"
            },
            "in": "query",
            "name": "processing_date_before",
            "description": "Processing Date is the date of payment execution date as provided by the user and for Get request processing_date_before is the end processing date for filter criteria"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "tags": [
          "Wires"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BeneficiaryBank": {
        "title": "Beneficiary Bank",
        "type": "object",
        "description": "Beneficiary Bank Details",
        "x-examples": {
          "example-1": {
            "bank_name": "Chase",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "OH",
                "22222"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "22222",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "22222",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Columbus",
              "state": "OH",
              "country": "US"
            },
            "routing_number": "0044000000"
          }
        },
        "properties": {
          "bank_name": {
            "$ref": "#/components/schemas/bank_name"
          },
          "bank_address": {
            "$ref": "#/components/schemas/postal_address_iso_20022"
          },
          "routing_number": {
            "$ref": "#/components/schemas/routing_number"
          },
          "local_routing_code": {
            "$ref": "#/components/schemas/local_routing_code"
          }
        },
        "required": [
          "bank_name",
          "bank_address",
          "routing_number"
        ]
      },
      "BeneficiaryDetails": {
        "title": "Beneficiary Details",
        "type": "object",
        "description": "Beneficiary Details",
        "x-examples": {
          "example-1": {
            "beneficiary_account": "12345467",
            "beneficiary_name": {
              "prefix": "MIST",
              "given_name": "TestBeneficiary",
              "middle_name": "middlename",
              "last_name": "lastname",
              "suffix": "Jr"
            },
            "beneficiary_address": {
              "address_type": "HOME",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "string",
              "address_line": [
                "string"
              ],
              "street_name": "string",
              "building_number": "string",
              "building_name": "string",
              "post_box": "string",
              "side_in_building": "string",
              "floor": "string",
              "suite_identification": "string",
              "post_code": "string",
              "district_name": "string",
              "village": "string",
              "town_name": "string",
              "state": "string",
              "country": "st"
            }
          }
        },
        "properties": {
          "beneficiary_account": {
            "type": "string",
            "description": "This is the account number of the beneficiary",
            "maxLength": 256,
            "x-svb-data-classification": "confidential",
            "pattern": "^[a-zA-Z0-9]+$",
            "minLength": 1,
            "required": true
          },
          "beneficiary_name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/name"
              }
            ],
            "required": [
              "given_name",
              "last_name"
            ]
          },
          "beneficiary_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/postal_address_iso_20022"
              }
            ],
            "required": [
              "address_line"
            ]
          }
        },
        "required": [
          "beneficiary_account",
          "beneficiary_name",
          "beneficiary_address"
        ]
      },
      "IntermediataryBank": {
        "title": "Intermediatary Bank",
        "type": "object",
        "description": "Intermediatary Bank Details",
        "x-examples": {
          "example-1": {
            "routing_number": "0440000",
            "bank_name": "BOFA",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "CA",
                "88109"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "88109",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "88109",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Santa Clara",
              "state": "CA",
              "country": "US"
            }
          }
        },
        "properties": {
          "routing_number": {
            "$ref": "#/components/schemas/routing_number"
          },
          "bank_name": {
            "$ref": "#/components/schemas/bank_name"
          },
          "bank_address": {
            "$ref": "#/components/schemas/postal_address_iso_20022"
          }
        },
        "required": [
          "bank_address"
        ]
      },
      "PaymentDetails": {
        "title": "Payment Details",
        "type": "object",
        "description": "Payment Details",
        "x-examples": {
          "example-1": {
            "reason_for_payment": "payment reason",
            "bank_instruction": "instructions to the bank"
          }
        },
        "properties": {
          "reason_for_payment": {
            "type": "string",
            "description": "reason for the payment",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9,._\\s]+"
          },
          "bank_instruction": {
            "type": "string",
            "maxLength": 255,
            "description": "Bank to bank instructions",
            "minLength": 1,
            "pattern": "^[A-Za-z0-9,._\\s]+",
            "required": true
          },
          "purpose_of_payment_code": {
            "type": "string",
            "maxLength": 256,
            "description": "Purpose of payment for FX Wires",
            "minLength": 1
          }
        },
        "required": [
          "bank_instruction"
        ]
      },
      "PaymentNotification": {
        "title": "Payment Notification",
        "type": "object",
        "description": "Payment Notification",
        "x-examples": {
          "example-1": {
            "recipient_email": "notifications@svb.com",
            "recipient_note": "recipient note"
          }
        },
        "properties": {
          "recipient_email": {
            "$ref": "#/components/schemas/email"
          },
          "recipient_note": {
            "type": "string",
            "description": "Note to payee",
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9,._\\s]+"
          }
        }
      },
      "Wire": {
        "title": "WireResponse",
        "type": "object",
        "description": "Wire Payment Submission Response",
        "x-examples": {},
        "properties": {
          "debit_account": {
            "$ref": "#/components/schemas/debit_account"
          },
          "amount": {
            "$ref": "#/components/schemas/money"
          },
          "wire_type": {
            "$ref": "#/components/schemas/wire_type"
          },
          "created_at": {
            "$ref": "#/components/schemas/created_at"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "processing_date": {
            "$ref": "#/components/schemas/date_notime"
          },
          "posted_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/date_notime"
              }
            ],
            "description": "The date in which the payment was processed by SVB.",
            "readOnly": true
          },
          "beneficiary_details": {
            "$ref": "#/components/schemas/BeneficiaryDetails"
          },
          "beneficiary_bank": {
            "$ref": "#/components/schemas/BeneficiaryBank"
          },
          "payment_details": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "payment_notifications": {
            "$ref": "#/components/schemas/PaymentNotification"
          },
          "intermediary_bank": {
            "$ref": "#/components/schemas/IntermediataryBank"
          },
          "deal_id": {
            "$ref": "#/components/schemas/deal_id"
          },
          "fedwires_reference": {
            "$ref": "#/components/schemas/fedwires_reference"
          },
          "swift_reference": {
            "$ref": "#/components/schemas/swift_reference"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            }
          }
        },
        "required": [
          "debit_account",
          "amount",
          "wire_type",
          "processing_date",
          "beneficiary_details",
          "beneficiary_bank",
          "payment_details"
        ]
      },
      "bank_name": {
        "type": "string",
        "title": "Bank Name",
        "description": "Name of the bank",
        "maxLength": 255
      },
      "routing_number": {
        "type": "string",
        "title": "Routing Number",
        "description": "Bank routing number",
        "maxLength": 80,
        "minLength": 1
      },
      "local_routing_code": {
        "type": "string",
        "title": "local_routing_code",
        "maxLength": 80,
        "pattern": "^[a-zA-Z0-9\\.]{1,80}$",
        "description": "local routing code for FX Wires",
        "minLength": 1
      },
      "status": {
        "type": "string",
        "title": "Status of wire payment",
        "description": "Status of the wire payment",
        "enum": [
          "INITIATED",
          "COMPLETED",
          "PROCESSING",
          "CANCELLED",
          "SCHEDULED"
        ],
        "x-examples": {
          "example-1": "INITIATED"
        },
        "readOnly": true
      },
      "debit_account": {
        "type": "string",
        "title": "Debit Account",
        "description": "Debit account number",
        "maxLength": 80,
        "x-examples": {
          "example-1": "321456751"
        },
        "pattern": "^[0-9]+$",
        "minLength": 1,
        "required": true
      },
      "deal_id": {
        "type": "string",
        "title": "Deal Id",
        "description": "deal_id is mandatory when wire_type is WIRE-FX. For other wire types it is not needed.",
        "maxLength": 32,
        "x-examples": {
          "example-1": "162793544813980000"
        },
        "minLength": 1
      },
      "id": {
        "type": "string",
        "title": "Wire Transaction ID",
        "description": "Wire payment transaction id",
        "readOnly": true
      },
      "created_at": {
        "type": "string",
        "title": "Timestamp of wire payment",
        "format": "date-time",
        "description": "created at timestamp ",
        "readOnly": true,
        "x-examples": {
          "example-1": "2019-08-24T14:15:22Z"
        }
      },
      "WireRequest": {
        "title": "WireRequest",
        "type": "object",
        "description": "Wire Payment Submission Request",
        "x-examples": {},
        "properties": {
          "debit_account": {
            "$ref": "#/components/schemas/debit_account"
          },
          "amount": {
            "$ref": "#/components/schemas/money"
          },
          "wire_type": {
            "$ref": "#/components/schemas/wire_type"
          },
          "processing_date": {
            "$ref": "#/components/schemas/date_notime"
          },
          "beneficiary_details": {
            "$ref": "#/components/schemas/BeneficiaryDetails"
          },
          "beneficiary_bank": {
            "$ref": "#/components/schemas/BeneficiaryBank"
          },
          "payment_details": {
            "$ref": "#/components/schemas/PaymentDetails"
          },
          "payment_notifications": {
            "$ref": "#/components/schemas/PaymentNotification"
          },
          "intermediary_bank": {
            "$ref": "#/components/schemas/IntermediataryBank"
          },
          "deal_id": {
            "$ref": "#/components/schemas/deal_id"
          }
        },
        "required": [
          "debit_account",
          "amount",
          "wire_type",
          "processing_date",
          "beneficiary_details",
          "beneficiary_bank",
          "payment_details"
        ]
      },
      "wire_type": {
        "type": "string",
        "title": "wire_type",
        "enum": [
          "WIRE-US",
          "WIRE-INT",
          "WIRE-FX"
        ],
        "required": true,
        "description": "Denotes the type of wire intended to be sent. It has three values. For USD Fed wire use \"WIRE-US\" , for USD International wire use \"WIRE-INT\" and for FX Wires use \"WIRE-FX\" "
      },
      "total_pages": {
        "type": "string",
        "title": "total_pages",
        "readOnly": true,
        "description": "Total number of pages."
      },
      "total_items": {
        "type": "string",
        "title": "total_items",
        "readOnly": true,
        "description": "Total number of items."
      },
      "WirePayments": {
        "title": "WirePayments",
        "type": "object",
        "x-examples": {},
        "properties": {
          "wires": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wire"
            }
          },
          "total_pages": {
            "$ref": "#/components/schemas/total_pages"
          },
          "total_items": {
            "$ref": "#/components/schemas/total_items"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            }
          }
        }
      },
      "fedwires_reference": {
        "type": "string",
        "title": "fedwires_reference",
        "minLength": 1,
        "maxLength": 100,
        "description": "Unique series of numbers that can be used to investigate and track the electronic wire transfer from the initiating bank to the receiving bank",
        "pattern": "^[a-zA-Z0-9]+$"
      },
      "swift_reference": {
        "type": "string",
        "title": "swift_reference",
        "minLength": 1,
        "maxLength": 100,
        "description": "The unique reference for international payments",
        "pattern": "^[a-zA-Z0-9]+$"
      },
      "currency_code": {
        "type": "string",
        "description": "Three-letter ISO 4217 alphabetical currency code. Defaults to USD. Includes CNH for markets outside of mainland China.",
        "enum": [
          "AFN",
          "EUR",
          "ALL",
          "DZD",
          "USD",
          "AOA",
          "XCD",
          "ARS",
          "AMD",
          "AWG",
          "AUD",
          "AZN",
          "BSD",
          "BHD",
          "BDT",
          "BBD",
          "BYN",
          "BZD",
          "XOF",
          "BMD",
          "INR",
          "BTN",
          "BOB",
          "BOV",
          "BAM",
          "BWP",
          "NOK",
          "BRL",
          "BND",
          "BGN",
          "BIF",
          "CVE",
          "KHR",
          "XAF",
          "CAD",
          "KYD",
          "CLP",
          "CLF",
          "CNY",
          "CNH",
          "COP",
          "COU",
          "KMF",
          "CDF",
          "NZD",
          "CRC",
          "HRK",
          "CUP",
          "CUC",
          "ANG",
          "CZK",
          "DKK",
          "DJF",
          "DOP",
          "EGP",
          "SVC",
          "ERN",
          "SZL",
          "ETB",
          "FKP",
          "FJD",
          "XPF",
          "GMD",
          "GEL",
          "GHS",
          "GIP",
          "GTQ",
          "GBP",
          "GNF",
          "GYD",
          "HTG",
          "HNL",
          "HKD",
          "HUF",
          "ISK",
          "IDR",
          "XDR",
          "IRR",
          "IQD",
          "ILS",
          "JMD",
          "JPY",
          "JOD",
          "KZT",
          "KES",
          "KPW",
          "KRW",
          "KWD",
          "KGS",
          "LAK",
          "LBP",
          "LSL",
          "ZAR",
          "LRD",
          "LYD",
          "CHF",
          "MOP",
          "MKD",
          "MGA",
          "MWK",
          "MYR",
          "MVR",
          "MRU",
          "MUR",
          "XUA",
          "MXN",
          "MXV",
          "MDL",
          "MNT",
          "MAD",
          "MZN",
          "MMK",
          "NAD",
          "NPR",
          "NIO",
          "NGN",
          "OMR",
          "PKR",
          "PAB",
          "PGK",
          "PYG",
          "PEN",
          "PHP",
          "PLN",
          "QAR",
          "RON",
          "RUB",
          "RWF",
          "SHP",
          "WST",
          "STN",
          "SAR",
          "RSD",
          "SCR",
          "SLL",
          "SGD",
          "XSU",
          "SBD",
          "SOS",
          "SSP",
          "LKR",
          "SDG",
          "SRD",
          "SEK",
          "CHE",
          "CHW",
          "SYP",
          "TWD",
          "TJS",
          "TZS",
          "THB",
          "TOP",
          "TTD",
          "TND",
          "TRY",
          "TMT",
          "UGX",
          "UAH",
          "AED",
          "USN",
          "UYU",
          "UYI",
          "UYW",
          "UZS",
          "VUV",
          "VES",
          "VND",
          "YER",
          "ZMW",
          "ZWL",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XTS",
          "XXX",
          "XAU",
          "XPD",
          "XPT",
          "XAG"
        ],
        "default": "USD",
        "x-svb-common-type": true
      },
      "money": {
        "type": "object",
        "description": "A money type for all financial-related fields, such as amount, balance, payment due, and so on.",
        "title": "Money type",
        "properties": {
          "currency_code": {
            "$ref": "#/components/schemas/currency_code"
          },
          "value": {
            "type": "string",
            "description": "The value, An integer. For currencies that are not typically fractional, such as `JPY`.</li><li>A three-place decimal fraction. For currencies that are subdivided into thousandths, such as `TND`.</li><li> An eight-place decimal fraction. For currencies such as Bitcoin.</li></li>For the required number of decimal places for a currency code, see ISO 4217.",
            "maxLength": 32,
            "pattern": "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$"
          }
        },
        "required": [
          "currency_code",
          "value"
        ],
        "x-svb-common-type": true
      },
      "date_notime": {
        "description": "A stand-alone date, as represented by the full-date chunk specified in RFC 3339, section 5.6. Dates with no associated time or time-zone data SHOULD be used to represent special legal values, such as date of birth. Implementers SHOULD consider using the standard date_time schema whenever possible instead. Note that this regular expression is not a complete validation: February 31, for example, is allowed, and nothing is known about leap years.",
        "type": "string",
        "minLength": 10,
        "maxLength": 10,
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$",
        "x-svb-common-type": true
      },
      "name": {
        "title": "Name",
        "description": "Name of an individual",
        "type": "object",
        "properties": {
          "prefix": {
            "enum": [
              "DOCT",
              "MIST",
              "MISS",
              "MADM"
            ],
            "type": "string"
          },
          "given_name": {
            "description": "Given or first name",
            "minLength": 1,
            "maxLength": 35,
            "type": "string",
            "pattern": "^[^\\s](.*[^\\s])?$"
          },
          "middle_name": {
            "minLength": 1,
            "maxLength": 35,
            "type": "string",
            "pattern": "^[^\\s](.*[^\\s])?$"
          },
          "last_name": {
            "description": "Last name or surname",
            "minLength": 1,
            "maxLength": 350,
            "type": "string",
            "pattern": "^[^\\s](.*[^\\s])?$"
          },
          "suffix": {
            "description": "Suffix such as Jr. Sr. etc.",
            "minLength": 1,
            "maxLength": 35,
            "type": "string",
            "pattern": "^[^\\s](.*[^\\s])?$"
          }
        },
        "required": [
          "given_name"
        ],
        "x-svb-common-type": true
      },
      "address_type_iso_20022": {
        "type": "string",
        "title": "Address Type",
        "description": "Address type based on ISO 20022 message definition.",
        "enum": [
          "HOME",
          "BIZZ",
          "ADDR",
          "PBOX",
          "MLTO",
          "DLVY"
        ],
        "x-svb-common-type": true
      },
      "country_code": {
        "type": "string",
        "description": "The [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as is used in that country's top-level domain names.</blockquote>.",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2})$",
        "x-svb-common-type": true
      },
      "postal_address_iso_20022": {
        "type": "object",
        "title": "Postal Address (ISO 20022)",
        "description": "Postal Address as defined in ISO 20022",
        "properties": {
          "address_type": {
            "$ref": "#/components/schemas/address_type_iso_20022"
          },
          "mailing_indicator": {
            "type": "boolean"
          },
          "registration_address_indicator": {
            "type": "boolean"
          },
          "care_of": {
            "minLength": 1,
            "maxLength": 70,
            "type": "string"
          },
          "address_line": {
            "maxItems": 5,
            "items": {
              "minLength": 1,
              "maxLength": 70,
              "type": "string"
            },
            "type": "array"
          },
          "street_name": {
            "minLength": 1,
            "maxLength": 70,
            "type": "string"
          },
          "building_number": {
            "minLength": 1,
            "maxLength": 16,
            "type": "string"
          },
          "building_name": {
            "minLength": 1,
            "maxLength": 35,
            "type": "string"
          },
          "post_box": {
            "minLength": 1,
            "maxLength": 10,
            "type": "string"
          },
          "side_in_building": {
            "minLength": 1,
            "maxLength": 35,
            "type": "string"
          },
          "floor": {
            "minLength": 1,
            "maxLength": 70,
            "type": "string"
          },
          "suite_identification": {
            "minLength": 1,
            "maxLength": 10,
            "type": "string"
          },
          "post_code": {
            "minLength": 1,
            "maxLength": 16,
            "type": "string"
          },
          "district_name": {
            "minLength": 1,
            "maxLength": 35,
            "type": "string"
          },
          "village": {
            "minLength": 1,
            "maxLength": 70,
            "type": "string"
          },
          "town_name": {
            "minLength": 1,
            "maxLength": 35,
            "type": "string"
          },
          "state": {
            "minLength": 1,
            "maxLength": 70,
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/country_code"
          }
        },
        "required": [
          "country"
        ],
        "x-svb-common-type": true
      },
      "email": {
        "description": "A valid internationalized email address, as defined by RFC 5322, RFC 6530, and other RFCs. To validate an email address, services must send an email to it and not rely on static validation of the address.<blockquote><strong>Note:</strong> Due to RFC 5321, an email address can be up to 254 characters long even though up to 64 characters are allowed before and 255 characters are allowed after the @ sign. It is nearly impossible to define a regular expression that validates email addresses correctly, especially after you take internationalization into account. This pattern verifies only that the string contains an unquoted @ sign.</blockquote>",
        "type": "string",
        "minLength": 3,
        "maxLength": 254,
        "pattern": "^.+@[^\"\\-].+$",
        "x-svb-common-type": true
      },
      "link_description": {
        "title": "Link Description Object (JSON Schema)",
        "type": "object",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",
            "type": "string"
          },
          "rel": {
            "description": "relation to the target resource of the link",
            "type": "string"
          },
          "title": {
            "description": "a title for the link",
            "type": "string"
          },
          "media_type": {
            "description": "media type (as defined by RFC 2046) describing the link target",
            "type": "string"
          },
          "method": {
            "description": "method for requesting the target of the link (e.g. for HTTP this might be \"GET\" or \"DELETE\")",
            "type": "string"
          },
          "enc_type": {
            "description": "The media type in which to submit data along with the request",
            "type": "string",
            "default": "application/json"
          }
        },
        "x-svb-common-type": true
      },
      "error_instance": {
        "type": "object",
        "title": "Error Instance Details",
        "description": "Error instance details.",
        "properties": {
          "keyword_location": {
            "type": "string",
            "description": "Location of keyword entity involved in error. If the keyword is in the body, set this value to the JSON pointer to the property. Required for client-side errors."
          },
          "instance_location": {
            "type": "string",
            "description": "The location of the error instance if qualification is needed beyond the keyword location. Could be used to provide index of entry in array."
          },
          "instance_value": {
            "type": "string",
            "description": "The value of the keyword entity in error, if available."
          },
          "in": {
            "type": "string",
            "description": "The location of the type of object that is in error. Valid values are `body`, `header`, `path`, or `query`. Default is `body`."
          },
          "message": {
            "type": "string",
            "description": "Error message for entity in error. It is recommended that this value is not hardcoded but instead injected from relevant entry in the error catalog. Error catalog could use templatized string."
          },
          "link": {
            "description": "Link providing more information related to this error instance.",
            "$ref": "#/components/schemas/link_description"
          }
        },
        "required": [
          "in",
          "message"
        ],
        "x-svb-common-type": true
      },
      "error": {
        "type": "object",
        "title": "Error object to convey error condition for response/message",
        "description": "Error object that could be streamed out in response/message as a solitary object. This object could contain one or more error instances.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable, unique name of the error. It is recommended that this value is not hardcoded but instead injected in error response from relevant entry in the error catalog."
          },
          "id": {
            "type": "string",
            "description": "A unique reference for the error instance for correlation purposes. "
          },
          "message": {
            "type": "string",
            "description": "Message describing the error. It is recommended that this value is not hardcoded but instead injected in error response from relevant entry in the error catalog. Error catalog could use templatized string."
          },
          "errors": {
            "type": "array",
            "description": "Additional details for error instances. Mandatory for client side 4xx errors.",
            "items": {
              "$ref": "#/components/schemas/error_instance"
            }
          },
          "time": {
            "description": "Timestamp of when the error occurred. Must adhere to RFC 3339.",
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "description": "Links providing more information related to errors. These links could point to FAQ or support pages providing help in order to resolve error situation.",
            "items": {
              "$ref": "#/components/schemas/link_description"
            }
          }
        },
        "required": [
          "name",
          "id",
          "message"
        ],
        "x-svb-common-type": true
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "examples": {
      "WireResponse": {
        "value": {
          "id": "5467663246976190",
          "debit_account": "3849694687",
          "amount": {
            "currency_code": "USD",
            "value": "100.35"
          },
          "wire_type": "WIRE-US",
          "created_at": "2018-12-05T00:00:00",
          "status": "INITIATED",
          "currency": "USD",
          "processing_date": "2019-08-24",
          "beneficiary_details": {
            "beneficiary_account": "12345467",
            "beneficiary_name": {
              "prefix": "MIST",
              "given_name": "TestBeneficiary",
              "middle_name": "middlename",
              "last_name": "lastname",
              "suffix": "Jr"
            },
            "beneficiary_address": {
              "address_type": "HOME",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "CA",
                "11111"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "11111",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "11111",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Santa Clara",
              "state": "CA",
              "country": "US"
            }
          },
          "beneficiary_bank": {
            "bank_name": "Chase",
            "routing_number": "0044000000",
            "local_routing_code": "021000210",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "OH",
                "22222"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "22222",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "22222",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Columbus",
              "state": "OH",
              "country": "US"
            }
          },
          "payment_details": {
            "reason_for_payment": "payment reason",
            "bank_instruction": "instructions to the bank",
            "purpose_of_payment_code": "purpose of fx wire"
          },
          "payment_notifications": {
            "recipient_email": "notifications@svb.com",
            "recipient_note": "recipient note"
          },
          "intermediary_bank": {
            "routing_number": "0440000",
            "bank_name": "BOFA",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "CA",
                "88109"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "88109",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "88109",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Santa Clara",
              "state": "CA",
              "country": "US"
            }
          },
          "fedwires_reference": "20210727L1B77D2C000001",
          "swift_reference": "20220562268300",
          "deal_id": "162793544813980000",
          "links": [
            {
              "href": "/v1/payments/wires/5467663246976190",
              "rel": "self",
              "method": "GET"
            }
          ]
        }
      },
      "WireRequest": {
        "value": {
          "debit_account": "3849694687",
          "amount": {
            "currency_code": "USD",
            "value": "100.35"
          },
          "wire_type": "WIRE-US",
          "currency": "USD",
          "processing_date": "2019-08-24",
          "beneficiary_details": {
            "beneficiary_account": "12345467",
            "beneficiary_name": {
              "prefix": "MIST",
              "given_name": "TestBeneficiary",
              "middle_name": "middlename",
              "last_name": "lastname",
              "suffix": "Jr"
            },
            "beneficiary_address": {
              "address_type": "HOME",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "CA",
                "11111"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "11111",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "11111",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Santa Clara",
              "state": "CA",
              "country": "US"
            }
          },
          "beneficiary_bank": {
            "bank_name": "Chase",
            "routing_number": "0044000000",
            "local_routing_code": "021000210",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "OH",
                "22222"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "22222",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "22222",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Columbus",
              "state": "OH",
              "country": "US"
            }
          },
          "payment_details": {
            "reason_for_payment": "payment reason",
            "bank_instruction": "instructions to the bank",
            "purpose_of_payment_code": "purpose of fx wire"
          },
          "payment_notifications": {
            "recipient_email": "notifications@svb.com",
            "recipient_note": "recipient note"
          },
          "intermediary_bank": {
            "routing_number": "0440000",
            "bank_name": "BOFA",
            "bank_address": {
              "address_type": "BIZZ",
              "mailing_indicator": true,
              "registration_address_indicator": true,
              "care_of": "CO",
              "address_line": [
                "1 Main st",
                "CA",
                "88109"
              ],
              "street_name": "Main Street",
              "building_number": "1",
              "building_name": "Abc Corp",
              "post_box": "88109",
              "side_in_building": "test",
              "floor": "4",
              "suite_identification": "test",
              "post_code": "88109",
              "district_name": "test district",
              "village": "Test",
              "town_name": "Santa Clara",
              "state": "CA",
              "country": "US"
            }
          },
          "deal_id": "162793544813980000"
        }
      },
      "WirePayments": {
        "value": {
          "wires": [
            {
              "id": "5467663246976190",
              "debit_account": "3849694687",
              "amount": {
                "currency_code": "USD",
                "value": "100.35"
              },
              "wire_type": "WIRE-US",
              "created_at": "2018-12-05T00:00:00",
              "status": "INITIATED",
              "currency": "USD",
              "processing_date": "2019-08-24",
              "beneficiary_details": {
                "beneficiary_account": "12345467",
                "beneficiary_name": {
                  "prefix": "MIST",
                  "given_name": "TestBeneficiary",
                  "middle_name": "middlename",
                  "last_name": "lastname",
                  "suffix": "Jr"
                },
                "beneficiary_address": {
                  "address_type": "HOME",
                  "mailing_indicator": true,
                  "registration_address_indicator": true,
                  "care_of": "CO",
                  "address_line": [
                    "1 Main st",
                    "CA",
                    "11111"
                  ],
                  "street_name": "Main Street",
                  "building_number": "1",
                  "building_name": "Abc Corp",
                  "post_box": "11111",
                  "side_in_building": "test",
                  "floor": "4",
                  "suite_identification": "test",
                  "post_code": "11111",
                  "district_name": "test district",
                  "village": "Test",
                  "town_name": "Santa Clara",
                  "state": "CA",
                  "country": "US"
                }
              },
              "beneficiary_bank": {
                "bank_name": "Chase",
                "routing_number": "0044000000",
                "local_routing_code": "021000210",
                "bank_address": {
                  "address_type": "BIZZ",
                  "mailing_indicator": true,
                  "registration_address_indicator": true,
                  "care_of": "CO",
                  "address_line": [
                    "1 Main st",
                    "OH",
                    "22222"
                  ],
                  "street_name": "Main Street",
                  "building_number": "1",
                  "building_name": "Abc Corp",
                  "post_box": "22222",
                  "side_in_building": "test",
                  "floor": "4",
                  "suite_identification": "test",
                  "post_code": "22222",
                  "district_name": "test district",
                  "village": "Test",
                  "town_name": "Columbus",
                  "state": "OH",
                  "country": "US"
                }
              },
              "payment_details": {
                "reason_for_payment": "payment reason",
                "bank_instruction": "instructions to the bank",
                "purpose_of_payment_code": "purpose of fx wire"
              },
              "payment_notifications": {
                "recipient_email": "notifications@svb.com",
                "recipient_note": "recipient note"
              },
              "intermediary_bank": {
                "routing_number": "0440000",
                "bank_name": "BOFA",
                "bank_address": {
                  "address_type": "BIZZ",
                  "mailing_indicator": true,
                  "registration_address_indicator": true,
                  "care_of": "CO",
                  "address_line": [
                    "1 Main st",
                    "CA",
                    "88109"
                  ],
                  "street_name": "Main Street",
                  "building_number": "1",
                  "building_name": "Abc Corp",
                  "post_box": "88109",
                  "side_in_building": "test",
                  "floor": "4",
                  "suite_identification": "test",
                  "post_code": "88109",
                  "district_name": "test district",
                  "village": "Test",
                  "town_name": "Santa Clara",
                  "state": "CA",
                  "country": "US"
                }
              }
            }
          ],
          "deal_id": "162793544813980000",
          "total_items": "25",
          "total_pages": "3",
          "links": [
            {
              "href": "/v1/payments/wires?offset=1&limit=25",
              "rel": "first",
              "method": "GET"
            },
            {
              "href": "/v1/payments/wires?offset=2&limit=25",
              "rel": "next",
              "method": "GET"
            }
          ]
        }
      },
      "InternalServerError": {
        "value": {
          "name": "UNEXPECTED_ERROR",
          "id": "b2a79761e66545f4a5f99c16d5616b3f",
          "message": "Unable to proceed with the request at this moment. Please try again later.",
          "time": "2023-05-31T17:04:04.907917-07:00",
          "links": [
            {
              "href": "http://developer.svb.com/errors/UNEXPECTED_ERROR",
              "rel": "error_details",
              "enc_type": "application/json"
            }
          ]
        }
      },
      "BadRequestError": {
        "value": {
          "name": "VALIDATION_ERROR",
          "id": "a8690a46-ba01-4f84-a919-0505fe7785e5",
          "message": "Invalid Data Provided.",
          "errors": [
            {
              "instance_location": "processing_date",
              "instance_value": "2023-05-16",
              "in": "body",
              "message": "Processing Date cannot be before Current Date. Please resubmit the payment with a valid Processing Date"
            }
          ],
          "time": "2023-06-01T20:37:42.557559+01:00",
          "links": [
            {
              "href": "http://developer.svb.com/errors/VALIDATION_ERROR",
              "rel": "error_details",
              "enc_type": "application/json"
            }
          ]
        }
      },
      "UnauthorizedError": {
        "value": {
          "name": "INVALID_TOKEN",
          "id": "b837e413-8305-4930-831c-d65b422183f8",
          "message": "Token is invalid",
          "time": "2023-06-01T18:43:11.415Z",
          "errors": [
            {
              "keyword_location": "Authorization",
              "in": "header",
              "message": "Token is invalid"
            }
          ],
          "links": [
            {
              "href": "https://developer.svb.com/errors/INVALID_TOKEN",
              "rel": "error_details",
              "enc_type": "application/json"
            }
          ]
        }
      },
      "ResourceNotFoundError": {
        "value": {
          "name": "RESOURCE_NOT_FOUND",
          "id": "23423312-00b1-4347-bb44-e8dcd15bce12",
          "message": "The requested resource cannot be found",
          "time": "2023-06-01T19:36:32.405Z",
          "errors": [
            {
              "keyword_location": "request path",
              "in": "path",
              "message": "The requested resource cannot be found"
            }
          ],
          "links": [
            {
              "href": "https://developer.svb.com/errors/RESOURCE_NOT_FOUND",
              "rel": "error_details",
              "enc_type": "application/json"
            }
          ]
        }
      }
    },
    "parameters": {
      "x-jws-signature": {
        "name": "x-jws-signature",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "JWS represents signed content using JSON data structures and base64url encoding consisting of three parts - the JWS Header that describes the signature method and parameters employed, the JWS Payload being the message content to be secured and lastly the JWS Signature to ensure the integrity of these two. JWS Header: For a JWS, the members of the JSON object(s) representing the JOSE Header describe the digital signature or MAC applied to the JWS Protected Header and the JWS Payload and optionally additional properties of the JWS. The JWS Header contains below parameters The \"typ\" (type) Header Parameter is used by JWS applications to declare the media type 'jose' of this complete JWS. This is intended for use by the application when more than one kind of object could be present in an application data structure that can contain a JWS The \"alg\" (algorithm) Header Parameter identifies the cryptographic algorithm used to secure the JWS. We use symmetric algorithm HS256. The \"kid\" (key ID) Header Parameter is a hint indicating which key was used to secure the JWS. JWS Payload The payload is from payment body of the POST call, a JSON object. JWS Signature: Concatenation of Header and Payload, signed with HS256. Note:For more information refer rfc7515.",
        "required": true
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "2",
          "minLength": 1,
          "pattern": "^[0-9]+$",
          "default": "1"
        },
        "description": "offset"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "50",
          "maxLength": 2,
          "minLength": 1,
          "pattern": "^[0-9]+$",
          "default": "25"
        },
        "description": "Maximum number of records per page"
      }
    }
  },
  "servers": [
    {
      "url": "https://dev.api.svb.com",
      "description": "Dev"
    },
    {
      "url": "https://qa.api.svb.com",
      "description": "QA"
    },
    {
      "url": "https://uat.api.svb.com",
      "description": "UAT"
    },
    {
      "url": "https://api.svb.com",
      "description": "PRD"
    }
  ]
}