basePath: /v1
definitions:
  doc.V2ContactReq:
    properties:
      avatar:
        example: https://some.image.url.com/img.jpg
        format: url
        type: string
      custom:
        type: object
      display_name:
        example: John Smith
        type: string
      email:
        example: john.s@heymarket.com
        format: email
        type: string
      first:
        example: John
        type: string
      last:
        example: Smith
        type: string
      phone:
        example: "12345678900"
        format: phone
        type: string
      assignee_id:
        example: 42
        type: integer
      tags:
        example: [{tag_id: 1}, {tag_id: 2}]
        type: array
      is_opted_out:
        example: true
        type: boolean
    type: object
  doc.V2CreateUpdateResp:
    properties:
      id:
        type: integer
      rev:
        type: integer
      uuid:
        type: string
    type: object
  doc.V2TemplateReq:
    properties:
      archived:
        type: boolean
      content:
        type: string
      id:
        type: integer
      local_id:
        type: string
      team_id:
        type: integer
      title:
        type: string
    type: object
  doc.Attachment:
    properties:
      name:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  doc.Contact:
    properties:
      avatar:
        type: string
      created:
        type: string
      creator_id:
        type: integer
      custom:
        type: object
      display_name:
        type: string
      email:
        type: string
      external_id:
        type: string
      external_ref:
        type: string
      first:
        type: string
      id:
        type: integer
      inbox_id:
        type: integer
      last:
        type: string
      note:
        items:
          $ref: "#/definitions/doc.ContactNote"
        type: array
      op:
        type: string
      parent_id:
        type: integer
      phone:
        type: string
      rev:
        type: integer
      shared:
        type: boolean
      team_id:
        type: integer
      type:
        type: string
      updated:
        type: string
      assigned_user_id:
        type: integer
      tags:
        type: array
    type: object
  doc.ContactField:
    properties:
      id:
        type: integer
      op:
        type: string
      rev:
        type: integer
      tid:
        type: integer
      title:
        type: string
      uid:
        type: integer
    type: object
  doc.ContactStatusResponse:
    properties:
      id:
        type: integer
        example: 10000
      phone:
        example: "12345678900"
        format: phone
        type: string
      unsubscribed:
        example: false
        type: boolean
      blocked:
        example: false
        type: boolean
    type: object
  doc.ContactStatusRequest:
    properties:
      id:
        example: 10000
        type: integer
      phone:
        example: "12345678900"
        format: phone
        type: string
    type: object
  doc.ContactSetStatusRequest:
    properties:
      id:
        example: 10000
        type: integer
      phone:
        example: "12345678900"
        format: phone
        type: string
      status:
        example: "active"
        type: string
    type: object
  doc.ContactNote:
    properties:
      date:
        type: string
      id:
        type: string
      name:
        type: string
      text:
        type: string
      user_id:
        type: integer
    type: object
  doc.Conversation:
    properties:
      assigned:
        type: integer
      blocked:
        type: boolean
      channel:
        type: string
      created:
        type: string
      creator:
        type: integer
      email_noti:
        type: boolean
      id:
        type: integer
      inbox:
        type: integer
      last_inbound:
        type: integer
      local_id:
        type: string
      members:
        items:
          $ref: "#/definitions/doc.ConversationMember"
        type: array
      muted:
        type: boolean
      name:
        type: string
      noreply:
        type: string
      op:
        type: string
      read:
        type: integer
      replied:
        type: boolean
      snooze_till:
        type: string
      status:
        type: string
      super:
        type: integer
      support:
        type: boolean
      target:
        type: string
      type:
        type: string
      updated:
        type: string
    type: object
  doc.ConversationMember:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  doc.CustomMessageContent:
    properties:
      data:
        items:
          type: integer
        type: array
      type:
        type: string
    type: object
  doc.GalleryContent:
    properties:
      gallery:
        items:
          $ref: "#/definitions/doc.GalleryEntry"
        type: array
      text:
        type: string
    type: object
  doc.GalleryEntry:
    properties:
      annotation_position:
        type: string
      annotation_text:
        type: string
      original_url:
        type: string
      url:
        type: string
    type: object
  doc.Inbox:
    properties:
      allowed_domains:
        items:
          type: string
        type: array
      auto_assignable:
        type: boolean
      bco_chats:
        type: boolean
      forward_number:
        type: string
      id:
        type: integer
      invited:
        items:
          type: string
        type: array
      members:
        items:
          type: integer
        type: array
      name:
        type: string
      op:
        type: string
      phone:
        type: string
      phones:
        items:
          type: string
        type: array
      rev:
        type: integer
      team:
        type: integer
      widget_code:
        type: string
      widget_settings:
        $ref: "#/definitions/doc.WidgetSettings"
        type: object
    type: object
  doc.TeamUser:
    properties:
      id:
        type: integer
      phone:
        type: string
      name:
        type: string
      email:
        type: string
      role_id:
        type: integer
      created_at:
        type: string
      updated_at:
        type: string
      user_created_at:
        type: string
      user_updated_at:
        type: string
      team_id:
        type: integer
    type: object
  doc.Team:
    properties:
      id:
        type: integer
      name:
        type: string
      list_size:
        type: integer
      members:
        items:
          $ref: "#/definitions/doc.Member"
        type: array
    type: object
  doc.Member:
    properties:
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  doc.List:
    properties:
      archived:
        type: boolean
      created:
        type: string
      creator_id:
        type: integer
      id:
        type: integer
      local_id:
        type: string
      name:
        type: string
      op:
        type: string
      rev:
        type: integer
      shared:
        type: boolean
      targets:
        type: object
      team_id:
        type: integer
      updated:
        type: string
    type: object
  doc.Message:
    properties:
      author:
        type: string
      broadcast_id:
        type: integer
      conversation:
        $ref: "#/definitions/doc.Conversation"
        type: object
      custom:
        $ref: "#/definitions/doc.CustomMessageContent"
        type: object
      date:
        type: string
      flagged:
        type: boolean
      id:
        type: integer
      link_url:
        type: string
      local_id:
        type: string
      media:
        type: string
      phone:
        type: string
      status:
        type: string
      super:
        type: integer
      support:
        type: boolean
      target:
        type: string
      text:
        type: string
      type:
        type: string
      updated:
        type: string
      user:
        type: integer
    type: object
  doc.Scheduled:
    properties:
      created:
        type: string
      execute:
        type: string
      id:
        type: integer
      inbox_id:
        type: integer
      local_id:
        type: string
      meta:
        $ref: "#/definitions/doc.ScheduledMetadata"
        type: object
      op:
        type: string
      rev:
        type: integer
      updated:
        type: string
    type: object
  doc.ScheduledContent:
    properties:
      attachments:
        items:
          $ref: "#/definitions/doc.Attachment"
        type: array
      gallery:
        items:
          $ref: "#/definitions/doc.GalleryEntry"
        type: array
      local_day:
        type: integer
      local_time:
        type: string
      offset:
        type: integer
      template:
        type: integer
      text:
        type: string
      to:
        type: string
    type: object
  doc.ScheduledMetadata:
    properties:
      campaign_id:
        type: integer
      campaign_step_id:
        type: integer
      campaign_target_phone:
        description: |
          Only internal, shouldn't be delivered to users as not on scheduled message objects.
        type: string
      content:
        $ref: "#/definitions/doc.ScheduledContent"
        type: object
      conversation_id:
        type: integer
      list_id:
        type: integer
    type: object
  doc.Template:
    properties:
      archived:
        type: boolean
      content:
        $ref: "#/definitions/doc.GalleryContent"
        type: object
      created:
        type: string
      creator_id:
        type: integer
      id:
        type: integer
      local_id:
        type: string
      name:
        type: string
      op:
        type: string
      rev:
        type: integer
      shared:
        type: boolean
      team_id:
        type: integer
      updated:
        type: string
    type: object
  doc.V2ListReq:
    properties:
      add_phone:
        example: "14155550102"
        format: phone
        type: string
      archived:
        example: false
        type: boolean
      local_id:
        example: 05debcb7-ce28-482e-a04b-effaf6210b11
        type: string
      members:
        type: object
      remove_phone:
        example: "14155550102"
        format: phone
        type: string
      title:
        example: My VIP list
        type: string
    type: object
  doc.V2ScheduleReq:
    properties:
      _:
        type: integer
      content:
        $ref: "#/definitions/doc.ScheduledContent"
        type: object
      conversation_id:
        type: integer
      execute_at:
        type: string
      inbox_id:
        type: integer
      list_id:
        type: integer
      local_id:
        type: string
      phone_number:
        type: string
      user_id:
        type: integer
    type: object
  doc.WidgetSettings:
    properties:
      background_color:
        type: string
      button_color:
        type: string
      fab_background_color:
        type: string
      fab_text_color:
        type: string
      message:
        type: string
      name:
        type: string
      phone:
        type: string
      position:
        type: integer
      preview_enabled:
        type: boolean
      title_background_color:
        type: string
      title_text_color:
        type: string
      tos:
        type: string
    type: object
  doc.MarkMessageRequest:
    properties:
      inbox_id:
        type: integer
      user_id:
        type: integer
      target:
        type: string
      reassign_id:
        type: integer
  doc.OpenCloseConversationRequest:
    properties:
      chat_id:
        type: integer
      inbox_id:
        type: integer
      target:
        type: string
      user_id:
        type: integer
    type: object
    example:
        chat_id: 1
        inbox_id: 1
        target: "14151234567"
        user_id: 1
  doc.TransferConversationRequest:
    properties:
      conversation_id:
        type: integer
      transfer_inbox_id:
        type: integer
    type: object
    example:
        conversation_id: 1
        transfer_inbox_id: 1
  doc.Survey:
    properties:
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      question:
        type: string
      created:
        type: string
      updated:
        type: string
    type: object
  doc.V2TagReq:
    properties:
      tag:
        type: string
      color:
        type: string
    type: object
  doc.Tag:
    properties:
      id:
        type: integer
      team_id:
        type: integer
      tag:
        type: string
      color:
        type: string
      rev:
        type: integer
      created:
        type: string
      updated:
        type: string
    type: object

  pagination.V2PaginationParams:
    properties:
      archived:
        type: boolean
      ascending:
        type: boolean
      assigned:
        type: integer
      date:
        type: string
      filter:
        type: string
      id:
        type: integer
      limit:
        type: integer
      order:
        type: string
      page:
        type: integer
      parent_id:
        type: integer
    type: object
  pagination.V2PageLimitParams:
    properties:
      limit:
        type: integer
      page:
        type: integer
    type: object
  server.MessageSendReq:
    properties:
      activity_id:
        type: string
      chat_id:
        type: integer
      creator_id:
        type: integer
      inbox_id:
        type: integer
      list_id:
        type: integer
      local_id:
        type: string
      media_url:
        type: string
      phone_number:
        type: string
      template_id:
        type: integer
      text:
        type: string
    type: object
  server.MessageSendResponse:
    properties:
      date:
        type: string
      gallery_url:
        type: string
      id:
        type: integer
    type: object
host: api.heymarket.com
info:
  contact:
    email: help@heymarket.com
    name: API Support
    url: https://heymarket.com
  description: |
    Welcome to Heymarket’s API! Many users access Heymarket via the web app, mobile apps, or one of the out-of-the-box platform integrations.
    However, much of Heymarket’s functionality can also be accessed via the API.
    The flexibility and scalability of the API makes it an excellent choice for integrating Heymarket into existing applications.

    This documentation provides details on: available authentication methods, endpoints that are available and error message information.

    If you want to get right to the action, download the collection to start performing calls from Postman or other similar software.

    All valid HTTP request and response bodies are encoded in JSON. For security purposes API requests must be made over HTTPS. Calls made over plain HTTP or without authentication will fail.

    Base URL: https://api.heymarket.com

    # Rate Limit
    The Heymarket API has a rate limit of 500 requests per minute. Exceeding the rate limit will result in responses with a 429 status code.

    # Request IDs
    Each API request has an associated request identifier. You can find this value in the response headers, under `X-Request-Id`.
    If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    # Webhooks
    You can read more about [getting started with webhooks](https://help.heymarket.com/hc/en-us/articles/4416494130701-Getting-Started-with-Webhooks) from our articles collection.
  license:
    name: Heymarket
    url: https://heymarket.com/legal
  termsOfService: https://heymarket.com/tos
  title: Heymarket API
  version: "1.0"

tags:
  - name: Inboxes
    description: |
      The `Inbox` object represents a read only view of the team's inbox(es) in Heymarket.

      Any API requests that deal with message sending or scheduling will require an inbox ID as a parameter.

      #### The Inbox object

      | Attributes | Description                                                           |
      | ---------- | --------------------------------------------------------------------- |
      | `id`       | Unique identifier for the object                                      |
      | `name`    | Name of the inbox                                                     |
      | `team`     | Unique identifier for your team                                        |
      | `members`  | Unique identifier for your team members who have access to the inbox |
      | `phones`   | Heymarket phone number(s) associated with the inbox                    |

  - name: Users
    description: |
      The `User` object represents a team user in Heymarket.

      #### The User object

      | Attributes         | Description                                                   |
      | ------------------ | ------------------------------------------------------------- |
      | `id`               | Unique identifier for the object                              |
      | `name`             | Name of the user                                              |
      | `email`            | Email address of the user                                     |
      | `phone`            | Phone number of the user                                      |
      | `role_id`          | Unique identifier of the role of the user within the team     |
      | `team_id`          | Unique identifier for the team the user belongs to            |
      | `created_at`       | Creation date of the team user                                |
      | `updated_at`       | Last updated date of the team user                            |
      | `user_created_at`  | Creation date of the base user                                |
      | `user_updated_at`  | Last updated date of the base user                            |

  - name: Team
    description: |
      The `Team` object represents a read only view of the team in Heymarket.

      #### The Team object

      | Attributes | Description                                                           |
      | ---------- | --------------------------------------------------------------------- |
      | `id`       | Unique identifier for the object                                      |
      | `name`    | Name of the team                                                     |
      | `list_size` | List size limit
      | `members`  | Unique identifiers for the users who have access to the team as well as their role within the team|

  - name: Contacts
    description: |
      The `Contact` object is a Heymarket contact. The contacts in Heymarket are used for storing information such as name, phone number, and email address. Contacts also store custom fields which can be used for search, list creation, and merge tokens while sending messages.

      #### The Contact object

      | Attributes         | Description                                                                |
      | ------------------ | -------------------------------------------------------------------------- |
      | `id`               | Unique identifier for the object                                           |
      | `display_name`     | Display name, usually a combination of first and last name                 |
      | `first`            | First name                                                                 |
      | `last`             | Last name                                                                  |
      | `email`            | Email address                                                              |
      | `phone`            | Phone number                                                               |
      | `custom`           | Custom fields with value if present, only lists contact field ID and value |
      | `team_id`          | Unique identifier for your Heymarket team                                  |
      | `creator_id`       | Unique identifier for the user who created the contact, same as the member ID returned by Get Inboxes                        |
      | `shared`           | Boolean value for whether the contact is shared with team members          |
      | `created`          | Creation date                                                              |
      | `updated`          | Last updated date                                                          |
      | `rev`              | Last revision number                                                       |
      | `op`               | Operation performed                                                        |
      | `assigned_user_id` | Contact Owner ID                                                           |
      | `tags`             | Array of up to 5 `tag_id` objects                                                         |
      | `is_opted_out`     | Is this contact opted out of messaging?                                    |

  - name: Lists
    description: |
      The `List` object in Heymarket is used for organizing multiple phone numbers. You can send a single message to a list, the contacts will never see each other and can reply privately. Lists are also used as a source of contacts for your campaigns.

      #### The List object

      | Attributes   | Description                                         |
      | ------------ | --------------------------------------------------- |
      | `id`         | Unique identifier for the object                    |
      | `name`       | List name                                           |
      | `local_id`   | Client provided unique identifier for the object    |
      | `targets`    | Object containing multiple `ListTarget` objects     |
      | `team_id`    | Unique identifier for your Heymarket team            |
      | `creator_id` | Unique identifier for the user who created the list |
      | `shared`     | If the list is shared with team members                    |
      | `created`    | Creation date                                       |
      | `updated`    | Last updated date                                   |
      | `rev`        | Last revision number                                |
      | `op`         | Operation performed                                        |

      The `targets` object is a light weight representation of a contact. `phone` is used as a key and it has name fields as optional attributes which will be used as a merge token during message sending if there is no real Heymarket contact available for this phone number.

      #### The ListTarget object

      | Attributes | Description             |
      | ---------- | ----------------------- |
      | `f`        | First name (if available) |
      | `l`        | Last name (if available)  |

  - name: Templates
    description: |
      The `Template` object in Heymarket is a pre-defined message with text and media. Templates can also contain merge tokens which will insert the appropriate custom field values when sending the message. The main body of the template is stored in the `content` attribute.

      #### The Template object

      | Attributes   | Description                                         |
      | ------------ | --------------------------------------------------- |
      | `id`         | Unique identifier for the object                    |
      | `name`       | Template name                                       |
      | `local_id`   | Client provided unique identifier for the object    |
      | `content`    | Object representing template content                |
      | `team_id`    | Unique identifier for your Heymarket team            |
      | `creator_id` | Unique identifier for the user who created the template, same as the member ID returned by Get Inboxes |
      | `shared`     | If the template is shared with team members                |
      | `created`    | Creation date                                       |
      | `updated`    | Last updated date                                   |
      | `rev`        | Last revision number                                |
      | `op`         | Operation performed                                        |

      #### The Content object

      | Attributes | Description                     |
      | ---------- | ------------------------------- |
      | `text`     | Message text                    |
      | `gallery`  | Array of `GalleryEntry` objects |

  - name: Messages
    description: |
      The `Messages` API is a powerful Heymarket feature. With it you can send messages to individual contacts or a list of contacts.
      It has all the features of Heymarket's native clients, including sending messages from a template, sending media, and inserting merge tokens.
  - name: Schedule
    description: |
      With the `Scheduling` API you can schedule a message to be sent to an individual contact or to a list.
  - name: Surveys
    description: |
      Ask your customers a set of standardized questions to quickly understand their experience with your company.
  - name: Tags
    description: |
      The `Tag` object in Heymarket.
      #### The Tag object
      | Attributes   | Description                                         |
      | ------------ | --------------------------------------------------- |
      | `id`         | Unique identifier for the object                    |
      | `tag`        | Tag name                                            |
      | `color`      | Color                                               |
      | `team_id`    | Unique identifier for your Heymarket team           |
      | `created`    | Creation date                                       |
      | `updated`    | Last updated date                                   |
      | `rev`        | Last revision number                                |
paths:
  /inboxes:
    get:
      consumes:
        - application/json
      description: Get all the Inbox objects associated with your team.
      produces:
        - application/json
      responses:
        "200":
          description: Inboxes in a team
          schema:
            items:
              $ref: "#/definitions/doc.Inbox"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Inboxes
      tags:
        - Inboxes
  /users/get:
    get:
      consumes:
        - application/json
      description: |
        Get User objects associated with your team either by email or by phone.
        
        #### Request body attributes
        
        | Attributes | Description                                                                                                                                                                                      |
        | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
        | `phone`    | **array of strings (optional)** <br>Phone numbers of users to search for within the team.<br> [E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434).|
        | `email`    | **array of strings (optional)** <br>Email addresses of users to search for within the team.                                                                                                      |
         
        A list of your team users will be returned within the `memberships` attribute.
        
        #### Example of Request body for `User` get
        Basic `/users/get` request body:
        ```json
        
            {
              "phone": ["15105553344", "15105553345"],
              "email": ["help@heymarket.com", "example@heymarket.com"]
            }
        
        ```
      parameters:
        - description: User fetch json
          in: body
          name: params
          required: true
          schema:
            type: object
            properties:
              phone:
                type: array
                items:
                  type: string
              email:
                type: array
                items:
                  type: string
            example:
              phone:
                - "15105553344"
                - "15105553345"
              email:
                - "help@heymarket.com"
                - "example@heymarket.com"
      produces:
        - applications/json
      responses:
        200:
          description: Team user information
          schema:
            type: object
            properties:
              memberships:
                type: array
                items:
                  type: object
                  $ref: "#/definitions/doc.TeamUser"
          examples:
            applications/json:
              memberships:
                - id: 1
                  phone: "12345678900"
                  name: "John Doe"
                  email: "john.doe@email.com"
                  role_id: 1
                  created_at: "2018-01-01T00:00:00Z"
                  updated_at: "2018-01-01T00:00:00Z"
                  user_created_at: "2018-01-01T00:00:00Z"
                  user_updated_at: "2018-01-01T00:00:00Z"
                  team_id: 1
        400:
          description: bad_data/error
          schema:
            type: string
          examples:
            applications/json: error
      security:
        - Bearer: [ ]
      summary: Get Users
      tags:
        - Users
  /users/update:
    post:
      consumes:
        - application/json
      description: |
        Update User objects associated with your team.
        
        #### Request body attributes
        
        | Attributes | Description |
        | --- | --- |
        | `users` | **array of update user objects (required)** <br>Array of update user objects. |
       
        #### Update user object attributes

        | Attributes | Description |
        | --- | --- |
        | `id` | **integer (required)** <br>Unique identifier for the object. |
        | `first_name` | **string (optional)** <br>Updated first name of the user.<br>`first_name` is linked to `last_name` and should be provided together or one will be overwritten. |
        | `last_name` | **string (optional)** <br>Updated last name of the user.<br>`last_name` is linked to `first_name` so both should be provided at all times or one will be overwritten. |
        | `email` | **string (optional)** <br>Updated email address of the user. |
        | `phone` | **string (optional)** <br>Updated phone number of the user.<br> [E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). |
        | `role_id` | **integer (optional)** <br>Updated unique identifier of the team user role. |
        
        A list of your updated team users will be returned within the `memberships` attribute.
        
        #### Example of Request body for `User` update
        Basic `/users/update` request body:
        ```json
          
            {
              "users": [
                {
                  "id": 1,
                  "first_name": "John",
                  "last_name": "Doe"
                },
                {
                  "id": 2,
                  "role_id": 4
                }
              ]
            }
        
        ```
      parameters:
        - description: User fetch json
          in: body
          name: params
          required: true
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                    phone:
                      type: string
                    role_id:
                      type: integer
            example:
              users:
                - id: 1
                  first_name: "John"
                  last_name: "Doe"
                - id: 2
                  role_id: 4
      produces:
        - applications/json
      responses:
        200:
          description: Updated team user information
          schema:
            type: object
            properties:
              memberships:
                type: array
                items:
                  type: object
                  $ref: "#/definitions/doc.TeamUser"
          examples:
            applications/json:
              memberships:
                - id: 1
                  phone: "12345678900"
                  name: "John Doe"
                  email: "john.doe@email.com"
                  role_id: 1
                  created_at: "2018-01-01T00:00:00Z"
                  updated_at: "2018-01-01T00:00:00Z"
                  user_created_at: "2018-01-01T00:00:00Z"
                  user_updated_at: "2018-01-01T00:00:00Z"
                  team_id: 1
        400:
          description: bad_data/error
          schema:
            type: string
          examples:
            applications/json: error
      security:
        - Bearer: [ ]
      summary: Update Users
      tags:
        - Users
  /team:
    get:
      consumes:
        - application/json
      description: Get the object of the Heymarket team.
      produces:
        - application/json
      responses:
        "200":
          description: Team Object
          schema:
            $ref: "#/definitions/doc.Team"
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Team
      tags:
        - Team
  /contact:
    post:
      consumes:
        - application/json
      description: |
        Create a contact in your team.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `phone` | **string (required)** <br> [E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). |
        | `first` | **string (optional)** <br> First name. |
        | `last` | **string (optional)** <br> Last name. |
        | `display_name` | **string (optional)** <br> Display name, usually combination of first and last name unless a different name is provided. |
        | `email` | **string (optional)** <br> Email address|
        | `custom` | **object (optional)** <br> Contact custom fields. It is an Object of custom field ID and values. |
        | `avatar` | **string (optional)** <br> URL for the Avatar image |
        | `assignee_id` | **integer (optional)** <br> Contact Owner ID. It is the ID of a team member. <br> Use `-1` to unassign the Contact Owner. |
        | `tags` | **array of up to 5 `tag_id` objects (optional)** <br>  Contact tags. |
        | `is_opted_out` | **boolean** <br> Is this contact opted out of messaging? |

        A list of your team contact custom fields can be fetched from `/v1/contact-fields`.

        #### Example of Request body for `Contact` create
        Basic contact request body:
        ```json
        
            {
              "phone": "15105553344",
              "last": "Contact",
              "first": "API",
              "display_name": "API Contact",
              "email": "help@heymarket.com",
              "custom": {},
              "is_opted_out": true
            }
        
        ```
      parameters:
        - description: Contact json
          in: body
          name: contact
          required: true
          schema:
            $ref: "#/definitions/doc.V2ContactReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: error
          schema:
            type: string
      security:
        - Bearer: []
      summary: Create Contact
      tags:
        - Contacts
  /contact/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a Contact by its ID.
      parameters:
        - description: Contact ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Delete Contact
      tags:
        - Contacts
    get:
      consumes:
        - application/json
      description: Get a Contact by its ID.
      parameters:
        - description: Contact ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Contact"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Contact
      tags:
        - Contacts
    put:
      consumes:
        - application/json
      description: Update a Contact by its ID.
      parameters:
        - description: Contact ID
          in: path
          name: id
          required: true
          type: integer
        - description: Contact json
          in: body
          name: contact
          required: true
          schema:
            $ref: "#/definitions/doc.V2ContactReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Update Contact
      tags:
        - Contacts
  /contact-fields:
    post:
      consumes:
        - application/json
      description: |
        Get all your contact custom fields for your team.
        Does not use pagination. Request consists of an empty JSON body.

        #### Custom Field Object

        | Attributes | Description |
        | --- | --- |
        | `id` | Unique identifier for the object |
        | `title` | field name |
        | `tid` | Unique identifier for your Heymarket team |
        | `uid` | Unique identifier for the user who created the Custom Field |
        | `rev` | Last revision number |
        | `op` | Operation performed |

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of Contact fields in a team
          schema:
            items:
              $ref: "#/definitions/doc.ContactField"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Contact fields List
      tags:
        - Contacts
  /contact-fields/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all contact fields from a team that would be returned with the query parameters provided.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of contact fields in team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Contact-field Count
      tags:
        - Contacts
  /contact/get:
    post:
      consumes:
        - application/json
      description: |
        Fetch a contact by Heymarket ID or contact phone.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `phone` | **string (optional)** <br> Phone number of the contact in this team you want to fetch. |
        | `id` | **string (optional)** <br> Heymarket ID of the contact you want to fetch. |

      parameters:
        - description: Contact json
          in: body
          name: contact
          required: true
          schema:
            $ref: "#/definitions/doc.V2ContactReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Contact in team
          schema:
            $ref: "#/definitions/doc.Contact"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Contact
      tags:
        - Contacts
  /contacts:
    post:
      consumes:
        - application/json
      description: |
        Get all the contacts for a team. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the 30 most recent Contacts.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html)  format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of Contacts in team
          schema:
            items:
              $ref: "#/definitions/doc.Contact"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Contact
      tags:
        - Contacts
  /contacts/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all contacts from a team that would be returned with the query parameters provided.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html)  format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of Contacts in team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Contact count
      tags:
        - Contacts
  /contact/status:
    post:
      consumes:
        - application/json
      description: |
        Get the status of a given contact to see if they are unsubscribed and/or blocked.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `id` | **integer (required without `phone`)** <br> Heymarket ID of the contact status you want to fetch. |
        | `phone` | **string (required without `id`)** <br> Phone number of the contact whose status you want to fetch. |

      parameters:
        - description: Heymarket ID of the contact
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.ContactStatusRequest"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Status of the contact
          schema:
            $ref: "#/definitions/doc.ContactStatusResponse"
            type: object
        "400":
          description: error
          schema:
            type: string
      security:
        - Bearer: []
      summary: Contact status
      tags:
        - Contacts
  /contact/set_status:
    post:
      consumes:
        - application/json
      description: |
        Set the status for a contact.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `id` | **integer (required without `phone`)** <br> Heymarket ID of the contact whose status you want to set. |
        | `phone` | **string (required without `id`)** <br> Phone number of the contact whose status you want to set. |
        | `status` | **string (required)** <br> The status to set to (active, blocked, unblocked, subscribed, unsubscribed). |

      parameters:
        - description: Heymarket ID of the contact and status to set
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.ContactSetStatusRequest"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Success response
          schema:
            type: string
        "400":
          description: Bad data provided
          schema:
            type: string
      security:
        - Bearer: []
      summary: Set contact status
      tags:
        - Contacts
  /batch/contacts:
    post:
      consumes:
        - application/json
      description: |
        Create contacts in batch, optionally overwriting any existing records. Any records that were unable to be created (or updated if overwrite = true) will be returned in the response body.

        If all records were successfully created and / or overwritten, responds with "ok".

        #### Request body attributes

        Expecting a JSON array of the following contact definitions:

        | Attributes | Description |
        | --- | --- |
        | `first` | **string (optional)** <br> First name. |
        | `last` | **string (optional)** <br> Last name. |
        | `display_name` | **string (optional)** <br> Display name. |
        | `phone` | **string (optional)** <br> Phone number.<br>[E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). |
        | `email` | **string (optional)** <br> Email address. |
        | `is_opted_out` | **boolean** <br> Is this contact opted out of messaging? |

      parameters:
        - description: Array of json contacts to create
          in: body
          name: contacts
          required: true
          schema:
            items:
              $ref: "#/definitions/doc.V2ContactReq"
            type: array
        - description: Overwrite existing matching contacts
          in: query
          name: overwrite
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        "200":
          description: Contacts not created or overwritten
          schema:
            items:
              $ref: "#/definitions/doc.Contact"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Batch contact create
      tags:
        - Contacts
  /conversations:
    post:
      consumes:
        - application/json
      description: |
        Get all the conversations for a team. Requires paginating to fetch all.

        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `id` | **integer (required)** <br>A User ID in the inbox, used to verify the user belongs to any of the inboxes provided in the `filter` attribute.|
        | `filters` | **object (required)** <br>`inboxes` (integer[], required) The Inbox IDs to include conversations for. <br>`closed` (boolean, optional) Filter by closed conversations <br>`unread` (boolean, optional) Filter by unread conversations for the given user.|
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|


        #### Example request body to paginate `conversations`
        ```json
        
            {
              {
                "date": "2022-01-01T00:00:00+00:00",
                "id": 1111,
                "filters": {
                  "inboxes": [2222,3333],
                  "closed": false,
                  "unread": false
                }
              }
            }
        
        ```
      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of Conversations in team
          schema:
            items:
              $ref: "#/definitions/doc.Conversation"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Conversations
      tags:
        - Conversations
  /conversations/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all conversations from a team that would be returned with the query parameters provided.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of Conversations in team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Conversation count
      tags:
        - Conversations
  /conversations/read:
    post:
      consumes:
        - application/json
      description: |
        Mark the conversation as read
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `inbox_id` | **integer** <br>Unique identifier of the inbox. |
        | `target`   | **string** <br>Phone number corresponding to the conversation to be marked as read.  |
        | `user_id`  | **integer** <br>Unique identifier of the user. |

      parameters:
        - description: Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.MarkMessageRequest"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Marked as Read
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: mark conversation as read
      tags:
        - Conversations
  /conversations/reassign:
    post:
      consumes:
        - application/json
      description: |
        Reassign conversation to another user

        #### Request body attributes

        | Attributes   | Description |
        | ----------   | ----------- |
        | `inbox_id`   | **integer** <br>Unique identifier of the inbox. |
        | `target`     | **string** <br>Phone number corresponding to the conversation to be reassigned. |
        | `user_id`    | **integer** <br>Unique identifier of the user. |
        | `reassign_id`| **integer** <br>Unique identifier of the user to assign to. |
      parameters:
        - description: Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.MarkMessageRequest"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: reassign conversation
      tags:
        - Conversations

  /conversations/unread:
    post:
      consumes:
        - application/json
      description: |
        Mark the conversation as unread
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `inbox_id` | **integer** <br>Unique identifier of the inbox. |
        | `target`   | **string** <br>Phone number corresponding to the conversation to be marked as unread.  |
        | `user_id`  | **integer** <br>Unique identifier of the user. |
      parameters:
        - description: Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.MarkMessageRequest"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Marked as Unread
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: mark conversation as unread
      tags:
        - Conversations
  /conversations/{id}:
    get:
      consumes:
        - application/json
      description: |
        Get Conversation by ID
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `id` | **integer** <br>Unique identifier of the conversation. |
      parameters:
        - description: Conversations ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Conversation"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Conversation by ID
      tags:
        - Conversations
  /conversations/open:
    post:
      consumes:
        - application/json
      description: |
        Mark the conversation as open.
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `chat_id`  | **integer (optional if `target` exists)** <br>Unique identifier of the conversation. |
        | `inbox_id` | **integer (required)** <br>Unique identifier of the inbox. |
        | `target`   | **string (optional if `chat_id` exists)** <br>Generally the phone number corresponding to the conversation to be marked as open.<br>[E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434).  |
        | `user_id`  | **integer (required)** <br>Unique identifier of the user to be marked as the conversation opener. |
        
        #### Example request body to open `conversations`
        ```json
        
            {
              "chat_id": 1,
              "inbox_id": 2,
              "target": "14151234567",
              "user_id": 3
            }
        
        ```
      parameters:
        - description: Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.OpenCloseConversationRequest"
            type: object
      produces:
        - text/html
      responses:
        200:
          description: Marked as open
          schema:
            type: string
          examples:
            text/html: "ok"
        400:
          description: bad_data
          schema:
            type: string
          examples:
            text/html: "bad_data"
        500:
          description: server_error
          schema:
            type: string
          examples:
            text/html: "error"
      security:
        - Bearer: []
      summary: Mark conversation as open
      tags:
        - Conversations
  /conversations/close:
    post:
      consumes:
        - application/json
      description: |
        Mark the conversation as closed/archived.
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `chat_id`  | **integer (optional if `target` exists)** <br>Unique identifier of the conversation. |
        | `inbox_id` | **integer (required)** <br>Unique identifier of the inbox. |
        | `target`   | **string (optional if `chat_id` exists)** <br>Generally the phone number corresponding to the conversation to be marked as closed. <br>[E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). |
        | `user_id`  | **integer (required)** <br>Unique identifier of the user to be marked as the conversation closer. |
        
        #### Example request body to close `conversations`
        ```json
        
            {
              "chat_id": 1,
              "inbox_id": 2,
              "target": "14151234567",
              "user_id": 3
            }
        
        ```

      parameters:
        - description: Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.OpenCloseConversationRequest"
            type: object
      produces:
        - text/html
      responses:
        200:
          description: Marked as closed
          schema:
            type: string
          examples:
            text/html: "ok"
        400:
          description: bad_data
          schema:
            type: string
          examples:
            text/html: "bad_data"
        500:
          description: server_error
          schema:
            type: string
          examples:
            text/html: "error"
      security:
        - Bearer: [ ]
      summary: Mark conversation as closed
      tags:
        - Conversations
  /conversations/transfer:
    post:
      consumes:
        - application/json
      description: |
        Transfer Conversation to another inbox. Conversations currently cannot be transferred to an inbox where the conversation already exists. Only SMS chats are currently supported to be transferred.
        #### Request body attributes

        | Attributes | Description |
        | ---------- | ----------- |
        | `conversation_id` | **integer (required)** <br>Unique identifier of the conversation. |
        | `transfer_inbox_id` | **integer (required)** <br>Unique identifier of the inbox to transfer to. |
        
        #### Example request body to inbox transfer `conversations`
        ```json
        
            {
              "conversation_id": 1,
              "transfer_inbox_id": 2
            }
        
        ```
      parameters:
        - description: Transfer Conversations json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/doc.TransferConversationRequest"
            type: object
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: string
          examples:
            text/html: "ok"
        400:
          description: bad_data
          schema:
            type: string
          examples:
            text/html: "error"
      security:
        - Bearer: [ ]
      summary: Transfer Conversation to another inbox
      tags:
        - Conversations
  /list:
    post:
      consumes:
        - application/json
      description: |
        Create a list in your team.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `title` | **string (required)** <br> List name. |
        | `members` | **object (required)** <br> Object of List targets. |
        | `archived` | **string (optional)** <br> If list is archived. |
        | `add_phone` | **string (optional)** <br> Ignored during creation, `members` should be provided. |
        | `remove_phone` | **string (optional)** <br> Ignored during creation, `members` should be provided.|
        | `local_id` | **string (optional)** <br> Client unique identifier for a list.  |


        #### Example of Request body for `List` creation
        In this example, we create a list with three members, with different fields for the List Targets.
        ```json
        
            {
              "title": "My API List",
              "local_id": "dc3deb9b-940a-444d-9d0e-8e3087a160e9",
              "members": {
                "15105553344": {
                  "l": "api first",
                  "f": "api last"
                },
                "14155555475": {
                  "l": "",
                  "f": "only first"
                },
                "15105551341": {},
              }
            }
        
        ```
      parameters:
        - description: List json
          in: body
          name: list
          required: true
          schema:
            $ref: "#/definitions/doc.V2ListReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Create List
      tags:
        - Lists
  /list/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a list based on its ID.
      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Delete List
      tags:
        - Lists
    get:
      consumes:
        - application/json
      description: Get a list based on its ID.
      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.List"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get List
      tags:
        - Lists
    put:
      consumes:
        - application/json
      description: |
        Update a list in your team based on its ID.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `title` | **string (required)** <br> List name. |
        | `members` | **object (optional)** <br> Object of List targets. <br> During list update `members` will be ignored if `add_phone` or `remove_phone` is provided. |
        | `archived` | **string (optional)** <br> Boolean value for if list is archived. |
        | `add_phone` | **string (optional)** <br> Add a single phone to the list. |
        | `remove_phone` | **string (optional)** <br> Remove single phone from the list.|
        | `local_id` | **string (optional)** <br> Client unique identifier for a list.  |


        #### Example of Request body for `List` update
        We use `add_phone` and `remove_phone` attributes in this example to remove and add a single number to a list.
        ```json
        
            {
              "title": "My API List",
              "local_id": "dc3deb9b-940a-444d-9d0e-8e3087a160e9",
              "add_phone": "14155559999",
              "remove_phone": "15105551341",
            }
        
        ```

      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: integer
        - description: List json
          in: body
          name: list
          required: true
          schema:
            $ref: "#/definitions/doc.V2ListReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Update List
      tags:
        - Lists
  /lists:
    post:
      consumes:
        - application/json
      description: |
        Get all lists in the team. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the most recent 30 Lists.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request. <br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of List objects in a team
          schema:
            items:
              $ref: "#/definitions/doc.List"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Lists
      tags:
        - Lists
  /lists/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all lists from a team that would be returned with the query parameters provided.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of List objects in team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: List count
      tags:
        - Lists
  /messages:
    get:
      consumes:
        - application/json
      description: Get 50 recent messages from a conersation with a target phone number.
      parameters:
        - description: Phone Number
          in: query
          name: phoneNumber
          required: true
          type: string
        - description: Inbox ID
          in: query
          name: inboxID
          required: true
          type: integer
        - description: Latest time to search
          in: query
          name: timestamp
          required: false
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/doc.Message"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get message history from conversation
      tags:
        - Messages
  /messages/all:
    post:
      consumes:
        - application/json
      description: |
        Get all the messages for a team. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the 30 most recent messages.
        To paginate the message send the last timestamp of the last message received in the `created_at` attribute.

        #### Request body attributes

        |  Attributes  | Description |
        | ------------ | ----------- |
        | `created_at` | **string (optional)** <br> Last timestamp fetch messages created on and after this date.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|
        | `order`      | **string (optional)** <br> The field name on which sorting should be performed. Valid values are created_at or updated_at fields.|
        | `ascending`  | **boolean (optional)** <br> True if sort in ascending, default sort is descending order.|
        | `limit`      | **integer (optional)** <br>Messages to return per page, default is 30.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of messages in team
          schema:
            items:
              $ref: "#/definitions/doc.Message"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Message
      tags:
        - Messages
  /messages/all/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all messages for a team that would be returned with the query parameters provided.

        #### Request body attributes

        |  Attributes  | Description |
        | ------------ | ----------- |
        | `created_at` | **string (optional)** <br> Last timestamp, fetch count of messages created on and after this date.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html)  format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of messages in a team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Message Count
      tags:
        - Messages
  /message/send:
    post:
      consumes:
        - application/json
      description: |
        Send a messages to an individual or a list.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `inbox_id` | **integer (required)** <br> Unique identifier for the inbox from which the message will be sent. |
        | `creator_id` | **integer (required)** <br> Unique identifier for the sender, same as the member ID returned by Get Inboxes. |
        | `phone_number` | **string (optional)** <br> [E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). <br> If the message is sent to an individual phone number then only `phone_number` or `chat_id` should be provided.  |
        | `chat_id` | **integer (optional)** <br> Unique identifier for the Heymarket chat.  |
        | `list_id` | **integer (optional)** <br> Unique identifier for the Heymarket List. <br> If the message is sent as a broadcast then `list_id` must be provided. |
        | `text` | **string (optional)** <br> Message text body. |
        | `media_url` | **string (optional)** <br> Message media URL. |
        | `template_id` | **integer (optional)** <br> Unique identifier for the Heymarket template. |
        | `LocalID` | **string (optional)** <br> Client unique identifier for the message. <br> If the message is sent as a broadcast then `local_id` must be provided. |
        | `ActivityID` | **string (optional)** <br> Broadcast activity ID. |
        | `private` | **bool (optional)** <br> To create a private comment (memo) within a Heymarket conversation. |
        | `author` | **string (optional)** <br> Display who the message was sent from. <br>This appears above the chat bubble within a Heymarket conversation. |
        | `survey_id` | **integer (optional)** <br> Send a Survey by passing in this ID. <br> The text of the message will be the opening question of the Survey.  |


        #### Basic example of Request body for an individual message
        ```json
        
            {
              "creator_id": 1,
              "inbox_id": 1,
              "phone_number": "16505551003",
              "text": "My first api message",
              "local_id": "6d8d0429-3f15-4293-8d0b-38bf1dd5ca06"
            }
        
        ```

        #### Basic example of Reequest body for a private message
        ```json
        
            {
              "creator_id": 1,
              "inbox_id": 1,
              "phone_number": "16505551003",
              "text": "My first private api message",
              "private": true,
              "local_id": "6d8d0429-3f15-4293-8d0b-38bf1dd5ca06"
            }
        
        ```

        #### Basic example of Request body for a broadcast message
        ```json
        
            {
              "creator_id": 1,
              "inbox_id": 1,
              "list_id": 5,
              "text": "My first api broadcast",
              "local_id": "5d8d0429-3f15-4293-8d0b-38bf1dd5ca33"
            }
        
        ```
      parameters:
        - description: Message send json
          in: body
          name: message
          required: true
          schema:
            $ref: "#/definitions/server.MessageSendReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/server.MessageSendResponse"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Send Message
      tags:
        - Messages
  /message/hide_toggle/{id}:
    post:
      consumes:
        - application/json
      description: |
        Toggle hidden flag for a message.
      parameters:
        - description: Message ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Message"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: [ ]
      summary: Toggle Hide Message
      tags:
        - Messages
  /schedule:
    post:
      consumes:
        - application/json
      description: |

        Create a scheduled message to a contact or list.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `inbox_id` | **integer (required)** <br> Unique identifier for a inbox from which message will be sent. |
        | `execute_at` | **object (required)** <br> Time at which message will be sent.<br>Should be in 15 min intervals for minutes and at least 15 min from request initiation date. <br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|
        | `phone_number` | **string (optional)** <br> [E.164](https://en.wikipedia.org/wiki/E.164) number format except the plus sign (e.g. 14155553434). <br> If message scheduled to individual phone number then only `phone_number` or `conversation_id` should be provided.  |
        | `conversation_id` | **integer (optional)** <br> Unique identifier of Heymarket chat.  |
        | `list_id` | **integer (optional)** <br> Unique identifier of Heymarket List. <br> If message scheduled as a broadcast than `list_id` should be provided. |
        | `content` | **object (required)** <br>  `ScheduledContent` Object. |
        | `local_id` | **string (optional)** <br> Client unique identifier for a scheduled message.  |
        | `user_id` | **integer (optional)** <br> User ID for the sender of the message. User must be a member of the specified Inbox. <br> Defaults the sender to the Team owner.|

        #### Example of Request body for `Schedule` creation
        In this example we create a scheduled message to `14155553434` to be sent on July 24, 2019 at 11:30 am PST.
        ```json
        
            {
              "local_id": "f4bb74f2-7827-4a61-83c1-04164338fb6f",
              "content": {
                "text": "api scheduled message",
                "to": "14155553434"
              },
              "phone_number": "14155553434",
              "inbox_id": 413,
              "execute_at": "2019-07-24T11:30:00-07:00",
            }
        
        ```
      parameters:
        - description: Schedule json
          in: body
          name: schedule
          required: true
          schema:
            $ref: "#/definitions/doc.V2ScheduleReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Create Schedule
      tags:
        - Schedule
  /schedule/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a schedule based on its ID.
      parameters:
        - description: Schedule ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Delete Schedule
      tags:
        - Schedule
    get:
      consumes:
        - application/json
      description: Get an existing schedule by its ID.
      parameters:
        - description: Schedule ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Scheduled"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Schedule
      tags:
        - Schedule
    put:
      consumes:
        - application/json
      description: Update a schedule based on a schedule JSON.
      parameters:
        - description: Schedule ID
          in: path
          name: id
          required: true
          type: integer
        - description: Schedule json
          in: body
          name: schedule
          required: true
          schema:
            $ref: "#/definitions/doc.V2ScheduleReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Schedule update
      tags:
        - Schedule
  /template:
    post:
      consumes:
        - application/json
      description: |
        Create a template in the team.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `title` | **string (required)** <br> Template name. |
        | `content` | **object (required)** <br>  `GalleryContent` Object. |
        | `archived` | **string (optional)** <br> If the template is archived. |
        | `local_id` | **string (optional)** <br> Client unique identifier for a list.  |

        #### Example of Request body for `Template` creation
        In this example we create a template with the `first_name` and `last_name` merge tokens.
        ```json
        
            {
              "title": "My first template over the API",
              "local_id": "88ae517b-ff42-4ef2-958d-86b27db6b21c",
              "content": {
                "text": "Hey {{first_name}}  {{last_name}}, I created this template with the Heymarket API.\nYour name was populated from merge tokens."
              },
              "archived": false
            }
        
        ```

      parameters:
        - description: Template json
          in: body
          name: body
          required: true
          schema:
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Create Template
      tags:
        - Templates
  /template/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a template by its ID.
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Delete Template
      tags:
        - Templates
    get:
      consumes:
        - application/json
      description: Get a template by its ID.
      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Template"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Template
      tags:
        - Templates
    put:
      consumes:
        - application/json
      description: |
        Update a template in your team based on its ID.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `title` | **string (required)** <br> Template name. |
        | `content` | **object (required)** <br>  `GalleryContent` Object. |
        | `archived` | **string (optional)** <br> If the template is archived. |
        | `local_id` | **string (optional)** <br> Client unique identifier for a template.  |


        #### Example of Request body for `Template` update
        In this example, we add an image to the template.
        ```json
        
            {
              "title": "My first template over api's",
              "local_id": "88ae517b-ff42-4ef2-958d-86b27db6b21c",
              "content": {
                "text": "Hey {{first_name}}  {{last_name}}, I created this template with Heymarket API's.\nYour name was populated from merge tokens.\n\n\nMight as well add an image",
                "gallery": [{
                  "url": "https://embrace-uploads-mms.s3.us-west-1.amazonaws.com/2ca6e36c-f04e-4ee8-8eb3-7026df4b2225/img.jpg",
                  "original_url": "https://embrace-uploads-mms.s3.us-west-1.amazonaws.com/2ca6e36c-f04e-4ee8-8eb3-7026df4b2225/img.jpg"
                }]
              },
              "archived": false
            }
        
        ```

      parameters:
        - description: Template ID
          in: path
          name: id
          required: true
          type: integer
        - description: Template json
          in: body
          name: template
          required: true
          schema:
            $ref: "#/definitions/doc.V2TemplateReq"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Update Template
      tags:
        - Templates
  /templates:
    post:
      consumes:
        - application/json
      description: |
        Get all the templates in the team. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the most recent 30 Templates.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html) format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of Templates in a team
          schema:
            items:
              $ref: "#/definitions/doc.Template"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Templates
      tags:
        - Templates
  /templates/count:
    post:
      consumes:
        - application/json
      description: |
        Get the count of all templates from a team that would be returned with the query parameters provided.

        #### Request body attributes

        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html)  format.|

      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: count of Templates in team
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Template count
      tags:
        - Contacts
  /survey/{id}:
    get:
      description: Get the Survey object for a given ID.
      parameters:
        - description: Survey ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Survey Object
          schema:
            $ref: "#/definitions/doc.Survey"
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Get Survey
      tags:
        - Surveys
  /surveys:
    post:
      consumes:
        - application/json
      description: |
        Get all the Surveys in the team, ordered by last created descending. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the most recent 30 Surveys.
      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PageLimitParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: Array of Surveys in a team
          schema:
            items:
              $ref: "#/definitions/doc.Survey"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: []
      summary: Paginate Surveys
      tags:
        - Surveys
  /tag:
    post:
      consumes:
        - application/json
      description: |
        Create a tag in the team.
        
        #### Request body attributes
        
        | Attributes | Description |
        | --- | --- |
        | `tag` | **string (required)** <br> Tag name. |
        | `color` | **string (optional)** <br> Color. |
        
        #### Example of Request body for `Tag` creation
        ```json
        
            {
              "tag": "tag1"
            }
        
        ```
      parameters:
        - description: Tag json
          in: body
          name: body
          required: true
          schema:
            type: object
            $ref: "#/definitions/doc.V2TagReq"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.V2CreateUpdateResp"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: [ ]
      summary: Create Tag
      tags:
        - Tags
  /tag/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a tag by its ID.
      parameters:
        - description: Tag ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: [ ]
      summary: Delete Tag
      tags:
        - Tags
    get:
      consumes:
        - application/json
      description: Get a tag by its ID.
      parameters:
        - description: Tag ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/doc.Tag"
            type: object
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: [ ]
      summary: Get Tag
      tags:
        - Tags
  /tags:
    post:
      consumes:
        - application/json
      description: |
        Get all the tags in the team. Requires paginating to fetch all.
        Sending a request with empty JSON body will return the most recent 30 Tags.
        #### Request body attributes
        | Attributes | Description |
        | --- | --- |
        | `date` | **string (optional)** <br> Last timestamp, usually `updated` attribute of last returned item from request.<br>[RFC 3339](http://www.faqs.org/rfcs/rfc3339.html)  format.|
      parameters:
        - description: Pagination json
          in: body
          name: params
          required: true
          schema:
            $ref: "#/definitions/pagination.V2PaginationParams"
            type: object
      produces:
        - application/json
      responses:
        "200":
          description: array of Tags in a team
          schema:
            items:
              $ref: "#/definitions/doc.Tag"
            type: array
        "400":
          description: bad_data
          schema:
            type: string
      security:
        - Bearer: [ ]
      summary: Paginate Tags
      tags:
        - Tags
schemes:
  - https
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    in: header
    name: Authorization
    type: apiKey
    description: |
      Authentication is done via the Heymarket team API key. It carries many privileges, so be sure to keep the key secure.
      Do not share secret API keys in publicly accessible areas such GitHub, client-side code, and so forth.

      To authenticate, provide the API key as a bearer token in an Authorization header like in example below.
      `Authorization: Bearer sk_326d6e2fc87a4e42910ca170ad20aa44`

      Alternatively you can authenticate using HTTP Basic Auth. Provide your API key as the Basic Auth username. You do not need to provide a password.

      You can view the team API key, and roll it if necessary, in the [Heymarket integration page](https://app.heymarket.com/team/integrations).
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
    description: |
      Create a Secure Token with Heymarket Secret Key
      __Prerequisites:__
      1. Valid API Secret ID and API Secret Key. 
      2. A library can be used to generate a JWT token based on your backend programming language, or you can use this [jwt.io](https://jwt.io) for testing. 


      **Steps to Generate JWT Token:**

      **Step 1:** Header
      ```json
      {
        "alg": "HS256",
        "typ": "JWT"
      }
      ```

      **Step 2:** Claims: Construct the payload for the JWT token. The payload should only include claims such as iss (issuer) and iat (issued at).

      Example Payload:
      ```json
        {
          "iss": "your_api_secret_id",
          "iat": current_unix_timestamp
        }
      ```

      **Step 3:** Combine Secret: Concatenate the API Secret ID and API Secret Key into a single secret value using the delimiter ||. This combined secret will be used to sign the payload and generate the JWT token.

      Example:
      ```json
        combined_secret = "your_api_secret_id" || "your_api_secret_key"
      ```

        if the secret_id is "74f80a77-9b3f-44ac-b3ad-ab68cfb548fa" and secret_key is "cPQku7lnSLbnK88UFOBg1a6Q3t1w1RgK"

        Then the combination should be
      ```json
        "74f80a77-9b3f-44ac-b3ad-ab68cfb548fa||cPQku7lnSLbnK88UFOBg1a6Q3t1w1RgK"
      ```

      **Step 3:** Generate JWT Token: Use the combined secret value to sign the payload and generate the JWT token.

      **Step 4:** Use the JWT Token: Once generated, the JWT token can be used in the authorization header of API requests to authenticate and authorize access.
      To authenticate, provide the API token as a bearer token in an Authorization header like in example below.

      `Authorization: Bearer eyJhbGcJ9.eyJzdWIY3ODSI6Q.SfleJ_adQssw5c`


      **Additional Notes:**
        1. The generated token will be valid for only 5 minutes; you need to regenerate it before it expires.
        2. Keep the API Secret Key secure and never expose it in client-side code or publicly accessible locations.
        3. Always validate the JWT token on the server side before processing the request..
swagger: "2.0"
