{
  "openapi": "3.0.1",
  "info": {
    "title": "API",
    "version": "v1",
    "description": "API Documentation site\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://qvapikeybank.qolopay.com"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Persons",
      "description": "Manage Persons"
    },
    {
      "name": "Cards",
      "description": "Manage Cards"
    },
    {
      "name": "Wallets",
      "description": "Manage Wallets"
    },
    {
      "name": "Accounts",
      "description": "Manage Accounts"
    },
    {
      "name": "Reports",
      "description": "Manage Report Requests"
    },
    {
      "name": "AccountInstruments",
      "description": "Manage AccountInstruments"
    },
    {
      "name": "Instruments",
      "description": "Manage Instruments"
    },
    {
      "name": "Transactions",
      "description": "Manage Transactions"
    },
    {
      "name": "Transfers",
      "description": "Manage Transfers"
    },
    {
      "name": "Webhooks",
      "description": "Manage Webhooks"
    }
  ],
  "paths": {
    "/api/{version}/account_instruments": {
      "post": {
        "tags": [
          "AccountInstruments"
        ],
        "summary": "Create AccountInstrument",
        "description": "Create a AccountInstrument for account on Qolo platform.",
        "operationId": "CreateAccountInstrument",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountInstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created AccountInstrument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/account_instruments/{account_instrument_guid}": {
      "get": {
        "tags": [
          "AccountInstruments"
        ],
        "summary": "Retrieve AccountInstrument",
        "description": "Use this end point to retrieve or find a specific account instrument by guid",
        "operationId": "GetAccountInstrumentById",
        "parameters": [
          {
            "name": "account_instrument_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Account Instrument with account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account Instrument not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Account",
        "description": "Call this end point to create an account on the platform by passing the wallet information.",
        "operationId": "CreateAccount",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/{account_guid}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieve Account",
        "description": "Use this end point to retrieve a specific account based on the account guid.",
        "operationId": "GetAccountById",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "description": "Account unique identifier on the platform",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Account with balance details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "Call this end point to update account data. The fields that can currently be updated are: account_name",
        "operationId": "UpdateAccount",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "description": "Account unique identifier on the platform",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountInfoRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountInfoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountInfoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/program/{program_guid}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Fetch Accounts by Balance",
        "description": "The end point allows fetching accounts sorted by balance. Up to 50 accounts can be fetched based on either ledger or available balance.",
        "operationId": "GetAccountsByProgram",
        "parameters": [
          {
            "name": "program_guid",
            "in": "path",
            "description": "Unique identifier of the program, for the accounts being fetched.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "based_on",
            "in": "query",
            "description": "Criteria to dientify if the account must be fetched based on Ledger or Available balance.",
            "schema": {
              "type": "string",
              "default": "ledger"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Criteria to identify if the accounts with highest balance or lowest balance is to be fetched. Default: desc (i.e.accounts with highest balances will be fetched)",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of accounts to be fetched.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "include_negative_balances",
            "in": "query",
            "description": "Whether accounts with negative balances are to be considered in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "account_status",
            "in": "query",
            "description": "Status of accounts that is to be considered for the search.",
            "schema": {
              "$ref": "#/components/schemas/AccountStatus"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Account details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountByBalanceDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/balances": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Fetch Program Balances",
        "description": "Call this end point to fetch the total program balance grouped by account types. Separate information is provided for ledger, available and suspense balance.",
        "operationId": "GetAccountBalancesByProgram",
        "parameters": [
          {
            "name": "program_guid",
            "in": "query",
            "description": "Unique identifier of the program that is being queried upon.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns total program balance grouped by account types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBalancesDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/{account_guid}/status": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Status Account",
        "description": "Use this API end point to change the status of an account based on the account guid.",
        "operationId": "StatusAccount",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "description": "Account unique identifier on the platform",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "account status request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountStatusUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/AdjustBalance": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Adjust Balance",
        "description": "Adjust Balance API should be used to update the balance of an account based on an external transfer.\r\nFor example, if a program funding account is credited by a bank wire, this API can be used to update the balance of the PROGFUND account on the platform.",
        "operationId": "AdjustBalance",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdjustBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created Wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/sharedaccount": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Shared Account",
        "description": "Use this end point to share an account with a related person. A related person can be created using Create Person Relation API",
        "operationId": "CreateSharedAccount",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSharedAccountRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly shared Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSharedAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/updatesharedaccount": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update Shared Account",
        "description": "Use this end point to update a shared account status.",
        "operationId": "UpdateSharedAccount",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSharedAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated shared information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSharedPersonDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/accounts/{account_guid}/PostInterest": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Post Interest",
        "description": "Use this API end point to post the interest accrued on the account guid.\r\nInterest can be posted only on an account that was closed that day.\r\nInterest post request on an account that is not closed, is assumed as the pre-process steps to close the account. The batch process will close the account the follwing day(s), if not already closed by then.",
        "operationId": "PostInterest",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "description": "Account unique identifier on the platform",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/advances/{account_guid}/precalc": {
      "get": {
        "tags": [
          "Advances"
        ],
        "summary": "Advance PreCalc",
        "description": "Advance PreCalc",
        "operationId": "AdvancePreCalc",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvancePreCalcRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the Advance PreCalc Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvancePreCalcResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/advances/{account_guid}": {
      "post": {
        "tags": [
          "Advances"
        ],
        "summary": "Apply Advance",
        "description": "Apply Advance",
        "operationId": "Apply Advance",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyAdvanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Applies the advance associated with the request_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyAdvanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/advances/{account_guid}/cycle": {
      "post": {
        "tags": [
          "Advances"
        ],
        "summary": "Change Advance Cycle",
        "description": "Change the cycle of the advance",
        "operationId": "Change Cycle",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAdvanceCycleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Changes the cycle of the advance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeAdvanceCycleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/batchfiles": {
      "post": {
        "tags": [
          "BatchFiles"
        ],
        "summary": "Create Batchfile for Disbursement",
        "description": "Create Batchfile with source document in base64 encoding",
        "operationId": "Batchfiles",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns batchfile_guid"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchfileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Report name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/batchfiles/Download": {
      "post": {
        "tags": [
          "BatchFiles"
        ],
        "summary": "Download Batchfile",
        "description": "Download File by Batchfile and Program Guid",
        "operationId": "DownloadBatchfile",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchfileDownloadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the batchfile as attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Batchfile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/bulkorders": {
      "post": {
        "tags": [
          "BulkOrder"
        ],
        "summary": "Create Bulk Orders",
        "description": "Create a person and a bulk order on Qolo platform. If the person is already created, send an existing Person GUID.",
        "operationId": "CreateBulkOrder",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOrderRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly bulkorder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "BulkOrder"
        ],
        "summary": "Retrieve Bulk Orders",
        "description": "Use this end point to display bulk order details",
        "operationId": "GetOrderDetail",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_guid",
            "in": "query",
            "description": "order guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "package_guid",
            "in": "query",
            "description": "package guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "person_guid",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "company_guid",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start_search_date",
            "in": "query",
            "description": "start search date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_search_date",
            "in": "query",
            "description": "end search date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "bulk_order_status",
            "in": "query",
            "description": "bulk order status- PENDING,CREATED,CANCELLED,SHIPPED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the bulk order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrdersSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "BulkOrder"
        ],
        "summary": "Cancel Bulk Orders",
        "description": "This end point will allow you to cancel a bulk order on the Qolo platform.",
        "operationId": "CancelBulkOrder",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the bulk order details for the cancelled order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/bulkorders/CheckinBulkOrder": {
      "put": {
        "tags": [
          "BulkOrder"
        ],
        "summary": "Checkin Bulk Orders",
        "description": "This end point will allow you to checkin a bulk order on the Qolo platform.",
        "operationId": "CheckinBulkOrder",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/bulkorders/BulkOrderSummaryByLocation": {
      "get": {
        "tags": [
          "BulkOrder"
        ],
        "summary": "Bulk Orders Summary By Location",
        "description": "Use this end point to display inventory summary details",
        "operationId": "GetBulkOrderSummaryByLocation",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "description": "person guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "company_guid",
            "in": "query",
            "description": "company guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "description": "start index",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the bulk order summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOrderSummarySearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Search Cards",
        "description": "Retrieve list of cards based on search criteria.",
        "operationId": "SearchCard",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "description": "person guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "wallet_guid",
            "in": "query",
            "description": "wallet guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Create Card",
        "description": "Create a person and a card. If the person is already created, send an existing Person GUID without sending the person details.",
        "operationId": "CreateCard",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardRequest"
              },
              "example": {
                "person": {
                  "person_guid": "00000000-0000-0000-0000-000000000000",
                  "birth_date": "1975-02-28",
                  "email": "john.smith@example.com",
                  "first_name": "John",
                  "last_name": "Smith",
                  "mobile_number": "+19540123456",
                  "base_address": {
                    "city": "Fort Lauderdale",
                    "country": "USA",
                    "address_line1": "222333 Sample road",
                    "postal_code": "33309",
                    "state": "FL"
                  },
                  "client_reference_id": "OM39125",
                  "address_lat": 0,
                  "address_lon": 0,
                  "ledger_balance": 0
                },
                "wallet_guid": "00000000-0000-0000-0000-000000000000",
                "program_guid": "bb6e9a04-ca42-4f32-b149-ad39ab3aa079",
                "months_until_expire": 0
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCardResponse"
                },
                "example": {
                  "person": {
                    "person_guid": "00000000-0000-0000-0000-000000000000",
                    "birth_date": "1975-02-28",
                    "email": "john.smith@example.com",
                    "first_name": "John",
                    "last_name": "Smith",
                    "mobile_number": "+19540123456",
                    "base_address": {
                      "city": "Fort Lauderdale",
                      "country": "USA",
                      "address_line1": "222333 Sample road",
                      "postal_code": "33309",
                      "state": "FL"
                    },
                    "client_reference_id": "OM39125",
                    "address_lat": 0,
                    "address_lon": 0,
                    "ledger_balance": 0
                  },
                  "program_guid": "bb6e9a04-ca42-4f32-b149-ad39ab3aa079",
                  "card": {
                    "card_number": "5340920000000007",
                    "card_proxy": "cproxy0000000000001",
                    "mask_card_pan": "534092XXXXXX0007",
                    "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                    "issuance_type": "FULL",
                    "card_condition": "ORIGINAL",
                    "card_status": "PENDING",
                    "activation_method": "ONLOAD",
                    "expiration_date": "2212",
                    "logical_expiration_date": "0001-01-01T00:00:00",
                    "person_card_status": "ACTIVE",
                    "sys_utcinserted": "0001-01-01T00:00:00",
                    "sys_utcupdated": "0001-01-01T00:00:00"
                  },
                  "fulfillment_data": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Retrieve Card",
        "description": "Returns specific card details based on the given proxy.",
        "operationId": "GetCardById",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/fulfillmentdata": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Show card fulfillment data",
        "description": "Returns fulfillment data for specific card if a valid identifier was provided.\r\nTrack1, track2, cvx2 and pin are some important fields returned in this API\r\nPCI DSS compliance is required to use this API.",
        "operationId": "GetFulfillmentData",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fulfillment data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptedFulfillmentDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/showpan": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Show card PAN",
        "description": "Returns PAN, cvv and expiraton date for specific card if a valid identifier was provided.\r\nPCI DSS compliance is required to use this API.",
        "operationId": "GetPANById",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/assign": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Assign Card",
        "description": "Assign an instant issue or anonymous card to a Person.",
        "operationId": "AssignCard",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCardDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly assigned Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignCardDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/activate": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Activate Card",
        "description": "Activate a newly issued card. This API must be called in response to an activation request by the cardholder.",
        "operationId": "ActivateCard",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/status": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Status Card",
        "description": "Call this API end point to change the status of a card, identified by card proxy.",
        "operationId": "StatusCard",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "card status request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/validate": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Validate Card",
        "description": "Validate a card using card number and cvv.",
        "operationId": "ValidateCard",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateCardDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/pin": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Set PIN",
        "description": "Call this API end point to change the PIN of a card, identified by card proxy.",
        "operationId": "SetPIN",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "card PIN request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardPINDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardPINDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get PIN",
        "description": "Call this API end point to get the PIN of a card, identified by card proxy.",
        "operationId": "GetPIN",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardPINDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/replace": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Replace Card",
        "description": "Call this API end point to replace a card, identified by card proxy.",
        "operationId": "ReplaceCard",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "replace card request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created Card",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/personcardstatus": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Status Person Card Status",
        "description": "Call this API end point to change the person card status of a card, identified by card proxy.",
        "operationId": "PersonCardStatus",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "person card status request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCardStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/getencryptedcarddata": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Get Encrypted Card Data",
        "description": "This api is used for in mobile app provisioning",
        "operationId": "GetEncryptedCardData",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "description": "card proxy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEncryptedCardDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the encrypted card details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/{card_proxy}/issuance_type": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Update Issuance Type",
        "description": "Call this API end point to turn a virutal card into a plastic card, identified by card proxy.  Only allow Virutal to Full at this time",
        "operationId": "issuance_type",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuanceTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the card details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "example": {
                  "card_number": "5340920000000007",
                  "card_proxy": "cproxy0000000000001",
                  "mask_card_pan": "534092XXXXXX0007",
                  "wallet_guid": "05a28e5a-01a6-4a3e-8ce3-ca30fc09e5ae",
                  "issuance_type": "FULL",
                  "card_condition": "ORIGINAL",
                  "card_status": "PENDING",
                  "activation_method": "ONLOAD",
                  "expiration_date": "2212",
                  "logical_expiration_date": "0001-01-01T00:00:00",
                  "person_card_status": "ACTIVE",
                  "card_tracking_detail": {
                    "fulfillment_house_name": "Arroweye",
                    "card_requested": "0001-01-01T00:00:00",
                    "card_shipment_date": "0001-01-01T00:00:00",
                    "card_delivery_method": "USPS",
                    "card_delivery_tracking_number": "1234365465",
                    "card_package_name": "TestPlacardPkg"
                  },
                  "sys_utcinserted": "0001-01-01T00:00:00",
                  "sys_utcupdated": "0001-01-01T00:00:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/cards/RequestCardData": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Request Card Data",
        "description": "Endpoint consumed by MeaWallet\r\nRequest Card Data advises Qolo that an end-user wants to digitize a card",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeaWalletRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MeaWalletResponseDTO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeaWalletResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/Check/ChangeStatus": {
      "patch": {
        "tags": [
          "Check"
        ],
        "summary": "Status Paper Check",
        "description": "A reverse process happens when the new status is one of the following:\r\n(REVERSED, STOPPED, DROP)\r\n\r\nThere are 2 ways to send the request:\r\n1. Using account_guid and  check_number\r\n2. Using txn_guid\r\n- new_status is required\r\n- notes is Optional",
        "operationId": "Paper Checks",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a check status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckStatusDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/Check/getchecks": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves the list of checks",
        "description": "Retrieves the list of checks that have been issued and their details.\r\nThe checks can be retrieved based on a date range, account guid, person guid, check number, or status.",
        "operationId": "GetChecks",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckSearchDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the checks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Check not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create company",
        "description": "returns new company/program created",
        "operationId": "CreateCompany",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "create company request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompany"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the company/program created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyProgramDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/{company_guid}": {
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Update company details",
        "description": "returns updated company",
        "operationId": "UpdateCompanyById",
        "parameters": [
          {
            "name": "company_guid",
            "in": "path",
            "description": "company guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "update company request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompany"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/{program_guid}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Get Program Details",
        "description": "Get program and associated configurations.",
        "operationId": "GetProgramDetailsById",
        "parameters": [
          {
            "name": "program_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Program and associated details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramDataDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/configprogram": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Config Programs",
        "description": "This end point performs different program configurations.",
        "operationId": "ConfigProgram",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigProgramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns program details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramDataDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/performkyb": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Perform company kyb",
        "description": "returns company status info of kyb",
        "operationId": "PerformKyb",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformKybRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns company status info sent for kyb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformKybAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/{company_guid}/retrieve": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Retrieve company",
        "description": "Retrieve company",
        "operationId": "RetrieveCompany",
        "parameters": [
          {
            "name": "company_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company request and response info from kyb",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveCompanyRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/companies/{company_guid}/kyb": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Retrieve Company KYB",
        "description": "Retrieve Company KYB",
        "operationId": "GetKybResult",
        "parameters": [
          {
            "name": "company_guid",
            "in": "path",
            "description": "company guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KYB details for company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyVerificationResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/disbursements": {
      "post": {
        "tags": [
          "Disbursements"
        ],
        "summary": "Create Disbursement",
        "description": "Create a new Disbursement request to create the person, account, instrument and move funds.",
        "operationId": "Disbursements",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisbursementDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request created and queued for processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisbursementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/disbursements/payoutoptions": {
      "get": {
        "tags": [
          "Disbursements"
        ],
        "summary": "PayOut Options",
        "description": "Get the Disbursement PayOut options by program_guid",
        "operationId": "GetPayOutOptions",
        "parameters": [
          {
            "name": "program_guid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of disbursement payout options",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/disbursements/payoutpreference": {
      "get": {
        "tags": [
          "Disbursements"
        ],
        "summary": "Get PayOut Preference",
        "description": "Get the Disbursement PayOut options by person_guid",
        "operationId": "GetPayOutPreference",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of disbursement payout options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisbursementPayoutPreference"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Disbursements"
        ],
        "summary": "Set PayOut Preference",
        "description": "set the disbursement PayOut option for a person.",
        "operationId": "UpdatePayoutOption",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payoutpreference",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/DisbursementPayoutOptions"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payout preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisbursementPayoutPreference"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/disputes/dispute-chargeback": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Dispute and Chargeback",
        "description": "Create a new Dispute and Chargeback request",
        "operationId": "DisputeChargeback",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisputeChargebackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeChargebackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/fees": {
      "get": {
        "tags": [
          "Fees"
        ],
        "summary": "Get Fees",
        "description": "Use this end point to retrieve or find fee details.",
        "operationId": "GetFees",
        "parameters": [
          {
            "name": "program_guid",
            "in": "query",
            "description": "Unique Identifier for the Program",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "request_code",
            "in": "query",
            "description": "Request code for the event for which fee details need to be fetched. If not provided, details of all fees applicable to the program are fetched.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of fees with details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/fees/apply": {
      "post": {
        "tags": [
          "Fees"
        ],
        "summary": "Apply Fee",
        "description": "Apply a fee to the source with the proceeds going into the revenue account",
        "operationId": "ApplyFee",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyFeeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns newly created fee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplyFeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/fees/{txn_guid}/reverse": {
      "post": {
        "tags": [
          "Fees"
        ],
        "summary": "Reverse Fee",
        "description": "Reverse a fee by the txn_guid",
        "operationId": "ReverseFee",
        "parameters": [
          {
            "name": "txn_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseFeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseFeeResponse"
                }
              }
            }
          },
          "201": {
            "description": "Returns the fee details"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/outside_instruments": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Search Instruments",
        "description": "Retrieve a list of one or more external instruments.",
        "operationId": "SearchInstrument",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the List of instruments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutsideInstrumentDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Instrument not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Create Instrument",
        "description": "Create or Add an external instrument to Qolo platform. The external instrument may be a bank account or a credit/debit card or any other account held by another financial institution.\r\n\r\nTo add bank account use the following conditions <br />\r\nIf instrument_type = BANKDDA then provide an account_number and routing_number <br />\r\nIf instrument_type = IBAN then  provide IBAN in account_number field and swiftBicCode in bank_identifier field <br />\r\nIf instrument_type = BBAN then  provide account_number ,  swiftBicCode in bank_identifier field (if applicable) <br />\r\nand additional rounting info in routing_number field <br />\r\n\r\nQolo also blocks transfers to certain countries and you will not be able to add the bank accounts / cards from the blocked countries.",
        "operationId": "CreateInstrument",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutsideInstrumentDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created outside instrument",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutsideInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/outside_instruments/{outside_instrument_guid}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Retrieve Instrument",
        "description": "Retrieve an external instrument using Instrument GUID.",
        "operationId": "GetInstrumentById",
        "parameters": [
          {
            "name": "outside_instrument_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the List of instruments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutsideInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Instrument not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Status Instrument",
        "description": "Change the status of an external instrument using Instrument GUID.",
        "operationId": "StatusInstrument",
        "parameters": [
          {
            "name": "outside_instrument_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusInstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutsideInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Instrument not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/outside_instruments/{outside_instrument_guid}/verify": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Verify instrument",
        "description": "Mark an external instrument as verified, so it may be used for transfers.",
        "operationId": "VerifyInstrument",
        "parameters": [
          {
            "name": "outside_instrument_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutsideInstrumentVerifyDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutsideInstrumentDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Instrument not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/InteractAuth": {
      "post": {
        "tags": [
          "InteractAuth"
        ],
        "summary": "InteractAuthorization",
        "description": "InteractAuthorization \r\n\r\nSimulate Interact Authorization to get response",
        "operationId": "InteractAuthorization",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractAuthRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interact Auth response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/InteractAuth/SendMessage": {
      "post": {
        "tags": [
          "InteractAuth"
        ],
        "summary": "SendMessage",
        "description": "SendMessage \r\n\r\nSimulate Send Interact Message to client",
        "operationId": "SendMessage",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IA_Message"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Send Message response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IA_Message"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/InteractAuth/InteractAuthSimulator": {
      "post": {
        "tags": [
          "InteractAuth"
        ],
        "summary": "InteractAuthSimulator",
        "description": "InteractAuthSimulator \r\n\r\nSimulate Send Interact Auth to client",
        "operationId": "InteractAuthSimulator",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IA_Auth_SimuMsg"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interact Auth request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractAuthRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/interest_rates/programs/{program_guid}": {
      "get": {
        "tags": [
          "InterestRates"
        ],
        "summary": "Get Program Interest Rates",
        "description": "Retrieves a program interest rates configuration.",
        "operationId": "GetProgramInterestRates",
        "parameters": [
          {
            "name": "program_guid",
            "in": "path",
            "description": "Unique id of the program",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Program Interest Rate details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterestRateDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/interest_rates/accounts/{account_guid}": {
      "get": {
        "tags": [
          "InterestRates"
        ],
        "summary": "Get Account Interest Rate",
        "description": "Retrieves an account interest rate configuration.",
        "operationId": "GetAccountInterestRate",
        "parameters": [
          {
            "name": "account_guid",
            "in": "path",
            "description": "Unique id of the account",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Account Interest Rate details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInterest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/interest_rates": {
      "post": {
        "tags": [
          "InterestRates"
        ],
        "summary": "Create a Program Account Interest Rate Code",
        "description": "Create Account Interest Rate Code.",
        "operationId": "CreateProgramAccountInterestRateCode",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInterestRateCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates new Program Interest Rate Code and returns Program Interest Rate Code details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterestRateDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/interest_rates/program/update": {
      "post": {
        "tags": [
          "InterestRates"
        ],
        "summary": "Update a Program Account Interest Rate",
        "description": "Change Program Account Interest Rate Details.",
        "operationId": "UpdateProgramAccountInterestRate",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInterestRate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates Account Interest Rate details and returns all Interest Rates of the program",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InterestRateDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/interest_rates/account/update": {
      "post": {
        "tags": [
          "InterestRates"
        ],
        "summary": "Update Account Interest Rate",
        "description": "Update Account Interest Rate Strategy.",
        "operationId": "UpdateAccountInterestRate",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInterestRateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates account interest rate strategy and returns Account Interest Rate details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInterest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/limits/cardauthcontrols": {
      "get": {
        "tags": [
          "Limits"
        ],
        "summary": "Get Configured Targeted Auth Controls",
        "description": "Returns configured targetd auth control values.",
        "operationId": "GetTargetedCardAuthControls",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTargetedCardAuthControlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Targeted Auth Controls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetedCardAuthControlDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Limits"
        ],
        "summary": "Configure targeted auth controls.",
        "description": "Configure card and program level targeted spend controls",
        "operationId": "ConfigTargetedAuthControl",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TargetedCardAuthControlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns program details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetedCardAuthControlDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payments",
        "description": "Schedule a payment. This endpoint can be used to create a time based schedule or conditional payment schedule",
        "operationId": "Payments",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly scheduled payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve Payments",
        "description": "Use this end point to retrieve or find a specific info of payments. start_search_date and end_search_date are UTC datetime",
        "operationId": "GetPaymentDetails",
        "parameters": [
          {
            "name": "wallet_guid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_search_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end_search_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDetSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/payments/{payment_guid}/update": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Update Payment",
        "description": "Update a payment. This endpoint can be used to update a PT_ACCTOUNTDISB payment",
        "operationId": "UpdatePayment",
        "parameters": [
          {
            "name": "payment_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/payments/{payment_guid}": {
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Cancel Schedule Status",
        "description": "This end point will allow you to cancel a payment schedule on the Qolo platform.\r\nOnce a payment schedule is cancelled, a new pay schedule needs to be created,if needed again.",
        "operationId": "CancelPaymentSchedule",
        "parameters": [
          {
            "name": "payment_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payment schedule details for the payment guid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDet"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve Payment",
        "description": "Use this end point to retrieve or find a specific info of a payment.",
        "operationId": "GetPayment",
        "parameters": [
          {
            "name": "payment_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponseDet"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/payments/{payment_guid}/transactions": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Recurring Payment Log",
        "description": "Use this end point to retrieve info about Recurring Payment Log.",
        "operationId": "GetPaymentRecurringLog",
        "parameters": [
          {
            "name": "payment_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "payment_due_date",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the PaymentRecurringLogInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionsResponseDetSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons/search": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Search Persons",
        "description": "This end point allows you to search for one or more persons, using a search critera. The search criteria must be included in the body of the request.",
        "operationId": "SearchPerson",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonSearch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonSearchResponseSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons/{person_guid}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Retrieve Person",
        "description": "Use this end point to retrieve or find a specific person. The end point may include request for all details, or with just the account details.",
        "operationId": "GetPersonById",
        "parameters": [
          {
            "name": "person_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create Person",
        "description": "This end points allow creation of new person on Qolo platform. A person may be a user or a company. The new person may be created with or without an account; and with or without a prepaid card (if allowed under the program). A new person's status will depend on their verification status. We will conduct an electronic or manual verification on the person as required by the program under our person creation guideline.",
        "operationId": "CreatePerson",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "Update Person",
        "description": "This end point will allow you to update a person information on the Qolo platform.",
        "operationId": "UpdatePerson",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated Person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons/personrelation": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create Person Relation",
        "description": "Create a relationship between two person records. This is used for sharing accounts.",
        "operationId": "CreatePersonRelation",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonRelationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Person Relation Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonRelationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons/updatepersonrelation": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Update Person Relation",
        "description": "Update Person Relation\r\nFields supported:\r\n<li>relationship</li>",
        "operationId": "UpdatePersonRelation",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonRelationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated Account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonRelation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/persons/{person_guid}/kyc": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Retrieve Person KYC",
        "description": "Use this end point to display KYC documents",
        "operationId": "GetKycResult",
        "parameters": [
          {
            "name": "person_guid",
            "in": "path",
            "description": "person guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the KYC details for person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonVerificationResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Perform KYC",
        "description": "A person's KYC or Verification level can be set/upgraded using this API.\r\nThe following actions are available.\r\n<ul><li>Initiate Verification for an existing Person</li><li>Update Verification data or documents</li><li>Answer 'challenge' questions for verification</li><li>Override verification level by Client</li></ul>",
        "operationId": "PerformKYC",
        "parameters": [
          {
            "name": "person_guid",
            "in": "path",
            "description": "person guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the KYC details for person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonVerificationResultDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/reports/templates": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report templates",
        "description": "Report templates supported",
        "operationId": "GetReportTemplates",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns report templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Request Report",
        "description": "<br> All report times are based on UTC time. </br>\r\n<br> The StatusSummary report will generate a report based on data available when the report is run. </br>\r\n<br> The Breakage, Dormancy, NegativeBalance, and EODBalanceSummary reports will use one date input.  </br>\r\n<br> If no date is provided, they will default to the date 2 days prior to the current date. </br>\r\n<br> All other reports will take 2 date inputs. </br>",
        "operationId": "RequestReport",
        "parameters": [
          {
            "name": "report_name",
            "in": "query",
            "description": "report name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "program_guid",
            "in": "query",
            "description": "program guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "date_from",
            "in": "query",
            "description": "from date (optional)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "date_to",
            "in": "query",
            "description": "to date (optional)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "override_flag",
            "in": "query",
            "description": "override flag (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overwrite_flag",
            "in": "query",
            "description": "overwrite flag (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Report Guid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Report name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/reports/extended": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Request Extended Report",
        "description": "<br> All report times are based on UTC time. </br>\r\n<br> The extended report call will generate a report based on data available when the report is run. </br>\r\n<br> Program Guid is not a mandatory input. </br>",
        "operationId": "RequestReportExt",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequestExt"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Report Guid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Report name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/reports/Download": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download Report",
        "description": "Download Report by Reference Id",
        "operationId": "DownloadReportById",
        "parameters": [
          {
            "name": "reference_id",
            "in": "query",
            "description": "Report Reference Guid in string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Report as attachment",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": "Swashbuckle.AspNetCore.Filters.MvcOutputFormatter+FormatterNotFoundException: OutputFormatter not found for 'text/csv' for example of Microsoft.AspNetCore.Mvc.ProblemDetails."
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": "Swashbuckle.AspNetCore.Filters.MvcOutputFormatter+FormatterNotFoundException: OutputFormatter not found for 'text/csv' for example of Microsoft.AspNetCore.Mvc.ProblemDetails."
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Report not found",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": "Swashbuckle.AspNetCore.Filters.MvcOutputFormatter+FormatterNotFoundException: OutputFormatter not found for 'text/csv' for example of Microsoft.AspNetCore.Mvc.ProblemDetails."
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/statements": {
      "get": {
        "tags": [
          "Statements"
        ],
        "summary": "Get monthly statement",
        "description": "Monthly Statement",
        "operationId": "GetRegeStatement",
        "parameters": [
          {
            "name": "person_guid",
            "in": "query",
            "description": "Unique ID of the person",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "wallet_guid",
            "in": "query",
            "description": "Unique ID of the wallet associated with the account",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_guid",
            "in": "query",
            "description": "Unique ID of the account (Required for Reg Z statements)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "card_proxy",
            "in": "query",
            "description": "Card proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Statement month",
            "schema": {
              "maximum": 12,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Statement year",
            "schema": {
              "maximum": 9999,
              "minimum": 1753,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "client_reference_id",
            "in": "query",
            "description": "client_reference_id from Person",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stmt_date",
            "in": "query",
            "description": "Statement date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "format",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/StatementFormat"
            }
          },
          {
            "name": "account_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error_code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error_description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the monthly statement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegeStatementsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/TransactionAuthSimulator": {
      "post": {
        "tags": [
          "TransactionAuthSimulator"
        ],
        "summary": "Transaction Authorization Simulator",
        "description": "TransactionAuthSimulator\r\nSimulate Transaction Authorizations to get response",
        "operationId": "SimulateAuthorizeTransaction",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionAuthSimRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction auth sim response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionAuthSimResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transactions/{txn_guid}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve Transaction",
        "description": "Use this end point to retrieve or find a specific transaction details.",
        "operationId": "GetTransactionById",
        "parameters": [
          {
            "name": "txn_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Transaction with details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxnLedgerDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transactions/search": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Search Transactions",
        "description": "Retrieve list of one or more transactions based on search criteria.",
        "operationId": "SearchTransaction",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxnSearchDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxnLedgerDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Create transfer",
        "description": "Create a new transfer to move funds from one Qolo Account to another. \r\n\r\nFollowing are different types of transfer supported in the platform\r\n\r\nPartner to Card - Partner can transfer funds from progfund account to card using card proxy or account guid\r\nAccount to External bank accounts (Add outside_instrument and then use the guid in this API)\r\nExternal bank accounts to Account (Add outside_instrument and then use the guid in this API)\r\nThis API supports transfer with currency conversions and this api uses the exchange rates provided by our banking partner.",
        "operationId": "CreateTransfer",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created transfer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transfers/eft/cancel": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Cancel EFT Transaction",
        "description": "This call allows cancellation of an ACH origination transaction before it is submitted to a bank. Request to cancel an ACH origination transaction after it has been submitted to the bank will result in an error. In order to get the cut off time for ACH submission, the client must contact their implementation or account manager as it is specific to the sponsor bank. Only ACH cancellation supported currently.",
        "operationId": "CancelEFT",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelEFTRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns cancelled transaction details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelEFTResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transfers/quote": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Quote",
        "description": "Get a qoute for a currency exhange.",
        "operationId": "Quote",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created quote",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transfers/RequestForTransferRefund": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Request For Transfer Refund (RTP)",
        "description": "Request For Transfer Refund\r\n\r\nRequest For RTP Transfer Refund",
        "operationId": "RequestForTransferRefund",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RTPRefundRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BankEFTRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEftEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/transfers/BankRequestApproval": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Bank Request Approval (RTP)",
        "description": "BankRequestApproval \r\n\r\nBank Request Approval",
        "operationId": "BankRequestApproval",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RTPBankApprovalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "BankEFTRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankEftEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/velocitylimits": {
      "post": {
        "tags": [
          "VelocityLimits"
        ],
        "summary": "Create new velocity limit",
        "description": "Create new velocity limit \r\n\r\nFollowing are different types of velocity limits supported in the platform\r\nVelocity Limits can be set based on Spending limit, Cash limit and load limit\r\nExpiry limit time can be set in minutes\r\nThese limits can transactional limits, weekly, monthly, daily, yearly, or lifetime\r\nThis API supports velocity limit set ups based on account_guid or card proxy.\r\nAccount_Guid value takes precedence over cardproxy.\r\nIf Account_Guid is not provided, Card_proxy and currency values are used to fetch the account_guid value.",
        "operationId": "CreateNewVelocityLimit",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOperationConditionsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly velocity limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessOperationConditionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "VelocityLimits"
        ],
        "summary": "Get velocity limits",
        "description": "These limits can be transactional limits, daily, weekly, monthly, yearly, or lifetime; Unlimited = 10 years.\r\nThis API supports getting velocity limits set based on account_guid or card proxy, but not both.",
        "operationId": "GetVelocityLimits",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "query",
            "description": "card proxy",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "account_guid",
            "in": "query",
            "description": "account guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "currency code",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "program_guid",
            "in": "query",
            "description": "program guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the velocity limits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VelocityLimitDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Velocity limits not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/wallets": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Search Wallets",
        "description": "Search for one or more wallets based on search criteria. This call returns several pieces of wallet related information including accounts and balances.",
        "operationId": "SearchWallet",
        "parameters": [
          {
            "name": "card_proxy",
            "in": "query",
            "description": "card proxy",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_reference_id",
            "in": "query",
            "description": "client reference id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "person_guid",
            "in": "query",
            "description": "person guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_guid",
            "in": "query",
            "description": "account guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "wallet_guid",
            "in": "query",
            "description": "wallet guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "account_instrument_guid",
            "in": "query",
            "description": "account instrument guid",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Wallet details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Create Wallet",
        "description": "Create a wallet for person on Qolo platform. If the person is already created, send an existing Person GUID.",
        "operationId": "CreateWallet",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created Wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Program not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/wallets/changeprogram": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Change Program",
        "description": "Upgrade a wallet to a different program. Wallets can not be changed back the previous program. The program change effects all cards and accounts linked to the wallet.",
        "operationId": "ChangeProgram",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProgramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated Wallet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeProgramResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/wallets/{wallet_guid}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Retrieve Wallet",
        "description": "Use this end point to retrieve or find a specific wallet using Wallet GUID.",
        "operationId": "GetWalletById",
        "parameters": [
          {
            "name": "wallet_guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Wallet with account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve Webhooks",
        "description": "Retrieve all Webhooks configured",
        "operationId": "GetNotificationAll",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "start_index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of the Webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationConfigurationDTOSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "Create URL endpoint for Webhook\r\n<li>event types: </li><li>all, card.created, card.activated, card.status, card.pin.changed, card.replaced, card.fulfilment, </li><li>person.created, person.verification.success, person.updated, </li><li>wallet.created, account.created, account.activated, account.closed, account.status, account.instrument.created, outside.instrument.created, </li><li>auth.approved, auth.reversed, auth.refunded,auth.declined, </li><li>bankeft.credit.received, bankeft.credit.reversed, bankeft.credit.returned, </li><li>bankeft.debit.received, bankeft.debit.reversed, bankeft.debit.returned, </li><li>transfer.success, check.cleared, payment.success, payment.failure, realtimepayment</li>",
        "operationId": "CreateNotification",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationConfigurationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns newly created Webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationConfigurationDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/{version}/webhooks/{notification_guid}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve Webhook",
        "description": "Retrieve Webhook configured by guid",
        "operationId": "GetNotificationById",
        "parameters": [
          {
            "name": "notification_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationConfigurationDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook",
        "description": "Update Webhook by guid\r\n<li>event types: </li><li>all, card.created, card.activated, card.status, card.pin.changed, card.replaced, card.fulfilment, </li><li>person.created, person.verification.success, person.updated, </li><li>wallet.created, account.created, account.activated, account.closed, account.status, account.instrument.created, outside.instrument.created, </li><li>auth.approved, auth.reversed, auth.refunded,auth.declined, </li><li>bankeft.credit.received, bankeft.credit.reversed, bankeft.credit.returned, </li><li>bankeft.debit.received, bankeft.debit.reversed, bankeft.debit.returned, </li><li>transfer.success, check.cleared, payment.success, payment.failure, realtimepayment</li>",
        "operationId": "UpdateNotificationById",
        "parameters": [
          {
            "name": "notification_guid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationConfigurationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                },
                "example": {
                  "title": "One or more validation errors occurred.",
                  "status": 400,
                  "errors": {
                    "fulfillment_data": [
                      "The fulfillment field is required."
                    ]
                  },
                  "traceId": "0HLU5NVH2BE5E:00000001"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "required": [
          "account_currency",
          "account_guid",
          "account_name",
          "account_status",
          "account_status_date",
          "account_type",
          "available_balance",
          "first_debit_amount",
          "holder_account_status",
          "holder_account_status_date",
          "last_credit_amount",
          "last_debit_amount",
          "ledger_balance",
          "starting_balance_amount",
          "suspense_balance",
          "sys_utcinserted",
          "sys_utcupdated",
          "wallet_guid"
        ],
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "format": "uuid"
          },
          "account_type": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "account_name": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string"
          },
          "account_currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "available_balance": {
            "type": "number",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "format": "double"
          },
          "starting_balance_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "starting_balance_amount": {
            "type": "number",
            "format": "double"
          },
          "last_credit_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_credit_amount": {
            "type": "number",
            "format": "double"
          },
          "first_debit_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "first_debit_amount": {
            "type": "number",
            "format": "double"
          },
          "last_debit_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_debit_amount": {
            "type": "number",
            "format": "double"
          },
          "account_status": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string"
          },
          "account_status_date": {
            "type": "string",
            "format": "date-time"
          },
          "holder_account_status": {
            "maxLength": 8,
            "minLength": 1,
            "type": "string"
          },
          "holder_account_status_date": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "last_txn_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "interest_rate_strategy": {
            "maxLength": 128,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountBalancesDTO": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid"
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "total_available_balance": {
            "type": "number",
            "description": "Sum of Total Open to buy balance (also called Available balance). This is the balance available for authorization or transaction.",
            "format": "double"
          },
          "total_ledger_balance": {
            "type": "number",
            "description": "Sum of Total Ledger balance (also called Account balance). This include funds that are authorized, but not yet cleared.",
            "format": "double"
          },
          "total_suspense_balance": {
            "type": "number",
            "description": "Sum of Total Balance that will be credited to the account after clearing.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AccountByBalanceDTO": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Unique identifier of the account on the platform.",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "account_currency": {
            "type": "string",
            "description": "Currency of account in ISO-3 string format.",
            "nullable": true
          },
          "account_name": {
            "type": "string",
            "description": "Name of account provided by the API client.",
            "nullable": true
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "available_balance": {
            "type": "number",
            "description": "Open to buy balance (also called Available balance). This is the balance available for authorization or transaction.",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance (also called Account balance). This include funds that are authorized, but not yet cleared.",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "description": "Balance that will be credited to the account after clearing.",
            "format": "double"
          },
          "account_status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "person_info": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "account_instrument_info": {
            "$ref": "#/components/schemas/AccountInstrumentDTO"
          },
          "last_txn_guid": {
            "type": "string",
            "description": "Unique identifier for last posted transaction on the given account.",
            "format": "uuid",
            "nullable": true
          },
          "post_date": {
            "type": "string",
            "description": "Last transaction posted date in UTC",
            "format": "date-time",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount corresponding to the last posted transaction.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountCheckPayDetail": {
        "type": "object",
        "properties": {
          "check_number": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "txn_post_date": {
            "type": "string",
            "format": "date-time"
          },
          "payee_name": {
            "type": "string",
            "nullable": true
          },
          "address_line1": {
            "type": "string",
            "nullable": true
          },
          "address_line2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "sponsor_name": {
            "type": "string",
            "nullable": true
          },
          "routing_number": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountDTO": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Unique identifier of the account on the platform.",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "account_currency": {
            "type": "string",
            "description": "Currency of account in ISO-3 string format.",
            "nullable": true
          },
          "account_name": {
            "type": "string",
            "description": "Name of account provided by the API client.",
            "nullable": true
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "available_balance": {
            "type": "number",
            "description": "Open to buy balance (also called Available balance). This is the balance available for authorization or transaction.",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance (also called Account balance). This include funds that are authorized, but not yet cleared.",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "description": "Balance that will be credited to the account after clearing.",
            "format": "double"
          },
          "advance_account_details": {
            "$ref": "#/components/schemas/AdvanceAccountDetails"
          },
          "account_status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "last_txn_guid": {
            "type": "string",
            "description": "Unique identifier for last posted transaction on the given account.",
            "format": "uuid",
            "nullable": true
          },
          "post_date": {
            "type": "string",
            "description": "Last transaction posted date in UTC.",
            "format": "date-time",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount corresponding to the last posted transaction.",
            "format": "double",
            "nullable": true
          },
          "mask_account_number": {
            "type": "string",
            "description": "Last four digits of account number",
            "nullable": true
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "status_change_nonmon_detail": {
            "$ref": "#/components/schemas/TxnNonmonDetail"
          }
        },
        "additionalProperties": false
      },
      "AccountDetails": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Account unique id",
            "format": "uuid"
          },
          "masked_account_number": {
            "type": "string",
            "description": "Account Instrument masked account number",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "Account holder first name",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Account holder last name",
            "nullable": true
          },
          "interest_rate_strategy": {
            "type": "string",
            "description": "Account interest rate strategy",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountInfo": {
        "type": "object",
        "properties": {
          "card_account": {
            "$ref": "#/components/schemas/CardAccount"
          },
          "bank_account": {
            "$ref": "#/components/schemas/BankAccount"
          }
        },
        "additionalProperties": false,
        "description": "Base class for account info"
      },
      "AccountInstrumentDTO": {
        "type": "object",
        "properties": {
          "routing_number": {
            "maxLength": 16,
            "minLength": 6,
            "type": "string",
            "description": "For DDA types bank identification routing number",
            "nullable": true
          },
          "account_instrument_guid": {
            "type": "string",
            "description": "Unique id of instrument associated with account",
            "format": "uuid"
          },
          "account_guid": {
            "type": "string",
            "description": "Unique identifier of the account on the platform.",
            "format": "uuid"
          },
          "account_info": {
            "$ref": "#/components/schemas/BankAccount"
          },
          "mask_account_number": {
            "type": "string",
            "description": "Last four digits of account number",
            "nullable": true
          },
          "instrument_type": {
            "$ref": "#/components/schemas/InstrumentType"
          },
          "instrument_status": {
            "$ref": "#/components/schemas/InstrumentStatus"
          }
        },
        "additionalProperties": false
      },
      "AccountInterest": {
        "type": "object",
        "properties": {
          "account_details": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "interest_rate": {
            "$ref": "#/components/schemas/InterestRate"
          }
        },
        "additionalProperties": false
      },
      "AccountInterestRate": {
        "required": [
          "interest_rate_code",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Unique id of the program",
            "format": "uuid"
          },
          "interest_rate_code": {
            "minLength": 1,
            "type": "string",
            "description": "Interest rate unique code"
          },
          "display_name": {
            "maxLength": 64,
            "type": "string",
            "description": "Display name for the interest code",
            "nullable": true
          },
          "interest_rate": {
            "type": "number",
            "description": "Value in conjunction with the interest rate 'type'",
            "format": "double",
            "nullable": true
          },
          "make_default": {
            "type": "boolean",
            "description": "Make the corresponding account interest rate as the default for the program",
            "nullable": true
          },
          "is_delete": {
            "type": "boolean",
            "description": "Delete the corresponding account interest rate code for the program"
          }
        },
        "additionalProperties": false
      },
      "AccountInterestRateCode": {
        "required": [
          "interest_config",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "interest_config": {
            "$ref": "#/components/schemas/InterestConfig"
          },
          "make_default": {
            "type": "boolean",
            "description": "Make the corresponding account interest rate as the default for the program"
          },
          "program_guid": {
            "type": "string",
            "description": "Unique id of the program",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AccountInterestRateRequest": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Unique id of the account.\r\nMandatory if account_instrument_guid is not passed",
            "format": "uuid"
          },
          "account_instrument_guid": {
            "type": "string",
            "description": "Unique id of the account instrument.\r\nMandatory if account_guid is not passed",
            "format": "uuid"
          },
          "display_name": {
            "maxLength": 64,
            "type": "string",
            "description": "Display name for the interest code.\r\nMandatory if code is not passed",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "type": "string",
            "description": " Interest rate unique code.\r\nMandatory if display_name is not passed",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountSharedPersonDTO": {
        "type": "object",
        "properties": {
          "holder_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "related_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "holder_shared_account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "holder_wallet_guid": {
            "type": "string",
            "format": "uuid"
          },
          "relationship": {
            "type": "string",
            "nullable": true
          },
          "holder_share_status": {
            "type": "string",
            "nullable": true
          },
          "system_share_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountStatus": {
        "enum": [
          "SYSTEM",
          "ACTIVE",
          "FREEZE",
          "CLOSED",
          "OPTOUT"
        ],
        "type": "string",
        "description": "Account status code."
      },
      "AccountStatusUser": {
        "required": [
          "account_status"
        ],
        "type": "object",
        "properties": {
          "account_status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "reason_code": {
            "type": "string",
            "description": "Refer reason_code master data list to send valid reason code for status change",
            "nullable": true
          },
          "reason_description": {
            "type": "string",
            "description": "Optional Additional info to be sent by client",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountType": {
        "enum": [
          "GENERAL",
          "PROGFUND",
          "CHECK",
          "REVENUE",
          "COLLECTION",
          "PRINCIPAL",
          "SECURE",
          "CREDIT",
          "USERDEFINED",
          "ADVANCE",
          "PROG_DISBURSE",
          "EXCEPTION",
          "WRITEOFF",
          "SUSPENSE"
        ],
        "type": "string",
        "description": "Type of Account.\r\nProgram level accounts: PROGFUND, REVENUE, COLLECTION, PROG_DISBURSE, EXCEPTION, WRITEOFF, SUSPENSE\r\nUser accounts: GENERAL, PRINCIPAL, SECURE, CREDIT, ADVANCE, CHECK, USERDEFINED"
      },
      "AccountTypesPC": {
        "enum": [
          "PROGFUND",
          "REVENUE",
          "COLLECTION",
          "PROG_DISBURSE",
          "EXCEPTION",
          "WRITEOFF",
          "SUSPENSE"
        ],
        "type": "string"
      },
      "AccountsInterestRate": {
        "required": [
          "interest_rate_code"
        ],
        "type": "object",
        "properties": {
          "interest_rate_code": {
            "minLength": 1,
            "type": "string",
            "description": "Interest Rate Code"
          },
          "display_name": {
            "maxLength": 64,
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/InterestType"
          },
          "interest_rate": {
            "type": "number",
            "description": "Interest Rate",
            "format": "double",
            "nullable": true
          },
          "make_default": {
            "type": "boolean",
            "description": "Program's default interest rate configuration",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Acknowledgement": {
        "type": "object",
        "properties": {
          "tc_version": {
            "type": "string",
            "nullable": true
          },
          "acknowledgement_date": {
            "type": "string",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDTO": {
        "type": "object",
        "properties": {
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code.",
            "nullable": true
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "type": "string",
            "description": "State name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address details"
      },
      "AdjustBalanceRequest": {
        "required": [
          "amount",
          "currency",
          "request_code"
        ],
        "type": "object",
        "properties": {
          "client_reference_id": {
            "type": "string",
            "description": "Transaction's unique external id from the client's system.",
            "nullable": true
          },
          "request_code": {
            "minLength": 1,
            "type": "string",
            "description": "Refer request_code data list to send valid request codes for balance adjustment."
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Transaction currency in ISO-3 string format."
          },
          "description": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Optional transaction description provided by the API client.",
            "nullable": true
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transaction.",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account unique identifier on the platform, for which balance is being adjusted.",
            "format": "uuid",
            "nullable": true
          },
          "wire_date": {
            "type": "string",
            "description": "Reference date in UTC format for the corresponding transaction at bank.",
            "format": "date-time",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique identifier for card, in case balance adjustment is happening through card reference.",
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "user_guid": {
            "type": "string",
            "description": "Unique identifier for the user initiating the balance adjustment.",
            "format": "uuid"
          },
          "source_code": {
            "type": "string",
            "description": "Refer source_code list to send valid source code for balance adjustment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustBalanceResponse": {
        "required": [
          "amount",
          "currency",
          "request_code"
        ],
        "type": "object",
        "properties": {
          "client_reference_id": {
            "type": "string",
            "description": "API Partner can send the transfer's unique id on their system and it can be used to fetch transfer details later",
            "nullable": true
          },
          "request_code": {
            "minLength": 1,
            "type": "string",
            "description": "Request Code"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer.",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "description": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "API Partner can send the transfer's description for reference",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Transfer Type",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card Proxy",
            "nullable": true
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "user_guid": {
            "type": "string",
            "description": "User Guid",
            "format": "uuid"
          },
          "source_code": {
            "type": "string",
            "description": "Source code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceAccount": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Unique identifier of the account on the platform.",
            "format": "uuid",
            "nullable": true
          },
          "client_reference_id": {
            "type": "string",
            "description": "Client or external reference id of the account.",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "description": "Advance account start date",
            "format": "date-time",
            "nullable": true
          },
          "limit": {
            "type": "number",
            "description": "Advance account limit",
            "format": "double",
            "nullable": true
          },
          "outstanding_balance": {
            "type": "number",
            "description": "Current outstanding balance on the advance account.",
            "format": "double",
            "nullable": true
          },
          "credit_product": {
            "type": "string",
            "description": "Type of product for the advance account.",
            "nullable": true
          },
          "cycle": {
            "type": "string",
            "description": "Payment cycle.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the advance account.",
            "nullable": true
          },
          "payment_summary": {
            "$ref": "#/components/schemas/AdvanceSummary"
          },
          "payment_schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvanceSchedule"
            },
            "description": "Future payment schedule for the advance.",
            "nullable": true
          },
          "available_date_range": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvanceAvailableDateRange"
            },
            "description": "Available date range for the advance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Account of type ADVANCE"
      },
      "AdvanceAccountDetails": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/AdvanceAccount"
          }
        },
        "additionalProperties": false,
        "description": "Additional details for ADVANCE type account"
      },
      "AdvanceAvailableDateRange": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceCycleType": {
        "enum": [
          "BIWEEKLY",
          "SEMIMONTHLY",
          "MONTHLY"
        ],
        "type": "string"
      },
      "AdvancePreCalcRequest": {
        "type": "object",
        "properties": {
          "payment_date": {
            "type": "string",
            "description": "Payment Date",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Amount of pre-calculated advance funds",
            "format": "double"
          },
          "cycle": {
            "$ref": "#/components/schemas/AdvanceCycleType"
          }
        },
        "additionalProperties": false
      },
      "AdvancePreCalcResponse": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "nullable": true
          },
          "disbursement_amount_requested": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "disbursement_fee_requested": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "advance_account_details": {
            "$ref": "#/components/schemas/AdvanceAccountDetails"
          }
        },
        "additionalProperties": false
      },
      "AdvanceSchedule": {
        "type": "object",
        "properties": {
          "mob": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "disbursement_principal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "disbursement_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "principal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "paid_principal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "paid_interest": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "cycle": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdvanceSummary": {
        "type": "object",
        "properties": {
          "outstanding_principal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "disbursement_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "processing_fees": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "carriedbalance_fees": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "total_repayment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "number_of_payments": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Summary of the advance."
      },
      "Answer": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key sent as part of the questions",
            "nullable": true
          },
          "answer": {
            "type": "string",
            "description": "Answer submitted by the person for verification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplyAdvanceRequest": {
        "required": [
          "progfund_account_guid",
          "request_id"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "request_id provided from advance pre-calc response",
            "format": "uuid"
          },
          "progfund_account_guid": {
            "type": "string",
            "description": "Progfund account guid",
            "format": "uuid"
          },
          "general_account_guid": {
            "type": "string",
            "description": "Account for customer whose account type is GENERAL\r\nRequired if more than 1 general account exists for customer",
            "format": "uuid",
            "nullable": true
          },
          "currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency of the Advance; Defaulted to 'USD'",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Outside instrument id to schedule the payments",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplyAdvanceResponse": {
        "type": "object",
        "properties": {
          "disbursement_amount_requested": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "disbursement_fee_requested": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "advance_account_details": {
            "$ref": "#/components/schemas/AdvanceAccountDetails"
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplyFeeRequest": {
        "required": [
          "amount",
          "client_reference_id",
          "currency",
          "request_code",
          "source"
        ],
        "type": "object",
        "properties": {
          "request_code": {
            "minLength": 1,
            "type": "string",
            "description": "The Fee request code."
          },
          "amount": {
            "type": "number",
            "description": "Fee amount to be charged for the source account",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code of the fee"
          },
          "description": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "Optional - API Partner can send the transfer's description for reference",
            "nullable": true
          },
          "client_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "API Partner can send the transfer's unique id on their system and it can be used to fetch transfer details later"
          },
          "source": {
            "$ref": "#/components/schemas/FeeSourceDetail"
          },
          "revenue_account_guid": {
            "type": "string",
            "description": "Optional - API Partner provided revenue account, must belong to same program",
            "format": "uuid",
            "nullable": true
          },
          "allow_partial": {
            "type": "boolean",
            "description": "Optional - charge only the part of the fee that wll take the balance to zero otherwise it will fail.",
            "nullable": true
          },
          "txn_guid": {
            "type": "string",
            "description": "If applying a fee to a financial transaction this input is required.",
            "format": "uuid"
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transfer type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplyFeeResponse": {
        "required": [
          "amount",
          "client_reference_id",
          "currency",
          "source"
        ],
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Transactions guid",
            "format": "uuid"
          },
          "request_code": {
            "type": "string",
            "description": "request_code for the fee",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Fee amount to be charged for the source account",
            "format": "double"
          },
          "currency": {
            "minLength": 1,
            "type": "string",
            "description": "Currency of fee to be charged"
          },
          "description": {
            "type": "string",
            "description": "Optional description",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/FeeSourceDetail"
          },
          "revenue_account_guid": {
            "type": "string",
            "description": "API Partner provided revenue account, must belong to same program",
            "format": "uuid"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance of the account charged with the fee",
            "format": "double"
          },
          "available_balance": {
            "type": "number",
            "description": "Available balance of the account charged with the fee",
            "format": "double"
          },
          "partial": {
            "type": "boolean",
            "description": "Was it a partial fee   ( based on allow_negative )"
          },
          "client_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "API Partner can send the transfer's unique id on their system and it can be used to fetch transfer details later"
          }
        },
        "additionalProperties": false
      },
      "AssignCardDTO": {
        "required": [
          "card",
          "person"
        ],
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "card": {
            "$ref": "#/components/schemas/CardDTO"
          }
        },
        "additionalProperties": false
      },
      "BankAccount": {
        "required": [
          "account_number",
          "account_type"
        ],
        "type": "object",
        "properties": {
          "account_type": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "account_number": {
            "maxLength": 16,
            "minLength": 6,
            "type": "string",
            "description": "Bank Account number"
          },
          "routing_number": {
            "maxLength": 16,
            "minLength": 6,
            "type": "string",
            "description": "For DDA types bank identification routing number",
            "nullable": true
          },
          "rtp_routing_number": {
            "maxLength": 16,
            "minLength": 6,
            "type": "string",
            "description": "For Real time payment DDA types bank identification routing number",
            "nullable": true
          },
          "bank_identifier": {
            "type": "string",
            "description": "Bank ISO assigned identifier or BIC",
            "nullable": true
          },
          "bank_dba": {
            "maxLength": 30,
            "minLength": 6,
            "type": "string",
            "description": "Bank (doing business as) name",
            "nullable": true
          },
          "bank_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "swift_code": {
            "type": "string",
            "description": "Swift Code",
            "nullable": true
          },
          "bank_phone": {
            "type": "string",
            "description": "Bank Phone",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "name_on_account": {
            "type": "string",
            "description": "Name on Account",
            "nullable": true
          },
          "accountholder_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "additional_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "additional data for future use",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "BankAccountType": {
        "enum": [
          "DDA",
          "CHECKING",
          "SAVING"
        ],
        "type": "string",
        "description": "Bank Account type must be DDA, CHECKING or SAVING.\r\nDDA will be deprecated using CHECKING, SAVING and DDA selection defaults to CHECKING"
      },
      "BankEftEntry": {
        "required": [
          "bank_eft_guid",
          "channel_name",
          "payment_date",
          "reason_code",
          "reference_number",
          "request_code",
          "response_code",
          "txn_amount",
          "txn_currency_code",
          "txn_date"
        ],
        "type": "object",
        "properties": {
          "bank_eft_guid": {
            "type": "string",
            "description": "bank eft transaction guid",
            "format": "uuid"
          },
          "channel_name": {
            "minLength": 1,
            "type": "string",
            "description": "channel name"
          },
          "request_code": {
            "minLength": 1,
            "type": "string",
            "description": "request code"
          },
          "response_code": {
            "minLength": 1,
            "type": "string",
            "description": "response code"
          },
          "reason_code": {
            "minLength": 1,
            "type": "string",
            "description": "reason code"
          },
          "txn_amount": {
            "type": "number",
            "description": "transaction amount",
            "format": "double"
          },
          "txn_currency_code": {
            "minLength": 1,
            "type": "string",
            "description": "transaction currency"
          },
          "txn_date": {
            "type": "string",
            "description": "transaction date",
            "format": "date-time"
          },
          "payment_date": {
            "type": "string",
            "description": "payment date",
            "format": "date-time"
          },
          "reference_number": {
            "minLength": 1,
            "type": "string",
            "description": "reference number"
          },
          "beneficiary_instrument_guid": {
            "type": "string",
            "description": "beneficiary instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "payer_instrument_guid": {
            "type": "string",
            "description": "payer instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "orig_account_guid": {
            "type": "string",
            "description": "origination account guid",
            "format": "uuid",
            "nullable": true
          },
          "recv_account_guid": {
            "type": "string",
            "description": "receving account guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchfileDTO": {
        "type": "object",
        "properties": {
          "batchfile_guid": {
            "type": "string",
            "description": "batchfile_guid",
            "format": "uuid"
          },
          "sys_utcinserted": {
            "type": "string",
            "description": "sys_utcinserted",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "description": "sys_utcupdated",
            "format": "date-time"
          },
          "channel_name": {
            "type": "string",
            "description": "channel_name",
            "nullable": true
          },
          "file_path": {
            "type": "string",
            "description": "file_path",
            "nullable": true
          },
          "last_row_loaded": {
            "type": "integer",
            "description": "last_row_loaded",
            "format": "int32"
          },
          "file_direction": {
            "type": "string",
            "description": "file_direction",
            "nullable": true
          },
          "file_date": {
            "type": "string",
            "description": "file_date",
            "format": "date-time"
          },
          "file_time": {
            "type": "string",
            "description": "file_time",
            "nullable": true
          },
          "file_version": {
            "type": "string",
            "description": "file_version",
            "nullable": true
          },
          "file_id_modifier": {
            "type": "string",
            "description": "File_id_modifier",
            "nullable": true
          },
          "user_guid": {
            "type": "string",
            "description": "user_guid",
            "format": "uuid"
          },
          "batch_count": {
            "type": "integer",
            "description": "batch_count",
            "format": "int32",
            "nullable": true
          },
          "entry_count": {
            "type": "integer",
            "description": "entry_count",
            "format": "int32",
            "nullable": true
          },
          "credits_amount": {
            "type": "number",
            "description": "credits_amount",
            "format": "double"
          },
          "debits_amount": {
            "type": "number",
            "description": "debits_amount",
            "format": "double"
          },
          "file_name": {
            "type": "string",
            "description": "file_name",
            "nullable": true
          },
          "file_status": {
            "type": "string",
            "description": "file_status",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "program_guid",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Batchfile DTO"
      },
      "BatchfileDownloadRequest": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "program_guid",
            "format": "uuid"
          },
          "batchfile_guid": {
            "type": "string",
            "description": "batchfile_guid",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "BatchfileRequest": {
        "type": "object",
        "properties": {
          "batchfile_type": {
            "$ref": "#/components/schemas/BatchfileType"
          },
          "batchfile_name": {
            "type": "string",
            "description": "Batchfile Name",
            "nullable": true
          },
          "document": {
            "type": "string",
            "description": "document",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Batchfile Request"
      },
      "BatchfileResponse": {
        "type": "object",
        "properties": {
          "responseStatus": {
            "type": "string",
            "nullable": true
          },
          "batchfileDTO": {
            "$ref": "#/components/schemas/BatchfileDTO"
          }
        },
        "additionalProperties": false,
        "description": "Batchfile Response"
      },
      "BatchfileType": {
        "enum": [
          "EXCEL"
        ],
        "type": "string",
        "description": "Batchfile Type"
      },
      "BeneficialOwnerPersonInfo": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "Beneficial owner first name",
            "nullable": true
          },
          "middle_name": {
            "type": "string",
            "description": "Beneficial owner first name",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Beneficial owner last name",
            "nullable": true
          },
          "title": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Title"
            },
            "description": "Beneficial owner title",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "Beneficial owner phone number",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Beneficial owner email address",
            "nullable": true
          },
          "beneficial_owner_type": {
            "$ref": "#/components/schemas/BeneficialOwnerType"
          },
          "ssn": {
            "type": "string",
            "description": "Beneficial owner SSN",
            "nullable": true
          },
          "last_four_ssn": {
            "type": "string",
            "description": "Beneficial owner last_four_ssn",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "description": "Beneficial owner date of birth YYYY/MM/DD or YYYY-MM-DD",
            "nullable": true
          },
          "beneficial_ownership": {
            "maximum": 100,
            "minimum": 0,
            "pattern": "^\\d+(\\.\\d{1,2})?$",
            "type": "number",
            "description": "Beneficial Owner % Stake - Percentage stake of the person in the entity",
            "format": "double",
            "nullable": true
          },
          "bo_for_company_name": {
            "type": "string",
            "description": "Beneficial company name",
            "nullable": true
          },
          "beneficial_company_lic": {
            "type": "string",
            "description": "Beneficial company lic/tin number",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code.",
            "nullable": true
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "type": "string",
            "description": "State name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeneficialOwnerPersonInfoNoDoc": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Beneficial owner full name",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "Beneficial owner first name",
            "nullable": true
          },
          "middle_name": {
            "type": "string",
            "description": "Beneficial owner first name",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Beneficial owner last name",
            "nullable": true
          },
          "title": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Title"
            },
            "description": "Beneficial owner title",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "Beneficial owner phone number",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Beneficial owner email address",
            "nullable": true
          },
          "ownership_type": {
            "$ref": "#/components/schemas/BeneficialOwnerType"
          },
          "ssn": {
            "type": "string",
            "description": "Beneficial owner SSN",
            "nullable": true
          },
          "last_four_ssn": {
            "type": "string",
            "description": "Beneficial owner last_four_ssn",
            "nullable": true
          },
          "dob": {
            "type": "string",
            "description": "Beneficial owner date of birth YYYY/MM/DD or YYYY-MM-DD",
            "nullable": true
          },
          "beneficial_ownership": {
            "maximum": 100,
            "minimum": 0,
            "pattern": "^\\d+(\\.\\d{1,2})?$",
            "type": "number",
            "description": "Beneficial Owner % Stake - Percentage stake of the person in the entity",
            "format": "double",
            "nullable": true
          },
          "beneficial_company_name": {
            "type": "string",
            "description": "Beneficial company name",
            "nullable": true
          },
          "beneficial_company_lic": {
            "type": "string",
            "description": "Beneficial company lic/tin number",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code.",
            "nullable": true
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "type": "string",
            "description": "State name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeneficialOwnerType": {
        "enum": [
          "INDIVIDUAL",
          "BUSINESS"
        ],
        "type": "string"
      },
      "BoJournalDetails": {
        "type": "object",
        "properties": {
          "journal_guid": {
            "type": "string",
            "format": "uuid"
          },
          "base_journal_guid": {
            "type": "string",
            "format": "uuid"
          },
          "company_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "support_user_guid": {
            "type": "string",
            "format": "uuid"
          },
          "journal_date": {
            "type": "string",
            "format": "date-time"
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "journal_entry": {
            "type": "string",
            "nullable": true
          },
          "source_code": {
            "type": "string",
            "nullable": true
          },
          "source_user_guid": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "source_user_name": {
            "type": "string",
            "nullable": true
          },
          "support_user_name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkIssuanceType": {
        "enum": [
          "FULL",
          "ONETIMELOAD"
        ],
        "type": "string"
      },
      "BulkOrderDetail": {
        "required": [
          "order_count",
          "order_guid",
          "order_status",
          "order_type",
          "package_guid",
          "person",
          "personInfo",
          "program_guid",
          "shipmethod",
          "sys_utcinserted",
          "sys_utcupdated",
          "wallet_guid"
        ],
        "type": "object",
        "properties": {
          "order_guid": {
            "type": "string",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "format": "uuid"
          },
          "package_guid": {
            "type": "string",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          },
          "order_type": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "shipmethod": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "signature_required": {
            "type": "boolean",
            "nullable": true
          },
          "tracking_number": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "order_count": {
            "type": "integer",
            "format": "int32"
          },
          "order_status": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "order_error_code": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "carrier": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "package_name": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "personInfo": {
            "$ref": "#/components/schemas/Person"
          },
          "person": {
            "$ref": "#/components/schemas/BulkOrderPersonInfo"
          }
        },
        "additionalProperties": false,
        "description": "Bulk Order Detail Class"
      },
      "BulkOrderPersonInfo": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "description": "Person_guid",
            "format": "uuid"
          },
          "first_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s first name. Mandatory if person_guid is not passed",
            "nullable": true
          },
          "middle_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s middle name.",
            "nullable": true
          },
          "last_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s last name. Mandatory if person_guid is not passed",
            "nullable": true
          },
          "mailing_city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "mailing_country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code.",
            "nullable": true
          },
          "mailing_address_line1": {
            "maxLength": 60,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 60,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "type": "string",
            "description": "State name",
            "nullable": true
          },
          "location_name": {
            "maxLength": 48,
            "type": "string",
            "description": "location name",
            "nullable": true
          },
          "email_address": {
            "maxLength": 128,
            "type": "string",
            "description": "Person’s email address.",
            "nullable": true
          },
          "mobile_number": {
            "maxLength": 16,
            "type": "string",
            "description": "Person’s mobile phone number.",
            "format": "tel",
            "nullable": true
          },
          "office_number": {
            "maxLength": 16,
            "type": "string",
            "description": "The Person’s office phone number.",
            "format": "tel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkOrderReq": {
        "type": "object",
        "properties": {
          "order_guid": {
            "type": "string",
            "description": "Order guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Bulk Order Request Class"
      },
      "BulkOrderRequest": {
        "required": [
          "location_name",
          "person",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Package guid",
            "format": "uuid"
          },
          "emboss_line3": {
            "maxLength": 26,
            "type": "string",
            "description": "Third line",
            "nullable": true
          },
          "emboss_line4": {
            "maxLength": 26,
            "type": "string",
            "description": "Fourth line",
            "nullable": true
          },
          "shipping_method": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "order_guid": {
            "type": "string",
            "description": "Order guid",
            "format": "uuid",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid"
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "order_count": {
            "type": "integer",
            "description": "Order count",
            "format": "int32"
          },
          "order_status": {
            "maxLength": 40,
            "type": "string",
            "description": "Order status",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "bulk_issuance_type": {
            "$ref": "#/components/schemas/BulkIssuanceType"
          },
          "carrier": {
            "maxLength": 100,
            "type": "string",
            "description": "Carrier type",
            "nullable": true
          },
          "location_name": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string",
            "description": "location name"
          },
          "iin_brand": {
            "$ref": "#/components/schemas/IinBrand"
          },
          "revenue_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bulk Order Request Class"
      },
      "BulkOrderResponse": {
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Package guid",
            "format": "uuid",
            "nullable": true
          },
          "order_guid": {
            "type": "string",
            "description": "Order guid",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid"
          },
          "order_status": {
            "maxLength": 40,
            "type": "string",
            "description": "Order status",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/BulkOrderPersonInfo"
          },
          "revenue_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bulk Order Response Class"
      },
      "BulkOrderSummary": {
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "format": "uuid"
          },
          "package_name": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          },
          "program_name": {
            "type": "string",
            "nullable": true
          },
          "inventory_ordered": {
            "type": "integer",
            "format": "int32"
          },
          "inventory_inHand": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Bulk Order Summary Class"
      },
      "BulkOrderSummarySearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkOrderSummary"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkOrders": {
        "required": [
          "package_name",
          "person"
        ],
        "type": "object",
        "properties": {
          "order_guid": {
            "type": "string",
            "description": "Order guid",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid",
            "nullable": true
          },
          "package_guid": {
            "type": "string",
            "description": "Package guid",
            "format": "uuid",
            "nullable": true
          },
          "order_type": {
            "type": "string",
            "description": "Order type",
            "nullable": true
          },
          "shipping_method": {
            "type": "string",
            "description": "Shipping Method",
            "nullable": true
          },
          "tracking_number": {
            "maxLength": 20,
            "type": "string",
            "description": "Tracking number",
            "nullable": true
          },
          "order_count": {
            "type": "integer",
            "description": "Order count",
            "format": "int32",
            "nullable": true
          },
          "bulk_order_status": {
            "type": "string",
            "description": "BulkOrderStatus",
            "nullable": true
          },
          "order_date": {
            "type": "string",
            "description": "order created date",
            "format": "date-time"
          },
          "package_name": {
            "minLength": 1,
            "type": "string",
            "description": "package name"
          },
          "order_error_message": {
            "maxLength": 200,
            "type": "string",
            "description": "Order error message",
            "nullable": true
          },
          "carrier": {
            "maxLength": 100,
            "type": "string",
            "description": "Carrier",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/BulkOrderPersonInfo"
          }
        },
        "additionalProperties": false,
        "description": "Bulk Orders Class"
      },
      "BulkOrdersSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkOrders"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelEFTRequest": {
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Original transaction reference. Txn_guid or bank_eft_guid is required",
            "format": "uuid",
            "nullable": true
          },
          "bank_eft_guid": {
            "type": "string",
            "description": "The original EFT transaction reference. Bank_eft_guid or txn_guid is required.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelEFTResponse": {
        "type": "object",
        "properties": {
          "channel_name": {
            "type": "string",
            "description": "Channel name. Indicates the type of transaction (ACH)",
            "nullable": true
          },
          "txn_guid": {
            "type": "string",
            "description": "Original transaction reference",
            "format": "uuid",
            "nullable": true
          },
          "bank_eft_guid": {
            "type": "string",
            "description": "Original EFT transaction reference",
            "format": "uuid"
          },
          "reverse_bank_eft_guid": {
            "type": "string",
            "description": "Reversed EFT transaction reference",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "Amount canceled",
            "format": "double"
          },
          "response_code": {
            "type": "string",
            "description": "Reversed transaction response",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Reversed transaction reason code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardAccount": {
        "required": [
          "card_number",
          "expiration_date"
        ],
        "type": "object",
        "properties": {
          "card_number": {
            "maxLength": 19,
            "minLength": 13,
            "type": "string",
            "description": "Card number"
          },
          "expiration_date": {
            "maxLength": 4,
            "minLength": 4,
            "type": "string",
            "description": "Card expiration date to be provided in YYMM format- Example: November 2023 as 2311"
          },
          "verification_code": {
            "maxLength": 5,
            "minLength": 3,
            "type": "string",
            "description": "Card verification value or code (Signature panel CVV2/CVC2)",
            "nullable": true
          },
          "expiry_status": {
            "type": "string",
            "description": "Card expiry status. Only sent in response. To be ignored in request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "card account"
      },
      "CardActivationMethod": {
        "enum": [
          "ONLOAD",
          "ONISSUE",
          "HOLDER"
        ],
        "type": "string"
      },
      "CardCondition": {
        "enum": [
          "ORIGINAL",
          "REISSUE",
          "REPLACE",
          "RENEW"
        ],
        "type": "string"
      },
      "CardDTO": {
        "type": "object",
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card number will be available only for PCI certified partners",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "mask_card_pan": {
            "type": "string",
            "description": "Masked card number. Example - XXXXXXXXXXXX0007",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique ID of the wallet associated with the card.",
            "format": "uuid"
          },
          "wallet_id": {
            "type": "string",
            "description": "ID of the wallet associated with the card",
            "nullable": true
          },
          "issuance_type": {
            "$ref": "#/components/schemas/IssuanceType"
          },
          "base_iin": {
            "type": "string",
            "description": "Base IIN associated to card",
            "nullable": true
          },
          "card_condition": {
            "$ref": "#/components/schemas/CardCondition"
          },
          "card_status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "activation_date": {
            "type": "string",
            "description": "Card activation date",
            "format": "date-time",
            "nullable": true
          },
          "activation_method": {
            "$ref": "#/components/schemas/CardActivationMethod"
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date of the card in YYYY-MM-dd format",
            "nullable": true
          },
          "cvx2": {
            "type": "string",
            "description": "Card's cvv/cvc value. This is only available for PCI certified API partners.",
            "nullable": true
          },
          "logical_expiration_date": {
            "type": "string",
            "description": "Logical expiration date of the card",
            "format": "date-time"
          },
          "person_card_status": {
            "$ref": "#/components/schemas/PersonCardStatus"
          },
          "card_tracking_detail": {
            "$ref": "#/components/schemas/CardTrackingDTO"
          },
          "status_change_nonmon_detail": {
            "$ref": "#/components/schemas/TxnNonmonDetail"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The card resource represents a plastic or virtual card issued by Qolo.\r\nImportant attributes of card are \r\n1. Card number - Primary Account Number (PAN) uniquely identifies you card\r\n2. CVV2\r\n3. Expiration Date\r\n4. CH Name"
      },
      "CardDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardFulfillment": {
        "required": [
          "issuance_type"
        ],
        "type": "object",
        "properties": {
          "issuance_type": {
            "$ref": "#/components/schemas/IssuanceType"
          },
          "fourth_line": {
            "type": "string",
            "description": "Fourth line data to be printed on the physical card. Can also be picked up from the program configuration where applicable.",
            "nullable": true
          },
          "iin_brand": {
            "$ref": "#/components/schemas/IinBrand"
          },
          "fulfillment_order_info": {
            "$ref": "#/components/schemas/FulfillmentOrderInfo"
          }
        },
        "additionalProperties": false,
        "description": "Data related to the fulfillment/embossing file."
      },
      "CardInformation": {
        "type": "object",
        "properties": {
          "encryptedData": {
            "type": "string",
            "nullable": true
          },
          "publicKeyFingerprint": {
            "type": "string",
            "nullable": true
          },
          "encryptedKey": {
            "type": "string",
            "nullable": true
          },
          "iv": {
            "type": "string",
            "nullable": true
          },
          "oaepHashingAlgorithm": {
            "type": "string",
            "nullable": true
          },
          "panUniqueReference": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardPINDTO": {
        "required": [
          "pin"
        ],
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "description": "Reason code to reset the PIN",
            "nullable": true
          },
          "pin": {
            "maxLength": 6,
            "minLength": 4,
            "type": "string",
            "description": "Card PIN"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CardStatus": {
        "enum": [
          "ACTIVE",
          "SUSPEND",
          "LOST",
          "STOLEN",
          "CLOSED",
          "FCLOSED",
          "PENDING",
          "DAMAGED",
          "FORGET"
        ],
        "type": "string"
      },
      "CardStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "reason_code": {
            "type": "string",
            "description": "Optional Additional info to be sent by partner",
            "nullable": true
          },
          "reason_description": {
            "type": "string",
            "description": "Optional Additional info to be sent by partner",
            "nullable": true
          },
          "override_status": {
            "type": "boolean",
            "description": "Optional parameter to override card status change rules. Defaults to FALSE, and is ignored for Card Activation event."
          }
        },
        "additionalProperties": false,
        "description": "card status profile"
      },
      "CardTrackingDTO": {
        "type": "object",
        "properties": {
          "fulfillment_house_name": {
            "type": "string",
            "nullable": true
          },
          "card_requested": {
            "type": "string",
            "format": "date-time"
          },
          "card_shipment_date": {
            "type": "string",
            "format": "date-time"
          },
          "card_delivery_method": {
            "type": "string",
            "nullable": true
          },
          "card_delivery_tracking_number": {
            "type": "string",
            "nullable": true
          },
          "card_package_name": {
            "type": "string",
            "nullable": true
          },
          "card_order_status": {
            "type": "string",
            "nullable": true
          },
          "digital_package_name": {
            "type": "string",
            "nullable": true
          },
          "digital_package_id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeAdvanceCycleRequest": {
        "type": "object",
        "properties": {
          "period": {
            "type": "integer",
            "description": "Value represented in the mob field of payment schedule found in retrieve account or advance precalc",
            "format": "int32"
          },
          "cycle": {
            "$ref": "#/components/schemas/AdvanceCycleType"
          }
        },
        "additionalProperties": false
      },
      "ChangeAdvanceCycleResponse": {
        "type": "object",
        "properties": {
          "advance_account_details": {
            "$ref": "#/components/schemas/AdvanceAccountDetails"
          }
        },
        "additionalProperties": false
      },
      "ChangeProgramRequest": {
        "required": [
          "destination_program_guid"
        ],
        "type": "object",
        "properties": {
          "card_proxy": {
            "type": "string",
            "description": "card proxy",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "wallet_id": {
            "maxLength": 19,
            "type": "string",
            "description": "wallet id",
            "nullable": true
          },
          "destination_program_guid": {
            "type": "string",
            "description": "Program guid card is to be changed to",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Data for Change Program"
      },
      "ChangeProgramResponse": {
        "required": [
          "card_proxy",
          "destination_program_guid",
          "wallet_guid",
          "wallet_id"
        ],
        "type": "object",
        "properties": {
          "card_proxy": {
            "minLength": 1,
            "type": "string",
            "description": "card proxy"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "wallet_id": {
            "maxLength": 19,
            "minLength": 1,
            "type": "string",
            "description": "wallet id"
          },
          "destination_program_guid": {
            "type": "string",
            "description": "Program guid card is to be changed to",
            "format": "uuid"
          },
          "person": {
            "$ref": "#/components/schemas/PersonDTO"
          }
        },
        "additionalProperties": false,
        "description": "Response Data for Change Program"
      },
      "ChannelProviderDTO": {
        "type": "object",
        "properties": {
          "channel_guid": {
            "type": "string",
            "description": "Channel unique id",
            "format": "uuid"
          },
          "channel_name": {
            "type": "string",
            "description": "Channel name",
            "nullable": true
          },
          "channel_description": {
            "type": "string",
            "description": "Channel description",
            "nullable": true
          },
          "channel_usage": {
            "type": "string",
            "description": "The process performed by the channel",
            "nullable": true
          },
          "channel_company_guid": {
            "type": "string",
            "description": "THe uniqueidentifier of the company associated with the channel",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ChannelType": {
        "enum": [
          "NotSet",
          "ACH",
          "SameDayACH",
          "RTP",
          "Wire",
          "ManualWire",
          "CrossBorder"
        ],
        "type": "string"
      },
      "ChargebackLogReqDTO": {
        "required": [
          "chargeback_level",
          "filing_status",
          "reason_code"
        ],
        "type": "object",
        "properties": {
          "filing_status": {
            "minLength": 1,
            "type": "string",
            "description": "Status of chargeback, whether already filed or yet to be filed."
          },
          "chargeback_level": {
            "minLength": 1,
            "type": "string",
            "description": "Chargeback level"
          },
          "reason_code": {
            "minLength": 1,
            "type": "string",
            "description": "Chargeback reason code"
          }
        },
        "additionalProperties": false
      },
      "ChargebackLogResDTO": {
        "type": "object",
        "properties": {
          "chargeback_level": {
            "type": "string",
            "description": "Chargeback level",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Chargeback reason code",
            "nullable": true
          },
          "chargeback_date": {
            "type": "string",
            "description": "Date of the chargeback",
            "format": "date-time"
          },
          "filing_status": {
            "type": "string",
            "description": "Status of chargeback, whether already filed or yet to be filed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckDTO": {
        "required": [
          "account_guid",
          "account_number",
          "check_amount",
          "check_number",
          "check_status",
          "date_issued",
          "memo",
          "payee_address",
          "payee_name",
          "program_guid",
          "routing_number",
          "txn_guid"
        ],
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Unique Program identifier on Qolo Platform. Retrieve all the checks issued for this program.",
            "format": "uuid"
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Account identifier on Qolo Platform. Retrieve all the checks issued for this account.",
            "format": "uuid"
          },
          "txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "reverse_txn_guid": {
            "type": "string",
            "description": "Present only if a previously issued check amount has been reversed (example: credited back to the account in case of a stopped check)",
            "format": "uuid",
            "nullable": true
          },
          "routing_number": {
            "maxLength": 40,
            "type": "string"
          },
          "account_number": {
            "maxLength": 40,
            "type": "string"
          },
          "check_number": {
            "maxLength": 40,
            "type": "string"
          },
          "date_issued": {
            "type": "string",
            "format": "date-time"
          },
          "check_amount": {
            "type": "number",
            "format": "double"
          },
          "payee_name": {
            "maxLength": 40,
            "type": "string"
          },
          "payee_address": {
            "maxLength": 40,
            "type": "string"
          },
          "check_status": {
            "type": "string"
          },
          "memo": {
            "maxLength": 512,
            "type": "string",
            "description": "Memo line that is printed on the check when it’s issued. After that whenever the status is changed, this field will have the memo text that is provided by the user (if any)."
          },
          "date_updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user_updated": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check DTO"
      },
      "CheckDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckNewStatusType": {
        "enum": [
          "ISSUED",
          "DISPUTED",
          "STOPPED",
          "REVERSED",
          "DROP"
        ],
        "type": "string"
      },
      "CheckSearchDTO": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit number of checks to retrieve (Will be defaulted to 100 if none specified)",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Index used for pagination of the result.",
            "format": "int32"
          },
          "program_guid": {
            "type": "string",
            "description": "Unique Program identifier on Qolo Platform. Retrieve all the checks issued for this program.",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Unique Person identifier on Qolo Platform. Retrieve all the checks issued for this person.",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Account identifier on Qolo Platform. Retrieve all the checks issued under this account.",
            "format": "uuid",
            "nullable": true
          },
          "date_from": {
            "type": "string",
            "description": "Date to search from in the format yyyy-MM-dd HH:mm:ss.  Please use the format yyyy-MM-dd 00:00:00 to fetch data from start of the day.",
            "format": "date-time",
            "nullable": true
          },
          "date_to": {
            "type": "string",
            "description": "Date to search till in the format yyyy-MM-dd HH:mm:ss.  Please use the format yyyy-MM-dd 23:59:59 to fetch data to end of the day.",
            "format": "date-time",
            "nullable": true
          },
          "check_status": {
            "$ref": "#/components/schemas/CheckStatusType"
          },
          "check_number": {
            "type": "string",
            "description": "Retrieve details of a specific check.",
            "nullable": true
          },
          "checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckDTO"
            },
            "description": "list of checks.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check Search DTO"
      },
      "CheckStatusDTO": {
        "required": [
          "new_status"
        ],
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "check_number": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "new_status": {
            "$ref": "#/components/schemas/CheckNewStatusType"
          },
          "notes": {
            "maxLength": 512,
            "type": "string",
            "nullable": true
          },
          "reverse_txn_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check Status DTO"
      },
      "CheckStatusType": {
        "enum": [
          "NOTISSUED",
          "ISSUED",
          "CLEARED",
          "DISPUTED",
          "STOPPED",
          "EXPIRED",
          "CANCELLED",
          "REVERSED",
          "DROP",
          "VOID"
        ],
        "type": "string",
        "description": "Different statuses of a check\r\nDescription attribute reflects the actual value in database"
      },
      "ClientVerification": {
        "required": [
          "verification_datetime",
          "verification_level",
          "verification_provider",
          "verification_provider_refnumber"
        ],
        "type": "object",
        "properties": {
          "document_approved": {
            "type": "boolean",
            "description": "document approved"
          },
          "person_status_update": {
            "type": "boolean",
            "description": "person cleared"
          },
          "override_sanction_check": {
            "type": "boolean",
            "description": "override sanction check"
          },
          "verification_datetime": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "verification_provider": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "verification_provider_refnumber": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "verification_level": {
            "minLength": 1,
            "type": "string"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "required": [
          "address_line1",
          "company_dba_city",
          "company_dba_country",
          "company_dba_lic_number",
          "company_dba_name",
          "company_dba_state",
          "company_guid",
          "company_parent",
          "company_short_name",
          "company_status",
          "company_top",
          "institution_type",
          "postal_code",
          "sys_utcinserted",
          "sys_utcupdated"
        ],
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "format": "uuid"
          },
          "company_parent": {
            "type": "string",
            "format": "uuid"
          },
          "company_top": {
            "type": "string",
            "format": "uuid"
          },
          "company_dba_name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "company_short_name": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string"
          },
          "company_dba_lic_number": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string"
          },
          "company_dba_city": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "company_dba_state": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "company_dba_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "institution_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "company_status": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "address_line1": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "phone_number": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ownership_type": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "incorporation_state": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          },
          "incorporation_country": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "incorportation_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "additional_data": {
            "maxLength": 8000,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDTO": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyResponse"
          }
        },
        "additionalProperties": false,
        "description": "Company DTO"
      },
      "CompanyDocStorageDetails": {
        "type": "object",
        "properties": {
          "document_reference_file": {
            "type": "string",
            "nullable": true
          },
          "file_type": {
            "type": "string",
            "nullable": true
          },
          "docpath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDocument": {
        "type": "object",
        "properties": {
          "document_type": {
            "$ref": "#/components/schemas/CompanyDocumentType"
          },
          "file_type": {
            "$ref": "#/components/schemas/CompanyFileType"
          },
          "issuing_country": {
            "type": "string",
            "description": "Issuing country",
            "nullable": true
          },
          "articles_of_incorporation_document": {
            "type": "string",
            "description": "Encode the pdf file provided by the user and provide in this field. \r\nPDF files are accepted. \r\nFiles should be at least 32 KB and cannot be larger than 10 MB",
            "nullable": true
          },
          "attestation_document": {
            "type": "string",
            "description": "Encode the pdf file provided by the user and provide in this field. \r\nPDF files are accepted. \r\nFiles should be at least 32 KB and cannot be larger than 10 MB",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDocumentType": {
        "enum": [
          "CORPORATE"
        ],
        "type": "string"
      },
      "CompanyFileType": {
        "enum": [
          "PDF"
        ],
        "type": "string"
      },
      "CompanyProgramDTO": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyResponse"
          },
          "program": {
            "$ref": "#/components/schemas/ProgramResponse"
          }
        },
        "additionalProperties": false,
        "description": "Company Program DTO"
      },
      "CompanyRequest": {
        "required": [
          "address_line1",
          "company_dba_city",
          "company_dba_country",
          "company_dba_lic_number",
          "company_dba_name",
          "company_dba_state",
          "institution_type",
          "postal_code"
        ],
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "description": "company unique id",
            "format": "uuid",
            "nullable": true
          },
          "company_parent": {
            "type": "string",
            "description": "parent company unique id",
            "format": "uuid",
            "nullable": true
          },
          "company_dba_name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "company doing-business-as name"
          },
          "company_short_name": {
            "maxLength": 24,
            "type": "string",
            "description": "company short name",
            "nullable": true
          },
          "company_dba_lic_number": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "company license number"
          },
          "address_line1": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string",
            "description": "company address line 1"
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "company address line 2",
            "nullable": true
          },
          "company_dba_city": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "company address city"
          },
          "company_dba_state": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "company address state"
          },
          "company_dba_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "company address country"
          },
          "institution_type": {
            "$ref": "#/components/schemas/InstitutionType"
          },
          "postal_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "postal code"
          },
          "phone_number": {
            "maxLength": 16,
            "type": "string",
            "description": "company phone number",
            "nullable": true
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "description": "company website",
            "nullable": true
          },
          "ownership_type": {
            "type": "string",
            "description": "company ownership_type",
            "nullable": true
          },
          "state_of_incorporation": {
            "maxLength": 32,
            "type": "string",
            "description": "company state of incorporation",
            "nullable": true
          },
          "country_of_incorporation": {
            "maxLength": 3,
            "type": "string",
            "description": "company country of incorporation",
            "nullable": true
          },
          "date_of_incorporation": {
            "type": "string",
            "description": "company date of incorporation",
            "format": "date-time",
            "nullable": true
          },
          "additional_data": {
            "maxLength": 1000,
            "type": "string",
            "description": "additional data",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Company Request DTO"
      },
      "CompanyResponse": {
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "description": "company unique id",
            "format": "uuid"
          },
          "company_parent": {
            "type": "string",
            "description": "parent company unique id",
            "format": "uuid"
          },
          "company_top": {
            "type": "string",
            "description": "top company uniquid id",
            "format": "uuid"
          },
          "company_dba_name": {
            "type": "string",
            "description": "company doing-business-as name",
            "nullable": true
          },
          "company_short_name": {
            "type": "string",
            "description": "company short name",
            "nullable": true
          },
          "company_dba_lic_number": {
            "type": "string",
            "description": "company license number",
            "nullable": true
          },
          "address_line1": {
            "type": "string",
            "description": "company address line 1",
            "nullable": true
          },
          "address_line2": {
            "type": "string",
            "description": "company address line 2",
            "nullable": true
          },
          "company_dba_city": {
            "type": "string",
            "description": "company address city",
            "nullable": true
          },
          "company_dba_state": {
            "type": "string",
            "description": "company address state",
            "nullable": true
          },
          "company_dba_country": {
            "type": "string",
            "description": "company address country",
            "nullable": true
          },
          "institution_type": {
            "$ref": "#/components/schemas/InstitutionType"
          },
          "company_status": {
            "$ref": "#/components/schemas/CompanyStatus"
          },
          "postal_code": {
            "type": "string",
            "description": "postal code",
            "nullable": true
          },
          "phone_number": {
            "maxLength": 16,
            "type": "string",
            "description": "company phone number",
            "nullable": true
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "description": "company website",
            "nullable": true
          },
          "ownership_type": {
            "type": "string",
            "description": "company ownership_type",
            "nullable": true
          },
          "state_of_incorporation": {
            "maxLength": 32,
            "type": "string",
            "description": "company state of incorporation",
            "nullable": true
          },
          "country_of_incorporation": {
            "maxLength": 3,
            "type": "string",
            "description": "company country of incorporation",
            "nullable": true
          },
          "date_of_incorporation": {
            "type": "string",
            "description": "company date of incorporation",
            "format": "date-time",
            "nullable": true
          },
          "additional_data": {
            "maxLength": 1000,
            "type": "string",
            "description": "additional data",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Company Response DTO"
      },
      "CompanyStatus": {
        "enum": [
          "UNVERIFIED",
          "CLEARED",
          "SANCTIONED",
          "NEGLIST",
          "CERTIFIED",
          "VERIFIED",
          "REVIEW",
          "FAILED"
        ],
        "type": "string"
      },
      "CompanyVerificationResultDTO": {
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "description": "Unique Id of the company",
            "format": "uuid"
          },
          "verificationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyVerificationResultDetail"
            },
            "description": "List of verification details for person",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyVerificationResultDetail": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "verfication_method": {
            "type": "string",
            "nullable": true
          },
          "verification_date": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "provider_reference": {
            "type": "string",
            "nullable": true
          },
          "provider_name": {
            "type": "string",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDocStorageDetails"
            },
            "nullable": true
          },
          "kyb_provider_data": {
            "$ref": "#/components/schemas/KYBProviderData"
          },
          "due_diligence_data": {
            "$ref": "#/components/schemas/PerformKybInfoRequest"
          }
        },
        "additionalProperties": false
      },
      "ConfigProgramIin": {
        "required": [
          "iin_inherit"
        ],
        "type": "object",
        "properties": {
          "iin_inherit": {
            "type": "boolean",
            "description": "true or false. Indicates if IIN details need to be inherited from the parent"
          },
          "iins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigProgramIinDetails"
            },
            "description": "IIN details. Conditional required if inherit flag is true",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "IIN details on Qolo platform."
      },
      "ConfigProgramIinDetails": {
        "required": [
          "base_iin",
          "iin",
          "iin_usage",
          "sponsor_name"
        ],
        "type": "object",
        "properties": {
          "iin": {
            "maxLength": 19,
            "minLength": 2,
            "type": "string",
            "description": "IIN details (Maps to routing number for DDA)"
          },
          "base_iin": {
            "maxLength": 19,
            "minLength": 2,
            "type": "string",
            "description": "IIN Root (This value is provided by Qolo)"
          },
          "iin_usage": {
            "maxLength": 16,
            "minLength": 2,
            "type": "string",
            "description": "IIN usage type. Possible values: CORP-DDA, ACCOUNT-DDA"
          },
          "sponsor_name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "Represents the bank associated with the IIN (provided by Qolo)"
          },
          "iin_length": {
            "type": "integer",
            "description": "The length of the value to be generated. Optional will\r\ndefault to a value of 15.\r\nMax length is 25\r\nMin length is 6",
            "format": "int32"
          },
          "iin_prefix": {
            "maxLength": 16,
            "type": "string",
            "description": "IIN prefix details",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigProgramInterest": {
        "required": [
          "program_base_rate"
        ],
        "type": "object",
        "properties": {
          "interest_rate_code": {
            "maxLength": 128,
            "minLength": 2,
            "type": "string",
            "description": "Interest rate code",
            "nullable": true
          },
          "program_base_rate": {
            "type": "number",
            "description": "Program interest rate percent value (xx.xx format)",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Interest details of the program"
      },
      "ConfigProgramOmnibus": {
        "required": [
          "omnibus_inherit"
        ],
        "type": "object",
        "properties": {
          "omnibus_inherit": {
            "type": "boolean",
            "description": "true or false. Whether omnibus details for the given purpose needs to be inherited from the program"
          },
          "sponsor_name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string",
            "description": "Bank associated with the Omnibus record. (Provided by Qolo) Required if inherit is false.",
            "nullable": true
          },
          "program_group_short_name": {
            "maxLength": 16,
            "type": "string",
            "description": "Program group the omnibus records will be linked to. Optional will be looked up if not provided.",
            "nullable": true
          },
          "omnibusAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigProgramOmnibusAccount"
            },
            "description": "List of Omnibus accounts linked to the sponsor bank",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Omnibus records for the program"
      },
      "ConfigProgramOmnibusAccount": {
        "required": [
          "account_number",
          "purpose",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "purpose": {
            "maxLength": 4,
            "minLength": 2,
            "type": "string",
            "description": "Omnibus purpose. ACH or WIRE"
          },
          "account_number": {
            "maxLength": 17,
            "minLength": 8,
            "type": "string",
            "description": "Omnibus Account Number"
          },
          "routing_number": {
            "maxLength": 9,
            "minLength": 8,
            "type": "string",
            "description": "Routing Number"
          },
          "identification_number": {
            "maxLength": 40,
            "minLength": 9,
            "type": "string",
            "description": "TIN or other Identification number. Required for ACH (PROG_ACH_SETTLEMENT)",
            "nullable": true
          },
          "omnibus_account_currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigProgramOmnibusDetails": {
        "required": [
          "account_number",
          "omnibus_purpose",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "omnibus_purpose": {
            "maxLength": 4,
            "minLength": 2,
            "type": "string",
            "description": "Omnibus purpose. Possible values are ACH or WIRE"
          },
          "account_number": {
            "maxLength": 32,
            "minLength": 2,
            "type": "string",
            "description": "Omnibus Account Number"
          },
          "routing_number": {
            "maxLength": 40,
            "minLength": 2,
            "type": "string",
            "description": "Routing Number"
          },
          "identification_number": {
            "maxLength": 40,
            "minLength": 2,
            "type": "string",
            "description": "TIN or other Identification number. Required for ACH (PROG_ACH_SETTLEMENT)",
            "nullable": true
          },
          "omnibus_account_currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigProgramPackage": {
        "required": [
          "package_inherit"
        ],
        "type": "object",
        "properties": {
          "package_inherit": {
            "type": "boolean",
            "description": "true or false whether to inherit package from parent or setup a new package"
          },
          "package": {
            "$ref": "#/components/schemas/ConfigProgramPackageValue"
          }
        },
        "additionalProperties": false
      },
      "ConfigProgramPackageDetails": {
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Package Identifier",
            "format": "uuid"
          },
          "package_name": {
            "type": "string",
            "description": "Package Name",
            "nullable": true
          },
          "channel_name": {
            "type": "string",
            "description": "Channel Name",
            "nullable": true
          },
          "fh_program_id": {
            "type": "string",
            "description": "For digital packages used to identify\r\nthe digital card art which is presented\r\nwhen card is displayed on a mobile\r\ndevice.",
            "nullable": true
          },
          "is_digital_package": {
            "type": "boolean",
            "description": "Indicates if this is a digital package"
          },
          "is_default_package": {
            "type": "boolean",
            "description": "Indicates if this is the default package\r\n(digital or physical) for the program"
          }
        },
        "additionalProperties": false,
        "description": "Fulfillment and Digital packages"
      },
      "ConfigProgramPackageValue": {
        "required": [
          "package_guid"
        ],
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Uniqueidentifier of a package",
            "format": "uuid"
          },
          "is_default_package": {
            "type": "boolean",
            "description": "Is this the default package? Will default to false."
          }
        },
        "additionalProperties": false,
        "description": "Packages to be configured for a program"
      },
      "ConfigProgramProgramGroup": {
        "required": [
          "program_group_inherit"
        ],
        "type": "object",
        "properties": {
          "program_group_inherit": {
            "type": "boolean",
            "description": "True or false. Indicates if a program group is to be inherited from the parent program"
          }
        },
        "additionalProperties": false,
        "description": "Information about the Program Group on Qolo platform"
      },
      "ConfigProgramRequest": {
        "required": [
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program unique id",
            "format": "uuid"
          },
          "program_group": {
            "$ref": "#/components/schemas/ConfigProgramProgramGroup"
          },
          "iin": {
            "$ref": "#/components/schemas/ConfigProgramIin"
          },
          "omnibus": {
            "$ref": "#/components/schemas/ConfigProgramOmnibus"
          },
          "interest": {
            "$ref": "#/components/schemas/ConfigProgramInterest"
          },
          "program_person_details": {
            "$ref": "#/components/schemas/ProgramPersonDetails"
          },
          "package": {
            "$ref": "#/components/schemas/ConfigProgramPackage"
          }
        },
        "additionalProperties": false
      },
      "ConversionDetails": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "nullable": true
          },
          "conversion_rate": {
            "type": "number",
            "format": "double"
          },
          "from_currency": {
            "type": "string",
            "nullable": true
          },
          "to_currency": {
            "type": "string",
            "nullable": true
          },
          "from_amount": {
            "type": "number",
            "format": "double"
          },
          "to_amount": {
            "type": "number",
            "format": "double"
          },
          "expiry_seconds": {
            "type": "integer",
            "format": "int64"
          },
          "expiry_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConversionFees": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateAccountInstrumentRequest": {
        "type": "object",
        "properties": {
          "account_instrument_type": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "wallet_id": {
            "type": "string",
            "description": "Generated Unique id of wallet",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Unique identifier of the account on the platform.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateAccountRequest": {
        "type": "object",
        "properties": {
          "account_currencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of currencies for the account creation. Valid only if account is being created. Data must be passed as ISO-3 string format.",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique Wallet GUID on the platform",
            "format": "uuid"
          },
          "wallet_id": {
            "type": "string",
            "description": "Platform generated id of the Wallet.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person unique identifer on the platform.",
            "format": "uuid"
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "account_name": {
            "type": "string",
            "description": "A user defined name of the account.",
            "nullable": true
          },
          "account_limit": {
            "type": "integer",
            "description": "Account maximum limit; only applicable for ADVANCE type programs and corresponding accounts.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCardRequest": {
        "required": [
          "person",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet GUID of the person, if the person is already created, and the wallet has to be specified where the new card is to be created. Can be skipped for a new person.",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program unique identifier.",
            "format": "uuid"
          },
          "months_until_expire": {
            "type": "integer",
            "description": "Number of months when card will expire. Can be skipped if the expiry months is configured for the program as part of program setup.",
            "format": "int64"
          },
          "fulfillment_data": {
            "$ref": "#/components/schemas/CardFulfillment"
          },
          "wallet_name": {
            "type": "string",
            "description": "Name of the Wallet.",
            "nullable": true
          },
          "account_name": {
            "type": "string",
            "description": "Name of the Account.",
            "nullable": true
          },
          "inventory_manager_guid": {
            "type": "string",
            "description": "The Inventory Manager person to bulk send created cards to. Passing this guid adds the card to a bulk personalized fulfillment order.",
            "format": "uuid",
            "nullable": true
          },
          "revenue_account_guid": {
            "type": "string",
            "description": "If shipping fees are applied this the account that the fee revenue funds are to be collected in.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCardResponse": {
        "required": [
          "person",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "program_guid": {
            "type": "string",
            "description": "Program guid",
            "format": "uuid"
          },
          "card": {
            "$ref": "#/components/schemas/CardDTO"
          },
          "fulfillment_data": {
            "$ref": "#/components/schemas/CardFulfillment"
          },
          "account_name": {
            "type": "string",
            "description": "Account_name",
            "nullable": true
          },
          "wallet_name": {
            "type": "string",
            "description": "wallet_name",
            "nullable": true
          },
          "revenue_account_guid": {
            "type": "string",
            "description": "Revenue_Account",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCompany": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyRequest"
          },
          "program": {
            "$ref": "#/components/schemas/ProgramRequest"
          }
        },
        "additionalProperties": false,
        "description": "Create Company DTO"
      },
      "CreatePaymentPayee": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Account guid",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Payer person guid",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Source outside instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "preferred_transfer_type": {
            "type": "string",
            "description": "Preferred Transfer Type\r\nPermitted values are ACCOUNTTOBANK, FASTACCOUNTTOBANK, CLIENTFUNDCHECK",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "account type",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "description": "Payee instrument type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument from the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee."
      },
      "CreatePaymentPayer": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Account guid",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Payer person guid",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Source outside instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "preferred_transfer_type": {
            "type": "string",
            "description": "Preferred Transfer Type\r\nPermitted values are ACCOUNTTOBANK, FASTACCOUNTTOBANK, CLIENTFUNDCHECK",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "account type",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "description": "Payee instrument type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payer: Identifies the original source of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be pulled from outside instrument to the payer's account guid before being sent to the payee. However, the outside instrument guid must belong to the payer."
      },
      "CreatePersonRelationRequest": {
        "required": [
          "holder_person_guid",
          "related_person",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "bypass_kyc": {
            "type": "boolean",
            "description": "Allows kyc verification to be skipped when creating a related person\r\nThe holder must have passed KYC\r\nThe related person must be created in a program the holder has a wallet in."
          },
          "holder_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "relationship": {
            "$ref": "#/components/schemas/Relationship"
          },
          "related_person": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "related_program_guid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePersonRelationResponse": {
        "type": "object",
        "properties": {
          "personRelation": {
            "$ref": "#/components/schemas/PersonRelation"
          },
          "related_person": {
            "$ref": "#/components/schemas/PersonDTO"
          }
        },
        "additionalProperties": false
      },
      "CreatePersonRequest": {
        "required": [
          "person_details",
          "program_guid"
        ],
        "type": "object",
        "properties": {
          "create_account": {
            "type": "boolean",
            "description": "Specify whether an account must be created for the person. If set to true, account currencies must be provided."
          },
          "person_details": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "account_currencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of currencies for account creation. Valid only if create_account is passed as true.",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          },
          "account_type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "account_name": {
            "type": "string",
            "description": "Name of the account\r\nSpecify an account name if an account must be created for the person. If create_account set to true, account name must be provided.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePersonResponse": {
        "type": "object",
        "properties": {
          "person_details": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "outside_instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutsideInstrumentDTO"
            },
            "nullable": true
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDTO"
            },
            "nullable": true
          },
          "account_details": {
            "$ref": "#/components/schemas/AccountDTO"
          }
        },
        "additionalProperties": false
      },
      "CreateSharedAccountRequest": {
        "required": [
          "holder_person_guid",
          "holder_shared_account_guid",
          "related_person_guid"
        ],
        "type": "object",
        "properties": {
          "create_wallet": {
            "type": "boolean",
            "description": "Determine if a wallet must be created for the related person."
          },
          "holder_person_guid": {
            "type": "string",
            "description": "The unique identifier of the person who owns the account being shared",
            "format": "uuid"
          },
          "related_person_guid": {
            "type": "string",
            "description": "The unique identifier of the person who is receiving the account share.",
            "format": "uuid"
          },
          "holder_shared_account_guid": {
            "type": "string",
            "description": "The unique identifier of the account being shared.",
            "format": "uuid"
          },
          "related_program_guid": {
            "type": "string",
            "description": "Unique identifier of the program under which the shared account is being created.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateSharedAccountResponse": {
        "type": "object",
        "properties": {
          "account_shared_person_data": {
            "$ref": "#/components/schemas/AccountSharedPersonDTO"
          },
          "related_wallet": {
            "$ref": "#/components/schemas/WalletDTO"
          }
        },
        "additionalProperties": false
      },
      "CreateWalletRequest": {
        "type": "object",
        "properties": {
          "account_currencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of currencies for account creation. Valid only if create_account is passed as true.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person Guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program Guid",
            "format": "uuid"
          },
          "account_name": {
            "type": "string",
            "description": "Name of account provided by the API client.",
            "nullable": true
          },
          "wallet_name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisbursementDTO": {
        "required": [
          "disbursement_type",
          "person_details",
          "program_guid",
          "transfer_details"
        ],
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "program guid",
            "format": "uuid"
          },
          "disbursement_type": {
            "$ref": "#/components/schemas/DisbursementType"
          },
          "person_details": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "instrument_details": {
            "$ref": "#/components/schemas/DisbursementOutsideInstrument"
          },
          "transfer_details": {
            "$ref": "#/components/schemas/DisbursementTransferRequest"
          },
          "card_details": {
            "$ref": "#/components/schemas/CardFulfillment"
          },
          "user_guid": {
            "type": "string",
            "description": "user guid",
            "format": "uuid"
          },
          "company_guid": {
            "type": "string",
            "description": "company guid",
            "format": "uuid"
          },
          "source_code": {
            "type": "string",
            "description": "source code",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Disbursement DTO"
      },
      "DisbursementOutsideInstrument": {
        "required": [
          "account_details",
          "instrument_category",
          "instrument_country",
          "instrument_type",
          "person_guid"
        ],
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "description": "Unique Person ID on Qolo Platform.",
            "format": "uuid"
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Unique ID of the external instrument on Qolo Platform. An external instrument is defined as an external bank account or card.",
            "format": "uuid"
          },
          "instrument_country": {
            "minLength": 1,
            "type": "string",
            "description": "Country of the instrument. Country 3-ISO code such as USA."
          },
          "instrument_type": {
            "$ref": "#/components/schemas/InstrumentType"
          },
          "instrument_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of instrument",
            "nullable": true
          },
          "instrument_settlement_currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Bank account or card currency in ISO-3 character  format.",
            "nullable": true
          },
          "instrument_category": {
            "$ref": "#/components/schemas/InstrumentCategory"
          },
          "instrument_usage": {
            "maxLength": 12,
            "type": "string",
            "description": "Instrument usage. Valid values are PAY-IN, PAY-OUT, PAY-IN-OUT, RESTRICTED",
            "nullable": true
          },
          "mask_account_number": {
            "maxLength": 19,
            "type": "string",
            "description": "Masked bank account number or card number.",
            "nullable": true
          },
          "account_details": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "outside_iin": {
            "maxLength": 19,
            "type": "string",
            "nullable": true
          },
          "financial_inst_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the financial institution owning the external instrument. It will mostly be the bank that issued the bank account number or the card.\r\nThis field is mandatory for bank instrument types",
            "nullable": true
          },
          "external_proxy_number": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "instrument_verification_method": {
            "$ref": "#/components/schemas/InstrumentVerificationMethod"
          },
          "instrument_status": {
            "$ref": "#/components/schemas/InstrumentStatus"
          },
          "acknowledgement": {
            "$ref": "#/components/schemas/Acknowledgement"
          },
          "sys_utcinserted": {
            "type": "string",
            "description": "date outside instrument created",
            "format": "date-time"
          },
          "instrument_ownership": {
            "$ref": "#/components/schemas/InstrumentOwnership"
          },
          "status_reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Disbursement Outside Instrument"
      },
      "DisbursementPayoutOptions": {
        "enum": [
          "PREPAIDCARD",
          "BANKDDA",
          "OCT",
          "NONE"
        ],
        "type": "string",
        "description": "Disbursement Payout Options"
      },
      "DisbursementPayoutPreference": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "payoutpreference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DisbursementPayoutResponse"
      },
      "DisbursementResponse": {
        "type": "object",
        "properties": {
          "payment_guid": {
            "type": "string",
            "description": "payment_guid",
            "format": "uuid"
          },
          "disbursementDTO": {
            "$ref": "#/components/schemas/DisbursementDTO"
          },
          "disbursementPayoutPreference": {
            "$ref": "#/components/schemas/DisbursementPayoutPreference"
          }
        },
        "additionalProperties": false,
        "description": "Disbursement Request Response"
      },
      "DisbursementTransferRequest": {
        "required": [
          "amount",
          "client_reference_id",
          "currency",
          "destination",
          "source",
          "transfer_type"
        ],
        "type": "object",
        "properties": {
          "client_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "API Partner can send the transfer's unique id on their system and it can be used to fetch transfer details later"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "channel_type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "transfer_type": {
            "$ref": "#/components/schemas/TransferType"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer.",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "description": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "API Partner can send the transfer's description for reference",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "quote_reference": {
            "type": "string",
            "description": "For cross currency transfers, quote should be created and must be passed in transfer.",
            "nullable": true
          },
          "quoteoutput": {
            "$ref": "#/components/schemas/QuoteResponse"
          },
          "destination_amount": {
            "type": "number",
            "format": "double"
          },
          "destination_currency": {
            "type": "string",
            "nullable": true
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transfer type.",
            "nullable": true
          },
          "verification_code": {
            "type": "string",
            "description": "Verification code. This field is currently not used and cvv2 validation during the transfer is not required",
            "nullable": true
          },
          "eft_info": {
            "$ref": "#/components/schemas/EFTInfo"
          },
          "reason_code": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Transfer reason code used for foreign exchange",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Disbursement Transfer Request"
      },
      "DisbursementType": {
        "enum": [
          "CARD",
          "OUTSIDEINSTRUMENT",
          "USERSELECT",
          "CHECK",
          "ACCOUNT"
        ],
        "type": "string",
        "description": "Disbursement Type"
      },
      "DisputeAmountDetailReqDTO": {
        "type": "object",
        "properties": {
          "entry_type": {
            "$ref": "#/components/schemas/DisputeAmountEntryTypeEnum"
          },
          "txn_type": {
            "$ref": "#/components/schemas/DisputeAmountTxnTypeEnum"
          },
          "amount": {
            "type": "number",
            "description": "Provisional credit or debit amount. If null amount is considered as the entire disputed amount for the transaction.",
            "format": "double"
          },
          "reason_code": {
            "type": "string",
            "description": "Reason Code for the amount. Possible values 'FEES', 'FINAL', 'NO_CB_RIGHTS', 'NO_CB_OR_REPRES', 'PROVISIONAL', 'REOPEN', 'THRESHOLD'",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisputeAmountDetailResDTO": {
        "type": "object",
        "properties": {
          "entry_type": {
            "type": "string",
            "description": "PROVISIONAL or PERMANENT",
            "nullable": true
          },
          "amount_date": {
            "type": "string",
            "description": "Date on which provisional amount was applied",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Provisional amount applied to the account. Signed to identify credit or debit.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DisputeAmountEntryTypeEnum": {
        "enum": [
          "PROVISIONAL",
          "WRITEOFF",
          "LOSSADJ"
        ],
        "type": "string"
      },
      "DisputeAmountTxnTypeEnum": {
        "enum": [
          "CREDIT",
          "DEBIT",
          "CREDITREV",
          "DEBITREV"
        ],
        "type": "string"
      },
      "DisputeChannel": {
        "enum": [
          "DISCOVER",
          "MNGS",
          "QOLO"
        ],
        "type": "string"
      },
      "DisputeChargebackRequest": {
        "required": [
          "dispute",
          "request_code"
        ],
        "type": "object",
        "properties": {
          "dispute_guid": {
            "type": "string",
            "description": "Unique Id for the dispute, Mandatory if the dispute is already created",
            "format": "uuid",
            "nullable": true
          },
          "channel_dispute_id": {
            "type": "string",
            "description": "Dispute ID from the service provider.",
            "nullable": true
          },
          "channel_user_guid": {
            "type": "string",
            "description": "User ID of the service provider’s user initiating the request",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Unique Id for the customer",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Id for the account",
            "format": "uuid",
            "nullable": true
          },
          "card_number": {
            "type": "string",
            "description": "Either Card number or card proxy must be provided",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique Id for the card",
            "nullable": true
          },
          "request_code": {
            "minLength": 1,
            "type": "string",
            "description": "Type of Request. Possible values 'NT-DISP_NEW', 'NT-DISP_UPD_AMT', 'NT-DISP_UPD'"
          },
          "dispute": {
            "$ref": "#/components/schemas/DisputeReqDTO"
          }
        },
        "additionalProperties": false
      },
      "DisputeChargebackResponse": {
        "type": "object",
        "properties": {
          "dispute_guid": {
            "type": "string",
            "description": "Unique Id for the dispute",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Unique Id for the customer",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Id for the account",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique Id for the card",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "description": "Type of Request.",
            "nullable": true
          },
          "dispute": {
            "$ref": "#/components/schemas/DisputeResDTO"
          },
          "journal_detail": {
            "$ref": "#/components/schemas/JournalDetailResDTO"
          }
        },
        "additionalProperties": false
      },
      "DisputeDocumentDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name or filename of document",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "base64 encoded document string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisputeReqDTO": {
        "required": [
          "dispute_status"
        ],
        "type": "object",
        "properties": {
          "dispute_status": {
            "minLength": 1,
            "type": "string",
            "description": "Status of the dispute. Maps to Quavo Claim Status"
          },
          "dispute_type": {
            "type": "string",
            "description": "Type of Dispute. Required for New dispute",
            "nullable": true
          },
          "dispute_reason": {
            "type": "string",
            "description": "Reason for Dispute. Required for New dispute",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes or Comments to add to the dispute",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeDocumentDTO"
            },
            "description": "Documents to associate with the dispute",
            "nullable": true
          },
          "transaction_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeTxnDetailReqDTO"
            },
            "description": "Details of transactions that are being disputed",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisputeResDTO": {
        "type": "object",
        "properties": {
          "dispute_date": {
            "type": "string",
            "description": "Date dispute was initiated.",
            "format": "date-time"
          },
          "dispute_status": {
            "type": "string",
            "description": "Status of dispute. Refer to dispute status list.Maps to Quavo’s Claim status",
            "nullable": true
          },
          "dispute_type": {
            "type": "string",
            "description": "Type of Dispute. Required for New dispute",
            "nullable": true
          },
          "dispute_reason": {
            "type": "string",
            "description": "Reason for Dispute. Required for New dispute",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "Notes or Comments to add to the dispute",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeDocumentDTO"
            },
            "description": "Documents to associate with the dispute",
            "nullable": true
          },
          "transaction_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeTxnDetailResDTO"
            },
            "description": "Details of transactions that are being disputed",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisputeTxnDetailFeeResDTO": {
        "type": "object",
        "properties": {
          "transaction_guid": {
            "type": "string",
            "description": "Fee transaction GUID from Qolo platfrom",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "Fee amount",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "Fee Description",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DisputeTxnDetailReqDTO": {
        "required": [
          "transaction_guid"
        ],
        "type": "object",
        "properties": {
          "transaction_guid": {
            "type": "string",
            "description": "Unique Id of the transaction",
            "format": "uuid"
          },
          "transaction_dispute_status": {
            "type": "string",
            "description": "Transaction status with regard to dispute. Refer to Transaction dispute item status list.",
            "nullable": true
          },
          "transaction_channel_dispute_status": {
            "type": "string",
            "description": "Maps to channel provider (Quavo) Dispute status",
            "nullable": true
          },
          "data_nav_case_number": {
            "type": "string",
            "description": "Data Nav Case Number",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Disputed amount for the transaction. If null, the entire transaction amount is deemed disputed",
            "format": "double",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/DisputeChannel"
          },
          "journal_entry": {
            "type": "string",
            "description": "Journal entry for the disputed transaction item",
            "nullable": true
          },
          "apply_amount_details": {
            "$ref": "#/components/schemas/DisputeAmountDetailReqDTO"
          },
          "chargeback_log": {
            "$ref": "#/components/schemas/ChargebackLogReqDTO"
          }
        },
        "additionalProperties": false
      },
      "DisputeTxnDetailResDTO": {
        "type": "object",
        "properties": {
          "transaction_guid": {
            "type": "string",
            "description": "Unique Id of the transaction",
            "format": "uuid"
          },
          "transaction_dispute_status": {
            "type": "string",
            "description": "Transaction status with respect to the dispute. Refer to Transaction Dispute status list",
            "nullable": true
          },
          "transaction_channel_dispute_status": {
            "type": "string",
            "description": "Maps to channel provider (Quavo) Dispute status",
            "nullable": true
          },
          "data_nav_case_number": {
            "type": "string",
            "description": "Data Nav Case Number",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Disputed amount for the transaction. If null, the entire transaction amount is deemed disputed.",
            "format": "double",
            "nullable": true
          },
          "channel": {
            "type": "string",
            "description": "Channel or network identifier for the transaction",
            "nullable": true
          },
          "fee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisputeTxnDetailFeeResDTO"
            },
            "description": "Details of associated fees",
            "nullable": true
          },
          "apply_amount_details": {
            "$ref": "#/components/schemas/DisputeAmountDetailResDTO"
          },
          "chargeback_log": {
            "$ref": "#/components/schemas/ChargebackLogResDTO"
          }
        },
        "additionalProperties": false
      },
      "Document": {
        "type": "object",
        "properties": {
          "document_type": {
            "$ref": "#/components/schemas/DocumentType"
          },
          "file_type": {
            "$ref": "#/components/schemas/FileType"
          },
          "issuing_country": {
            "type": "string",
            "description": "Issuing country",
            "nullable": true
          },
          "front": {
            "type": "string",
            "description": "Front of the ID document.\r\nEncode the image or pdf file provided by the user and provide in this field. \r\nPDF files are accepted and Only image formats accepted are PNG, JPEG and BMP. \r\nFiles should be at least 32 KB and cannot be larger than 5 MB",
            "nullable": true
          },
          "back": {
            "type": "string",
            "description": "Back of the ID document.\r\nEncode the image or pdf file provided by the user and provide in this field. \r\nPDF files are accepted and Only image formats accepted are PNG, JPEG and BMP. \r\nFiles should be at least 32 KB and cannot be larger than 5 MB",
            "nullable": true
          },
          "face_image": {
            "type": "string",
            "description": "face scan / selfie image.",
            "nullable": true
          },
          "liveness_detected": {
            "type": "boolean",
            "description": "liveness_detected flag"
          }
        },
        "additionalProperties": false
      },
      "DocumentStorageDetails": {
        "type": "object",
        "properties": {
          "document_reference": {
            "type": "string",
            "nullable": true
          },
          "file_type": {
            "type": "string",
            "nullable": true
          },
          "back_file_type": {
            "type": "string",
            "nullable": true
          },
          "front_docpath": {
            "type": "string",
            "nullable": true
          },
          "back_docpath": {
            "type": "string",
            "nullable": true
          },
          "face_image_docpath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentType": {
        "enum": [
          "PASSPORT",
          "DRIVELIC",
          "NATIONAL",
          "CORPORATE",
          "OTHER"
        ],
        "type": "string"
      },
      "EFTInfo": {
        "type": "object",
        "properties": {
          "sec_code": {
            "$ref": "#/components/schemas/SECCode"
          },
          "identifier_number": {
            "maxLength": 15,
            "type": "string",
            "description": "Identifier Number",
            "nullable": true
          },
          "addenda": {
            "maxLength": 8000,
            "type": "string",
            "description": "Array of Addenda up to 1 to 9999 80 char limit each (total db len limit 8000 char)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EncryptedFulfillmentDetails": {
        "type": "object",
        "properties": {
          "card_proxy": {
            "type": "string",
            "description": "card proxy",
            "nullable": true
          },
          "payload": {
            "type": "string",
            "description": "encrypted payload",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeResponse": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "account guid",
            "format": "uuid"
          },
          "fee_request_code": {
            "type": "string",
            "description": "fee request code",
            "nullable": true
          },
          "fee_request_description": {
            "type": "string",
            "description": "fee request description",
            "nullable": true
          },
          "fee_amount": {
            "type": "number",
            "description": "fee amount",
            "format": "double"
          },
          "reverse_fee_request_code": {
            "type": "string",
            "description": "reverse fee request code",
            "nullable": true
          },
          "reverse_fee_request_description": {
            "type": "string",
            "description": "reverse fee request description",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeSourceDetail": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "wallet_id": {
            "type": "string",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeVariations": {
        "type": "object",
        "properties": {
          "fee_amount": {
            "type": "number",
            "description": "Fixed fee amount configured for the corresponding fee (in account currency).",
            "format": "double",
            "nullable": true
          },
          "fee_percent": {
            "type": "number",
            "description": "Percentage fee configured for the corresponding fee. Should only be applicable for fee based on a financial event, and is calculated as a percentage of the transaction amount.",
            "format": "double",
            "nullable": true
          },
          "fee_percent_min_amount": {
            "type": "number",
            "description": "Minimum fee (in account currency) that would be charged for a percentage based fee. If the calculated fee amount based on the fee percentage comes out to be lower than the fee_percent_min_amount, then the value configured as fee_percent_min_amount will be charged as fees. If fee_percent_min_amount is not configured, the value will be returned as 0.0",
            "format": "double",
            "nullable": true
          },
          "fee_percent_max_amount": {
            "type": "number",
            "description": "Maximum fee (in account currency) that would be charged for a percentage based fee. If the calculated fee amount based on the fee percentage comes out to be higher than the fee_percent_max_amount, then the value configured as fee_percent_max_amount will be charged as fees. If fee_percent_max_amount is not configured, the value will be returned as 0.0",
            "format": "double",
            "nullable": true
          },
          "fee_variation_description": {
            "type": "string",
            "description": "Description about the fee variation.",
            "nullable": true
          },
          "set_name": {
            "type": "string",
            "description": "Name of a list where a different fee needs to be applied.For example, this could be the name of a list of networks.",
            "nullable": true
          },
          "set_list": {
            "type": "string",
            "description": "Values or names of individual items in the corresponding list. For example, this could be the name of the networks where the fee variation is applicable. The values of the list are separate by pipe (\"|\")",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeesResponse": {
        "type": "object",
        "properties": {
          "request_code": {
            "type": "string",
            "description": "Request code of the event for which fee detail is fetched. This may be a financial (event) or a non-financial (event) request code.",
            "nullable": true
          },
          "request_code_description": {
            "type": "string",
            "description": "Description for the request_code.",
            "nullable": true
          },
          "fee_request_code": {
            "type": "string",
            "description": "The fee request code associated with the request_code event and for which data is being displayed.",
            "nullable": true
          },
          "fee_request_description": {
            "type": "string",
            "description": "Description for the fee_request_code.",
            "nullable": true
          },
          "fee_amount": {
            "type": "number",
            "description": "Fixed fee amount configured for the corresponding fee (in account currency).",
            "format": "double",
            "nullable": true
          },
          "fee_percent": {
            "type": "number",
            "description": "Percentage fee configured for the corresponding fee. Should only be applicable for fee based on a financial event, and is calculated as a percentage of the transaction amount.",
            "format": "double",
            "nullable": true
          },
          "fee_percent_min_amount": {
            "type": "number",
            "description": "Minimum fee (in account currency) that would be charged for a percentage based fee. If the calculated fee amount based on the fee percentage comes out to be lower than the fee_percent_min_amount, then the value configured as fee_percent_min_amount will be charged as fees. If fee_percent_min_amount is not configured, the value will be returned as 0.0",
            "format": "double",
            "nullable": true
          },
          "fee_percent_max_amount": {
            "type": "number",
            "description": "Maximum fee (in account currency) that would be charged for a percentage based fee. If the calculated fee amount based on the fee percentage comes out to be higher than the fee_percent_max_amount, then the value configured as fee_percent_max_amount will be charged as fees. If fee_percent_max_amount is not configured, the value will be returned as 0.0",
            "format": "double",
            "nullable": true
          },
          "fee_applyto": {
            "type": "string",
            "description": "Identifies whether the fee is configured to be applied to the Accountholder or the Program Funding account.",
            "nullable": true
          },
          "trigger_event_type": {
            "type": "string",
            "description": "Identifies if the fee is configured to be charged automatically when the corresponding event happens or whether it is charged manually.",
            "nullable": true
          },
          "fee_variations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeVariations"
            },
            "description": "Includes any variation to the fees with same request code - such as, and not limited to, different fees for international transactions, different fees on signature or pin based transactions, different fees on certain networks, etc.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileType": {
        "enum": [
          "BMP",
          "JPEG",
          "PNG",
          "PDF",
          "JPG",
          "TIFF",
          "GIF",
          "DOC",
          "DOCX"
        ],
        "type": "string"
      },
      "FleetCard": {
        "type": "object",
        "properties": {
          "assignment_type": {
            "$ref": "#/components/schemas/FleetCardAssignmentType"
          },
          "restriction": {
            "$ref": "#/components/schemas/FleetCardrestriction"
          },
          "product_prompts": {
            "$ref": "#/components/schemas/FleetCardProductPrompts"
          }
        },
        "additionalProperties": false,
        "description": "Card data specific to a fleet card program."
      },
      "FleetCardAssignmentType": {
        "enum": [
          "DRIVER",
          "VEHICLE"
        ],
        "type": "string",
        "description": "Whether the fleet card is Driver assigned or Vehicle assigned."
      },
      "FleetCardProductPrompts": {
        "enum": [
          "ID_ODOMETER",
          "VEHICLE_ODOMETER",
          "DRIVERID_ODOMETER",
          "ODOMETER",
          "NONE"
        ],
        "type": "string",
        "description": "Prompts asked at the gas station for the fleet card\r\n<br>ID_ODOMETER - Prompt for ID and Odometer<br>VEHICLE_ODOMETER - Prompt for Vehicle ID and Odometer<br>DRIVERID_ODOMETER - Prompt for Driver ID and Odometer<br>ODOMETER - Prompt for Odometer only<br>NONE - No Prompt"
      },
      "FleetCardrestriction": {
        "enum": [
          "NONE",
          "FUEL_ONLY"
        ],
        "type": "string",
        "description": "Fleet card restriction - whether fuel only or no restriction"
      },
      "Frequency": {
        "enum": [
          "DAY",
          "WEEK",
          "MONTH",
          "YEAR",
          "QUARTER",
          "BIWEEK"
        ],
        "type": "string"
      },
      "FulfillmentOrderInfo": {
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Package unique identifier that must be associated with the new card and corresponds to the package and card design at the fulfillment service provider.",
            "format": "uuid",
            "nullable": true
          },
          "third_line": {
            "type": "string",
            "description": "Unless configured differently for the program, the third line always maps to the First Name Last Name of the person.",
            "nullable": true
          },
          "fourth_line": {
            "type": "string",
            "description": "Can be skipped in request inside this object.",
            "nullable": true
          },
          "shipping_method": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "order_guid": {
            "type": "string",
            "description": "Order unique identifier. Can be skipped for New Card creation.",
            "format": "uuid",
            "nullable": true
          },
          "order_type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Boolean whether signature is required or not",
            "nullable": true
          },
          "tracking_number": {
            "maxLength": 100,
            "type": "string",
            "description": "To be skipped in the request",
            "nullable": true
          },
          "discretionary_track_data": {
            "maxLength": 100,
            "type": "string",
            "description": "Discretionary track data for the personalized card. Should be skipped if not clear.",
            "nullable": true
          },
          "order_status": {
            "maxLength": 40,
            "type": "string",
            "description": "Status of the order. To be skipped in request.",
            "nullable": true
          },
          "pin_mailer_flag": {
            "type": "boolean",
            "description": "Pin mailer flag",
            "nullable": true
          },
          "message_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "message_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Optional additional text on card or carrier. This field must be configured at the fulfillment house for it to work.",
            "nullable": true
          },
          "digital_package_guid": {
            "type": "string",
            "description": "Package guid that identifies the digital package to be used for tokenization",
            "format": "uuid",
            "nullable": true
          },
          "fleet_card": {
            "$ref": "#/components/schemas/FleetCard"
          }
        },
        "additionalProperties": false
      },
      "GetEncryptedCardDataRequest": {
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "minLength": 1,
            "type": "string",
            "description": "Security token"
          }
        },
        "additionalProperties": false
      },
      "GetTargetedCardAuthControlRequest": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program unique identifier. Program_gud or card_proxy are required.",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card identifier. Program_gud or card_proxy are required.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GovtIDType": {
        "enum": [
          "NOTPROVIDED",
          "PASSPORT",
          "DRIVERLICENSE",
          "COUNTRYID"
        ],
        "type": "string",
        "description": "Type of Government ID used for verification."
      },
      "HolderShareStatus": {
        "enum": [
          "APPROVE",
          "SUSPEND"
        ],
        "type": "string",
        "description": "Status of the account share. If suspended, the account is no longer shared."
      },
      "IA_Account": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "account_type": {
            "type": "string",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "format": "double"
          },
          "account_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IA_Auth_SimuMsg": {
        "required": [
          "amount",
          "auth_request_type"
        ],
        "type": "object",
        "properties": {
          "auth_request_type": {
            "$ref": "#/components/schemas/auth_request_type"
          },
          "amount": {
            "type": "number",
            "description": "amount",
            "format": "double"
          },
          "card_proxy": {
            "type": "string",
            "description": "card proxy",
            "nullable": true
          },
          "mcc": {
            "type": "string",
            "description": "mcc",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "description": "acceptor id",
            "nullable": true
          },
          "client_url": {
            "type": "string",
            "description": "client url",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "client secret",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IA_Card": {
        "type": "object",
        "properties": {
          "wallet_guid": {
            "type": "string",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          },
          "card_proxy": {
            "type": "string",
            "nullable": true
          },
          "mask_card_pan": {
            "type": "string",
            "nullable": true
          },
          "card_status": {
            "type": "string",
            "nullable": true
          },
          "issuance_type": {
            "type": "string",
            "nullable": true
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time"
          },
          "logical_expiration_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IA_CardAuth": {
        "type": "object",
        "properties": {
          "card_auth_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "request_code": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "circuit_id": {
            "type": "string",
            "nullable": true
          },
          "mask_pan": {
            "type": "string",
            "nullable": true
          },
          "message_type": {
            "type": "string",
            "nullable": true
          },
          "processing_code": {
            "type": "string",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_amount": {
            "type": "number",
            "format": "double"
          },
          "billng_amount": {
            "type": "number",
            "format": "double"
          },
          "transmission_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "billing_fee": {
            "type": "number",
            "format": "double"
          },
          "settle_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "billing_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stan": {
            "type": "string",
            "nullable": true
          },
          "local_txn_time": {
            "type": "string",
            "nullable": true
          },
          "local_txn_date": {
            "type": "string",
            "format": "date-time"
          },
          "mcc": {
            "type": "string",
            "nullable": true
          },
          "acq_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pan_country_code": {
            "type": "string",
            "nullable": true
          },
          "fwd_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pan": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pin": {
            "type": "string",
            "nullable": true
          },
          "pos_service_code": {
            "type": "string",
            "nullable": true
          },
          "pos_condition_code": {
            "type": "string",
            "nullable": true
          },
          "pos_pin_capture_code": {
            "type": "string",
            "nullable": true
          },
          "acq_institution_id": {
            "type": "string",
            "nullable": true
          },
          "fwd_institution_id": {
            "type": "string",
            "nullable": true
          },
          "retreival_reference": {
            "type": "string",
            "nullable": true
          },
          "authorization_id_code": {
            "type": "string",
            "nullable": true
          },
          "terminal_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_name_loc": {
            "type": "string",
            "nullable": true
          },
          "additional_data_private": {
            "type": "string",
            "nullable": true
          },
          "txn_currency_code": {
            "type": "string",
            "nullable": true
          },
          "settle_currency_code": {
            "type": "string",
            "nullable": true
          },
          "billing_currency_code": {
            "type": "string",
            "nullable": true
          },
          "pin_data_present": {
            "type": "integer",
            "format": "int32"
          },
          "additional_amounts": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_cond_description": {
            "type": "string",
            "nullable": true
          },
          "cvx2_indicator": {
            "type": "string",
            "nullable": true
          },
          "cvx2_result": {
            "type": "string",
            "nullable": true
          },
          "avs_indicator": {
            "type": "string",
            "nullable": true
          },
          "avs_result": {
            "type": "string",
            "nullable": true
          },
          "partial_auth_ind": {
            "type": "string",
            "nullable": true
          },
          "acceptor_country": {
            "type": "string",
            "nullable": true
          },
          "original_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "threeds_response": {
            "type": "string",
            "nullable": true
          },
          "network_id": {
            "type": "string",
            "nullable": true
          },
          "addtional_transaction_data": {
            "type": "string",
            "nullable": true
          },
          "network_rrn": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IA_Fees": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "fee_request_code": {
            "type": "string",
            "nullable": true
          },
          "fee_request_description": {
            "type": "string",
            "nullable": true
          },
          "fee_amount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "IA_Message": {
        "type": "object",
        "properties": {
          "post_date": {
            "type": "string",
            "format": "date-time"
          },
          "settle_date": {
            "type": "string",
            "format": "date-time"
          },
          "txn_date": {
            "type": "string",
            "format": "date-time"
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "nullable": true
          },
          "mask_account_number": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "original_amount": {
            "type": "number",
            "format": "double"
          },
          "variance_amount": {
            "type": "number",
            "format": "double"
          },
          "variance_code": {
            "type": "string",
            "nullable": true
          },
          "cashback_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_currency": {
            "type": "string",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "nullable": true
          },
          "currency_conv_rate": {
            "type": "number",
            "format": "double"
          },
          "reference_number": {
            "type": "string",
            "nullable": true
          },
          "mcc": {
            "type": "string",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "nullable": true
          },
          "txn_location": {
            "type": "string",
            "nullable": true
          },
          "txn_city": {
            "type": "string",
            "nullable": true
          },
          "txn_country": {
            "type": "string",
            "nullable": true
          },
          "txn_lat": {
            "type": "number",
            "format": "double"
          },
          "txn_lon": {
            "type": "number",
            "format": "double"
          },
          "txn_description": {
            "type": "string",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "card_txn_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "card_settle_txn_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          },
          "pf_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "orig_card_auth_txn_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IA_Person": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "billing_address_line1": {
            "type": "string",
            "nullable": true
          },
          "billing_address_line2": {
            "type": "string",
            "nullable": true
          },
          "billing_city": {
            "type": "string",
            "nullable": true
          },
          "billing_state": {
            "type": "string",
            "nullable": true
          },
          "billing_postal_code": {
            "type": "string",
            "nullable": true
          },
          "billing_country": {
            "type": "string",
            "nullable": true
          },
          "verification_mode": {
            "type": "string",
            "nullable": true
          },
          "verification_level": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IinBrand": {
        "enum": [
          "VISA",
          "MASTERCARD",
          "DISCOVER",
          "AMEX"
        ],
        "type": "string",
        "description": "Card scheme to be used if multiple card schemes are configured for the program.Can be skipped to equate to what is configured for the program."
      },
      "InstitutionType": {
        "enum": [
          "NONFINANCIAL",
          "FINANCIAL",
          "SERVICEPROVIDER"
        ],
        "type": "string"
      },
      "InstrumentCategory": {
        "enum": [
          "INDIVIDUAL",
          "CORPORATE"
        ],
        "type": "string"
      },
      "InstrumentOwnership": {
        "enum": [
          "SELF",
          "THIRDPARTY"
        ],
        "type": "string"
      },
      "InstrumentStatus": {
        "enum": [
          "ACTIVE",
          "SUSPEND",
          "NEGLIST",
          "FORGET",
          "UNPROVED"
        ],
        "type": "string"
      },
      "InstrumentType": {
        "enum": [
          "BANKDDA",
          "IBAN",
          "BBAN",
          "CARD",
          "CHECK"
        ],
        "type": "string"
      },
      "InstrumentVerificationMethod": {
        "enum": [
          "BANK",
          "CARDAVV",
          "CARD3DS"
        ],
        "type": "string"
      },
      "InteractAuthRequest": {
        "type": "object",
        "properties": {
          "cardAuth": {
            "$ref": "#/components/schemas/IA_CardAuth"
          },
          "ia_card": {
            "$ref": "#/components/schemas/IA_Card"
          },
          "ia_account": {
            "$ref": "#/components/schemas/IA_Account"
          },
          "ia_person": {
            "$ref": "#/components/schemas/IA_Person"
          },
          "pf_account": {
            "$ref": "#/components/schemas/PF_Account"
          },
          "cardAuthSupplement": {
            "$ref": "#/components/schemas/TxnCardAuthSupplement"
          },
          "avs_data": {
            "type": "string",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IA_Fees"
            },
            "nullable": true
          },
          "total_fee_amount": {
            "type": "number",
            "format": "double"
          },
          "tolerance_amount": {
            "type": "number",
            "format": "double"
          },
          "orig_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "orig_card_auth_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "total_request_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_sign": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InteractAuthResponse": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "pf_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "partial_auth_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "avs_result": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterestConfig": {
        "required": [
          "display_name",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "type": "string",
            "description": "Interest rate unique code",
            "nullable": true
          },
          "display_name": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "Display name for the interest code"
          },
          "type": {
            "$ref": "#/components/schemas/InterestType"
          },
          "value": {
            "type": "number",
            "description": "Value in conjunction with the interest rate 'type'",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "InterestRate": {
        "type": "object",
        "properties": {
          "base_interest_rate": {
            "type": "number",
            "description": "Base Interest Rate",
            "format": "double"
          },
          "interest_rate_code": {
            "type": "string",
            "description": "Interest Rate Code",
            "nullable": true
          },
          "display_name": {
            "type": "string",
            "description": "Display name for the interest code",
            "nullable": true
          },
          "interest_type": {
            "type": "string",
            "description": "Interest Type",
            "nullable": true
          },
          "interest_rate": {
            "type": "number",
            "description": "Interest Rate",
            "format": "double"
          },
          "calculated_interest_rate": {
            "type": "number",
            "description": "Calculated Interest Rate",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "InterestRateDTO": {
        "type": "object",
        "properties": {
          "account_interest_rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountsInterestRate"
            },
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "Program unique id",
            "format": "uuid"
          },
          "base_interest_rate_code": {
            "type": "string",
            "description": "Program base interest rate code",
            "nullable": true
          },
          "base_interest_rate": {
            "type": "string",
            "description": "Program base interest rate",
            "nullable": true
          },
          "masked_account_number": {
            "type": "string",
            "description": "Program DDA account number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InterestType": {
        "enum": [
          "BASIS_POINT",
          "ABSOLUTE",
          "PERCENTAGE"
        ],
        "type": "string",
        "description": "Interest rate type with respect to the program base interest rate <br />\r\nBASIS_POINT: Value less than the base interest rate <br />\r\nPERCENTAGE: Value as a percentage of the base interest rate <br />\r\nABSOLUTE: Value directly used as account interest rate"
      },
      "IssuanceType": {
        "enum": [
          "FULL",
          "VIRTUALONETIME",
          "VIRTUAL",
          "VIRTUALTOKENALLOWED",
          "TOKEN",
          "ONETIMELOAD",
          "OTHER"
        ],
        "type": "string",
        "description": "Type of card to be created\r\n<br>FULL - Reloadable plastic card<br>VIRTUALONETIME - Single load virtual card<br>VIRTUAL - Reloadable virtual card<br>ONETIMELOAD - Single load plastic card<br>VIRTUALTOKENALLOWED - Virtual card with tokenization allowed<br>TOKEN - Token<br>OTHER - Any other issuance type"
      },
      "IssuanceTypeRequest": {
        "required": [
          "issuance_type"
        ],
        "type": "object",
        "properties": {
          "issuance_type": {
            "$ref": "#/components/schemas/IssuanceType"
          },
          "fourth_line": {
            "type": "string",
            "description": "Fourth line data to be printed on the physical card. Can also be picked up from the program configuration where applicable.",
            "nullable": true
          },
          "iin_brand": {
            "$ref": "#/components/schemas/IinBrand"
          },
          "fulfillment_order_info": {
            "$ref": "#/components/schemas/FulfillmentOrderInfo"
          }
        },
        "additionalProperties": false
      },
      "JournalDetailResDTO": {
        "type": "object",
        "properties": {
          "journal_guid": {
            "type": "string",
            "description": "Unique ID of the journal",
            "format": "uuid"
          },
          "journal_date": {
            "type": "string",
            "description": "Date of the journal entry",
            "format": "date-time"
          },
          "reason_code": {
            "type": "string",
            "description": "Journal Reason code",
            "nullable": true
          },
          "journal_entry": {
            "type": "string",
            "description": "Journal entry",
            "nullable": true
          },
          "journal_source": {
            "type": "string",
            "description": "Journal source",
            "nullable": true
          },
          "source_user_guid": {
            "type": "string",
            "description": "Journal source user Id",
            "format": "uuid"
          },
          "case_number": {
            "type": "string",
            "description": "Case number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JournalEntry": {
        "type": "object",
        "properties": {
          "card_proxy": {
            "type": "string",
            "description": "Card number",
            "nullable": true
          },
          "user_guid": {
            "type": "string",
            "description": "user_guid",
            "format": "uuid"
          },
          "source_code": {
            "type": "string",
            "description": "source_code",
            "nullable": true
          },
          "company_guid": {
            "type": "string",
            "description": "company_guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KYBProviderData": {
        "type": "object",
        "properties": {
          "provider_reference_id": {
            "type": "string",
            "description": "provider_reference_id",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Kyb status",
            "nullable": true
          },
          "provider_response": {
            "$ref": "#/components/schemas/ResponseDescription"
          },
          "response_tin": {
            "$ref": "#/components/schemas/ResponseTin"
          }
        },
        "additionalProperties": false
      },
      "MeaWalletRequestDTO": {
        "required": [
          "cardId",
          "requestId",
          "secret"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "minLength": 1,
            "type": "string"
          },
          "cardId": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "secret": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "walletId": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "paymentAppInstanceId": {
            "maxLength": 48,
            "type": "string",
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/RequestCardDataType"
          }
        },
        "additionalProperties": false
      },
      "MeaWalletResponseDTO": {
        "type": "object",
        "properties": {
          "responseId": {
            "type": "string",
            "nullable": true
          },
          "cardInfo": {
            "$ref": "#/components/schemas/CardInformation"
          }
        },
        "additionalProperties": false
      },
      "NotificationConfigurationDTO": {
        "required": [
          "event_type",
          "program_guid",
          "url"
        ],
        "type": "object",
        "properties": {
          "notification_guid": {
            "type": "string",
            "description": "unique notification subscription guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "qolo program guid",
            "format": "uuid"
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "client endpoint url to send webhook"
          },
          "headers": {
            "type": "string",
            "description": "additional HTTP headers to send with webhook",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "description": "secret will be used to send checksum value of payload for message authentication",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "turn on / off webhook subscription service",
            "nullable": true
          },
          "event_type": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "event types \"all\" \"card.created\" \"card.activated\" \"card.status\" \"card.pin.changed\" \"card.replaced\" \"card.fulfilment\" \"person.created\" \"person.verification.success\" \"person.updated\" \"wallet.created\" \"account.created\" \"account.activated\" \"account.closed\" \"account.status\" \"account.instrument.created\" \"outside.instrument.created\" \"auth.approved\" \"auth.reversed\" \"auth.refunded\" \"bankeft.credit.received\" \"bankeft.credit.reversed\" \"bankeft.credit.returned\" \"bankeft.debit.received\" \"bankeft.debit.reversed\" \"bankeft.debit.returned\" \"transfer.success\" \"check.cleared\" \"payment.success\" \"payment.failure\""
          }
        },
        "additionalProperties": false
      },
      "NotificationConfigurationDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationConfigurationDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationCategories": {
        "enum": [
          "LIMITS",
          "FEES",
          "OUTOFBAND",
          "RENEW"
        ],
        "type": "string"
      },
      "OperationName": {
        "enum": [
          "SPENDINGLIMIT",
          "CASHLIMIT",
          "LOADLIMIT",
          "CARDLOADLIMIT"
        ],
        "type": "string"
      },
      "OrderType": {
        "enum": [
          "DTC",
          "BULKC",
          "BULKCC",
          "BULK"
        ],
        "type": "string",
        "description": "Type of order.\r\n<br>D2C - Direct to Customer(Default); used for individual personalized card<br>BULKC - Bulk card with no carrier<br>BULKCC - Bulk card with carriers in envelopes<br>BULK - Equates to BULKC or BULKCC based on program setup at the fulfillment house."
      },
      "OutsideInstrumentDTO": {
        "required": [
          "account_details",
          "instrument_category",
          "instrument_country",
          "instrument_type",
          "person_guid"
        ],
        "type": "object",
        "properties": {
          "outside_instrument_guid": {
            "type": "string",
            "description": "Unique ID of the external instrument on Qolo Platform. An external instrument is defined as an external bank account or card.",
            "format": "uuid"
          },
          "person_guid": {
            "type": "string",
            "description": "Unique Person ID on Qolo Platform.",
            "format": "uuid"
          },
          "instrument_country": {
            "minLength": 1,
            "type": "string",
            "description": "Country of the instrument. Country 3-ISO code such as USA."
          },
          "instrument_type": {
            "$ref": "#/components/schemas/InstrumentType"
          },
          "instrument_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of instrument",
            "nullable": true
          },
          "instrument_settlement_currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Bank account or card currency in ISO-3 character  format.",
            "nullable": true
          },
          "instrument_category": {
            "$ref": "#/components/schemas/InstrumentCategory"
          },
          "instrument_usage": {
            "maxLength": 12,
            "type": "string",
            "description": "Instrument usage. Valid values are PAY-IN, PAY-OUT, PAY-IN-OUT, RESTRICTED",
            "nullable": true
          },
          "mask_account_number": {
            "maxLength": 19,
            "type": "string",
            "description": "Masked bank account number or card number.",
            "nullable": true
          },
          "account_details": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "outside_iin": {
            "maxLength": 19,
            "type": "string",
            "nullable": true
          },
          "financial_inst_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Name of the financial institution owning the external instrument. It will mostly be the bank that issued the bank account number or the card.\r\nThis field is mandatory for bank instrument types",
            "nullable": true
          },
          "external_proxy_number": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "instrument_verification_method": {
            "$ref": "#/components/schemas/InstrumentVerificationMethod"
          },
          "instrument_status": {
            "$ref": "#/components/schemas/InstrumentStatus"
          },
          "acknowledgement": {
            "$ref": "#/components/schemas/Acknowledgement"
          },
          "sys_utcinserted": {
            "type": "string",
            "description": "date outside instrument created",
            "format": "date-time"
          },
          "instrument_ownership": {
            "$ref": "#/components/schemas/InstrumentOwnership"
          },
          "status_reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutsideInstrumentDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutsideInstrumentDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutsideInstrumentVerifyDTO": {
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PF_Account": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid"
          },
          "account_type": {
            "type": "string",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "format": "double"
          },
          "account_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParentCompanyInfo": {
        "type": "object",
        "properties": {
          "has_parent_company": {
            "type": "boolean",
            "description": "Has parent company - true or false"
          },
          "parent_company_name": {
            "type": "string",
            "description": "Parent company name",
            "nullable": true
          },
          "parent_company_contact_info": {
            "$ref": "#/components/schemas/PersonContactInfo"
          },
          "parent_company_lic": {
            "type": "string",
            "description": "Parent company lic/tin number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartialAuthIndicatorType": {
        "enum": [
          "SUPPORT",
          "NOSUPPORT"
        ],
        "type": "string"
      },
      "PaymentDetail": {
        "type": "object",
        "properties": {
          "payment_guid": {
            "type": "string",
            "format": "uuid"
          },
          "txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "payment_amount": {
            "type": "number",
            "format": "double"
          },
          "payment_description": {
            "type": "string",
            "nullable": true
          },
          "payment_schedule_type": {
            "type": "string",
            "nullable": true
          },
          "payment_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payment_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Account guid",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Payer person guid",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Source outside instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "preferred_transfer_type": {
            "type": "string",
            "description": "Preferred Transfer Type\r\nPermitted values are ACCOUNTTOBANK, FASTACCOUNTTOBANK, CLIENTFUNDCHECK",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "account type",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "description": "Payee instrument type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument from the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee."
      },
      "PaymentPurposeCode": {
        "enum": [
          "EFT_TRF_SELF",
          "EFT_TRF_FAMILY",
          "EFT_TRF_EDU",
          "EFT_TRF_MED",
          "EFT_TRF_HOTEL",
          "EFT_TRF_TRAVEL",
          "EFT_TRF_BILL",
          "EFT_TRF_LOAN",
          "EFT_TRF_TAX",
          "EFT_TRF_RESPROP",
          "EFT_TRF_RENTPROP",
          "EFT_TRF_INSPREM",
          "EFT_TRF_INSINDM",
          "EFT_TRF_INSCLAIM",
          "EFT_TRF_INVMF",
          "EFT_TRF_INVSHARE",
          "EFT_TRF_DONATION",
          "EFT_TRF_INFSC",
          "EFT_TRF_PREXP",
          "EFT_TRF_FEETM",
          "EFT_TRF_FEECUST",
          "EFT_TRF_FEESPC",
          "EFT_TRF_EXPOFF",
          "EFT_TRF_EXPCONS",
          "EFT_TRF_FEEGDTR",
          "EFT_TRF_GDEXP",
          "EFT_TRF_GDDLV",
          "EFT_TRF_GDTRD"
        ],
        "type": "string"
      },
      "PaymentRequest": {
        "required": [
          "payment_base_currency",
          "reference_code"
        ],
        "type": "object",
        "properties": {
          "payer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayer"
            },
            "description": "Payer: Identifies the original source of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be pulled from outside instrument to the payer's account guid before being sent to the payee. However, the outside instrument guid must belong to the payer.",
            "nullable": true
          },
          "payee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayee"
            },
            "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument from the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee.",
            "nullable": true
          },
          "payment_amount": {
            "type": "number",
            "description": "Payment amount",
            "format": "double"
          },
          "payment_base_currency": {
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "payment_description": {
            "type": "string",
            "description": "Payment description",
            "nullable": true
          },
          "payment_request_code": {
            "$ref": "#/components/schemas/PaymentRequestCode"
          },
          "payment_balance": {
            "type": "number",
            "description": "Payment balance - Minimum Balance in destination account to trigger Payment",
            "format": "double"
          },
          "payment_guid": {
            "type": "string",
            "description": "Payment guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_chain": {
            "type": "string",
            "description": "Payment chain",
            "format": "uuid",
            "nullable": true
          },
          "response_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Response Code",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Reason Code",
            "nullable": true
          },
          "requestor_wallet_guid": {
            "type": "string",
            "description": "Requestor wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_due_date": {
            "type": "string",
            "description": "Payment due date",
            "format": "date-time"
          },
          "reference_code": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Reference code"
          },
          "payment_schedule": {
            "$ref": "#/components/schemas/PaymentScheduleRequest"
          },
          "foreign_exchange_purpose_code": {
            "$ref": "#/components/schemas/PaymentPurposeCode"
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "error_description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Request Class"
      },
      "PaymentRequestCode": {
        "enum": [
          "PT_TOPUP",
          "PT_COLLECTION",
          "PT_ACCOUNTDISB"
        ],
        "type": "string",
        "description": "PT_TOPUP: For adding balance to an account if it reaches a certain balance.\r\nPT_COLLECTION: For collecting funds from (multiple) external sources and collecting in a client collection account.\r\nPT_ACCOUNTDISB: For disbursing funds from a client funding account to beneficiaries' account (or external account)."
      },
      "PaymentResponse": {
        "required": [
          "payment_base_currency",
          "reference_code"
        ],
        "type": "object",
        "properties": {
          "payer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayer"
            },
            "description": "Payer: Identifies the original source of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be pulled from outside instrument to the payer's account guid before being sent to the payee. However, the outside instrument guid must belong to the payer.",
            "nullable": true
          },
          "payee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayee"
            },
            "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument from the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee.",
            "nullable": true
          },
          "payment_amount": {
            "type": "number",
            "description": "Payment amount",
            "format": "double"
          },
          "payment_base_currency": {
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "payment_description": {
            "type": "string",
            "description": "Payment description",
            "nullable": true
          },
          "payment_request_code": {
            "$ref": "#/components/schemas/PaymentRequestCode"
          },
          "payment_balance": {
            "type": "number",
            "description": "Payment balance - Minimum Balance in destination account to trigger Payment",
            "format": "double"
          },
          "payment_guid": {
            "type": "string",
            "description": "Payment guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_chain": {
            "type": "string",
            "description": "Payment chain",
            "format": "uuid",
            "nullable": true
          },
          "response_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Response Code",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Reason Code",
            "nullable": true
          },
          "requestor_wallet_guid": {
            "type": "string",
            "description": "Requestor wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_due_date": {
            "type": "string",
            "description": "Payment due date",
            "format": "date-time"
          },
          "reference_code": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Reference code"
          },
          "payment_schedule": {
            "$ref": "#/components/schemas/PaymentScheduleRequest"
          },
          "foreign_exchange_purpose_code": {
            "$ref": "#/components/schemas/PaymentPurposeCode"
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "error_description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Response Class"
      },
      "PaymentResponseDet": {
        "required": [
          "payment_base_currency",
          "payment_due_date",
          "reference_code"
        ],
        "type": "object",
        "properties": {
          "payer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDetails"
            },
            "description": "Payer",
            "nullable": true
          },
          "payee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDetails"
            },
            "description": "Payee",
            "nullable": true
          },
          "payment_amount": {
            "type": "number",
            "description": "Payment amount",
            "format": "double"
          },
          "payment_base_currency": {
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "payment_description": {
            "type": "string",
            "description": "Payment description",
            "nullable": true
          },
          "payment_request_code": {
            "type": "string",
            "description": "Payment request code",
            "nullable": true
          },
          "payment_balance": {
            "type": "number",
            "description": "Payment balance - Minimum Balance in destination account to trigger Payment",
            "format": "double"
          },
          "payment_guid": {
            "type": "string",
            "description": "Payment guid",
            "format": "uuid",
            "nullable": true
          },
          "response_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Response Code",
            "nullable": true
          },
          "reason_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Reason Code",
            "nullable": true
          },
          "requestor_wallet_guid": {
            "type": "string",
            "description": "Requestor wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_status": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "payment_due_date": {
            "type": "string",
            "description": "Payment due date",
            "format": "date-time"
          },
          "reference_code": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Reference code"
          },
          "payment_schedule": {
            "$ref": "#/components/schemas/PaymentScheduleReq"
          },
          "recurring_reason_code": {
            "type": "string",
            "description": "payment_recurring_log reason_code",
            "nullable": true
          },
          "last_transaction_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Response Det Class"
      },
      "PaymentResponseDetSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponseDet"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentScheduleReq": {
        "required": [
          "frequency",
          "period_value",
          "schedule_guid",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "schedule_guid": {
            "type": "string",
            "format": "uuid"
          },
          "frequency": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "period_value": {
            "type": "integer",
            "format": "int32"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "until_date": {
            "type": "string",
            "format": "date-time"
          },
          "schedule_status": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "payment_window": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "payment_schedule_type": {
            "type": "string",
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "last_updated_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentScheduleRequest": {
        "type": "object",
        "properties": {
          "payment_schedule_type": {
            "$ref": "#/components/schemas/PaymentScheduleType"
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "period_value": {
            "type": "integer",
            "description": "Period value",
            "format": "int32",
            "nullable": true
          },
          "repeat_until_date": {
            "type": "string",
            "description": "repeat until date",
            "format": "date-time"
          },
          "payment_start_date": {
            "type": "string",
            "description": "payment start date",
            "format": "date-time"
          },
          "schedule_guid": {
            "type": "string",
            "description": "Schedule guid",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment Schedule Class"
      },
      "PaymentScheduleType": {
        "enum": [
          "IMMEDIATE",
          "CALENDARREPEAT",
          "CONDITIONAL"
        ],
        "type": "string"
      },
      "PaymentTransactionsResponseDet": {
        "required": [
          "payment_date",
          "payment_guid",
          "schedule_guid",
          "txn_guid"
        ],
        "type": "object",
        "properties": {
          "payment_guid": {
            "type": "string",
            "description": "Payment guid",
            "format": "uuid"
          },
          "schedule_guid": {
            "type": "string",
            "description": "Schedule guid",
            "format": "uuid"
          },
          "payment_date": {
            "type": "string",
            "description": "Payment Date",
            "format": "date-time"
          },
          "response_code": {
            "maxLength": 50,
            "type": "string",
            "description": "Response Code",
            "nullable": true
          },
          "reason_code": {
            "maxLength": 50,
            "type": "string",
            "description": "Reason Code",
            "nullable": true
          },
          "txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "error_description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionsResponseDetSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTransactionsResponseDet"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PerformKybAPIResponse": {
        "type": "object",
        "properties": {
          "performKybInfoRequest": {
            "$ref": "#/components/schemas/PerformKybInfoRequest"
          },
          "provider_reference_id": {
            "type": "string",
            "description": "provider_reference_id",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Kyb status",
            "nullable": true
          },
          "provider_response": {
            "$ref": "#/components/schemas/ResponseDescription"
          },
          "response_tin": {
            "$ref": "#/components/schemas/ResponseTin"
          }
        },
        "additionalProperties": false
      },
      "PerformKybInfoRequest": {
        "required": [
          "addresses",
          "company_guid",
          "top_program_guid"
        ],
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "description": "Company Guid",
            "format": "uuid"
          },
          "top_program_guid": {
            "type": "string",
            "description": "Top Program Guid",
            "format": "uuid"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDTO"
            },
            "description": "Business Addresses"
          },
          "primary_contact": {
            "$ref": "#/components/schemas/PersonContactInfo"
          },
          "secondary_contact": {
            "$ref": "#/components/schemas/PersonContactInfo"
          },
          "beneficial_owner": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficialOwnerPersonInfoNoDoc"
            },
            "description": "Company beneficial owner info",
            "nullable": true
          },
          "controller_officer_info": {
            "$ref": "#/components/schemas/BeneficialOwnerPersonInfo"
          },
          "parent_company_info": {
            "$ref": "#/components/schemas/ParentCompanyInfo"
          },
          "company_kyb_override": {
            "type": "boolean"
          },
          "company_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PerformKybRequest": {
        "required": [
          "company_guid",
          "controller_officer_info",
          "primary_contact"
        ],
        "type": "object",
        "properties": {
          "company_guid": {
            "type": "string",
            "description": "Company Guid",
            "format": "uuid"
          },
          "top_program_guid": {
            "type": "string",
            "description": "Top Program Guid",
            "format": "uuid"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDTO"
            },
            "description": "Business Addresses",
            "nullable": true
          },
          "primary_contact": {
            "$ref": "#/components/schemas/PersonContactInfo"
          },
          "secondary_contact": {
            "$ref": "#/components/schemas/PersonContactInfo"
          },
          "beneficial_owner": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeneficialOwnerPersonInfo"
            },
            "description": "Company beneficial owner info",
            "nullable": true
          },
          "controller_officer_info": {
            "$ref": "#/components/schemas/BeneficialOwnerPersonInfo"
          },
          "parent_company_info": {
            "$ref": "#/components/schemas/ParentCompanyInfo"
          },
          "company_kyb_override": {
            "type": "boolean"
          },
          "company_status": {
            "type": "string",
            "nullable": true
          },
          "document": {
            "$ref": "#/components/schemas/CompanyDocument"
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "required": [
          "address_lat",
          "address_lon",
          "base_address_line1",
          "base_address_line2",
          "base_city",
          "base_country",
          "base_postal_code",
          "base_state",
          "billing_address_line1",
          "billing_address_line2",
          "billing_city",
          "billing_country",
          "billing_postal_code",
          "billing_state",
          "contact_type",
          "email_address",
          "first_name",
          "govt_id_number",
          "govt_id_type",
          "hashed_govt_id_number",
          "home_number",
          "key_ref",
          "last_name",
          "mailing_address_line1",
          "mailing_address_line2",
          "mailing_city",
          "mailing_country",
          "mailing_postal_code",
          "mailing_state",
          "market_notification_optin",
          "market_notification_optin_date",
          "middle_name",
          "mobile_number",
          "nationality",
          "office_number",
          "person_forget_mode",
          "person_forget_mode_date",
          "person_guid",
          "person_status",
          "private_data_key_token",
          "profile_dd_mode",
          "sys_utcinserted",
          "sys_utcupdated"
        ],
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "last_name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "first_name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "middle_name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "email_address": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "mobile_number": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "home_number": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "office_number": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "nationality": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "profile_dd_mode": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "govt_id_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "hashed_govt_id_number": {
            "maxLength": 800,
            "minLength": 1,
            "type": "string"
          },
          "govt_id_number": {
            "maxLength": 800,
            "minLength": 1,
            "type": "string"
          },
          "base_address_line1": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "base_address_line2": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "base_city": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "base_state": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "base_postal_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "base_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "billing_address_line1": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "billing_address_line2": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "billing_city": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "billing_state": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "billing_postal_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "billing_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "mailing_address_line1": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "mailing_address_line2": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string"
          },
          "mailing_city": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "mailing_state": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "mailing_postal_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "mailing_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "person_status": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "verfication_mode": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "verfication_level": {
            "maxLength": 16,
            "type": "string",
            "nullable": true
          },
          "person_forget_mode": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "person_forget_mode_date": {
            "type": "string",
            "format": "date-time"
          },
          "market_notification_optin": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string"
          },
          "market_notification_optin_date": {
            "type": "string",
            "format": "date-time"
          },
          "address_lat": {
            "type": "number",
            "format": "double"
          },
          "address_lon": {
            "type": "number",
            "format": "double"
          },
          "contact_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "private_data_key_token": {
            "maxLength": 8000,
            "minLength": 1,
            "type": "string"
          },
          "key_ref": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "client_reference_id": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "mask_govt_id_number": {
            "maxLength": 40,
            "type": "string",
            "nullable": true
          },
          "title": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "additional_data": {
            "maxLength": 8000,
            "type": "string",
            "nullable": true
          },
          "jurisdiction_country": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "jurisdiction_state": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          },
          "beneficial_ownership": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonCardStatus": {
        "enum": [
          "ACTIVE",
          "SUSPEND",
          "FORGET"
        ],
        "type": "string"
      },
      "PersonCardStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PersonCardStatus"
          }
        },
        "additionalProperties": false
      },
      "PersonContactInfo": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "nullable": true
          },
          "email_address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonDTO": {
        "type": "object",
        "properties": {
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonIdentificationDTO"
            },
            "description": "List of identification details of the Person. Required for electronic or manual verification. Skip if your program does not require KYC verification or you do not have the need to capture such information on the platform.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person's unique identifier to be sent only if the person is already created on the platform. If person_guid is passed, all other person details in the API request will be skipped. On the other hand, person_guid must not be passed if a new person/accountholder/cardholder is being created. .",
            "format": "uuid"
          },
          "birth_date": {
            "type": "string",
            "description": "Person’s date of birth. (For businesses - date of incorporation). Required for compliance due diligence.\r\nAccepted Format: yyyy-MM-dd",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Valid email address of the person.",
            "nullable": true
          },
          "first_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s first name.Mandatory if person_guid is not passed and the when the person type is an INDIVIDUAL",
            "nullable": true
          },
          "middle_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s middle name.",
            "nullable": true
          },
          "last_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s last name. Mandatory if person_guid is not passed. Additionally, if the person type is CORPORATE, the entire business name must be sent as last_name.",
            "nullable": true
          },
          "additional_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information about the person in a key-value format.",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Person’s mobile phone number.",
            "nullable": true
          },
          "home_number": {
            "type": "string",
            "description": "The Person’s home phone number.",
            "nullable": true
          },
          "office_number": {
            "type": "string",
            "description": "The Person’s office phone number.",
            "nullable": true
          },
          "base_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "mailing_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "billing_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "nationality": {
            "maxLength": 3,
            "type": "string",
            "description": "Nationality of the person in ISO 3-letter country code.",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "The IP Address of the person who is registering",
            "nullable": true
          },
          "person_status": {
            "$ref": "#/components/schemas/PersonStatus"
          },
          "client_reference_id": {
            "type": "string",
            "description": "API Partner can send the person's unique id on their system.",
            "nullable": true
          },
          "verfication_mode": {
            "type": "string",
            "description": "Mode of verification used for the Person. To be skipped in request. For future use.",
            "nullable": true
          },
          "verfication_level": {
            "type": "string",
            "description": "Verification level of the Person. To be skipped in request. For future use.",
            "nullable": true
          },
          "person_forget_mode": {
            "type": "string",
            "description": "To be skipped in request.For future use.",
            "nullable": true
          },
          "person_forget_mode_date": {
            "type": "string",
            "description": "To be skipped in request.For future use.",
            "nullable": true
          },
          "market_notification_optin": {
            "type": "string",
            "description": "To be skipped in request.For future use.",
            "nullable": true
          },
          "market_notification_optin_date": {
            "type": "string",
            "description": "To be skipped in request.For future use.",
            "nullable": true
          },
          "address_lat": {
            "type": "number",
            "description": "To be skipped in request.For future use.",
            "format": "double"
          },
          "address_lon": {
            "type": "number",
            "description": "To be skipped in request.For future use.",
            "format": "double"
          },
          "contact_type": {
            "type": "string",
            "nullable": true
          },
          "profile_dd_mode": {
            "type": "string",
            "description": "Related to the Due Diligence mode applied for the Person. To be skipped in request. For future use.",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "description": "To be skipped in request.",
            "nullable": true
          },
          "wallet_id": {
            "type": "string",
            "description": "To be skipped in request.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title used by the Person",
            "nullable": true
          },
          "mask_govt_id_number": {
            "type": "string",
            "description": "To be skipped in request.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Client specified comment for the Person.",
            "nullable": true
          },
          "jurisdiction_state": {
            "maxLength": 32,
            "minLength": 2,
            "type": "string",
            "description": "Jurisdiction state for the Person.Can be used to send state of incorporation for CORPORATE type Person.",
            "nullable": true
          },
          "jurisdiction_country": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Jurisdiction country for the Person. Can be used to send country of incorporation for CORPORATE type Person.",
            "nullable": true
          },
          "beneficial_ownership": {
            "maximum": 100,
            "minimum": 0,
            "pattern": "^\\d+(\\.\\d{1,2})?$",
            "type": "number",
            "description": "Beneficial Owner % Stake - Percentage stake of the person in a company. Applicable if a BENEFICIALOWNER type person is being created for an entity/company.",
            "format": "double",
            "nullable": true
          },
          "person_relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonRelation"
            },
            "description": "List of related persons",
            "nullable": true
          },
          "mask_account_number": {
            "maxLength": 19,
            "type": "string",
            "description": "Masked bank account number.",
            "nullable": true
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance (also called Account balance). This include funds that are authorized, but not yet cleared.",
            "format": "double"
          },
          "program_guid": {
            "type": "string",
            "description": "program unique Id",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "PersonIdentificationDTO": {
        "required": [
          "govt_id_number",
          "govt_id_type"
        ],
        "type": "object",
        "properties": {
          "govt_id_type": {
            "$ref": "#/components/schemas/GovtIDType"
          },
          "govt_id_number": {
            "maxLength": 800,
            "minLength": 1,
            "type": "string",
            "description": "Identification number associated with the corresponding Government ID."
          }
        },
        "additionalProperties": false,
        "description": "Contains Person's identity information"
      },
      "PersonRelation": {
        "required": [
          "holder_person_guid",
          "person_relationship",
          "related_person_guid",
          "sys_utcinserted",
          "sys_utcupdated"
        ],
        "type": "object",
        "properties": {
          "holder_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "related_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "person_relationship": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PersonSearch": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "description": "Unique Id of the person",
            "format": "uuid",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "First name of the person",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the person",
            "nullable": true
          },
          "client_reference_id": {
            "type": "string",
            "description": "Client unique Id of the person",
            "nullable": true
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "minLength": 2,
            "type": "string",
            "description": "State name",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code.",
            "nullable": true
          },
          "email_address": {
            "type": "string",
            "description": "Email of the person",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Mobile number of the person",
            "nullable": true
          },
          "company_short_name": {
            "type": "string",
            "description": "Company of the person",
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "description": "Birth date of the person",
            "format": "date-time",
            "nullable": true
          },
          "home_number": {
            "type": "string",
            "description": "Home number of the person",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the person \r\nto search against home, mobile and office numbers",
            "nullable": true
          },
          "wallet_id": {
            "type": "string",
            "description": "Wallet Id",
            "nullable": true
          },
          "card_number": {
            "type": "string",
            "description": "Card number",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "govt_id_number": {
            "type": "string",
            "description": "Government Id of the person",
            "nullable": true
          },
          "customer_search": {
            "type": "string",
            "description": "Customer search",
            "nullable": true
          },
          "user_guid": {
            "type": "string",
            "description": "Unique Id of the user",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account unique Id",
            "format": "uuid",
            "nullable": true
          },
          "contact_type": {
            "type": "string",
            "description": "Contact type of the person",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title of the person",
            "nullable": true
          },
          "limit": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "description": "Limit number of results to retrieve (Will be defaulted to 100 if none specified)",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Index used for pagination of the result.",
            "format": "int32"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet unique Id",
            "format": "uuid",
            "nullable": true
          },
          "company_guid": {
            "type": "string",
            "description": "company unique Id",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "program unique Id",
            "format": "uuid",
            "nullable": true
          },
          "additional_data_key": {
            "type": "string",
            "description": "Additional data key",
            "nullable": true
          },
          "additional_data_value": {
            "type": "string",
            "description": "Additional data value",
            "nullable": true
          },
          "account_instrument_guid": {
            "type": "string",
            "description": "account instrument unique Id",
            "format": "uuid",
            "nullable": true
          },
          "account_type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountType"
            },
            "description": "Account Types.",
            "nullable": true
          },
          "account_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStatus"
            },
            "description": "Account statuses",
            "nullable": true
          },
          "account_routing_number": {
            "maxLength": 9,
            "type": "string",
            "description": "account instrument routing number (bank)",
            "nullable": true
          },
          "account_instrument_number": {
            "type": "string",
            "description": "account instrument number",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "outside instrument unique Id",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_number": {
            "type": "string",
            "description": "bank outside instrument number",
            "nullable": true
          },
          "outside_card_number": {
            "type": "string",
            "description": "card outside instrument number",
            "nullable": true
          },
          "has_comments": {
            "type": "boolean",
            "description": "Has comments added for person",
            "nullable": true
          },
          "min_ledger_balance": {
            "type": "number",
            "description": "Minimum Ledger balance. (Ledger balance also called Account balance. This include funds that are authorized, but not yet cleared)",
            "format": "double",
            "nullable": true
          },
          "max_ledger_balance": {
            "type": "number",
            "description": "Maximum Ledger balance (Ledger balance also called Account balance. This include funds that are authorized, but not yet cleared)",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonSearchResponse": {
        "type": "object",
        "properties": {
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonIdentificationDTO"
            },
            "description": "List of identification details of the Person. Required for electronic or manual verification.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person’s Unique Identifier on Qolo platform.",
            "format": "uuid"
          },
          "birth_date": {
            "type": "string",
            "description": "Person’s date of birth. (For businesses - date of incorporation). Required for verification.\r\nAccepted Format: yyyy-MM-dd",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Valid email address of the person.",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "Person’s first name. Mandatory if person_guid is not passed",
            "nullable": true
          },
          "middle_name": {
            "type": "string",
            "description": "Person’s middle name.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Person’s last name. Mandatory if person_guid is not passed",
            "nullable": true
          },
          "additional_data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional information about the person in a key-value format.",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Person’s mobile phone number.",
            "nullable": true
          },
          "home_number": {
            "type": "string",
            "description": "The Person’s home phone number.",
            "nullable": true
          },
          "office_number": {
            "type": "string",
            "description": "The Person’s office phone number.",
            "nullable": true
          },
          "base_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "mailing_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "billing_address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "nationality": {
            "maxLength": 3,
            "type": "string",
            "description": "Nationality of the person in ISO 3-letter country code.",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "The IP Address of the person who is registering",
            "nullable": true
          },
          "person_status": {
            "$ref": "#/components/schemas/PersonStatus"
          },
          "client_reference_id": {
            "type": "string",
            "description": "API Partner can send the person's unique id on their system and it can be used to fetch person details later",
            "nullable": true
          },
          "verfication_mode": {
            "type": "string",
            "nullable": true
          },
          "verfication_level": {
            "type": "string",
            "nullable": true
          },
          "person_forget_mode": {
            "type": "string",
            "nullable": true
          },
          "person_forget_mode_date": {
            "type": "string",
            "nullable": true
          },
          "market_notification_optin": {
            "type": "string",
            "nullable": true
          },
          "market_notification_optin_date": {
            "type": "string",
            "nullable": true
          },
          "address_lat": {
            "type": "number",
            "format": "double"
          },
          "address_lon": {
            "type": "number",
            "format": "double"
          },
          "contact_type": {
            "type": "string",
            "nullable": true
          },
          "profile_dd_mode": {
            "type": "string",
            "nullable": true
          },
          "wallet_id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "mask_govt_id_number": {
            "type": "string",
            "nullable": true
          },
          "person_relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonRelation"
            },
            "description": "List of related persons",
            "nullable": true
          },
          "top_program_name": {
            "type": "string",
            "nullable": true
          },
          "program_name": {
            "type": "string",
            "nullable": true
          },
          "last4_card": {
            "type": "string",
            "nullable": true
          },
          "last_card_status": {
            "type": "string",
            "nullable": true
          },
          "mask_card_pan": {
            "type": "string",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "account_status": {
            "type": "string",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Comments added for person",
            "nullable": true
          },
          "mask_account_number": {
            "maxLength": 19,
            "type": "string",
            "description": "Masked bank account number.",
            "nullable": true
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance (also called Account balance). This include funds that are authorized, but not yet cleared.",
            "format": "double"
          },
          "jurisdiction_state": {
            "type": "string",
            "description": "Jurisdiction of formation - State where the entity was incorporated",
            "nullable": true
          },
          "jurisdiction_country": {
            "type": "string",
            "description": "Jurisdiction of formation - Country where the entity was incorporated",
            "nullable": true
          },
          "beneficial_ownership": {
            "type": "number",
            "description": "Beneficial Owner % Stake - Percentage stake of the person in the entity",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonSearchResponseSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonSearchResponse"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonStatus": {
        "enum": [
          "INCOMPLETE",
          "UNVERIFIED",
          "CLEARED",
          "SANCTIONED",
          "PEP",
          "NEGLIST",
          "ANONYMOUS",
          "POTENTIALMATCH"
        ],
        "type": "string",
        "description": "Status of the person identifying if they are cleared for card creation and transaction or if they are blocked for certain reasons. Ties in to the Person Verification result. Can be skipped if program identifies the person status as per the program requirements. Possible values are:\r\n<br>INCOMPLETE - When person verification is not yet complete and pending for some more details.<br>UNVERIFIED - Person has failed verification.<br>CLEARED - Person has cleared the verification requirement for the program.<br>SANCTIONED - Person name found in sanctioned list.<br>PEP - Person name found in PEP list.<br>NEGLIST - Person name found in Negative list.<br>ANONYMOUS - Person details are not provided.<br>POTENTIALMATCH - Person name has a match with the OFAC/Sanction list."
      },
      "PersonVerificationResultDTO": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "description": "Unique Id of the person",
            "format": "uuid"
          },
          "verification_mode": {
            "type": "string",
            "description": "Verification Mode",
            "nullable": true
          },
          "verification_level": {
            "type": "string",
            "description": "Verification level",
            "nullable": true
          },
          "additional_desc": {
            "type": "string",
            "nullable": true
          },
          "verificationResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonVerificationResultDetail"
            },
            "description": "List of verification details for person",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonVerificationResultDetail": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "verification_method": {
            "type": "string",
            "nullable": true
          },
          "verification_date": {
            "type": "string",
            "format": "date-time"
          },
          "document_type": {
            "type": "string",
            "nullable": true
          },
          "document_path": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "verification_results": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "nullable": true
          },
          "provider_reference": {
            "type": "string",
            "nullable": true
          },
          "provider_name": {
            "type": "string",
            "nullable": true
          },
          "documents": {
            "$ref": "#/components/schemas/DocumentStorageDetails"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ProcessOperationConditionsRequest": {
        "required": [
          "amount_limit"
        ],
        "type": "object",
        "properties": {
          "condition_guid": {
            "type": "string",
            "description": "Condition Guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program Guid",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account Guid",
            "format": "uuid",
            "nullable": true
          },
          "amount_limit": {
            "type": "number",
            "description": "Amount Limit",
            "format": "double"
          },
          "card_proxy": {
            "type": "string",
            "description": "Card Proxy",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency - Example USD",
            "nullable": true
          },
          "operation_name": {
            "$ref": "#/components/schemas/OperationName"
          },
          "operation_categories": {
            "$ref": "#/components/schemas/OperationCategories"
          },
          "time_unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "expiry_limit_mins": {
            "type": "integer",
            "description": "Expiry Limit - Limit to be provided in minutes for Account Expiry date",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Process Operation Conditions Request"
      },
      "ProcessOperationConditionsResponse": {
        "required": [
          "amount_limit"
        ],
        "type": "object",
        "properties": {
          "condition_guid": {
            "type": "string",
            "description": "Condition Guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program Guid",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account Guid",
            "format": "uuid",
            "nullable": true
          },
          "amount_limit": {
            "type": "number",
            "description": "Amount Limit",
            "format": "double"
          },
          "account_expiry_date": {
            "type": "string",
            "description": "Account Expiry Date",
            "format": "date-time",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card Proxy",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency - Example USD",
            "nullable": true
          },
          "operation_name": {
            "$ref": "#/components/schemas/OperationName"
          },
          "operation_categories": {
            "$ref": "#/components/schemas/OperationCategories"
          },
          "time_unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "expiry_limit_mins": {
            "type": "integer",
            "description": "Expiry Limit - Limit to be provided in minutes for Account Expiry date",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "ProcessOperationConditionsResponse class"
      },
      "ProgramDataDTO": {
        "type": "object",
        "properties": {
          "programManager": {
            "$ref": "#/components/schemas/ProgramManagerDTO"
          },
          "programGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgramGroupWithChannelAndSponsor"
            },
            "description": "Program group details",
            "nullable": true
          },
          "iins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigProgramIinDetails"
            },
            "description": "Identificator details",
            "nullable": true
          },
          "programPerson": {
            "$ref": "#/components/schemas/PersonDTO"
          },
          "wallet": {
            "$ref": "#/components/schemas/WalletDTO"
          },
          "interest": {
            "$ref": "#/components/schemas/InterestRateDTO"
          },
          "packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigProgramPackageDetails"
            },
            "description": "Package details",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProgramGroupWithChannelAndSponsor": {
        "type": "object",
        "properties": {
          "program_group_guid": {
            "type": "string",
            "description": "Program group uniqueidentifier",
            "format": "uuid"
          },
          "program_group_name": {
            "type": "string",
            "description": "Program group name",
            "nullable": true
          },
          "program_group_short_name": {
            "type": "string",
            "description": "Program group short name",
            "nullable": true
          },
          "channelProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelProviderDTO"
            },
            "description": "List of channel providers",
            "nullable": true
          },
          "sponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SponsorWithOmnibus"
            },
            "description": "List of sponsors",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProgramManagerDTO": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program unique id",
            "format": "uuid"
          },
          "parent_program_guid": {
            "type": "string",
            "description": "Program parent unique id",
            "format": "uuid"
          },
          "company_guid": {
            "type": "string",
            "description": "Company unique id",
            "format": "uuid"
          },
          "program_name": {
            "type": "string",
            "description": "Program name",
            "nullable": true
          },
          "program_short_name": {
            "type": "string",
            "description": "Program short name",
            "nullable": true
          },
          "top_program_guid": {
            "type": "string",
            "description": "Top program unique id",
            "format": "uuid"
          },
          "eft_display_name": {
            "type": "string",
            "description": "ACH program display name",
            "nullable": true
          },
          "bank_product_program_guid": {
            "type": "string",
            "description": "Represents product name",
            "format": "uuid"
          },
          "abu_report_flag": {
            "type": "boolean",
            "description": "Will this program generate abu report",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client identifier",
            "nullable": true
          },
          "program_status": {
            "type": "string",
            "description": "Program status",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProgramPersonDetails": {
        "required": [
          "last_name"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Person’s first name.",
            "nullable": true
          },
          "last_name": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Person’s last name. Please note that first_name + last_name can not exceed a length of 39 characters"
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "Address information of the person. Full number and name of street, avenue, road etc",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "Additional address information",
            "nullable": true
          },
          "city": {
            "maxLength": 30,
            "type": "string",
            "description": "City corresponding to the address",
            "nullable": true
          },
          "state": {
            "maxLength": 30,
            "type": "string",
            "description": "State name",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address.",
            "nullable": true
          },
          "country": {
            "maxLength": 3,
            "type": "string",
            "description": "Country corresponding to the address. Must be entered as ISO 3-letter country code. Will default to USA",
            "nullable": true
          },
          "email": {
            "maxLength": 128,
            "type": "string",
            "description": "Valid email address of the person.",
            "nullable": true
          },
          "mobile_number": {
            "maxLength": 16,
            "type": "string",
            "description": "Person’s mobile phone number.",
            "nullable": true
          },
          "home_number": {
            "maxLength": 16,
            "type": "string",
            "description": "The Person’s home phone number.",
            "nullable": true
          },
          "office_number": {
            "maxLength": 16,
            "type": "string",
            "description": "The Person’s office phone number.",
            "nullable": true
          },
          "account_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTypesPC"
            },
            "description": "List of Account Types to be created for the Program Person",
            "nullable": true
          },
          "currency": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency of the Accounts (3 char ISO) will default to USD",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Program Owner details"
      },
      "ProgramRequest": {
        "type": "object",
        "properties": {
          "program_name": {
            "maxLength": 128,
            "type": "string",
            "description": "program name",
            "nullable": true
          },
          "parent_program_guid": {
            "type": "string",
            "description": "parent program unique id",
            "format": "uuid",
            "nullable": true
          },
          "eft_display_name": {
            "maxLength": 10,
            "type": "string",
            "description": "eft display name",
            "nullable": true
          },
          "program_short_name": {
            "maxLength": 16,
            "type": "string",
            "description": "program short name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Program Request DTO"
      },
      "ProgramResponse": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "program unique id",
            "format": "uuid"
          },
          "program_name": {
            "type": "string",
            "description": "program name",
            "nullable": true
          },
          "program_short_name": {
            "type": "string",
            "description": "program short name",
            "nullable": true
          },
          "eft_display_name": {
            "type": "string",
            "description": "eft display name",
            "nullable": true
          },
          "parent_program_guid": {
            "type": "string",
            "description": "parent program unique id",
            "format": "uuid"
          },
          "top_program_guid": {
            "type": "string",
            "description": "top program unique id",
            "format": "uuid"
          },
          "company_guid": {
            "type": "string",
            "description": "company unique id",
            "format": "uuid"
          },
          "program_group_guid": {
            "type": "string",
            "description": "program group unique id",
            "format": "uuid",
            "nullable": true
          },
          "bank_product_program_guid": {
            "type": "string",
            "description": "bank product associated program guid",
            "format": "uuid",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "client unique id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Program Response DTO"
      },
      "Question": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteRequest": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "destination_amount": {
            "type": "number",
            "format": "double"
          },
          "destination_currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteResponse": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConversionFees"
            },
            "nullable": true
          },
          "conversionDetails": {
            "$ref": "#/components/schemas/ConversionDetails"
          }
        },
        "additionalProperties": false
      },
      "RTPBankApprovalRequest": {
        "required": [
          "txn_guid"
        ],
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "original txn_guid for request for payment real time",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RTPRefundRequest": {
        "required": [
          "txn_guid"
        ],
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "original txn_guid for credit transfer real time",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RegZdetails": {
        "type": "object",
        "properties": {
          "stmt_date": {
            "type": "string",
            "description": "statement date",
            "format": "date-time",
            "nullable": true
          },
          "billing_cycle_start": {
            "type": "string",
            "description": "billing cycle start date",
            "format": "date-time",
            "nullable": true
          },
          "billing_cycle_end": {
            "type": "string",
            "description": "billing cycle end date",
            "format": "date-time",
            "nullable": true
          },
          "account_status": {
            "type": "string",
            "description": "account status",
            "nullable": true
          },
          "payments": {
            "type": "number",
            "description": "payments made during the statement period",
            "format": "double",
            "nullable": true
          },
          "other_credits": {
            "type": "number",
            "description": "other credits (other than payments)",
            "format": "double",
            "nullable": true
          },
          "purchases": {
            "type": "number",
            "description": "purchases made during the statement period (Debit)",
            "format": "double",
            "nullable": true
          },
          "cash_advances": {
            "type": "number",
            "description": "cash advances made during the statement period (Debit)",
            "format": "double",
            "nullable": true
          },
          "balance_transfer": {
            "type": "number",
            "description": "balance transfers credit into the account during the statement period (Debit)",
            "format": "double",
            "nullable": true
          },
          "total_interest": {
            "type": "number",
            "description": "total interest sum of all interest charged on the account during during the statement period (Debit)",
            "format": "double",
            "nullable": true
          },
          "credit_limit": {
            "type": "number",
            "description": "credit limit - Maximum allowed on the account",
            "format": "double",
            "nullable": true
          },
          "available_credit": {
            "type": "number",
            "description": "available credit limit - available credit on the account",
            "format": "double",
            "nullable": true
          },
          "ending_bal": {
            "type": "number",
            "description": "ending balance - closing balance on the account for this statement period, for charge cards this is amount due on the account",
            "format": "double",
            "nullable": true
          },
          "min_payment": {
            "type": "number",
            "description": "min payment - minimum payment due amount",
            "format": "double",
            "nullable": true
          },
          "payment_duedate": {
            "type": "string",
            "description": "payment_duedate - payment due date",
            "format": "date-time",
            "nullable": true
          },
          "ytd_fees": {
            "type": "number",
            "description": "year-to-date fees charged on the account",
            "format": "double",
            "nullable": true
          },
          "processing_fees": {
            "type": "number",
            "description": "processing fees charged on the account",
            "format": "double",
            "nullable": true
          },
          "carried_balance_fees": {
            "type": "number",
            "description": "carried balance fees charged on the account",
            "format": "double",
            "nullable": true
          },
          "ytd_interest": {
            "type": "number",
            "description": "year-to-date interest charged on the account",
            "format": "double",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegzTransactionsDTO"
            },
            "description": "List of fees for account",
            "nullable": true
          },
          "interest_charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegzInterestChargesDTO"
            },
            "description": "List of interest charges for account",
            "nullable": true
          },
          "apr_changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegzAPRChargesDTO"
            },
            "description": "List of apr_changes charges for account",
            "nullable": true
          },
          "payment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvanceSchedule"
            },
            "description": "List of payment schedule",
            "nullable": true
          },
          "additional_regz_data": {
            "$ref": "#/components/schemas/RegzAdditionalDataDTO"
          }
        },
        "additionalProperties": false
      },
      "RegeStatementsResponse": {
        "type": "object",
        "properties": {
          "month": {
            "type": "integer",
            "description": "Statement month",
            "format": "int32",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "description": "Statement year",
            "format": "int32",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Unique ID of the person",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique ID of the wallet associated with the account",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Unique ID of the account",
            "format": "uuid",
            "nullable": true
          },
          "mask_card_number": {
            "type": "string",
            "description": "Masked card number of most recent card",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy of most recent card",
            "nullable": true
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "nullable": true
          },
          "mailing_address_line1": {
            "type": "string",
            "description": "Mailing address line 1",
            "nullable": true
          },
          "mailing_address_line2": {
            "type": "string",
            "description": "Mailing address line 2",
            "nullable": true
          },
          "mailing_city": {
            "type": "string",
            "description": "Mailing address city",
            "nullable": true
          },
          "mailing_state": {
            "type": "string",
            "description": "Mailing address state",
            "nullable": true
          },
          "mailing_postal_code": {
            "type": "string",
            "description": "Mailing address postal code",
            "nullable": true
          },
          "mailing_country": {
            "type": "string",
            "description": "Mailing address country",
            "nullable": true
          },
          "beginning_balance": {
            "type": "number",
            "description": "Beginning balance of account",
            "format": "double",
            "nullable": true
          },
          "ending_balance": {
            "type": "number",
            "description": "Ending balance of account",
            "format": "double",
            "nullable": true
          },
          "total_credits": {
            "type": "number",
            "description": "Total credits for account",
            "format": "double",
            "nullable": true
          },
          "other_debits": {
            "type": "number",
            "description": "Other debits for account excluding purchases/ATM",
            "format": "double",
            "nullable": true
          },
          "total_fees": {
            "type": "number",
            "description": "Totals fees for account",
            "format": "double",
            "nullable": true
          },
          "total_atm_and_purchases": {
            "type": "number",
            "description": "Total purchases and ATM amount for account",
            "format": "double",
            "nullable": true
          },
          "ytd_fees": {
            "type": "number",
            "description": "year-to-date fees charged on the account",
            "format": "double",
            "nullable": true
          },
          "purchases": {
            "type": "number",
            "description": "total month purchases for the account",
            "format": "double",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Total transactions for account",
            "format": "int32",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegeTransactionsDTO"
            },
            "description": "List of transactions for account",
            "nullable": true
          },
          "client_reference_id": {
            "type": "string",
            "description": "client_reference_id from Person",
            "nullable": true
          },
          "reg_z_details": {
            "$ref": "#/components/schemas/RegZdetails"
          },
          "mask_account_number": {
            "type": "string",
            "description": "mask account instrument account number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegeTransactionsDTO": {
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Unique ID of the transaction",
            "format": "uuid",
            "nullable": true
          },
          "txn_date": {
            "type": "string",
            "description": "Transaction Date",
            "format": "date-time"
          },
          "post_date": {
            "type": "string",
            "description": "Settlement Date",
            "format": "date-time",
            "nullable": true
          },
          "txn_type": {
            "type": "string",
            "description": "Transaction type - custom value",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "description": "Account currency",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount in account currency",
            "format": "double"
          },
          "request_code": {
            "type": "string",
            "description": "Request code of transaction",
            "nullable": true
          },
          "request_code_description": {
            "type": "string",
            "description": "Request code description",
            "nullable": true
          },
          "transfer_outside_instrument_guid": {
            "type": "string",
            "description": "Unique ID of the outside instrument",
            "format": "uuid",
            "nullable": true
          },
          "transfer_account_first_name": {
            "type": "string",
            "description": "First name of beneficiary/payer",
            "nullable": true
          },
          "transfer_account_last_name": {
            "type": "string",
            "description": "Last name of beneficiary/payer",
            "nullable": true
          },
          "transfer_institution_name": {
            "type": "string",
            "description": "Institution name linked to outside instrument",
            "nullable": true
          },
          "mask_account_number": {
            "type": "string",
            "description": "Masked account number of transaction",
            "nullable": true
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance",
            "format": "double",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "description": "Acceptor ID",
            "nullable": true
          },
          "acceptor_name_loc": {
            "type": "string",
            "description": "Acceptor name location",
            "nullable": true
          },
          "txn_location": {
            "type": "string",
            "description": "Transaction location",
            "nullable": true
          },
          "txn_city": {
            "type": "string",
            "description": "Transaction city",
            "nullable": true
          },
          "txn_country": {
            "type": "string",
            "description": "Transaction country",
            "nullable": true
          },
          "txn_description": {
            "type": "string",
            "description": "Transaction Description",
            "nullable": true
          },
          "reference_number": {
            "type": "string",
            "description": "Transaction Reference Number provided by the network.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegzAPRChargesDTO": {
        "type": "object",
        "properties": {
          "penalty_apr": {
            "type": "number",
            "description": "Applicable penalty APR in case of any late payment made by cardholder",
            "format": "double",
            "nullable": true
          },
          "penaltyapr_applicable_dt": {
            "type": "string",
            "description": "Penalty APR will be applicable for transaction done on or after this date",
            "format": "date-time",
            "nullable": true
          },
          "penaltyapr_end_dt": {
            "type": "string",
            "description": "Penalty APR will be applicable for transaction done up to this date.\r\n(This penalty apr can be applied indefinitely beyond this date as per\r\nthe Issuer's/client's discretion)",
            "format": "date-time",
            "nullable": true
          },
          "penaltyapr_grace_period": {
            "type": "integer",
            "description": "For any transaction done before the penaltyapr_applicable_dt,\r\nif the account is unpaid beyond this grace period (# of days),\r\nthen the penalty_apr will be applicable on these transactions as well",
            "format": "int32",
            "nullable": true
          },
          "revised_apr_purchases": {
            "type": "number",
            "description": "Applicable revised APR for Purchases",
            "format": "double",
            "nullable": true
          },
          "revised_apr_cashadv": {
            "type": "number",
            "description": "Applicable revised APR for cash advances",
            "format": "double",
            "nullable": true
          },
          "revisedapr_applicable_dt": {
            "type": "string",
            "description": "Revised APR applicable date",
            "format": "date-time",
            "nullable": true
          },
          "revisedapr_end_dt": {
            "type": "string",
            "description": "Revised APR will be applicable for transacions done prior to this date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegzAdditionalDataDTO": {
        "type": "object",
        "properties": {
          "late_payment_warning": {
            "type": "string",
            "description": "late payment warning text",
            "nullable": true
          },
          "minimum_payment_warning": {
            "type": "string",
            "description": "minimum payment warning text",
            "nullable": true
          },
          "interest_rate_change": {
            "type": "string",
            "description": "interest rate change text",
            "nullable": true
          },
          "counseling_info": {
            "type": "string",
            "description": "counseling info text",
            "nullable": true
          },
          "account_term_change": {
            "type": "string",
            "description": "account term change text",
            "nullable": true
          },
          "statement_info": {
            "type": "string",
            "description": "statement info text",
            "nullable": true
          },
          "statement_faq": {
            "type": "string",
            "description": "satement FAQ text",
            "nullable": true
          },
          "additional_data": {
            "type": "string",
            "description": "additional data",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegzInterestChargesDTO": {
        "type": "object",
        "properties": {
          "interest_type": {
            "type": "string",
            "description": "interest type - Purchase or Cash Advance",
            "nullable": true
          },
          "interest_rate": {
            "type": "number",
            "description": "interest rate - interest rate (APR)",
            "format": "double",
            "nullable": true
          },
          "bal_subjectto_inrate": {
            "type": "number",
            "description": "balance subject to interest rate",
            "format": "double",
            "nullable": true
          },
          "interest_amount": {
            "type": "number",
            "description": "interest charged for the period",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegzTransactionsDTO": {
        "type": "object",
        "properties": {
          "txn_date": {
            "type": "string",
            "description": "Transaction Date",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "description": "Transaction amount in account currency",
            "format": "double"
          },
          "txn_description": {
            "type": "string",
            "description": "Transaction Description",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relationship": {
        "enum": [
          "ASSOCIATE",
          "DEPENDENT",
          "BENEFICIALOWNER",
          "BENEFICIARY",
          "FUNDER",
          "UNAFFILIATED"
        ],
        "type": "string"
      },
      "ReplaceCardOperation": {
        "enum": [
          "REPLACE",
          "RENEW"
        ],
        "type": "string"
      },
      "ReplaceCardRequest": {
        "type": "object",
        "properties": {
          "reason_code": {
            "type": "string",
            "description": "Reason code to replace card",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ReplaceCardStatus"
          },
          "new_card_proxy": {
            "type": "string",
            "nullable": true
          },
          "operation": {
            "$ref": "#/components/schemas/ReplaceCardOperation"
          },
          "replace_fulfillment_order_info": {
            "$ref": "#/components/schemas/ReplaceFulfillmentOrderInfo"
          },
          "card_months_until_expire": {
            "type": "integer",
            "description": "Sets new card's expiration. Adds months from current date.",
            "format": "int32",
            "nullable": true
          },
          "revenue_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReplaceCardStatus": {
        "enum": [
          "ACTIVE",
          "SUSPEND",
          "LOST",
          "STOLEN",
          "PENDING",
          "DAMAGED"
        ],
        "type": "string"
      },
      "ReplaceFulfillmentOrderInfo": {
        "type": "object",
        "properties": {
          "package_guid": {
            "type": "string",
            "description": "Package guid",
            "format": "uuid",
            "nullable": true
          },
          "third_line": {
            "type": "string",
            "description": "Third line",
            "nullable": true
          },
          "fourth_line": {
            "type": "string",
            "description": "Fourth line",
            "nullable": true
          },
          "shipping_method": {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          "signature_required": {
            "type": "boolean",
            "description": "Signature required",
            "nullable": true
          },
          "discretionary_track_data": {
            "maxLength": 100,
            "type": "string",
            "description": "Discretionary track data",
            "nullable": true
          },
          "pin_mailer_flag": {
            "type": "boolean",
            "description": "Pin mailer flag",
            "nullable": true
          },
          "message_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 1",
            "nullable": true
          },
          "message_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 2",
            "nullable": true
          },
          "message_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 3",
            "nullable": true
          },
          "message_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 4",
            "nullable": true
          },
          "message_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 5",
            "nullable": true
          },
          "message_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 6",
            "nullable": true
          },
          "message_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 7",
            "nullable": true
          },
          "message_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Message 8",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportArgs": {
        "required": [
          "arg_name",
          "arg_type",
          "arg_value"
        ],
        "type": "object",
        "properties": {
          "arg_name": {
            "minLength": 1,
            "type": "string"
          },
          "arg_type": {
            "$ref": "#/components/schemas/ReportArgumentType"
          },
          "arg_value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReportArgumentType": {
        "enum": [
          "GUID",
          "DATE",
          "NUMBER",
          "TEXT"
        ],
        "type": "string"
      },
      "ReportRequestExt": {
        "required": [
          "report_name"
        ],
        "type": "object",
        "properties": {
          "report_name": {
            "minLength": 1,
            "type": "string"
          },
          "report_args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportArgs"
            },
            "nullable": true
          },
          "override_flag": {
            "type": "string",
            "nullable": true
          },
          "overwrite_flag": {
            "type": "string",
            "nullable": true
          },
          "redis_key": {
            "type": "string",
            "nullable": true
          },
          "redis_url": {
            "type": "string",
            "nullable": true
          },
          "reference_id": {
            "type": "string",
            "format": "uuid"
          },
          "date_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "date_to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sponsor_name": {
            "type": "string",
            "nullable": true
          },
          "send_completion_email": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ReportResponse": {
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "ReferenceId",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "ProgramGuid",
            "format": "uuid",
            "nullable": true
          },
          "program_name": {
            "type": "string",
            "description": "ProgramName",
            "nullable": true
          },
          "ext_name": {
            "type": "string",
            "description": "ExtName",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status",
            "nullable": true
          },
          "filename": {
            "type": "string",
            "description": "Filename",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "Error",
            "nullable": true
          },
          "rpt_lastgenerated": {
            "type": "string",
            "description": "Date Report Generated (Optional)",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ReportResponse"
      },
      "RequestCardDataType": {
        "enum": [
          "ISSUER_WALLET",
          "APPLE_PAY",
          "GOOGLE_PAY",
          "SAMSUNG_PAY",
          "OTHER"
        ],
        "type": "string"
      },
      "ResponseDescription": {
        "type": "object",
        "properties": {
          "response_description": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewTasksDetails"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResponseTin": {
        "type": "object",
        "properties": {
          "mismatch": {
            "type": "boolean"
          },
          "unknown": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RetrieveCompanyRequest": {
        "type": "object",
        "properties": {
          "company_details": {
            "$ref": "#/components/schemas/Company"
          },
          "due_diligence_data": {
            "$ref": "#/components/schemas/PerformKybInfoRequest"
          },
          "kyb_provider_data": {
            "$ref": "#/components/schemas/KYBProviderData"
          }
        },
        "additionalProperties": false
      },
      "ReverseFeeDTO": {
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Transaction guid",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account guid",
            "format": "uuid",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency of fee to be charged",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "description": "Fee request code",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "Available balance of the account charged with the fee",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger balance of the account charged with the fee",
            "format": "double"
          },
          "client_reference_id": {
            "type": "string",
            "description": "API partner's unique transfer id on their system",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReverseFeeRequest": {
        "required": [
          "reason_code",
          "reason_memo"
        ],
        "type": "object",
        "properties": {
          "fee_amount_reversal": {
            "type": "number",
            "description": "Fee amount to be reversed",
            "format": "double",
            "nullable": true
          },
          "reason_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "reason code"
          },
          "reason_memo": {
            "maxLength": 4000,
            "minLength": 1,
            "type": "string",
            "description": "reason memo"
          },
          "client_reference_id": {
            "maxLength": 36,
            "type": "string",
            "description": "API partner's unique transfer id on their system",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReverseFeeResponse": {
        "type": "object",
        "properties": {
          "original_txn_guid": {
            "type": "string",
            "description": "Original Fee transaction guid",
            "format": "uuid"
          },
          "original_amount": {
            "type": "number",
            "description": "Original Fee Amount",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "description": "Amount of fee that was reversed",
            "format": "double"
          },
          "reason_code": {
            "type": "string",
            "description": "reason code",
            "nullable": true
          },
          "reason_memo": {
            "type": "string",
            "description": "reason memo",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/ReverseFeeDTO"
          },
          "revenue": {
            "$ref": "#/components/schemas/ReverseFeeDTO"
          }
        },
        "additionalProperties": false
      },
      "ReviewTasksDetails": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "sub_label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SECCode": {
        "enum": [
          "WEB",
          "PPD",
          "TEL",
          "CCD",
          "CTX"
        ],
        "type": "string"
      },
      "ShippingMethod": {
        "enum": [
          "STDMAIL",
          "STDEXP",
          "UPSSTD",
          "UPSGROUND",
          "USPSPRI",
          "EXPRESS2DAY",
          "EXPRESSOVERNIGHT",
          "STDMAILINT",
          "EXPRESS2DAYINT",
          "EXPRESS1DAYINT"
        ],
        "type": "string",
        "description": "Shipping method to be used for the Physical card. Must match with what is configured for the program, else will error out.\r\n<br>STDMAIL - Standard Mail (USPS Standard)<br>STDEXP - Standard Expedited shipment (USPS Expedited)<br>UPSSTD - UPS Standard<br>UPSGROUND - UPS Ground<br>USPSPRI - USPS Priority<br>EXPRESS2DAY - Express 2 day delivery (UPS2Day)<br>EXPRESSOVERNIGHT - Overnight delivery (UPS1Day)<br>STDMAILINT - Standard International Mail (USPS International)<br>EXPRESS2DAYINT - Priority International (USPS)<br>EXPRESS1DAYINT - UPS World Wide Saver Intl."
      },
      "SponsorWithOmnibus": {
        "type": "object",
        "properties": {
          "sponsor_guid": {
            "type": "string",
            "description": "Unique identifier of the sponsor",
            "format": "uuid"
          },
          "company_guid": {
            "type": "string",
            "description": "Unique identifier of the company associated with the sponsor",
            "format": "uuid"
          },
          "sponsor_type": {
            "type": "string",
            "description": "What function does the sponsor perform",
            "nullable": true
          },
          "sponsor_name": {
            "type": "string",
            "description": "The sponsor name",
            "nullable": true
          },
          "sponsor_description": {
            "type": "string",
            "description": "Sponsor description",
            "nullable": true
          },
          "omnibusAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigProgramOmnibusDetails"
            },
            "description": "List of omnibus accounts linked to this sponsor",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatementFormat": {
        "enum": [
          "JSON",
          "PDF"
        ],
        "type": "string"
      },
      "StatusInstrumentRequest": {
        "type": "object",
        "properties": {
          "instrument_status": {
            "$ref": "#/components/schemas/InstrumentStatus"
          }
        },
        "additionalProperties": false
      },
      "StatusPaymentOption": {
        "enum": [
          "CANCEL"
        ],
        "type": "string",
        "description": "Desired Payment Status"
      },
      "TargetedCardAuthControlDTO": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program Guid",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card Proxy",
            "nullable": true
          },
          "card_auth_limit_values": {
            "type": "string",
            "description": "Targeted card auth control values",
            "nullable": true
          },
          "targeted_auth_limit_expiration": {
            "type": "string",
            "description": "Targeted card auth control expiration Date",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Targeted auth control details"
      },
      "TargetedCardAuthControlRequest": {
        "type": "object",
        "properties": {
          "program_guid": {
            "type": "string",
            "description": "Program unique identifier. Program_gud or card_proxy are required.",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card identifier. Program_gud or card_proxy are required.",
            "nullable": true
          },
          "card_auth_limit_values": {
            "type": "string",
            "description": "Card limit values\r\n            \r\nThere are four selection options:\r\nallow_all_except\r\nallow_all\r\nblock_all\r\nblock_all_except\r\n            \r\nThere are three different entities you can configure limits for:\r\nmcc_list - Merchant category code ex 1711 - Air Conditioning, Heating, and Plumbing Contractors\r\n           mcc_list is defined as a range of mcc values. See examples\r\nmerchant_name_list - Merchant name i.e. Amazon.\r\n                     Merchant names use value_has logic so \"amazon\" would select \"amazon.com\" or \"amazon prime\" or even \"amazon river gift shop\". See examples\r\nmerchant_id_list - AKA Merchant Identification Number (MID). This is number that uniquely identifies a particular merchant. For example 784959000762203\r\n                   identifies Amazon.com. This configuration\r\n                   merchant_id_list uses value_is logic. See examples\r\n            \r\nExamples\r\nAll three configured for allow_all_except\r\n{\r\n\"card_auth_target_control\": {\r\n\"allow_all_except\": [\r\n{\r\n\"mcc_list\": [\r\n{\r\n\"range\": {\r\n\"from\": \"6011\",\r\n\"through\": \"6012\"\r\n}\r\n}\r\n]\r\n},\r\n{\r\n\"merchant_id_list\": [\r\n{\r\n\"value_is\": \r\n[\"160146000762203\",\"020014005912000\"]                        \r\n}\r\n]\r\n},\r\n{\r\n\"merchant_name_list\": [\r\n{\r\n\"value_has\": [\r\n\"Amazon\",\r\n\"Amazon Prime\"\r\n]\r\n}\r\n]\r\n}           \r\n]\r\n}\r\n}\r\n            \r\n/// All three configured for block_all\r\n{\r\n\"card_auth_target_control\": {\r\n\"allow_all_except\": [\r\n{\r\n\"mcc_list\": [\r\n{\r\n\"range\": {\r\n\"from\": \"6011\",\r\n\"through\": \"6012\"\r\n}\r\n}\r\n]\r\n},\r\n{\r\n\"merchant_id_list\": [\r\n{\r\n\"value_is\": \r\n[\"160146000762203\",\"020014005912000\"]                        \r\n}\r\n]\r\n},\r\n{\r\n\"merchant_name_list\": [\r\n{\r\n\"value_has\": [\r\n\"Amazon\",\r\n\"Amazon Prime\"\r\n]\r\n}\r\n]\r\n}           \r\n]\r\n}\r\n}\r\n            \r\nTwo MCC ranges defined\r\n{\r\n\"card_auth_target_control\": {\r\n\"allow_all_except\": [\r\n{\r\n\"mcc_list\": [\r\n{\r\n\"range\": {\r\n\"from\": \"6011\",\r\n\"through\": \"6012\"\r\n}\r\n}\r\n        ]\r\n},\r\n{\r\n    \"mcc_list\": [\r\n            {\r\n        \"range\": {\r\n            \"from\": \"7011\",\r\n\"through\": \"7012\"\r\n}\r\n}\r\n]\r\n},\r\n            {\r\n    \"merchant_id_list\": [\r\n                    {\r\n        \"value_is\": \r\n    [\"160146000762203\",\"020014005912000\"]                        \r\n}\r\n                ]\r\n},\r\n            {\r\n    \"merchant_name_list\": [\r\n                    {\r\n        \"value_has\": [\r\n                            \"Amazon\",                            \r\n                            \"Amazon Prime\"\r\n                        ]\r\n}\r\n                ]\r\n}\r\n        ]\r\n}\r\n}",
            "nullable": true
          },
          "targeted_auth_limit_expiration": {
            "maxLength": 10,
            "type": "string",
            "description": "Targeted card auth control expiration Date (Optional by default limit will never expire)\r\nuse the ccyy-mm-dd format.\r\nValid for card configuration only",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeUnit": {
        "enum": [
          "TranAmount",
          "TranAmountMin",
          "Daily",
          "Weekly",
          "Monthly",
          "Quarterly",
          "Yearly",
          "Lifetime"
        ],
        "type": "string"
      },
      "Title": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionAuthSimRequest": {
        "required": [
          "auth_request_type",
          "card_proxy",
          "txn_amount"
        ],
        "type": "object",
        "properties": {
          "auth_request_type": {
            "$ref": "#/components/schemas/TransactionAuthSimRequestType"
          },
          "card_proxy": {
            "minLength": 1,
            "type": "string",
            "description": "card proxy"
          },
          "avs_postal_code": {
            "maxLength": 9,
            "minLength": 5,
            "type": "string",
            "description": "postal code used to avs data",
            "nullable": true
          },
          "avs_address_line_1": {
            "type": "string",
            "description": "address line 1 used for avs data",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "description": "Amount in the simulated auth message in local currency",
            "format": "double"
          },
          "txn_currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency of the transaction amount; can be defaulted to 840",
            "nullable": true
          },
          "currency_conv_rate": {
            "type": "number",
            "description": "Currency conversion rate; can be defaulted to 1.000000",
            "format": "double"
          },
          "settle_amount": {
            "type": "number",
            "description": "Transaction amount in settlement currency",
            "format": "double"
          },
          "settle_currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency in which settlement is done",
            "nullable": true
          },
          "cashback_amount": {
            "type": "number",
            "description": "Amount requested as cashback (applicable only for in purchase, pre-auth, and pre-auth completion requests)",
            "format": "double"
          },
          "billing_amount": {
            "type": "number",
            "description": "Billing amount in billing currency",
            "format": "double"
          },
          "billing_currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Currency in which billing is done",
            "nullable": true
          },
          "orig_txn_amount": {
            "type": "number",
            "description": "Original transaction amount; required for Partial Reversal and Full Reversal",
            "format": "double",
            "nullable": true
          },
          "partial_auth_ind": {
            "$ref": "#/components/schemas/PartialAuthIndicatorType"
          },
          "mcc": {
            "maxLength": 4,
            "type": "string",
            "description": "Merchant Category Code in the simulated auth message.",
            "nullable": true
          },
          "channel_name": {
            "maxLength": 16,
            "type": "string",
            "description": "For MNGS and Discover; If not provided it will be defaulted to MNGS.",
            "nullable": true
          },
          "terminal_id": {
            "maxLength": 12,
            "type": "string",
            "description": "ID of the terminal",
            "nullable": true
          },
          "acceptor_id": {
            "maxLength": 16,
            "type": "string",
            "description": "Merchant acceptor ID in the simulated auth message. Defaults to pre-defined id if not provided but has to be provided (required) for Refund txn.",
            "nullable": true
          },
          "acceptor_country_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Merchant’s country. Defaults to 840 if not provided.",
            "nullable": true
          },
          "acceptor_name_loc": {
            "maxLength": 40,
            "type": "string",
            "description": "Merchant name and location.",
            "nullable": true
          },
          "retrieval_reference": {
            "maxLength": 24,
            "type": "string",
            "description": "Unique number for identification; required for Preauth Completion, Partial Reversal, and Full Reversal",
            "nullable": true
          },
          "stan": {
            "maxLength": 12,
            "type": "string",
            "description": "System trace audit number. Will be built if not provided",
            "nullable": true
          },
          "network_id": {
            "maxLength": 10,
            "type": "string",
            "description": "network id",
            "nullable": true
          },
          "country_code": {
            "maxLength": 3,
            "type": "string",
            "description": "Country Code",
            "nullable": true
          },
          "fleet_data": {
            "$ref": "#/components/schemas/fleet_data"
          }
        },
        "additionalProperties": false,
        "description": "Card Transaction Authorization Request"
      },
      "TransactionAuthSimRequestType": {
        "enum": [
          "PURCHASE",
          "ECOMM",
          "PREAUTH",
          "PREAUTHCOMPLETION",
          "CASHWITHDRAWAL",
          "ATMBALANCEINQUIRY",
          "REFUND",
          "FULLREVERSAL",
          "PARTIALREVERSAL",
          "OCTIN",
          "CASHIN"
        ],
        "type": "string"
      },
      "TransactionAuthSimResponse": {
        "type": "object",
        "properties": {
          "card_proxy": {
            "type": "string",
            "description": "card proxy",
            "nullable": true
          },
          "card_auth_txn_guid": {
            "type": "string",
            "description": "card auth transaction guid",
            "format": "uuid",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "description": "Request Code",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "description": "response code",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "reason code",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "description": "transaction amount",
            "format": "double"
          },
          "settle_amount": {
            "type": "number",
            "description": "settle amount",
            "format": "double",
            "nullable": true
          },
          "billing_amount": {
            "type": "number",
            "description": "billing amount",
            "format": "double",
            "nullable": true
          },
          "billing_fee": {
            "type": "number",
            "description": "billing fee",
            "format": "double",
            "nullable": true
          },
          "billing_conversion_rate": {
            "type": "number",
            "description": "billing conversion rate",
            "format": "double",
            "nullable": true
          },
          "stan": {
            "type": "string",
            "description": "system trace audit number",
            "nullable": true
          },
          "settlement_date": {
            "type": "string",
            "description": "settlement date",
            "nullable": true
          },
          "mcc": {
            "type": "string",
            "description": "merchant category code",
            "nullable": true
          },
          "channel_name": {
            "type": "string",
            "description": "channel name",
            "nullable": true
          },
          "txn_fee_amount": {
            "type": "number",
            "description": "transaction fee amount",
            "format": "double",
            "nullable": true
          },
          "settle_fee_amount": {
            "type": "number",
            "description": "settle fee amount",
            "format": "double",
            "nullable": true
          },
          "retrieval_reference": {
            "type": "string",
            "description": "retrieval reference",
            "nullable": true
          },
          "authorization_id_code": {
            "type": "string",
            "description": "Authorization Id Code",
            "nullable": true
          },
          "terminal_id": {
            "type": "string",
            "description": "terminal id",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "description": "acceptor id",
            "nullable": true
          },
          "acceptor_name_loc": {
            "type": "string",
            "description": "acceptor name location",
            "nullable": true
          },
          "txn_currency_code": {
            "type": "string",
            "description": "transaction currency code",
            "nullable": true
          },
          "settle_currency_code": {
            "type": "string",
            "description": "settle currency code",
            "nullable": true
          },
          "billing_currency_code": {
            "type": "string",
            "description": "billing currency code",
            "nullable": true
          },
          "avs_indicator": {
            "type": "string",
            "description": "avs indicator",
            "nullable": true
          },
          "avs_result": {
            "type": "string",
            "description": "avs result",
            "nullable": true
          },
          "avs_data": {
            "type": "string",
            "description": "avs data",
            "nullable": true
          },
          "partial_auth_ind": {
            "type": "string",
            "description": "partial auth indicator",
            "nullable": true
          },
          "network_id": {
            "type": "string",
            "description": "network id",
            "nullable": true
          },
          "original_amount": {
            "type": "number",
            "description": "original amount",
            "format": "double",
            "nullable": true
          },
          "mask_card_pan": {
            "type": "string",
            "description": "mask card pan",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "issuance_type": {
            "type": "string",
            "description": "issuance type",
            "nullable": true
          },
          "card_status": {
            "type": "string",
            "description": "card status",
            "nullable": true
          },
          "expiration_date": {
            "type": "string",
            "description": "expiration date",
            "format": "date-time",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "person guid",
            "format": "uuid",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "description": "program guid",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "account guid",
            "format": "uuid",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "description": "account currency",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "available balance",
            "format": "double",
            "nullable": true
          },
          "ledger_balance": {
            "type": "number",
            "description": "ledger balance",
            "format": "double",
            "nullable": true
          },
          "suspense_balance": {
            "type": "number",
            "description": "suspense balance",
            "format": "double",
            "nullable": true
          },
          "account_status": {
            "type": "string",
            "description": "account status",
            "nullable": true
          },
          "request_description": {
            "type": "string",
            "description": "request description",
            "nullable": true
          },
          "country_code_alpha3": {
            "type": "string",
            "description": "country code alpha 3",
            "nullable": true
          },
          "currency_code_alpha3": {
            "type": "string",
            "description": "currency code alpha 3",
            "nullable": true
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeResponse"
            },
            "description": "list of fees",
            "nullable": true
          },
          "total_fee_amount": {
            "type": "number",
            "description": "reverse fee request description",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "fleet_data": {
            "$ref": "#/components/schemas/fleet_data"
          }
        },
        "additionalProperties": false,
        "description": "Card Transaction Authorization Response"
      },
      "TransferDetail": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "wallet_id": {
            "type": "string",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferRequest": {
        "required": [
          "amount",
          "client_reference_id",
          "currency",
          "destination",
          "source",
          "transfer_type"
        ],
        "type": "object",
        "properties": {
          "client_reference_id": {
            "minLength": 1,
            "type": "string",
            "description": "API Partner can send the transfer's unique id on their system and it can be used to fetch transfer details later"
          },
          "channel_type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "transfer_type": {
            "$ref": "#/components/schemas/TransferType"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer.",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "description": {
            "maxLength": 48,
            "minLength": 0,
            "type": "string",
            "description": "API Partner can send the transfer's description for reference",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "quote_reference": {
            "type": "string",
            "description": "For cross currency transfers, quote should be created and must be passed in transfer.",
            "nullable": true
          },
          "quoteoutput": {
            "$ref": "#/components/schemas/QuoteResponse"
          },
          "destination_amount": {
            "type": "number",
            "format": "double"
          },
          "destination_currency": {
            "type": "string",
            "nullable": true
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transfer type.",
            "nullable": true
          },
          "verification_code": {
            "type": "string",
            "description": "Verification code. This field is currently not used and cvv2 validation during the transfer is not required",
            "nullable": true
          },
          "eft_info": {
            "$ref": "#/components/schemas/EFTInfo"
          },
          "reason_code": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Transfer reason code used for foreign exchange",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferResponse": {
        "required": [
          "amount",
          "currency",
          "destination",
          "source"
        ],
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Transactions guid",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer",
            "format": "double"
          },
          "currency": {
            "minLength": 1,
            "type": "string",
            "description": "Currency of transfer"
          },
          "description": {
            "type": "string",
            "description": "Optional description",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDetail"
          },
          "destination_amount": {
            "type": "number",
            "format": "double"
          },
          "destination_currency": {
            "type": "string",
            "nullable": true
          },
          "entry_date": {
            "type": "string",
            "description": "This is outpout for same day ach transactions only.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferType": {
        "enum": [
          "UNKNOWN",
          "CARDTOCARD",
          "PARTNERTOCARD",
          "CARDTOPARTNER",
          "PARTNERTOPARTNER",
          "ACCOUNTTOACCOUNT",
          "ACCOUNTTOBANK",
          "BANKTOACCOUNT",
          "CHECKLOAD",
          "CHECKUNLOAD",
          "CARDTOPARTNER_UNLOADTOZERO",
          "CCDCTOACCOUNT",
          "ACCOUNTTOCCDC",
          "ACCOUNTTOBANKREALTIME",
          "BANKTOACCOUNTREQUESTREALTIME",
          "ACCOUNTTOCHECK",
          "PARTNERTOCHECK"
        ],
        "type": "string"
      },
      "TxnAcquireCnpDetail": {
        "type": "object",
        "properties": {
          "acquire_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "message_format": {
            "type": "string",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "nullable": true
          },
          "terminal_guid": {
            "type": "string",
            "format": "uuid"
          },
          "instrument_guid": {
            "type": "string",
            "format": "uuid"
          },
          "person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "order_user_guid": {
            "type": "string",
            "format": "uuid"
          },
          "card_bin": {
            "type": "string",
            "nullable": true
          },
          "card_last4": {
            "type": "string",
            "nullable": true
          },
          "card_expiraton_year": {
            "type": "string",
            "nullable": true
          },
          "card_expiraton_month": {
            "type": "string",
            "nullable": true
          },
          "avs_indicator": {
            "type": "string",
            "nullable": true
          },
          "cvx_indicator": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "approval_code": {
            "type": "string",
            "nullable": true
          },
          "avs_response": {
            "type": "string",
            "nullable": true
          },
          "cvx_response": {
            "type": "string",
            "nullable": true
          },
          "payres_status": {
            "type": "string",
            "nullable": true
          },
          "vres_enrolled": {
            "type": "string",
            "nullable": true
          },
          "requested_amount": {
            "type": "number",
            "format": "double"
          },
          "approved_amount": {
            "type": "number",
            "format": "double"
          },
          "currency_code": {
            "type": "string",
            "nullable": true
          },
          "capture_format": {
            "type": "string",
            "nullable": true
          },
          "stan": {
            "type": "string",
            "nullable": true
          },
          "retreival_reference": {
            "type": "string",
            "nullable": true
          },
          "quote_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "acq_retreival_reference": {
            "type": "string",
            "nullable": true
          },
          "message_type": {
            "type": "string",
            "nullable": true
          },
          "processing_code": {
            "type": "string",
            "nullable": true
          },
          "issuer_response_code": {
            "type": "string",
            "nullable": true
          },
          "pos_service_code": {
            "type": "string",
            "nullable": true
          },
          "network_rrn": {
            "type": "string",
            "nullable": true
          },
          "transaction_identifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnBankEftEntryDetail": {
        "type": "object",
        "properties": {
          "bank_eft_guid": {
            "type": "string",
            "format": "uuid"
          },
          "bank_eft_batch_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "bank_eft_file_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "channel_txncode": {
            "type": "string",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_currency_code": {
            "type": "string",
            "nullable": true
          },
          "destination_currency_code": {
            "type": "string",
            "nullable": true
          },
          "txn_date": {
            "type": "string",
            "format": "date-time"
          },
          "channel_date": {
            "type": "string",
            "format": "date-time"
          },
          "payment_date": {
            "type": "string",
            "format": "date-time"
          },
          "reference_number": {
            "type": "string",
            "nullable": true
          },
          "descretionary_info": {
            "type": "string",
            "nullable": true
          },
          "beneficiary_instrument_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "payer_instrument_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recv_institution_id": {
            "type": "string",
            "nullable": true
          },
          "recv_insitution_name": {
            "type": "string",
            "nullable": true
          },
          "recv_instition_location": {
            "type": "string",
            "nullable": true
          },
          "recv_institution_country_code": {
            "type": "string",
            "nullable": true
          },
          "orig_institution_id": {
            "type": "string",
            "nullable": true
          },
          "orig_insitution_name": {
            "type": "string",
            "nullable": true
          },
          "orig_instition_location": {
            "type": "string",
            "nullable": true
          },
          "orig_institution_country_code": {
            "type": "string",
            "nullable": true
          },
          "payer_entity_type": {
            "type": "string",
            "nullable": true
          },
          "payment_handling": {
            "type": "string",
            "nullable": true
          },
          "capture_format": {
            "type": "string",
            "nullable": true
          },
          "orig_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "recv_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "source_currency_code": {
            "type": "string",
            "nullable": true
          },
          "source_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currency_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "base_bank_eft_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "instruction_id": {
            "type": "string",
            "nullable": true
          },
          "channel_reasoncode": {
            "type": "string",
            "nullable": true
          },
          "service_class_code": {
            "type": "string",
            "nullable": true
          },
          "batch_sequence": {
            "type": "integer",
            "format": "int32"
          },
          "entry_class": {
            "type": "string",
            "nullable": true
          },
          "entry_description": {
            "type": "string",
            "nullable": true
          },
          "entry_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "file_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "file_time": {
            "type": "string",
            "nullable": true
          },
          "file_sequence": {
            "type": "string",
            "nullable": true
          },
          "individual_name": {
            "type": "string",
            "nullable": true
          },
          "individual_id_number": {
            "type": "string",
            "nullable": true
          },
          "program_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sec_code": {
            "type": "string",
            "nullable": true
          },
          "addenda": {
            "type": "string",
            "nullable": true
          },
          "addenda_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnCardAuthDetail": {
        "type": "object",
        "properties": {
          "card_auth_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "sys_auth_done": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "circuit_id": {
            "type": "string",
            "nullable": true
          },
          "mask_pan": {
            "type": "string",
            "nullable": true
          },
          "message_type": {
            "type": "string",
            "nullable": true
          },
          "processing_code": {
            "type": "string",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_amount": {
            "type": "number",
            "format": "double"
          },
          "billng_amount": {
            "type": "number",
            "format": "double"
          },
          "transmission_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "billing_fee": {
            "type": "number",
            "format": "double"
          },
          "settle_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "billing_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stan": {
            "type": "string",
            "nullable": true
          },
          "local_txn_time": {
            "type": "string",
            "nullable": true
          },
          "local_txn_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true
          },
          "settlement_date": {
            "type": "string",
            "nullable": true
          },
          "conversion_date": {
            "type": "string",
            "nullable": true
          },
          "capture_date": {
            "type": "string",
            "nullable": true
          },
          "mcc": {
            "type": "string",
            "nullable": true
          },
          "acq_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pan_country_code": {
            "type": "string",
            "nullable": true
          },
          "fwd_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pan": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pin": {
            "type": "string",
            "nullable": true
          },
          "card_sequence_number": {
            "type": "string",
            "nullable": true
          },
          "pos_service_code": {
            "type": "string",
            "nullable": true
          },
          "pos_condition_code": {
            "type": "string",
            "nullable": true
          },
          "pos_pin_capture_code": {
            "type": "string",
            "nullable": true
          },
          "auth_id_resp_length": {
            "type": "string",
            "nullable": true
          },
          "txn_fee_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_fee_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_processing_fee": {
            "type": "number",
            "format": "double"
          },
          "settle_processing_fee": {
            "type": "number",
            "format": "double"
          },
          "acq_institution_id": {
            "type": "string",
            "nullable": true
          },
          "fwd_institution_id": {
            "type": "string",
            "nullable": true
          },
          "track2_read": {
            "type": "integer",
            "format": "int32"
          },
          "track3_read": {
            "type": "integer",
            "format": "int32"
          },
          "retreival_reference": {
            "type": "string",
            "nullable": true
          },
          "authorization_id_code": {
            "type": "string",
            "nullable": true
          },
          "service_restriction_code": {
            "type": "string",
            "nullable": true
          },
          "terminal_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_name_loc": {
            "type": "string",
            "nullable": true
          },
          "additional_response_data": {
            "type": "string",
            "nullable": true
          },
          "track1_read": {
            "type": "integer",
            "format": "int32"
          },
          "additional_data": {
            "type": "string",
            "nullable": true
          },
          "additional_data_national": {
            "type": "string",
            "nullable": true
          },
          "additional_data_private": {
            "type": "string",
            "nullable": true
          },
          "txn_currency_code": {
            "type": "string",
            "nullable": true
          },
          "settle_currency_code": {
            "type": "string",
            "nullable": true
          },
          "billing_currency_code": {
            "type": "string",
            "nullable": true
          },
          "pin_data_present": {
            "type": "integer",
            "format": "int32"
          },
          "security_control_information": {
            "type": "string",
            "nullable": true
          },
          "additional_amounts": {
            "type": "string",
            "nullable": true
          },
          "icc_data_read": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_cond_description": {
            "type": "string",
            "nullable": true
          },
          "cvx2_indicator": {
            "type": "string",
            "nullable": true
          },
          "cvx2_result": {
            "type": "string",
            "nullable": true
          },
          "avs_indicator": {
            "type": "string",
            "nullable": true
          },
          "avs_result": {
            "type": "string",
            "nullable": true
          },
          "token_use_indicator": {
            "type": "integer",
            "format": "int32"
          },
          "token_bin": {
            "type": "string",
            "nullable": true
          },
          "token_response_code": {
            "type": "string",
            "nullable": true
          },
          "capture_format": {
            "type": "string",
            "nullable": true
          },
          "partial_auth_ind": {
            "type": "string",
            "nullable": true
          },
          "acceptor_country": {
            "type": "string",
            "nullable": true
          },
          "original_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "threeds_response": {
            "type": "string",
            "nullable": true
          },
          "auth_life_cycle": {
            "type": "string",
            "nullable": true
          },
          "surcharge": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "optional_issuer_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "foreign_exchange_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "message_reason_code": {
            "type": "string",
            "nullable": true
          },
          "arrival_datetime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "network_id": {
            "type": "string",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "pf_account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "transaction_identifier": {
            "type": "string",
            "nullable": true
          },
          "acq_ref_number": {
            "type": "string",
            "nullable": true
          },
          "network_rrn": {
            "type": "string",
            "nullable": true
          },
          "acq_bin": {
            "type": "string",
            "nullable": true
          },
          "pos_geo_data": {
            "type": "string",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "issuing_bin": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnCardAuthSupplement": {
        "required": [
          "card_auth_txn_guid",
          "sys_utcinserted",
          "sys_utcupdated"
        ],
        "type": "object",
        "properties": {
          "card_auth_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "sys_utcinserted": {
            "type": "string",
            "format": "date-time"
          },
          "sys_utcupdated": {
            "type": "string",
            "format": "date-time"
          },
          "payment_sender": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "payment_receiver": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "raw_token_data": {
            "maxLength": 8000,
            "type": "string",
            "nullable": true
          },
          "fraud_score_data": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "token_data": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "ecomm_data": {
            "maxLength": 256,
            "type": "string",
            "nullable": true
          },
          "fleet_data": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "account_name_data": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnCardSettlementAddendaDTO": {
        "type": "object",
        "properties": {
          "pos_entry_mode": {
            "type": "string",
            "nullable": true
          },
          "acquirer_reference_number": {
            "type": "string",
            "nullable": true
          },
          "gcms_product_identifier": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnCardSettlementDetail": {
        "type": "object",
        "properties": {
          "card_settle_txn_guid": {
            "type": "string",
            "format": "uuid"
          },
          "channel_name": {
            "type": "string",
            "nullable": true
          },
          "circuit_id": {
            "type": "string",
            "nullable": true
          },
          "iin": {
            "type": "string",
            "nullable": true
          },
          "masked_pan": {
            "type": "string",
            "nullable": true
          },
          "pan_last4": {
            "type": "string",
            "nullable": true
          },
          "message_type": {
            "type": "string",
            "nullable": true
          },
          "message_reason_code": {
            "type": "string",
            "nullable": true
          },
          "processing_code": {
            "type": "string",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "format": "double"
          },
          "original_txn_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_amount": {
            "type": "number",
            "format": "double"
          },
          "billng_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "billing_conv_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stan": {
            "type": "string",
            "nullable": true
          },
          "local_txn_time": {
            "type": "string",
            "nullable": true
          },
          "local_txn_date": {
            "type": "string",
            "format": "date-time"
          },
          "expiration_date": {
            "type": "string",
            "nullable": true
          },
          "settlement_date": {
            "type": "string",
            "nullable": true
          },
          "conversion_date": {
            "type": "string",
            "nullable": true
          },
          "capture_date": {
            "type": "string",
            "nullable": true
          },
          "mcc": {
            "type": "string",
            "nullable": true
          },
          "acq_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pan_country_code": {
            "type": "string",
            "nullable": true
          },
          "fwd_inst_country_code": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pan": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_mode_pin": {
            "type": "string",
            "nullable": true
          },
          "card_sequence_number": {
            "type": "string",
            "nullable": true
          },
          "pos_service_code": {
            "type": "string",
            "nullable": true
          },
          "pos_condition_code": {
            "type": "string",
            "nullable": true
          },
          "pos_pin_capture_code": {
            "type": "string",
            "nullable": true
          },
          "auth_id_resp_length": {
            "type": "string",
            "nullable": true
          },
          "txn_fee_amount": {
            "type": "number",
            "format": "double"
          },
          "settle_fee_amount": {
            "type": "number",
            "format": "double"
          },
          "txn_processing_fee": {
            "type": "number",
            "format": "double"
          },
          "settle_processing_fee": {
            "type": "number",
            "format": "double"
          },
          "acq_institution_id": {
            "type": "string",
            "nullable": true
          },
          "fwd_institution_id": {
            "type": "string",
            "nullable": true
          },
          "retreival_reference": {
            "type": "string",
            "nullable": true
          },
          "acquirer_reference": {
            "type": "string",
            "nullable": true
          },
          "approval_code": {
            "type": "string",
            "nullable": true
          },
          "terminal_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "nullable": true
          },
          "acceptor_name_loc": {
            "type": "string",
            "nullable": true
          },
          "additional_data": {
            "type": "string",
            "nullable": true
          },
          "txn_currency_code": {
            "type": "string",
            "nullable": true
          },
          "settle_currency_code": {
            "type": "string",
            "nullable": true
          },
          "billing_currency_code": {
            "type": "string",
            "nullable": true
          },
          "additional_amounts": {
            "type": "string",
            "nullable": true
          },
          "issuer_reference_data": {
            "type": "string",
            "nullable": true
          },
          "pos_entry_cond_description": {
            "type": "string",
            "nullable": true
          },
          "token_use_indicator": {
            "type": "integer",
            "format": "int32"
          },
          "token_bin": {
            "type": "string",
            "nullable": true
          },
          "token_response_code": {
            "type": "string",
            "nullable": true
          },
          "capture_format": {
            "type": "string",
            "nullable": true
          },
          "transmission_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "billing_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "service_restriction_code": {
            "type": "string",
            "nullable": true
          },
          "authorization_id_code": {
            "type": "string",
            "nullable": true
          },
          "auth_life_cycle": {
            "type": "string",
            "nullable": true
          },
          "surcharge": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "optional_issuer_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "foreign_exchange_fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "credit_debit_flag": {
            "type": "string",
            "nullable": true
          },
          "issuer_acquirer_ind": {
            "type": "string",
            "nullable": true
          },
          "network_id": {
            "type": "string",
            "nullable": true
          },
          "interchange_amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "interchange_rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "interchange_level": {
            "type": "string",
            "nullable": true
          },
          "transaction_identifier": {
            "type": "string",
            "nullable": true
          },
          "adjust_trace_data": {
            "type": "string",
            "nullable": true
          },
          "acq_ref_number": {
            "type": "string",
            "nullable": true
          },
          "network_rrn": {
            "type": "string",
            "nullable": true
          },
          "acq_bin": {
            "type": "string",
            "nullable": true
          },
          "txn_card_settle_addenda": {
            "$ref": "#/components/schemas/TxnCardSettlementAddendaDTO"
          }
        },
        "additionalProperties": false
      },
      "TxnDisputeDetail": {
        "type": "object",
        "properties": {
          "journal_guid": {
            "type": "string",
            "format": "uuid"
          },
          "journal_entry": {
            "type": "string",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "nullable": true
          },
          "dispute_type": {
            "type": "string",
            "nullable": true
          },
          "dispute_status": {
            "type": "string",
            "nullable": true
          },
          "dispute_item_status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnLedgerDTO": {
        "required": [
          "acceptor_id",
          "account_currency",
          "account_guid",
          "account_type",
          "amount",
          "available_balance",
          "cashback_amount",
          "currency_conv_rate",
          "instrument_type",
          "ledger_balance",
          "mcc",
          "original_amount",
          "reason_code",
          "request_code",
          "response_code",
          "source_code",
          "suspense_balance",
          "txn_amount",
          "txn_country",
          "txn_currency",
          "txn_date",
          "txn_description",
          "txn_guid",
          "txn_lat",
          "txn_location",
          "txn_location_mcc",
          "txn_lon",
          "variance_amount"
        ],
        "type": "object",
        "properties": {
          "txn_guid": {
            "type": "string",
            "description": "Unique Transaction Identifier on Qolo Platform.",
            "format": "uuid"
          },
          "post_date": {
            "type": "string",
            "description": "Date on which the transaction was posted.",
            "format": "date-time",
            "nullable": true
          },
          "settle_date": {
            "type": "string",
            "description": "Date on which the transaction funds were settled.",
            "format": "date-time",
            "nullable": true
          },
          "txn_date": {
            "type": "string",
            "description": "Local Transaction Time (at the point of card acceptor location).",
            "format": "date-time"
          },
          "channel_name": {
            "maxLength": 16,
            "type": "string",
            "description": "Indicates the channel from which the transaction was received.",
            "nullable": true
          },
          "request_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Unique code to identify the transaction type on Qolo Platform."
          },
          "response_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Code returned for the transaction. Example - APPROVE , DECLINE."
          },
          "reason_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "For Declines, this field has the code indicating the reason for the decline."
          },
          "account_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Qolo Account type invoved in the transaction. Possible values are 'PROGFUND', 'GENERAL' or 'CHECK'.\r\nPROGFUND accounts (also referred to as master funding account) are client accounts used typically to fund end user or customer account.\r\nGENERAL accounts are end user or customer account.\r\nCHECK accounts are accounts denominated for check processing and clearing."
          },
          "instrument_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Instrument type invoved in the transaction. Possible values are 'BANKDDA', 'IBAN', 'BBAN', 'CARD', 'CHECK', 'PARTNERACCOUNT' and 'ACCOUNT'."
          },
          "mask_account_number": {
            "maxLength": 13,
            "type": "string",
            "description": "Masked Account Number. All digits of the account number except the last 4 are masked.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The transaction amount in account currency.",
            "format": "double"
          },
          "original_amount": {
            "type": "number",
            "description": "Transaction amount in account currency that was originally authorized.",
            "format": "double"
          },
          "variance_amount": {
            "type": "number",
            "description": "Difference between the original authorized amount and the final settled amount.",
            "format": "double"
          },
          "variance_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Code identifying the reason for variance.",
            "nullable": true
          },
          "cashback_amount": {
            "type": "number",
            "description": "Cashback included in the amount.",
            "format": "double"
          },
          "txn_amount": {
            "type": "number",
            "description": "Transaction Amount in the local currency of the acquirer or source location of the transaction.",
            "format": "double"
          },
          "txn_currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "The local currency of the acquirer or source location of the transaction."
          },
          "account_currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Currency denomination of the account."
          },
          "currency_conv_rate": {
            "type": "number",
            "description": "Currency conversion rate applied to convert transaction amount to settlement amount (where transaction currency is different from settlement currency).",
            "format": "double"
          },
          "currency_trade_markup": {
            "type": "number",
            "description": "Markup applied on currency conversion.",
            "format": "double",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "Available balance in the account at the time of transaction.",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger or Account balance in the account at the time of transaction.",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "description": "Credit balance that has not yet been posted to the account.",
            "format": "double"
          },
          "reference_number": {
            "maxLength": 32,
            "type": "string",
            "description": "Transaction Reference Number provided by the network.",
            "nullable": true
          },
          "mcc": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Merchant Category Code (MCC) for an open loop transaction provided by the network."
          },
          "acceptor_id": {
            "maxLength": 19,
            "minLength": 1,
            "type": "string",
            "description": "Unique reference identifying the merchant location."
          },
          "txn_location": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string",
            "description": "Location address of the merchant."
          },
          "txn_location_mcc": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Same as mcc."
          },
          "txn_city": {
            "maxLength": 32,
            "type": "string",
            "description": "City of the merchant.",
            "nullable": true
          },
          "txn_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Country of the merchant."
          },
          "txn_lat": {
            "type": "number",
            "description": "Latitude value of the merchant address.",
            "format": "double"
          },
          "txn_lon": {
            "type": "number",
            "description": "Longitude value of the merchant address.",
            "format": "double"
          },
          "txn_description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Transaction Description."
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Account identifier on Qolo Platform.",
            "format": "uuid"
          },
          "base_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of a parent transaction. For example a fee transaction will have a base_txn_guid same as the original transaction on which fee is being charged.",
            "format": "uuid"
          },
          "polar_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of the corresponding contra transaction. For example a card load (credit) transaction may have a contra transaction (debit) in the program funding account.",
            "format": "uuid",
            "nullable": true
          },
          "card_txn_guid": {
            "type": "string",
            "description": "Transaction GUID for authorization capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "card_settle_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of the corresponding settled transaction.",
            "format": "uuid",
            "nullable": true
          },
          "acquire_txn_guid": {
            "type": "string",
            "description": "Transaction GUID for an acquiring transaction capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "bank_eft_guid": {
            "type": "string",
            "description": "Transaction GUID for Bank EFT transaction capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "journal_guid": {
            "type": "string",
            "description": "Unique identifier for a journal entry linked to the given transaction.",
            "format": "uuid",
            "nullable": true
          },
          "source_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "source_user_guid": {
            "type": "string",
            "description": "Identifier for the user or agent initiating the transaction. For example adjustment entries posted by an agent.",
            "format": "uuid"
          },
          "settle_amount": {
            "type": "number",
            "description": "Settlement amount in settlement currency.",
            "format": "double"
          },
          "settle_currency_code": {
            "type": "string",
            "description": "Settlement currency in ISO-3digit format. Usually this is same as account currency.",
            "nullable": true
          },
          "txn_status": {
            "type": "string",
            "description": "Status of the transaction.",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Unique identifier for the Outside Instrument.",
            "format": "uuid",
            "nullable": true
          },
          "source_username": {
            "type": "string",
            "description": "Username of the corresponding source_user_guid.",
            "nullable": true
          },
          "auth_available_balance": {
            "type": "number",
            "description": "Available balance after transaction is authorized.",
            "format": "double"
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique Card identifier on Qolo Platform.",
            "nullable": true
          },
          "account_name": {
            "type": "string",
            "description": "Name of the corresponding account.",
            "nullable": true
          },
          "journal_entry": {
            "type": "string",
            "description": "Journal entry from bo_journal",
            "nullable": true
          },
          "reason_code_description": {
            "type": "string",
            "description": "reason code description",
            "nullable": true
          },
          "disputed_txn_guid": {
            "type": "string",
            "description": "disputed_txn_guid",
            "format": "uuid",
            "nullable": true
          },
          "related_reversal": {
            "type": "boolean",
            "description": "any related reversal with same base txn guid",
            "nullable": true
          },
          "related_refund": {
            "type": "boolean",
            "description": "any related refunds by merchant, etc",
            "nullable": true
          },
          "request_code_description": {
            "type": "string",
            "description": "request code description",
            "nullable": true
          },
          "request_code_txn_category": {
            "type": "string",
            "description": "Transaction category linked to request",
            "nullable": true
          },
          "dispute_status": {
            "type": "string",
            "description": "dispute status",
            "nullable": true
          },
          "dispute_item_status": {
            "type": "string",
            "description": "dispute item status",
            "nullable": true
          },
          "sys_utcinserted": {
            "type": "string",
            "description": "Date on which the transaction was created",
            "format": "date-time",
            "nullable": true
          },
          "request_code_txn_type": {
            "type": "string",
            "description": "Transaction type linked to request",
            "nullable": true
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transfer type.",
            "nullable": true
          },
          "account_holder_first_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Account Holder First Name",
            "nullable": true
          },
          "account_holder_last_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Account Holder Last Name",
            "nullable": true
          },
          "auth_supplement_data": {
            "$ref": "#/components/schemas/TxnCardAuthSupplement"
          }
        },
        "additionalProperties": false
      },
      "TxnLedgerDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnLedgerDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnLedgerDetails": {
        "required": [
          "acceptor_id",
          "account_currency",
          "account_guid",
          "account_type",
          "amount",
          "available_balance",
          "cashback_amount",
          "currency_conv_rate",
          "instrument_type",
          "ledger_balance",
          "mcc",
          "original_amount",
          "reason_code",
          "request_code",
          "response_code",
          "source_code",
          "suspense_balance",
          "txn_amount",
          "txn_country",
          "txn_currency",
          "txn_date",
          "txn_description",
          "txn_guid",
          "txn_lat",
          "txn_location",
          "txn_location_mcc",
          "txn_lon",
          "variance_amount"
        ],
        "type": "object",
        "properties": {
          "txn_dispute_detail": {
            "$ref": "#/components/schemas/TxnDisputeDetail"
          },
          "txn_card_auth_detail": {
            "$ref": "#/components/schemas/TxnCardAuthDetail"
          },
          "txn_card_settle_detail": {
            "$ref": "#/components/schemas/TxnCardSettlementDetail"
          },
          "txn_bank_eft_detail": {
            "$ref": "#/components/schemas/TxnBankEftEntryDetail"
          },
          "txn_acquiring_detail": {
            "$ref": "#/components/schemas/TxnAcquireCnpDetail"
          },
          "bo_journal_detail": {
            "$ref": "#/components/schemas/BoJournalDetails"
          },
          "payment_detail": {
            "$ref": "#/components/schemas/PaymentDetail"
          },
          "account_check_pay_detail": {
            "$ref": "#/components/schemas/AccountCheckPayDetail"
          },
          "related_transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnLedgerDTO"
            },
            "nullable": true
          },
          "polar_transaction": {
            "$ref": "#/components/schemas/TxnLedgerDTO"
          },
          "expected_autoreversal_date": {
            "type": "string",
            "format": "date-time"
          },
          "threshold_date": {
            "type": "string",
            "format": "date-time"
          },
          "txn_guid": {
            "type": "string",
            "description": "Unique Transaction Identifier on Qolo Platform.",
            "format": "uuid"
          },
          "post_date": {
            "type": "string",
            "description": "Date on which the transaction was posted.",
            "format": "date-time",
            "nullable": true
          },
          "settle_date": {
            "type": "string",
            "description": "Date on which the transaction funds were settled.",
            "format": "date-time",
            "nullable": true
          },
          "txn_date": {
            "type": "string",
            "description": "Local Transaction Time (at the point of card acceptor location).",
            "format": "date-time"
          },
          "channel_name": {
            "maxLength": 16,
            "type": "string",
            "description": "Indicates the channel from which the transaction was received.",
            "nullable": true
          },
          "request_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Unique code to identify the transaction type on Qolo Platform."
          },
          "response_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Code returned for the transaction. Example - APPROVE , DECLINE."
          },
          "reason_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "For Declines, this field has the code indicating the reason for the decline."
          },
          "account_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Qolo Account type invoved in the transaction. Possible values are 'PROGFUND', 'GENERAL' or 'CHECK'.\r\nPROGFUND accounts (also referred to as master funding account) are client accounts used typically to fund end user or customer account.\r\nGENERAL accounts are end user or customer account.\r\nCHECK accounts are accounts denominated for check processing and clearing."
          },
          "instrument_type": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string",
            "description": "Instrument type invoved in the transaction. Possible values are 'BANKDDA', 'IBAN', 'BBAN', 'CARD', 'CHECK', 'PARTNERACCOUNT' and 'ACCOUNT'."
          },
          "mask_account_number": {
            "maxLength": 13,
            "type": "string",
            "description": "Masked Account Number. All digits of the account number except the last 4 are masked.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The transaction amount in account currency.",
            "format": "double"
          },
          "original_amount": {
            "type": "number",
            "description": "Transaction amount in account currency that was originally authorized.",
            "format": "double"
          },
          "variance_amount": {
            "type": "number",
            "description": "Difference between the original authorized amount and the final settled amount.",
            "format": "double"
          },
          "variance_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Code identifying the reason for variance.",
            "nullable": true
          },
          "cashback_amount": {
            "type": "number",
            "description": "Cashback included in the amount.",
            "format": "double"
          },
          "txn_amount": {
            "type": "number",
            "description": "Transaction Amount in the local currency of the acquirer or source location of the transaction.",
            "format": "double"
          },
          "txn_currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "The local currency of the acquirer or source location of the transaction."
          },
          "account_currency": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Currency denomination of the account."
          },
          "currency_conv_rate": {
            "type": "number",
            "description": "Currency conversion rate applied to convert transaction amount to settlement amount (where transaction currency is different from settlement currency).",
            "format": "double"
          },
          "currency_trade_markup": {
            "type": "number",
            "description": "Markup applied on currency conversion.",
            "format": "double",
            "nullable": true
          },
          "available_balance": {
            "type": "number",
            "description": "Available balance in the account at the time of transaction.",
            "format": "double"
          },
          "ledger_balance": {
            "type": "number",
            "description": "Ledger or Account balance in the account at the time of transaction.",
            "format": "double"
          },
          "suspense_balance": {
            "type": "number",
            "description": "Credit balance that has not yet been posted to the account.",
            "format": "double"
          },
          "reference_number": {
            "maxLength": 32,
            "type": "string",
            "description": "Transaction Reference Number provided by the network.",
            "nullable": true
          },
          "mcc": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Merchant Category Code (MCC) for an open loop transaction provided by the network."
          },
          "acceptor_id": {
            "maxLength": 19,
            "minLength": 1,
            "type": "string",
            "description": "Unique reference identifying the merchant location."
          },
          "txn_location": {
            "maxLength": 48,
            "minLength": 1,
            "type": "string",
            "description": "Location address of the merchant."
          },
          "txn_location_mcc": {
            "maxLength": 6,
            "minLength": 1,
            "type": "string",
            "description": "Same as mcc."
          },
          "txn_city": {
            "maxLength": 32,
            "type": "string",
            "description": "City of the merchant.",
            "nullable": true
          },
          "txn_country": {
            "maxLength": 3,
            "minLength": 1,
            "type": "string",
            "description": "Country of the merchant."
          },
          "txn_lat": {
            "type": "number",
            "description": "Latitude value of the merchant address.",
            "format": "double"
          },
          "txn_lon": {
            "type": "number",
            "description": "Longitude value of the merchant address.",
            "format": "double"
          },
          "txn_description": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Transaction Description."
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Account identifier on Qolo Platform.",
            "format": "uuid"
          },
          "base_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of a parent transaction. For example a fee transaction will have a base_txn_guid same as the original transaction on which fee is being charged.",
            "format": "uuid"
          },
          "polar_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of the corresponding contra transaction. For example a card load (credit) transaction may have a contra transaction (debit) in the program funding account.",
            "format": "uuid",
            "nullable": true
          },
          "card_txn_guid": {
            "type": "string",
            "description": "Transaction GUID for authorization capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "card_settle_txn_guid": {
            "type": "string",
            "description": "Transaction GUID of the corresponding settled transaction.",
            "format": "uuid",
            "nullable": true
          },
          "acquire_txn_guid": {
            "type": "string",
            "description": "Transaction GUID for an acquiring transaction capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "bank_eft_guid": {
            "type": "string",
            "description": "Transaction GUID for Bank EFT transaction capture. Used internally by Qolo.",
            "format": "uuid",
            "nullable": true
          },
          "journal_guid": {
            "type": "string",
            "description": "Unique identifier for a journal entry linked to the given transaction.",
            "format": "uuid",
            "nullable": true
          },
          "source_code": {
            "maxLength": 16,
            "minLength": 1,
            "type": "string"
          },
          "source_user_guid": {
            "type": "string",
            "description": "Identifier for the user or agent initiating the transaction. For example adjustment entries posted by an agent.",
            "format": "uuid"
          },
          "settle_amount": {
            "type": "number",
            "description": "Settlement amount in settlement currency.",
            "format": "double"
          },
          "settle_currency_code": {
            "type": "string",
            "description": "Settlement currency in ISO-3digit format. Usually this is same as account currency.",
            "nullable": true
          },
          "txn_status": {
            "type": "string",
            "description": "Status of the transaction.",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Unique identifier for the Outside Instrument.",
            "format": "uuid",
            "nullable": true
          },
          "source_username": {
            "type": "string",
            "description": "Username of the corresponding source_user_guid.",
            "nullable": true
          },
          "auth_available_balance": {
            "type": "number",
            "description": "Available balance after transaction is authorized.",
            "format": "double"
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique Card identifier on Qolo Platform.",
            "nullable": true
          },
          "account_name": {
            "type": "string",
            "description": "Name of the corresponding account.",
            "nullable": true
          },
          "journal_entry": {
            "type": "string",
            "description": "Journal entry from bo_journal",
            "nullable": true
          },
          "reason_code_description": {
            "type": "string",
            "description": "reason code description",
            "nullable": true
          },
          "disputed_txn_guid": {
            "type": "string",
            "description": "disputed_txn_guid",
            "format": "uuid",
            "nullable": true
          },
          "related_reversal": {
            "type": "boolean",
            "description": "any related reversal with same base txn guid",
            "nullable": true
          },
          "related_refund": {
            "type": "boolean",
            "description": "any related refunds by merchant, etc",
            "nullable": true
          },
          "request_code_description": {
            "type": "string",
            "description": "request code description",
            "nullable": true
          },
          "request_code_txn_category": {
            "type": "string",
            "description": "Transaction category linked to request",
            "nullable": true
          },
          "dispute_status": {
            "type": "string",
            "description": "dispute status",
            "nullable": true
          },
          "dispute_item_status": {
            "type": "string",
            "description": "dispute item status",
            "nullable": true
          },
          "sys_utcinserted": {
            "type": "string",
            "description": "Date on which the transaction was created",
            "format": "date-time",
            "nullable": true
          },
          "request_code_txn_type": {
            "type": "string",
            "description": "Transaction type linked to request",
            "nullable": true
          },
          "memo_code": {
            "maxLength": 64,
            "type": "string",
            "description": "Client driven code used to add more details to the transfer type.",
            "nullable": true
          },
          "account_holder_first_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Account Holder First Name",
            "nullable": true
          },
          "account_holder_last_name": {
            "maxLength": 32,
            "type": "string",
            "description": "Account Holder Last Name",
            "nullable": true
          },
          "auth_supplement_data": {
            "$ref": "#/components/schemas/TxnCardAuthSupplement"
          }
        },
        "additionalProperties": false
      },
      "TxnLedgerSettlementOrderSettingsDTO": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "desc": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TxnNonmonDetail": {
        "type": "object",
        "properties": {
          "nonmon_guid": {
            "type": "string",
            "description": "Nonmon unique identifier.",
            "format": "uuid"
          },
          "txn_date": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time"
          },
          "channel_name": {
            "type": "string",
            "description": "Channel name.",
            "nullable": true
          },
          "request_code": {
            "type": "string",
            "description": "Request code.",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Reason code.",
            "nullable": true
          },
          "response_code": {
            "type": "string",
            "description": "Response code.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person unique identifier.",
            "format": "uuid"
          },
          "hash_account_number": {
            "type": "string",
            "description": "Encrypted card/account number.",
            "nullable": true
          },
          "remarks": {
            "type": "string",
            "description": "Remarks on card/account status.",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account unique identifier.",
            "format": "uuid",
            "nullable": true
          },
          "journal_guid": {
            "type": "string",
            "description": "Journal unique identifier.",
            "format": "uuid",
            "nullable": true
          },
          "support_user_guid": {
            "type": "string",
            "description": "Support user unique identifier.",
            "format": "uuid",
            "nullable": true
          },
          "source_code": {
            "type": "string",
            "description": "Source code.",
            "nullable": true
          },
          "source_user_guid": {
            "type": "string",
            "description": "Source user unique identifier.",
            "format": "uuid"
          },
          "reference_number": {
            "type": "string",
            "description": "Reference number.",
            "nullable": true
          },
          "outsort_guid": {
            "type": "string",
            "description": "Outsort unique identifier.",
            "format": "uuid",
            "nullable": true
          },
          "order_guid": {
            "type": "string",
            "description": "Order unique identifier.",
            "format": "uuid",
            "nullable": true
          },
          "processing_start_date": {
            "type": "string",
            "description": "Processing start date.",
            "format": "date-time",
            "nullable": true
          },
          "processing_end_date": {
            "type": "string",
            "description": "Processing end date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TxnSearchDTO": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit number of transactions to retrieve (Will be defaulted to 100 if none specified)",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Index used for pagination of the result.",
            "format": "int32"
          },
          "person_guid": {
            "type": "string",
            "description": "Unique Person identifier on Qolo Platform.",
            "format": "uuid"
          },
          "account_guid": {
            "type": "string",
            "description": "Unique Account identifier on Qolo Platform.",
            "format": "uuid"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Unique Wallet identifier on Qolo Platform.",
            "format": "uuid"
          },
          "wallet_id": {
            "type": "string",
            "description": "Corresponding Wallet ID on Qolo Platform.",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Unique identifier for the card.",
            "nullable": true
          },
          "card_number": {
            "type": "string",
            "description": "16 digit Card number.",
            "nullable": true
          },
          "start_date": {
            "type": "string",
            "description": "Start Date in the format yyyy-MM-dd HH:mm:ss.  Please use the format yyyy-MM-dd 00:00:00 to fetch data from start of the day.",
            "format": "date-time"
          },
          "end_date": {
            "type": "string",
            "description": "End Date in the format yyyy-MM-dd HH:mm:ss.  Please use the format yyyy-MM-dd 23:59:59 to fetch data to end of the day.",
            "format": "date-time"
          },
          "txn_description": {
            "type": "string",
            "description": "Transaction Description.",
            "nullable": true
          },
          "txn_amount_from": {
            "type": "number",
            "description": "Minimum transaction amount.",
            "format": "double"
          },
          "txn_amount_to": {
            "type": "number",
            "description": "Maximum transaction amount.",
            "format": "double"
          },
          "request_code": {
            "type": "string",
            "description": "Request Code to identify the request type.",
            "nullable": true
          },
          "txn_days": {
            "type": "integer",
            "description": "Number of days from start date or to end date, if either of the start date or end date is null. If both start date and end date are provided, this field is ignored.",
            "format": "int32"
          },
          "mask_account_number": {
            "type": "string",
            "description": "Masked account number.",
            "nullable": true
          },
          "reference_number": {
            "type": "string",
            "description": "Transaction Reference Number provided by the network.",
            "nullable": true
          },
          "txn_amount": {
            "type": "number",
            "description": "Exact Transaction Amount.",
            "format": "double"
          },
          "txn_type": {
            "type": "string",
            "description": "Transaction type. Possible values are 'C' for Credit only or 'D' for Debit only transactions.",
            "nullable": true
          },
          "acceptor_id": {
            "type": "string",
            "description": "Unique reference identifying the merchant location.",
            "nullable": true
          },
          "txn_status": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Transaction status. Possible values are 'pending', posted' and 'decline'.",
            "nullable": true
          },
          "txn_currency": {
            "type": "string",
            "description": "Transaction Currency in ISO-3digit format.",
            "nullable": true
          },
          "account_currency": {
            "type": "string",
            "description": "Account Currency in ISO-3digit format.",
            "nullable": true
          },
          "txn_guid": {
            "type": "string",
            "description": "Unique Transaction Identifier on Qolo Platform.",
            "format": "uuid"
          },
          "order": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxnLedgerSettlementOrderSettingsDTO"
            },
            "description": "order by setting for transaction history",
            "nullable": true
          },
          "txn_category": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Transaction category",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateAccountInfoRequest": {
        "required": [
          "account_name"
        ],
        "type": "object",
        "properties": {
          "account_name": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "description": "Provide new account name."
          }
        },
        "additionalProperties": false,
        "description": "Data for update Account Information"
      },
      "UpdateCompany": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/UpdateCompanyRequest"
          }
        },
        "additionalProperties": false,
        "description": "Update Company DTO"
      },
      "UpdateCompanyRequest": {
        "type": "object",
        "properties": {
          "company_parent": {
            "type": "string",
            "description": "parent company unique id",
            "format": "uuid",
            "nullable": true
          },
          "company_dba_name": {
            "maxLength": 64,
            "type": "string",
            "description": "company doing-business-as name",
            "nullable": true
          },
          "company_short_name": {
            "maxLength": 24,
            "type": "string",
            "description": "company short name",
            "nullable": true
          },
          "company_dba_lic_number": {
            "maxLength": 24,
            "type": "string",
            "description": "company license number",
            "nullable": true
          },
          "address_line1": {
            "maxLength": 48,
            "type": "string",
            "description": "company address line 1",
            "nullable": true
          },
          "address_line2": {
            "maxLength": 48,
            "type": "string",
            "description": "company address line 2",
            "nullable": true
          },
          "company_dba_city": {
            "maxLength": 32,
            "type": "string",
            "description": "company address city",
            "nullable": true
          },
          "company_dba_state": {
            "maxLength": 32,
            "type": "string",
            "description": "company address state",
            "nullable": true
          },
          "company_dba_country": {
            "maxLength": 3,
            "type": "string",
            "description": "company address country",
            "nullable": true
          },
          "institution_type": {
            "$ref": "#/components/schemas/InstitutionType"
          },
          "company_status": {
            "$ref": "#/components/schemas/CompanyStatus"
          },
          "postal_code": {
            "maxLength": 16,
            "type": "string",
            "description": "postal code",
            "nullable": true
          },
          "phone_number": {
            "maxLength": 16,
            "type": "string",
            "description": "company phone number",
            "nullable": true
          },
          "website": {
            "maxLength": 100,
            "type": "string",
            "description": "company website",
            "nullable": true
          },
          "ownership_type": {
            "type": "string",
            "description": "company ownership_type",
            "nullable": true
          },
          "state_of_incorporation": {
            "maxLength": 32,
            "type": "string",
            "description": "company state of incorporation",
            "nullable": true
          },
          "country_of_incorporation": {
            "maxLength": 3,
            "type": "string",
            "description": "company country of incorporation",
            "nullable": true
          },
          "date_of_incorporation": {
            "type": "string",
            "description": "company date of incorporation",
            "format": "date-time",
            "nullable": true
          },
          "additional_data": {
            "maxLength": 1000,
            "type": "string",
            "description": "additional data",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Company Request DTO"
      },
      "UpdatePaymentPayee": {
        "type": "object",
        "properties": {
          "person_guid": {
            "type": "string",
            "description": "Payer person guid\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "uuid",
            "nullable": true
          },
          "payment_due": {
            "type": "number",
            "description": "Amount of payment that pertains to this payee\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "double",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "description": "Account guid\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Guid of outside_instrument to pay to",
            "format": "uuid",
            "nullable": true
          },
          "reference_code": {
            "type": "string",
            "description": "Reference Code\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "nullable": true
          },
          "preferred_transfer_type": {
            "type": "string",
            "description": "Preferred Transfer Type\r\nPermitted values are ACCOUNTTOBANK, FASTACCOUNTTOBANK, CLIENTFUNDCHECK\r\n<br>\r\nNOTE: Currently only used for CLIENTFUNDCHECK\r\n",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "quote_reference": {
            "type": "string",
            "description": "Payee Quote Reference required for international payment",
            "nullable": true
          },
          "foreign_exchange_purpose_code": {
            "$ref": "#/components/schemas/PaymentPurposeCode"
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet Guid\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "uuid",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "Account Type\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "uuid",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "description": "Instrument Type\r\n<br>\r\nNOTE: Not currently supported by UpdatePayment and will be ignored\r\n",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument\r\nfrom the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee."
      },
      "UpdatePaymentPayer": {
        "type": "object",
        "properties": {
          "account_guid": {
            "type": "string",
            "description": "Account guid",
            "format": "uuid",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Payer person guid",
            "format": "uuid",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "wallet_guid": {
            "type": "string",
            "description": "Wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "outside_instrument_guid": {
            "type": "string",
            "description": "Source outside instrument guid",
            "format": "uuid",
            "nullable": true
          },
          "preferred_transfer_type": {
            "type": "string",
            "description": "Preferred Transfer Type\r\nPermitted values are ACCOUNTTOBANK, FASTACCOUNTTOBANK, CLIENTFUNDCHECK",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "description": "account type",
            "nullable": true
          },
          "instrument_type": {
            "type": "string",
            "description": "Payee instrument type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payer: Identifies the original source of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be pulled from\r\noutside instrument to the payer's account guid before being sent to the payee. However, the outside instrument guid must belong to the payer."
      },
      "UpdatePaymentRequest": {
        "type": "object",
        "properties": {
          "payer": {
            "$ref": "#/components/schemas/UpdatePaymentPayer"
          },
          "payee": {
            "$ref": "#/components/schemas/UpdatePaymentPayee"
          },
          "status": {
            "$ref": "#/components/schemas/StatusPaymentOption"
          }
        },
        "additionalProperties": false,
        "description": "Update Payment Request Class"
      },
      "UpdatePaymentResponse": {
        "required": [
          "payment_base_currency",
          "reference_code"
        ],
        "type": "object",
        "properties": {
          "quote_reference": {
            "type": "string",
            "nullable": true
          },
          "payer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayer"
            },
            "description": "Payer: Identifies the original source of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be pulled from outside instrument to the payer's account guid before being sent to the payee. However, the outside instrument guid must belong to the payer.",
            "nullable": true
          },
          "payee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePaymentPayee"
            },
            "description": "Payee: Identifies the ultimate recipient of funds.\r\nIf both the account guid and an outside instrument guid are provided, funds will be deposited to the outside instrument from the payee's account guid after it is received from the payer. However, the outside instrument guid must belong to the payee.",
            "nullable": true
          },
          "payment_amount": {
            "type": "number",
            "description": "Payment amount",
            "format": "double"
          },
          "payment_base_currency": {
            "minLength": 3,
            "type": "string",
            "description": "Three letter currency code"
          },
          "payment_description": {
            "type": "string",
            "description": "Payment description",
            "nullable": true
          },
          "payment_request_code": {
            "$ref": "#/components/schemas/PaymentRequestCode"
          },
          "payment_balance": {
            "type": "number",
            "description": "Payment balance - Minimum Balance in destination account to trigger Payment",
            "format": "double"
          },
          "payment_guid": {
            "type": "string",
            "description": "Payment guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_chain": {
            "type": "string",
            "description": "Payment chain",
            "format": "uuid",
            "nullable": true
          },
          "response_code": {
            "maxLength": 16,
            "type": "string",
            "description": "Response Code",
            "nullable": true
          },
          "reason_code": {
            "type": "string",
            "description": "Reason Code",
            "nullable": true
          },
          "requestor_wallet_guid": {
            "type": "string",
            "description": "Requestor wallet guid",
            "format": "uuid",
            "nullable": true
          },
          "payment_due_date": {
            "type": "string",
            "description": "Payment due date",
            "format": "date-time"
          },
          "reference_code": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "Reference code"
          },
          "payment_schedule": {
            "$ref": "#/components/schemas/PaymentScheduleRequest"
          },
          "foreign_exchange_purpose_code": {
            "$ref": "#/components/schemas/PaymentPurposeCode"
          },
          "error_code": {
            "type": "string",
            "nullable": true
          },
          "error_description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePersonRelationRequest": {
        "required": [
          "holder_person_guid",
          "related_person_guid",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "holder_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "related_person_guid": {
            "type": "string",
            "format": "uuid"
          },
          "relationship": {
            "$ref": "#/components/schemas/Relationship"
          }
        },
        "additionalProperties": false,
        "description": "Data for update person relation request"
      },
      "UpdateSharedAccountRequest": {
        "required": [
          "holder_person_guid",
          "holder_share_status",
          "holder_shared_account_guid",
          "related_person_guid"
        ],
        "type": "object",
        "properties": {
          "holder_person_guid": {
            "type": "string",
            "description": "The unique identifier of the person who owns the account being shared",
            "format": "uuid"
          },
          "holder_shared_account_guid": {
            "type": "string",
            "description": "The unique identifier of the account being shared.",
            "format": "uuid"
          },
          "related_person_guid": {
            "type": "string",
            "description": "The unique identifier of the person who is receiving the account share.",
            "format": "uuid"
          },
          "holder_share_status": {
            "$ref": "#/components/schemas/HolderShareStatus"
          }
        },
        "additionalProperties": false
      },
      "ValidateCardDTO": {
        "type": "object",
        "properties": {
          "card_number": {
            "type": "string",
            "description": "Card number",
            "nullable": true
          },
          "cvx2": {
            "type": "string",
            "description": "CVX2 data",
            "nullable": true
          },
          "expiration_date": {
            "type": "string",
            "description": "Expiration date in format YYMM",
            "nullable": true
          },
          "card_proxy": {
            "type": "string",
            "description": "Card proxy",
            "nullable": true
          },
          "card_lastX": {
            "type": "string",
            "description": "Last X digits of cardnumber",
            "nullable": true
          },
          "ssn_last4": {
            "type": "string",
            "description": "Last 4 digits of SSN.  Optional Parameter for Multi Factor Authentication.",
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "description": "Person’s date of birth. Optional Parameter for Multi Factor Authentication.\r\nAccepted Format: yyyy-MM-dd",
            "nullable": true
          },
          "postal_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Postal code corresponding to the address. Optional Parameter for Multi Factor Authentication.",
            "nullable": true
          },
          "client_reference_id": {
            "type": "string",
            "description": "API Partner can send the person's unique id on their system and it can be used to fetch person detail. Optional Parameter for Multi Factor Authentication.",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person’s Unique Identifier on Qolo platform.",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program Unique Identifier on Qolo platform.",
            "format": "uuid",
            "nullable": true
          },
          "journal_entry": {
            "$ref": "#/components/schemas/JournalEntry"
          },
          "iin": {
            "type": "string",
            "description": "JournalEntry info",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VelocityLimitDTO": {
        "type": "object",
        "properties": {
          "condition_guid": {
            "type": "string",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "account_guid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "amount_limit": {
            "type": "number",
            "format": "double"
          },
          "card_proxy": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "operation_name": {
            "type": "string",
            "nullable": true
          },
          "operation_categories": {
            "type": "string",
            "nullable": true
          },
          "time_unit": {
            "type": "string",
            "nullable": true
          },
          "expiry_limit_mins": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Velocity Limit profile"
      },
      "VerificationRequest": {
        "type": "object",
        "properties": {
          "perform_kyc": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "identifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonIdentificationDTO"
            },
            "description": "Identification details of the person for electronic identity verification",
            "nullable": true
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Answer"
            },
            "description": "To pass the answers for OOW questions(if applicable)",
            "nullable": true
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "client_verification": {
            "$ref": "#/components/schemas/ClientVerification"
          },
          "program_guid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to perform KYC verification"
      },
      "WalletDTO": {
        "type": "object",
        "properties": {
          "wallet_guid": {
            "type": "string",
            "description": "Unique identifier of the wallet on the platform.",
            "format": "uuid"
          },
          "wallet_id": {
            "type": "string",
            "description": "Unique id of wallet",
            "nullable": true
          },
          "person_guid": {
            "type": "string",
            "description": "Person Guid",
            "format": "uuid"
          },
          "program_guid": {
            "type": "string",
            "description": "Program Guid",
            "format": "uuid"
          },
          "program_name": {
            "type": "string",
            "description": "Program Name",
            "nullable": true
          },
          "program_short_name": {
            "type": "string",
            "description": "Program Short Name",
            "nullable": true
          },
          "eft_display_name": {
            "type": "string",
            "description": "Display Name",
            "nullable": true
          },
          "sponsor_name": {
            "type": "string",
            "description": "Sponsor Name",
            "nullable": true
          },
          "parent_program_guid": {
            "type": "string",
            "description": "Program Parent Guid",
            "format": "uuid",
            "nullable": true
          },
          "top_program_guid": {
            "type": "string",
            "description": "Program Top Guid",
            "format": "uuid",
            "nullable": true
          },
          "company_dba_name": {
            "type": "string",
            "description": "Company DBA Name",
            "nullable": true
          },
          "company_short_name": {
            "type": "string",
            "description": "Company Short Name",
            "nullable": true
          },
          "account_status": {
            "type": "string",
            "description": "Status of account.",
            "nullable": true
          },
          "wallet_created": {
            "type": "string",
            "description": "Date wallet was created",
            "format": "date-time",
            "nullable": true
          },
          "wallet_name": {
            "type": "string",
            "description": "wallet_name",
            "nullable": true
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDTO"
            },
            "description": "List of accounts and balance details",
            "nullable": true
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardDTO"
            },
            "description": "List of cards",
            "nullable": true
          },
          "account_instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountInstrumentDTO"
            },
            "description": "List of instruments associated with the",
            "nullable": true
          },
          "account_shared_persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountSharedPersonDTO"
            },
            "description": "List of account shares.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WalletDTOSearchResponse": {
        "required": [
          "count",
          "data",
          "end_index",
          "has_more",
          "start_index"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of records matching the search criteria",
            "format": "int32"
          },
          "start_index": {
            "type": "integer",
            "description": "Start Index.",
            "format": "int32"
          },
          "end_index": {
            "type": "integer",
            "description": "End Index.",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean",
            "description": "End Index."
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDTO"
            },
            "description": "List of Records."
          },
          "check_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of check statuses.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "auth_request_type": {
        "enum": [
          "PURCHASE",
          "ECOMM",
          "PREAUTH",
          "PREAUTHCOMPLETION",
          "ATM",
          "REFUND",
          "OCTIN",
          "CASHIN"
        ],
        "type": "string"
      },
      "fleet_data": {
        "type": "object",
        "properties": {
          "driver_id": {
            "type": "string",
            "description": "Driver Id",
            "nullable": true
          },
          "vehicle_id": {
            "type": "string",
            "description": "Vehicle Id",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Fleet Card Auth Prompts Info"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter JWT Bearer token **_only_**",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}