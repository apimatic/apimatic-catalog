openapi: 3.0.1
info:
  title: finAPI Data Intelligence
  version: "2024.32.1"
  description: |
    The following pages give you some general information on how to use the API.

    The actual API services documentation then follows further below. You can
    use the menu to jump between API sections.


    This page has a built-in HTTP(S) client, so you can test the services
    directly from within this page, by filling in the request parameters and/or
    body in the respective services, and then hitting the TRY button. Note that
    you need to be authorized to make a successful API call. To authorize, refer
    to the 'Authorization' section of the API, or just use the OAUTH button that
    can be found near the TRY button.
    
    
    In general, authorized API endpoints require authorization with an OAuth user-token with the necessary (product-specific- or administrative-) scopes as defined in this document. 
    **Authorization with OAuth client-tokens is not possible**. For retrieval of the required __authorization token__ to use this service, refer to the 
    [DI Solutions Public Documentation](https://documentation.finapi.io/dippd/getting-started-authorization)'s authorization-related chapter to elaborate the approach suitable for your product,
    and to understand the required scopes.
    
    
    Besides the built-in client, we provide a [Postman](https://www.postman.com/downloads/) collection for 
    testing on our sandbox environment(right-click on the links to store the 
    <a href="https://di-sandbox.finapi.io/postman_customer/finapi-di-reportservice-postman-customer.zip" target="_blank">ZIP archive file</a>.  
    
    
    You should also check out the Developer Portal for more information. If you
    need any help with the API, contact support@finapi.io
    
    
    <sub>Application-Version: 1.857.0</sub>
  contact:
    name: finAPI GmbH
    url: 'https://www.finapi.io/impressum/'
    email: kontakt@finapi.io
  x-logo:
    url: 'https://docs.finapi.io/css/images/finapi-logo-new.png'
servers:
  - url: 'https://di-sandbox.finapi.io/api/v1'
  - url: 'https://di-live.finapi.io/api/v1'
tags:
  - name: Data Sources
  - name: Users
  - name: Cases
  - name: Checks
  - name: Aggregations
  - name: Transactions
    description: |
      Endpoints to obtain labelled transactions
  - name: Report
  - name: SCHUFA Reports
  - name: Extended Analyses
    description: |
      Endpoints to start an extended analysis on all transactions
  - name: DAC for loan
  - name: Balances
    description: |
      Endpoints to obtain daily balances
  - name: Labels
    description: |
      Endpoints to obtain informations about the defined lables and their mapping to reports

paths:
  '/dataSources':
    get:
      operationId: fetchAllDataSourcesOfUser
      summary: Get a list of data sources for the user
      description: |
        The service retrieves all data sources created for the authorized user.
        The <code>dataSourceIds</code> and <code>accountIds</code> provided in the response can be used as <code>dataSourceIds</code> for subsequent case file creation.

        > Note: *In case some bank connections were imported for the same DI user directly in finAPI Access, these connections will not be included in the response body of this service until the synchronization endpoint is called.*
      tags:
        - Data Sources
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataSources'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Datasources not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourcesNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourcesExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  "/dataSources/schufa/creditInformation":
    post:
      operationId: createSchufaCreditInformationDataSource
      summary: Create new SCHUFA data source
      description: |
        The service uses the provided by customer information to obtain the SCHUFA score and contracts data.
        By default it corresponds to a request to the `SCHUFA A-Auskunft` with the feature code `KH`.
        To obtain the data, it is necessary to provide SCHUFA credentials.

        Fully automated processing by the SCHUFA is not possible in every case. The API returns a <code>400</code> error in this case,
        with the code <code>ERROR_CODE_SCHUFA_MANUAL_PROCESSING</code> or <code>ERROR_CODE_SCHUFA_NO_ELECTRONIC_PROCESSING</code>.
      tags:
        - Data Sources
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchufaCreditCheckResource'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchufaDataSourceResource"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                schufaManualProcessing:
                  $ref: '#/components/examples/errorMessage400SchufaManualProcessingExample'
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '403':
          description: SCHUFA service business error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"

  '/dataSources/bankConnections/synchronization':
    post:
      operationId: syncBankConnectionDataSources
      summary: Synchronize bank connection data sources
      description: |
        The service synchronizes bank connections with the data sources.
        It updates and/or adds the available accounts and bank connections for the authorized user, which are importable without user interaction.
        > In case <code>finapiAccessAccountId </code> or <code>IBAN </code> are specified as input parameters, the service will synchronize only the given account data*
      tags:
        - Data Sources
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SynchronizeBankConnectionParams'
      callbacks:
        datasource:
          '{$request.body#/callbackUrl}':
            post:
              operationId: getDataSourceCallback
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DataSourceStatusCallbackResource"
              responses:
                '200':
                  description: Response if callback was accepted.

      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataSources'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Datasources not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourcesNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourcesExample'
                accountNotFound:
                  $ref: '#/components/examples/errorMessage404AccountExample'
        '423':
          description: A synchronization is already in progress for the given input parameters.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                syncAlreadyStarted:
                  $ref: '#/components/examples/errorMessage423BankConnectionSyncExample'
                concurrentApiCall:
                  $ref: '#/components/examples/errorMessage423ConcurrentAccess'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/dataSources/{dataSourceId}/status':
    get:
      operationId: statusOfDatasourceById
      summary: Get the status of a data source
      description: |
        The service returns the status of the created data source, that can be either <code>IN_PROGRESS</code>, <code>SUCCESSFUL</code>, <code>FAILED</code>.
        The code returned as a part of the response body provides the reason why the data source refers to this or that status.

        The service updates the given data source.
        If the consent of the user is no longer valid on the bank's side, then a Strong Customer Authentication will be required for updating the bank data.
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as <code>dataSourceId</code> for the bank connection update.
        In case the <code> accountId </code> is used as a <code> dataSourceId</code> request parameter, the data source (bank connection), to which this account belongs will be updated.
      tags:
        - Data Sources
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: dataSourceId
          description: UUID of the data source
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataSourceStatusResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Datasource not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourceExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/dataSources/transactions':
    post:
      operationId: storeTransactions
      summary: Create a transaction datasource
      description: |
        Store transactions directly via API to the Report Service, instead of connecting an existing datasource.
        The service returns the status of the created data source, that can be either <code>IN_PROGRESS</code>, <code>SUCCESSFUL</code>, <code>FAILED</code>.
      tags:
        - Data Sources
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/TransactionDataRequest'
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TransactionDataSourceResponse'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Datasource not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourceExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/cases':
    get:
      operationId: fetchAllCases
      summary: Get all cases
      description: |
        The service retrieves all case files created for the authorized user together with the data sources and reports stored in each of the case files.
      tags:
        - Cases
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserCasesResource'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: The case does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                caseNotFoundExample:
                  $ref: '#/components/examples/errorMessage404CasesExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    post:
      operationId: createCase
      summary: Create a case
      description: |
        The service creates a new case file, i.e. an information container where the imported and analysed data of the authorized user is stored.
        <br><br>
        The case defines the timeframe for the report results within it, by setting the optional <code>maxDaysForCase</code> parameter.
        The parameter sets the inclusive range (in number of days) for which the transactions will be analysed, going back from the case file creation date.
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the case creation.
        The data sources can be used as a container for multiple accounts.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code> to avoid changes in the report if the user adds or removes new accounts on the data source.*

        > Note: *A case file can contain maximum one SCHUFA Credit Check Data Source.*

        > Note: *<code>maxDaysForCase</code> parameter does not set any limitations for the data, retrieved based on the SCHUFA Credit Check Data Sources.*
      tags:
        - Cases
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCaseParams'
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CaseResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Datasource not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourceExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '423':
          description: Case file cannot contain multiple SCHUFA Credit Check Data Sources.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                creditRatingDataSourceDuplicated:
                  $ref: '#/components/examples/errorMessage423SchufaDataSourceDuplicateExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/cases/{caseId}/report':
    post:
      operationId: createReport
      summary: Create a report
      description: |
        The service creates a Report based on the data stored in the case file and the report type in the request body.
        The transactions which are used for the report creation are defined by the <code>dataSourceIds</code> inside the case file and <code>maxDaysForCase</code> parameter.
        The parameter sets the inclusive range (in number of days) for which the transactions will be analysed, going back from the case file creation date.
        <br><br>
        If there is a need for report to be re-generated, the <code>parentReportId</code> field and optional field <code>endDate</code> need to be specified.
        If the <code>endDate</code> is not present the default value is today / now.
        If the <code>endDate</code> is present the day is considered until 23:59:59, so that it is a day to day report.
        Such a report will be considered continuous and will have associated with it child reports, created inside of the same case file.
        <br><br>
        The result returned by the service is the UUID of the report created.

        | Report type (from <code>ReportTypeEnum</code>) | Description                                                                                                                                                                                                                                |
        |------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
        | **Risk Indicators reports**                    |                                                                                                                                                                                                                                            |
        | <code>RISK_INDICATORS</code>                   | Risk Indicators report is aimed to summarize risk transactions for the following categories 
        |                                                | **Chargebacks** subreport is aimed at returning only the labeled transactions related to the user’s returned charges.  The report detects chargebacks transactions that are split into CHARGEBACKS_ACTIVE (actual chargebacks transactions of the account), CHARGEBACKS_PASSIVE (chargebacks transactions for 3rd parties, like customers), CHARGEBACKS_OBJECTION_INCOME (an objection against the validity of a chargeback), CHARGEBACKS_OBJECTION_SPENDING (if a company, an objection against the validity of a chargeback of the  3rd parties, like customers against the company), CHARGEBACKS and CHARGEBACK_FEE ( transactions that do not have enough information to be considered in the other categories).                                                                                                                                              |                                                                                                                           | 
        |                                                | **Debt Collection** subreport is aimed at returning only the labeled transactions related to debt repayment.                                                                                                                                      |
        |                                                | **Gambling** subreport is aimed at returning only the labeled transactions that signify the gaming and gambling-related expenditures.                                                                                                             |
        |                                                | **Seizure** subreport is aimed at returning only the labeled transactions that signify seizure.The report detects seizure transactions that are split into SEIZURE_ACTIVE (actual seizure transactions of the account), SEIZURE_SALARY (salary transactions from which the amount was already seized; the extracted seized amount is used for the calculations) and SEIZURE_PASSIVE (seizure transactions for 3rd parties, like employees).                                                                                                                                              |
        |                                                | **Credit Limit** subreport is aimed at returning only the labeled transactions related to overdraft interest repayment.                                                                                                                           |
        |                                                |                                                                                                                                                                                                                                            |
        | **Cashflow reports**                           |                                                                                                                                                                                                                                            |
        | <code>MAXIMUMAVAILABLEFUNDS</code>             | MAF report is aimed at returning the maximum amount of available funds, which equals to the sum of account’s balance and overdraft limit (if available) on a certain date and the date when this amount was present on the account.        |
        | <code>SPENDING</code>                          | Spending report is aimed at returning only the labeled transactions with negative amounts, that signify the user’s spending's on rent, insurance and etc.                                                                                  |
        | <code>INCOME</code>                            | Income report is aimed at returning only the labeled transactions with positive amounts, that signify the user’s incomes obtained as a result of salary, pension payments and etc.                                                         |
        | <code>RENTANDLIVING</code>                     | Rent & Living report is aimed at returning only the labeled transactions with negative amounts, that signify the user’s Rent & Living-related expenditures, such as spending on utilities, rent and etc.                                   |
        | <code>INSURANCE</code>                         | Insurance report is aimed at returning only the labeled transactions with negative amounts, that signify the user’s insurance-related expenditures, such as spending on life insurance, accidents insurance and etc.                       |
        | <code>BALANCES</code>                          | Balances report is aimed at returning the analysed balances data, such as the average balance per the given period, maximum and minimum balance amounts and the dates when these amounts were present, overdraft limit (if available).     |
        |                                                |                                                                                                                                                                                                                                            |
        |                                                |                                                                                                                                                                                                                                            |
        | **Contract reports**                           |                                                                                                                                                                                                                                            |
        | <code>CONTRACTSINSURANCE</code>                | Contracts Reports for insurances is aimed at returning the information about the insurance-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.                 |
        | <code>CONTRACTSLOAN</code>                     | Contracts Reports for loans is aimed at returning the information about the loans-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.                          |
        | <code>CONTRACTSELECTRICITY</code>              | Contracts Reports for electricity is aimed at returning the information about the electricity-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.              |
        | <code>CONTRACTSGAS</code>                      | Contracts Reports for gas is aimed at returning the information about the gas-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.                              |
        | <code>CONTRACTSTELECOMMUNICATION</code>        | Contracts Reports for telecommunication is aimed at returning the information about the telecommunication-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.  |
        | <code>CONTRACTSLOANVALIDATOR</code>            | Contracts Reports for loan validator is aimed at returning the information about the loans-related contractual relationships, that the authorized user has in the analyzed time span together with the transactions associated with these contractual relationships.                 |

        > Note: *Balances report does not consider security accounts.*
        <br><br>
        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code> to avoid changes in the report if the user adds or removes new accounts on the data source.*

        > Note: *It is recommended to check the state of the datasources, before creating a continuous report (by setting the <code>parentReportId</code>), to ensure, that bank consent to download transactions is still valid.*

        > Note: *In case the report is considered continuous, the time span of transactions, that will be analysed for child reports is defined by the end date of the parent report and <code>endDate</code>, not by <code>maxDaysForCase</code> parameter.*

        > Note: *A case file can contain maximum one Report of the same type (child reports are not taken into account for this count).*

        > Note: *The mapping of transaction labels to reports can be obtained from the API endpoint <code>/labels</code>.*

      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateReportParams'
            examples:
              defaultReport:
                $ref: '#/components/examples/createReportBodyExample'
              continuousReport:
                $ref: '#/components/examples/createReportContinuousBodyExample'
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReportResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Report does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/cases/{caseId}/reports':
    get:
      operationId: fetchAllReportsOfCases
      summary: Get all reports
      description: |
        The service returns all the reports stored in the given case file.

        > Note: *A case file may store only one report of a particular type (e.g. the case file may store only one Chargeback Report (child reports are not taken into account for this count)).
        > In case the <code>maxDaysForCase</code> parameter was set upon the case file creation, all the reports inside the particular case will analyse the transactions for the same time span.*
      x-finapi:
        order: '1'
      x-codegen-request-body-name: body
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL, FINAPI_CLIENT_ADMIN ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
        - name: withTransactions
          schema:
            type: boolean
          in: query
          description: |
            Defines whether the report should include transactions data or not.
            By default, if not specified, the value of the parameter from the given case file is inherited.
            The value from the case file may be reset by providing the <code>withTransactions</code> parameter at the report getting level.
          required: false
        - name: showOnlyActiveContracts
          in: query
          description: |
            Defines whether the report should include only active contracts or not.
            By default, if not specified, the value of the parameter is set <code>false</code>.
            If the parameter is set to <code>false</code>, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts.
            If the parameter is set to <code>true</code>, then the report will display only ACTIVE contracts.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ReportsForCaseResource"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404CaseExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/cases/{caseId}/report/recurring':
    post:
      operationId: createRecurringReport
      summary: Create a recurring report
      description: |
        The Recurring Report provides a comprehensive overview of the customer's repetitive financial interactions. 
        It reveals the counterparts involved, the amount of money being transferred, and the frequency of these transactions. 
        Additionally, it encompasses pertinent account details and transaction specifics.
        
        Transactions included in the report are determined by specified <code>dataSourceIds</code> within the case file and the <code>maxDaysForCase</code> parameter, which sets the analysis timeframe counting backward from the case file's creation date.
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReportResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/cases/{caseId}/reports/recurring/{reportId}':
    get:
      operationId: fetchRecurringReport
      summary: Get a recurring report
      description: |
        The service returns the recurring report stored in the given case file.
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
        - name: reportId
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/RecurringReportResource"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404CaseExample'
        '423':
          description: Locked - report is in progress
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '424':
          description: Failed Dependency - The analytics service was unable to analyze the data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/cases/{caseId}/report/crosscountry':
    post:
      operationId: createCrossCountryTransferReport
      summary: Create a cross country report
      description: |
        The report includes various elements under <code>crossCountryTransfers</code>, unique in their <code>originationCountry</code> and <code>destinationCountry</code> combinations. 
        Within these segments, it provides a comprehensive summary and average of transactions between the two countries over the reporting period, along with monthly breakdowns. 
        Additionally, a detailed monthly analysis illustrates transfer amounts between countries for each month.

        Transactions included in the report are determined by specified <code>dataSourceIds</code> within the case file and the <code>maxDaysForCase</code> parameter, which sets the analysis timeframe counting backward from the case file's creation date.
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReportResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/cases/{caseId}/reports/crosscountry/{reportId}':
    get:
      operationId: fetchCrossCountryTransferReport
      summary: Get a cross country report
      description: |
        The service returns the cross country report stored in the given case file.
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
        - name: reportId
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CrossCountryReportResource"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404CaseExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/cases/{caseId}/dataSources':
    get:
      operationId: fetchDatasourcesOfCases
      summary: Get a list of registered data sources
      description: |
        The service returns the data sources which are stored and analysed in the given case file.
      tags:
        - Cases
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          description: UUID of the case file
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DataSources'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Case not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404CaseExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/cases/{caseId}/aggregations':
    post:
      operationId: createAggregations
      summary: Create aggregations based on the label filter.
      description: |
        The aggregation endpoint receives as request body an object that defines the desired aggregations.
        
        An alias can be used to define which aggregation it is.
        
        The element <code>includedLabelGroup</code> defines which labels should be used for the aggregation. The label and its sub-labels (higher LoD) are used.
        In order not to have to transmit too many labels, but to be able to define which ones should not be used if necessary, the <code>excludedLabelGroup</code> can be set. 
        Labels (and their sub-labels) contained in it will be excluded from the aggregation group.
        
        Basically, the system behaves in such a way that if multiple aggregations are requested, transactions that have already been allocated cannot be allocated to other aggregations.
        This means, that the order of the requested aggregations determines the assignment of the transactions.
        
        So if a transaction is assigned to the aggregation with the alias "MyFirstAggr", it is no longer available to the next aggregation group and thus prevents duplications.
        
        This means: If a transaction has 2 labels: <code>BANKANDCREDIT</code> and <code>INSURANCE</code>, but <code>INSURANCE</code> is defined as an aggregation view before <code>BANKANDCREDIT</code>, the transaction is taken for <code>INSURANCE</code> and removed from the processed transaction list. 
        If the customer has another aggregation, which is using <code>BANKANDCREDIT</code>, this transaction is not a part of this later section.
      tags:
        - Aggregations
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateAggregationResourceRequest'
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AggregationResourceResponse'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Report does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'


  '/cases/{caseId}/reports/schufa/creditInformation':
    post:
      operationId: createSchufaCreditInformation
      summary: Create a SCHUFA credit information report
      description: |
        The service creates a SCHUFA Credit Information Report based on the data provided by SCHUFA.
        <br><br>
        The result returned by the service is the UUID of the report created.
        <br><br>
        SCHUFA Credit Information Report is aimed at returning the information about credit score and contracts, that the authorized user has on the basis of SCHUFA data.

        > Note: *SCHUFA Credit Report does not take into regard <code>maxDaysForCase</code> and returns all the data, provided by SCHUFA irrespectively of the mentioned in the case file time span, as of the SCHUFA Credit Rating Data Source creation date.*

        > Note: *SCHUFA Credit Check report can be created only in the case file, that has SCHUFA Credit Rating Data Source inside of it.*

        > Note: *A case file can contain maximum one SCHUFA Credit Information report.*
      tags:
        - SCHUFA Reports
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: The case does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                caseNotFoundExample:
                  $ref: '#/components/examples/errorMessage404CaseExample'
        '423':
          description: No report duplicates are allowed.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportAlreadyExist:
                  $ref: '#/components/examples/errorMessage423ReportExistExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'
    get:
      tags:
        - SCHUFA Reports
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      summary: Get the SCHUFA Credit Information report of the case
      description: |
        The service returns the created in the given case file SCHUFA Credit Information report.
        The report contains the information about credit score and contracts, that the authorized user has on the basis of SCHUFA data.

        It is possible to filter the count of the contracts for special characteristic codes with the query parameter <code>contractsCharacteristicsFilter</code>.

        The default uses the following codes to count the contracts:
        <ul>
          <li><code>HF</code> - Forward Loan [Forward Darlehn]</li>
          <li><code>HN</code> - Building savings loan for borrower secured with letter of commitment [mit Verpflichtungserklärung gesichertes Bauspardarlehen für Kreditnehmer / BS-Darlehn]</li>
          <li><code>HP</code> - Loan secured by real estate lien [grundpfandrechtlich gesicherter Kredit / Hypo Kredit]</li>
          <li><code>HY</code> - Loan secured by real estate lien without amount [grundpfandrechtlich gesicherter Kredit ohne Betrag / Hypo Kredit]</li>
          <li><code>K1</code> - Working capital credit line for freelancers [Betriebsmittelkreditlinie für Freiberufler]</li>
          <li><code>K2</code> - Working capital credit line for self-employed persons/small businesses [Betriebsmittelkreditlinie für Selbständige/Kleingewerbetreibende]</li>
          <li><code>K3</code> - Investment credit for freelancers [Investitionskredit für Freiberufler]</li>
          <li><code>K4</code> - Investment loan for self-employed persons/ small businessmen [Investitionskredit für Selbständige/ Kleingewerbetreibende]</li>
          <li><code>KR</code> - Blank home loan or installment loan not secured by real estate lien [Blankobauspardarlehen oder nicht grundpfandrechtlich gesicherter Ratenkredit / Kredit]</li>
          <li><code>KX</code> - Unsecured home loan or loan not secured by real estate lien with final maturity [Blankobauspardarlehen oder nicht grundpfandrechtlich gesicherter Kredit mit Endfälligkeit / Kredit]</li>
          <li><code>M3</code> - Leasing/hire-purchase for commercial purposes (for freelancers) [Leasing/Mietkauf für gewerbliche Zwecke (für Freiberufler)]</li>
          <li><code>M4</code> - Leasing/hire-purchase for commercial purposes (for self-employed and small traders) [Leasing/Mietkauf für gewerbliche Zwecke (für Selbständige und Kleingewerbetreibende)]</li>
          <li><code>M5</code> - Credit card for commercial purposes (for freelancers) [Kreditkarte für gewerbliche Zwecke (für Freiberufler)]</li>
          <li><code>M6</code> - Credit card for commercial purposes (for self-employed and small traders) [Kreditkarte für gewerbliche Zwecke (für Selbständige und Kleingewerbetreibende)]</li>
          <li><code>M7</code> - Investment loan secured by real estate lien for business purposes purposes (for freelancers) [Grundpfandrechtlich gesicherter Investitionskredit für geschäftliche Zwecke (für Freiberufler)]</li>
          <li><code>M8</code> - Investment loan secured by real estate lien for business purposes (for self-employed persons and small businesses) [Grundpfandrechtlich gesicherter Investitionskredit für geschäftliche Zwecke (für Selbständige und Kleingewerbetreibende)]</li>
          <li><code>MA</code> - Co-commitment for a blank home loan or an installment loan not secured by a real estate lien [Mitverpflichtung für ein Blankobauspardarlehen oder einen nicht grundpfandrechtlich gesicherten Ratenkredit / Mitantragsteller]</li>
          <li><code>ML</code> - Leasing/hire-purchase [Leasing/Mietkauf]</li>
          <li><code>MX</code> - Co-commitment for a blank home improvement loan or a loan not secured loan with final maturity date [Mitverpflichtung für ein Blankobauspardarlehen oder einen nicht grundpfandrechtlich gesicherten Kredit mit Endfälligkeit / Mitantragsteller]</li>
          <li><code>MY</code> - Co-obligation for a loan secured by real estate lien (including building society loan with letter of commitment) [Mitverpflichtung für einen grundpfandrechtlich gesicherten Kredit (einschließlich Bauspardarlehen mit Verpflichtungserklärung) / Mitantragsteller]</li>
          <li><code>RK</code> - Master credit agreement with a credit institution [Rahmenkreditvertrag mit einem Kreditinstitut / Rahmenkredit]</li>
          <li><code>CR</code> - Credit card with revolving credit line [Kreditkarte mit revolvierendem Kreditrahmen / Kreditkarte]</li>
          <li><code>CC</code> - Credit card or credit card account [Kreditkarte bzw. Kreditkartenkonto]</li>
        </ul>

        > Note: *A case file can contain maximum one SCHUFA Credit Information Report.*
      operationId: fetchSchufaCreditInformation
      parameters:
        - name: caseId
          schema:
            type: string
          in: path
          required: true
        - name: contractsCharacteristicsFilter
          description: |-
            This filter allows to control the <code>countContracts</code> field.
            It may contain one or more characteristic codes.
            Multiple codes must be separated by commas.
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SchufaCreditCheckReportResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Report does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                caseNotFoundExample:
                  $ref: '#/components/examples/errorMessage404CaseExample'
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/checks/balancesCheck':
    post:
      operationId: createFundsConfirmationCheck
      summary: Create a balances check
      description: |
        The service performs a Balances Check on the basis of the stored in the data source data about the latest imported account balance and (if available) overdraft limit.
        <br><br>
        Balances Check is aimed at returning the data about whether the latest amount of account's available funds is equal or higher than the specified in the request <code>checkAmount</code>, against which the check should be done.
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the check creation.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code>.*

        > Note: *Overdraft limit information is not available for every account.*

        > Note: *Balances Check does not consider security accounts.*

        > Note: *Balances Check does not consider SCHUFA data sources.*
      tags:
        - Checks
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateBalancesCheckParams'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckDataResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Bank connection data source / account not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/checks/childrenCheck':
    post:
      operationId: createChildrenCheck
      summary: Create a children check
      description: |
        The service performs a Children Check on the basis of the stored in the data source data about the child benefit payments.
        <br><br>
        Children Check is aimed at returning the data about the number of children, benefit payments for which are provided to the given account.
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the check creation.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code>.*

        > Note: *Children Check does not consider SCHUFA data sources.*

        > Note: *Children Check can provide inaccurate children count in case it is conducted against the accumulated child benefit payment, for e.g. for the very first child benefit paid out for multiple months or in the case of renewed outpayments of the child benefit after a break.*
      tags:
        - Checks
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateChildrenCheckParams'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildrenCheckDataResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Bank connection data source / account not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/checks/accountHolderType':
    post:
      operationId: createAccountHolderTypeCheck
      summary: Create an account holder type check
      description: |
        The service performs an Account Holder Type Check on the basis of the stored in the data source data about account holder name.
        <br><br>
        Account Holder Type Check is aimed at returning the data on whether an account belongs to one person, multiple persons or legal entity (company).
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the check creation.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code>.*

        > Note: *Account Holder Type Check does not consider SCHUFA data sources.*
      tags:
        - Checks
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateAccountHolderTypeCheckParams'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolderTypeCheckResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Bank connection data source / account not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404AccountExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/checks/topListCheck':
    post:
      operationId: createTopListCheck
      summary: Create a top list check
      description: |
        The service performs a top x transactions check on the basis of the stored in the data source data, from the following perspectives:
        <br>
        - Top transactions at which counterparty the most amounts are paid
        - What are the biggest transactions
        - With which counterparty are most transactions exchanged
        
        <br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the check creation.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code>.*
      tags:
        - Checks
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateTopListCheckParams'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopListCheckResource'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Bank connection data source / account not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404AccountExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'


  '/reports/{reportId}':
    get:
      operationId: fetchReportById
      summary: Get a report
      description: |
        The service returns an already created (historical) report by its identifier.
      tags:
        - Report
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      parameters:
        - name: reportId
          schema:
            type: string
          in: path
          required: true
        - name: withTransactions
          schema:
            type: boolean
          in: query
          description: |
            Defines whether the report should include transactions data or not.
            By default, if not specified, the value of the parameter from the given case file is inherited.
            The value from the case file may be reset by providing the <code>withTransactions</code> parameter at the report getting level.
          required: false
        - name: showOnlyActiveContracts
          in: query
          description: |
            Defines whether the report should include only active contracts or not.
            By default, if not specified, the value of the parameter is set <code>false</code>.
            If the parameter is set to <code>false</code>, then the report will display all ACTIVE, INACTIVE and UNKNOWN contracts.
            If the parameter is set to <code>true</code>, then the report will display only ACTIVE contracts.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GenericReportResult'
              examples:
                riskIndicatorsExample:
                  $ref: '#/components/examples/riskIndicatorsReportResponseExample'
                maximumAvailableFundsExample:
                  $ref: '#/components/examples/mafReportResponseExample'
                spendingExample:
                  $ref: '#/components/examples/spendingReportResponseExample'
                incomeExample:
                  $ref: '#/components/examples/incomeReportResponseExample'
                rentAndLivingExample:
                  $ref: '#/components/examples/rentAndLivingReportResponseExample'
                insuranceExample:
                  $ref: '#/components/examples/insuranceReportResponseExample'
                contractsInsuranceExample:
                  $ref: '#/components/examples/contractsInsuranceReportResponseExample'
                contractsLoanExample:
                  $ref: '#/components/examples/contractsLoanReportResponseExample'
                contractsElectricityExample:
                  $ref: '#/components/examples/contractsElectricityReportResponseExample'
                contractsGasExample:
                  $ref: '#/components/examples/contractsGasReportResponseExample'
                contractsTelecommunicationExample:
                  $ref: '#/components/examples/contractsTelecommunicationReportResponseExample'
                contractsLoanValidatorExample:
                  $ref: '#/components/examples/contractsLoanValidatorReportResponseExample'
                balancesExample:
                  $ref: '#/components/examples/balancesReportResponseExample'
                recurringTransactionExample:
                  $ref: '#/components/examples/recurringTransactionReportResponseExample'
                crossCountryTransfersExample:
                  $ref: '#/components/examples/crossCountryTransfersReportResponseExample'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Report does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404ReportExample'
        '423':
          description: Locked - report is in progress
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '424':
          description: Failed Dependency - The analytics service was unable to analyze the data
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/extendedAnalyses':
    post:
      operationId: createExtendedAnalysis
      summary: Create extended analysis
      description: |
        This extended analysis examines all transactions.

        Hereby transactions can be detected, which were not recognized by the normal labeling.
        This applies especially to transfers that do not contain a clear purpose.
      tags:
        - Extended Analyses
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeTransactionRequest"
      callbacks:
        subscription:
          '{$request.body#/callbackUrl}':
            post:
              operationId: extendedAnalysisCallback
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/CallbackNotification"
              responses:
                '200':
                  description: Response if callback was accepted.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeTransactionRequest"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: No data sources found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                reportNotFoundExample:
                  $ref: '#/components/examples/errorMessage404AnalysisExample'
        '423':
          description: Analysis already started
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceExist:
                  $ref: '#/components/examples/errorMessage423AnalysisStartedExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

  '/dacCases/loan':
    post:
      operationId: createDacForLoan
      summary: Create a DAC for loan report
      description: |
        The service creates a new case file with the DAC for Loan report inside of it.
        <br><br>
        The case defines the timeframe for the report results within it, by setting the optional <code>maxDaysForCase</code> parameter.
        The parameter sets the inclusive range (in number of days) for which the transactions will be analysed, going back from the case file creation date.
        <br><br>
        Both <code>accountIds</code> and <code>dataSourceIds</code> can be used as data sources for the case creation.
        The data sources can be used as a container for multiple accounts.
        <br><br>
        The case file <code>id</code> returned in the response of the call should be used as an input path parameter for <code>GET cases/{caseId}/reports</code> to retrieve the DAC for Loan report results.

        > Note: *<code>dataSourceIds</code> will be resolved internally to <code>accountIds</code> to avoid changes in the report if the user adds or removes new accounts on the data source.*
        <br><br>
        Depending on the <code>businessAnalysisType</code>, a set of reports will be created, for <code>B2C</code>, the dac loan report includes
        <ul>
        <li><code>INCOME</code></li>  
        <li><code>SPENDING</code></li> 
        <li><code>RENTANDLIVING</code></li> 
        <li><code>CHARGEBACKS</code></li> 
        <li><code>DEBTCOLLECTION</code></li> 
        <li><code>SEIZURE</code></li> 
        <li><code>GAMBLING</code></li>
        </ul>
        In case of <code>B2B</code>, it includes
        <ul>
        <li><code>INCOME</code></li>  
        <li><code>SPENDING</code></li> 
        <li><code>CHARGEBACKS</code></li> 
        <li><code>DEBTCOLLECTION</code></li> 
        <li><code>SEIZURE</code></li> 
        <li><code>CREDIT_LIMIT</code></li>         
        <li><code>BALANCES</code></li>
        </ul>
        <br><br>

      tags:
        - DAC for loan
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/CreateDacLoanParams"
      responses:
        '201':
          description: Success
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CaseResource"
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: "#/components/examples/errorMessage400Example"
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '404':
          description: Datasource not found
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404DataSourceExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unprocessable:
                  $ref: "#/components/examples/errorMessage422CaseUnprocessableExample"
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/user':
    delete:
      operationId: deleteUser
      summary: Delete all data of the user
      description: |
        The service deletes the data of the authorized user, such as Data Sources, Case Files, Reports created for the user.
      tags:
        - Users
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DeleteUserResource"
        '401':
          description: Not authenticated or invalid access_token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessageUnauthorized"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"

  '/user/status/delete/{deletionId}':
    get:
      operationId: userDeleteStatus
      summary: Get deletion status of the user’s data
      description: |
        The service retrieves user deletion status.
      parameters:
        - name: deletionId
          schema:
            type: string
          in: path
          required: true
      tags:
        - Users
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DeleteUserStatusResource'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: The case does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/reporting/dacLoan/{caseId}':
    post:
      operationId: reportingDacLoan
      summary: Create a PDF of DAC for loan report
      description: |
        The service generates the PDF report on the basis of the reports, located inside of the case file.
      parameters:
        - $ref: '#/components/parameters/locale'
        - name: caseId
          schema:
            type: string
          in: path
          required: true
      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/DacLoanPdfReportParams"
      tags:
        - DAC for loan
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL, CLIENT_CUSTOMER_DASHBOARD ]
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: byte
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: "#/components/examples/errorMessage400Example"
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: The case does not exist, or the required reports are missing in the case file.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/labels':
    get:
      operationId: getLabelsWithDescription
      summary: Get labels
      description: |
        Get all defined transaction labels with description. Optionally filter result for a specific report.
      parameters:
        - name: reportType
          schema:
            $ref: '#/components/schemas/ReportTypeEnum'
          in: query
          required: false
      tags:
        - Labels
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LabelDescriptions'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: "#/components/examples/errorMessage400Example"
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/balances':
    post:
      operationId: getBalances
      summary: Get daily balances
      description: |
        Get daily balances for the user. Parameters to filter the available balances can be passed in the parameter body.
      parameters:
        - in: query
          name: page
          description: |
            Page number which has to be `>= 0`, based on the page size of the response.
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - in: query
          name: size
          description: |
            Describes the number of elements to return in a page.
            If the parameter is omitted, a default size is used.
          schema:
            type: integer
            minimum: 0
            default: 50
            maximum: 500
            example: 50

      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/RequestBalances"
      tags:
        - Balances
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Balances'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: "#/components/examples/errorMessage400Example"
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/transactions':
    post:
      operationId: getTransactions
      summary: Get transactions
      description: |
        Get labelled transactions for the user. Parameters to filter the available transactions can be passed in the parameter body.
        
        > Note: If transactions are requested with label details, the priority order for the level-of-detail 1 labels can be specified, 
        and for <code>INCOME</code> transaction the priority order for the level-of-detail 2 labels.
      parameters:
        - in: query
          name: page
          description: |
            Page number which has to be `>= 0`, based on the page size of the response.
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 0
        - in: query
          name: size
          description: |
            Describes the number of elements to return in a page.
            If the parameter is omitted, a default size is used.
          schema:
            type: integer
            minimum: 0
            default: 50
            maximum: 500
            example: 50
      requestBody:
        required: false
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/RequestTransactions"
      tags:
        - Transactions
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL ]
      responses:
        '200':
          description: Success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LabelledTransactions'
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: "#/components/examples/errorMessage400Example"
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  '/transactions/accountStatementSheet/pdf':
    post:
      operationId: createAccountStatementSheetPdf
      summary: Create an Signed Digital Bank Statement PDF
      description: |
        The service returns an Signed Digital Bank Statement PDF on the basis of the stored in the data source data about transactions and accounts.
        <br><br>
      tags:
        - Transactions
      security:
        - ApiOAuth2: [ DATA_INTELLIGENCE, FINAPI_INTERNAL, FINAPI_CLIENT_ADMIN, CLIENT_CUSTOMER_DASHBOARD ]
      parameters:
        - $ref: '#/components/parameters/locale'
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateAccountStatementSheetParams'
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: byte
        '400':
          description: Input parameter is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessageUnauthorized'
        '404':
          description: Account not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                dataSourceNotFound:
                  $ref: '#/components/examples/errorMessage404AccountExample'
        '422':
          description: Not all data sources completed successfully.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unprocessable:
                  $ref: '#/components/examples/errorMessage422CaseUnprocessableExample'
        '500':
          description: An unexpected error occurred
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                internalErrorExample:
                  $ref: '#/components/examples/errorMessage500'
                invalidParameterExample:
                  $ref: '#/components/examples/errorMessage500InvalidParameter'

components:

  securitySchemes:
    ApiOAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost/api/v1/auth/token
          scopes:
            DATA_INTELLIGENCE: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be DataIntelligence-enabled.
            FINAPI_INTERNAL: internal calls from other finAPI services will be granted.

            FINAPI_FINAPI_ADMIN: Grants access to endpoint, if it is called with a finAPI finapi-admin user.
            FINAPI_CLIENT_ADMIN: Grants access to endpoint, if it is called by the client's finAPI client-admin user.

            CLIENT_CUSTOMER_DASHBOARD: Grants access for the Access client Admin use by the finAPI Customer Dashboard App.

  schemas:
    RequestBalances:
      type: object
      description: |
        Specifies, which of the daily balances shall be returned; Defined by filter options and pagination.
      properties:
        filter:
          $ref: '#/components/schemas/BalancesFilter'

    BalancesFilter:
      type: object
      description: describes how the user's daily balances shall be filtered for the response
      properties:
        startDate:
          type: string
          example: "2000-01-01"
          description: |
            (Included) start date for the balances to download, format '<code>YYYY-MM-DD</code>'.
            
            If not present, the start date is set to 10 years in the past.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        endDate:
          type: string
          example: "2000-01-01"
          description: |
            (Included) end date for the balances to download, format '<code>YYYY-MM-DD</code>'.
            
            If not present, the end date is today.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        accountId:
          type: string
          format: uuid
          description: UUID of the bank account to get balances for
          example: 4e760145-2e65-4242-ac33-488943528c93

    Balances:
      type: object
      description: Optionally filtered labelled balances for the user
      required:
        - number
        - size
        - totalElements
        - totalPages
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
        number:
          type: integer
          description: page number for the returned paginated result
          minimum: 0
        size:
          type: integer
          description: number of balances per page
          minimum: 1
        totalElements:
          type: integer
          description: number of available balances for the given request
        totalPages:
          type: integer
          description: number of available pages of balances for the given size in the request

    Balance:
      type: object
      description: daily balances
      properties:
        accountId:
          type: string
          format: uuid
          description: UUID of the bank account for this balance information
          example: 4e760145-2e65-4242-ac33-488943528c93
        date:
          type: string
          example: "2000-01-01"
          description: |
            (Included) start date for the balances to download, format '<code>YYYY-MM-DD</code>'.
            
            If not present, the start date is set to 10 years in the past.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        balance:
          type: number
          description: Account balance.
          example: 100.5

    RequestTransactions:
      type: object
      description: |
        Specifies, which of the user transactions shall be returned; Defined by filter options and pagination.
      properties:
        filter:
          $ref: '#/components/schemas/TransactionFilter'

    TransactionFilter:
      type: object
      description: describes how the user's transactions shall be filtered for the response
      properties:
        startDate:
          type: string
          example: "2000-01-01"
          description: |
            (Included) start date for the transactions to download, format '<code>YYYY-MM-DD</code>'.
            
            If not present, the start date is set to 10 years in the past.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        endDate:
          type: string
          example: "2000-01-01"
          description: |
            (Included) end date for the transactions to download, format '<code>YYYY-MM-DD</code>'.
            
            If not present, the end date is today.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/LabelResource'
        accountId:
          type: string
          format: uuid
          description: UUID of the bank account to filter transactions for
          example: 4e760145-2e65-4242-ac33-488943528c93
        transactionIds:
          description: UUID of the transactions to search for
          type: array
          maxItems: 500
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    LabelledTransactions:
      type: object
      description: Optionally filtered labelled transactions for the user
      required:
        - number
        - size
        - totalElements
        - totalPages
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResource'
        number:
          type: integer
          description: page number for the returned paginated result
          minimum: 0
          example: 1
        size:
          type: integer
          description: number of transactions per page
          minimum: 1
          example: 1
        totalElements:
          type: integer
          description: number of available transactions for the given request
          example: 1
        totalPages:
          type: integer
          description: number of available pages of transactions for the given size in the request
          example: 1

    LabelDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/LabelDescription'

    LabelDescription:
      type: object
      description: transaction label with description
      required:
        - label
      properties:
        label:
          $ref: '#/components/schemas/LabelResource'
        labelDescription:
          type: string
          description: describes under which conditions this labels will be attached to a transaction

    AllReportsResource:
      description: report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        type:
          $ref: '#/components/schemas/ReportTypeEnum'
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        transactionsStartDate:
          description: |
            Timestamp of the date, when user's first transaction took place in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          type: string
          example: '2020-01-01 00:00:00.000'
        totalTransactionsCount:
          description: |
            The number of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
            The transactions with amount = 0 are also taken into consideration.
          type: integer
          example: 20
        countIncomeTransactions:
          format: int32
          description: The total count of positive transactions in the report.
          type: integer
          example: 17
        countSpendingTransactions:
          format: int32
          description: The total count of  negative transactions in the report.
          type: integer
          example: 0
        totalIncome:
          type: number
          description: The total income.
          example: 150.75
        totalSpending:
          type: number
          description: The total spending.
          example: 0
        totalBalance:
          type: number
          description: The total balance.
          example: 150.75
        accountData:
          type: array
          description: Array of accounts-related data with the relevant transactions
            information.
          items:
            $ref: '#/components/schemas/AccountResourceTransactionResource'
        childReports:
          type: array
          description: Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
          items:
            $ref: '#/components/schemas/ChildReportsResource'

    IncomeReportResource:
      description: report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
        - spendingToIncomeRatio
      allOf:
        - $ref: '#/components/schemas/AllReportsResource'
        - type: object
          properties:
            totalDebt:
              type: number
              description: |
                The amount spent to cover debts.
              example: -200
            totalRent:
              type: number
              description: |
                The amount spent to pay rent.
            spendingToIncomeRatio:
              type: number
              description: |
                The relation of the amount of spending to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            debtToIncomeRatio:
              type: number
              description: |
                The relation of the amount spent to cover debts to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            rentToIncomeRatio:
              type: number
              description: |
                The relation of the amount spent to pay rent to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            completeMonths:
              type: array
              items:
                type: string
                description: |
                  List of complete (full) calendar months inside the report period under review in the format '<code>YYYY-MM</code>'.
                  The complete months list is based on transactions within the reporting time frame. The month with the first transaction determines the first month in this list.
                example: '2020-09'
            monthlyData:
              $ref: '#/components/schemas/IncomeReportMonthlyDataResource'

    RiskIndicatorsReportResource:
      description: risk indicators report format
      required:
        - id
        - caseId
        - chargebacks
        - debtCollection
        - gambling
        - seizure
        - creditLimit
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        chargebacks:
          $ref: '#/components/schemas/RiskReportsResource'
        debtCollection:
          $ref: '#/components/schemas/RiskReportsResource'
        gambling:
          $ref: '#/components/schemas/RiskReportsResource'
        seizure:
          $ref: '#/components/schemas/RiskReportsResource'
        creditLimit:
          $ref: '#/components/schemas/RiskReportsResource'

    RiskReportsResource:
      description: risk report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
      allOf:
        - $ref: '#/components/schemas/AllReportsResource'
        - type: object
          properties:
            completeMonths:
              type: array
              items:
                type: string
                description: |
                  List of complete (full) calendar months inside the report period under review in the format '<code>YYYY-MM</code>'.
                  The complete months list is based on transactions within the reporting time frame. The month with the first transaction determines the first month in this list.
                example: '2020-09'
            monthlyData:
              $ref: '#/components/schemas/RiskReportMonthlyDataResource'

    RiskReportMonthlyDataResource:
      description: Report data organized by months.
      properties:
        chargebacks:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        chargebacksPassive:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        chargebacksObjection:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        chargebacksObjectionPassive:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        chargebacksUndefined:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        seizure:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        seizurePassive:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        creditLimit:
          $ref: '#/components/schemas/CreditLimitMonthlyDataResource'
        gambling:
          $ref: '#/components/schemas/RiskMonthlyDataResource'
        debtCollection:
          $ref: '#/components/schemas/RiskMonthlyDataResource'

    CreditLimitMonthlyDataResource:
      description: |
        Credit limit data organized by months.
        Here we take into consideration the data from both complete and incomplete months inside the report period under review.
      required:
        - totalMonthlyAmounts
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/CreditLimitTotalMonthlyAmountsResource'
        minTotalMonthlyAmount:
          type: number
          description: The lowest amount of total risk transactions within the report period under review.
          example: 100.5
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount of total risk transactions within the report period under review.
          example: 100.5
        averageTotalMonthlyAmount:
          type: number
          description: Average amount of total risk transactions within the report period under review.
          example: 100.5
        medianTotalMonthlyAmount:
          type: number
          description: Median amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsAmount:
          type: number
          description: Amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsCount:
          type: integer
          description: Count of total risk transactions within the report period under review.
          example: 10

    RiskMonthlyDataResource:
      description: |
        Risk data organized by months.
        Here we take into consideration the data from both complete and incomplete months inside the report period under review.
        <br>
        Seizure transactions are split into SEIZURE_ACTIVE (actual seizure transactions of the account), SEIZURE_SALARY (salary transactions from which the amount was already seized; the extracted seized amount is used for the calculations) and SEIZURE_PASSIVE (seizure transactions for 3rd parties, like employees). 
        Monthly object "seizure" shows information about SEIZURE_ACTIVE and SEIZURE_SALARY transactions. Only the extracted seized amount (when is possible to extract) from a SEIZURE_SALARY transaction is taken into account for the calculations, not the actual salary.
        Monthly object "seizurePassive" shows information about SEIZURE_PASSIVE transactions.
        <br>
        Chargebacks transactions are split into CHARGEBACKS_ACTIVE (actual chargebacks transactions of the account), 
        CHARGEBACKS_PASSIVE (chargebacks transactions for 3rd parties, like customers), 
        CHARGEBACKS_OBJECTION_INCOME (an objection against the validity of a chargeback), 
        CHARGEBACKS_OBJECTION_SPENDING (if a company, an objection against the validity of a chargeback of the  3rd parties, like customers against the company), 
        CHARGEBACKS and CHARGEBACK_FEE (transactions that do not have enough information to be considered in the other categories).
      required:
        - totalMonthlyAmounts
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/RiskTotalMonthlyAmountsResource'
        minTotalMonthlyAmount:
          type: number
          description: The lowest amount of total risk transactions within the report period under review.
          example: 100.5
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount of total risk transactions within the report period under review.
          example: 100.5
        averageTotalMonthlyAmount:
          type: number
          description: Average amount of total risk transactions within the report period under review.
          example: 100.5
        medianTotalMonthlyAmount:
          type: number
          description: Median amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsAmount:
          type: number
          description: Amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsCount:
          type: integer
          description: Count of total risk transactions within the report period under review.
          example: 10

    CreditLimitTotalMonthlyAmountsResource:
      required:
        - month
        - totalAmount
        - transactionsCount
      type: object
      properties:
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        totalAmount:
          type: number
          description: Total amount of all credit limit related transactions received for the given month, for the type of report.
          example: 100.5
        totalOverdraftInterestAmount:
          type: number
          description: Total amount of all overdraft amounts for the given month.
          example: 100.5
        totalInterestAmount:
          type: number
          description: Total amount of all interest amounts for the given month.
          example: 100.5
        transactionsCount:
          type: integer
          description: The total count of all credit limit related transactions for the given month, for the type of report.
          example: 3
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    RiskTotalMonthlyAmountsResource:
      required:
        - month
        - totalAmount
        - transactionsCount
      type: object
      properties:
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        totalAmount:
          type: number
          description: Total amount of all risk transactions received for the given month, for the type of report.
          example: 100.5
        transactionsCount:
          type: integer
          description: The total count of all risk transactions for the given month, for the type of report.
          example: 3
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    IncomeReportMonthlyDataResource:
      description: Report data organized by months.
      properties:
        totalIncome:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        salary:
          $ref: '#/components/schemas/SalaryMonthlyDataResource'
        rebookings:
          $ref: '#/components/schemas/RebookingIncomeSpendingAnalysis'
        capitalIncome:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        rentalIncome:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        pensionAndRetirement:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        governmentAid:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        alimony:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        cashDeposit:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        childBenefit:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        studentGrant:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        gamblingIncome:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        operatingRevenue:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        taxRefund:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'
        loanDisbursement:
          $ref: '#/components/schemas/IncomeMonthlyDataResource'

    IncomeMonthlyDataResource:
      description: |
        Income data (including salary and other income sources) organized by months.
        Here we take into consideration the data from both complete and incomplete months inside the report period under review.
      required:
        - totalMonthlyAmounts
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/IncomeTotalMonthlyAmountsResource'
        minTotalMonthlyAmount:
          type: number
          description: The lowest amount of total monthly income (including salary and other income sources) within the report period under review.
          example: 100.5
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount of total monthly income (including salary and other income sources) within the report period under review.
          example: 100.5
        averageTotalMonthlyAmount:
          type: number
          description: Average amount of total monthly income (including salary and other income sources) within the report period under review.
          example: 100.5
        medianTotalMonthlyAmount:
          type: number
          description: Median amount of total monthly income (including salary and other income sources) within the report period under review.
          example: 100.5
        totalTransactionsAmount:
          type: number
          description: Amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsCount:
          type: integer
          description: Count of total risk transactions within the report period under review.
          example: 10

    SalaryMonthlyDataResource:
      description: |
        Salary data organized by months.
        Here we take into consideration the data from both complete and incomplete months inside the report period under review.
      required:
        - totalMonthlyAmounts
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/SalaryTotalMonthlyAmountsResource'
        minTotalMonthlyAmount:
          type: number
          description: The lowest amount of total monthly salary within the report period under review.
          example: 100.5
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount of total monthly salary within the report period under review.
          example: 100.5
        averageTotalMonthlyAmount:
          type: number
          description: Average amount of total monthly salary within the report period under review.
          example: 100.5
        medianTotalMonthlyAmount:
          type: number
          description: Median amount of total monthly salary within the report period under review.
          example: 100.5
        totalTransactionsAmount:
          type: number
          description: Amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsCount:
          type: integer
          description: Count of total risk transactions within the report period under review.
          example: 10
        firstDate:
          type: string
          description: Bank booking date of the first salary transaction within the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          example: '2021-07-10 00:00:00.000'
        lastDate:
          type: string
          description: Bank booking date of the last salary transaction within the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          example: '2021-08-10 00:00:00.000'

    IncomeTotalMonthlyAmountsResource:
      required:
        - month
        - totalAmount
        - transactionsCount
      type: object
      properties:
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        totalAmount:
          type: number
          description: Total amount of all income (including salary and other income sources) received for the given month.
          example: 100.5
        transactionsCount:
          type: integer
          description: The total count of all income transactions (including salary and other income sources) for the given month.
          example: 3
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    SalaryTotalMonthlyAmountsResource:
      required:
        - month
        - totalAmount
        - transactionsCount
      type: object
      properties:
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        totalAmount:
          type: number
          description: Total amount of salary received for the given month.
          example: 100.5
        transactionsCount:
          type: integer
          description: The total count of salary transactions for the given month.
          example: 3
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93
        employers:
          description: The list of employers, that paid salary in the given month.
          type: array
          items:
            type: string
            example: Bar Centrale

    SpendingTotalMonthlyAmountsResource:
      required:
        - month
        - totalAmount
        - transactionsCount
      type: object
      properties:
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        totalAmount:
          type: number
          description: Total amount of spending (for all the kinds of spending (<code>totalSpending</code>) or per particular category)for the given month.
          example: 100.5
        transactionsCount:
          type: integer
          description: The total count of spending transactions (for all the kinds of spending (<code>totalSpending</code>) or per particular category) for the given month.
          example: 3
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    RentReportResource:
      description: report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
      allOf:
        - $ref: '#/components/schemas/AllReportsResource'

    AccountResourceTransactionResource:
      required:
        - accountId
        - bankId
        - bankName
      type: object
      properties:
        bankName:
          type: string
          description: Name of the bank.
          example: Commerzbank
        bankId:
          type: string
          description: UUID of the bank.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          type: string
          description: IBAN of the bank account.
          example: "DE13700800000061110500"
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountHolderName:
          description: Account holder name
          type: string
          example: "Account Holder"
        accountHolderType:
          $ref: '#/components/schemas/AccountHolderTypeEnum'
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR
        transactions:
          type: array
          description: Array of transactions related to the chosen report type
          items:
            $ref: '#/components/schemas/TransactionResource'

    SpendingReportResource:
      description: report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
      allOf:
        - $ref: '#/components/schemas/AllReportsResource'
        - type: object
          properties:
            totalDebt:
              type: number
              description: |
                The amount spent to cover debts.
              example: -200
            totalRent:
              type: number
              description: |
                The amount spent to pay rent.
            spendingToIncomeRatio:
              type: number
              description: |
                The relation of the amount of spending to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            debtToIncomeRatio:
              type: number
              description: |
                The relation of the amount spent to cover debts to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            rentToIncomeRatio:
              type: number
              description: |
                The relation of the amount spent to pay rent to the amount of income inside the report period under review.
                The value of the field will be equal to -1 in case the ratio cannot be calculated (this can happen if <code>totalIncome</code> is equal to 0).
              example: 0.75
            completeMonths:
              type: array
              items:
                type: string
                description: |
                  List of complete (full) calendar months inside the report period under review in the format '<code>YYYY-MM</code>'.
                  The complete months list is based on transactions within the reporting time frame. The month with the first transaction determines the first month in this list.
                example: '2020-09'
            monthlyData:
              $ref: '#/components/schemas/SpendingReportMonthlyDataResource'

    RecurringReportResource:
      description: recurring report format
      type: object
      required:
        - id
        - creationDate
        - caseId
        - startDate
        - endDate
        - daysOfReport
        - totalTransactionsCount
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - countRecurrencies
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        transactionsStartDate:
          description: |
            Timestamp of the date, when user's first transaction took place in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          type: string
          format: date
        totalTransactionsCount:
          description: |
            The number of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          type: integer
          example: 20
        countIncomeTransactions:
          format: int32
          description: The total count of positive transactions in the report.
          type: integer
          example: 17
        countSpendingTransactions:
          format: int32
          description: The total count of  negative transactions in the report.
          type: integer
          example: 0
        totalIncome:
          type: number
          description: The total income.
          example: 150.75
        totalSpending:
          type: number
          description: The total spending.
          example: 0
        totalBalance:
          type: number
          description: The total balance.
          example: 150.75
        countRecurrencies:
          format: int32
          description: Number of all recurrencies over all groups.
          type: integer
          example: 1
        recurrencyData:
          description: Details of each recurring group
          type: array
          items:
            $ref: '#/components/schemas/RecurringDataResource'

    RecurringDataResource:
      description: Data of the recurring
      type: object
      required:
        - recurrenceGroupId
        - firstTransactionDate
        - lastTransactionDate
        - accountData
      properties:
        recurrenceGroupId:
          description: The group of the recurring
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        recurringGroupStatus:
          $ref: '#/components/schemas/RecurringGroupStatusEnum'
        frequency:
          $ref: '#/components/schemas/FrequencyTypeEnum'
        firstTransactionDate:
          description: Timestamp of when the first Transaction was created, in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        lastTransactionDate:
          description: Timestamp of when the last Transaction was created, in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        recurrenceCounterpartName:
          type: string
          description: Counterpart name
          example: Bar Centrale
        recurrenceCounterpartIban:
          type: string
          description: Counterpart IBAN
          example: DE13700800000061110500
        accountData:
          $ref: '#/components/schemas/AccountResource'
        details:
          $ref: '#/components/schemas/RecurringDetailDataResource'

    RecurringGroupStatusEnum:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - UNKNOWN

    FrequencyTypeEnum:
      type: string
      enum:
        - WEEKLY
        - BI_WEEKLY
        - MONTHLY
        - QUARTERLY
        - HALF_YEARLY
        - YEARLY

    AccountResource:
      description: the data of an account
      type: object
      properties:
        bankName:
          type: string
          description: Name of the bank.
          example: Commerzbank
        bankId:
          type: string
          description: UUID of the bank.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          type: string
          description: IBAN of the bank account.
          example: "DE13700800000061110500"
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountHolderName:
          description: Account holder name
          type: string
          example: "Account Holder"
        accountHolderType:
          $ref: '#/components/schemas/AccountHolderTypeEnum'
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR

    RecurringDetailDataResource:
      description: Details
      type: object
      required:
        - lastAmount
        - averageRecurrencyIncome
        - averageRecurrencySpending
        - totalRecurrencyIncome
        - totalRecurrencySpending
      properties:
        lastAmount:
          type: number
          description: The last amount.
          example: 100.5
        averageRecurrencyIncome:
          type: number
          description: The average recurring income amount.
          example: 100.5
        averageRecurrencySpending:
          type: number
          description: The average recurring spending amount.
          example: 100.5
        totalRecurrencyIncome:
          type: number
          description: Total recurring income amount.
          example: 100.5
        totalRecurrencySpending:
          type: number
          description: Total recurring spending amount.
          example: 100.5
        totalRecurrencyCount:
          format: int32
          description: Number of the transactions in this group.
          type: integer
          example: 0
        labels:
          type: array
          description: always includes the higher Level of Detail
          items:
            $ref: '#/components/schemas/LabelResource'
        history:
          description: History data
          type: array
          items:
            $ref: '#/components/schemas/RecurringDetailDataHistoryResource'

    RecurringDetailDataHistoryResource:
      description: History data
      type: object
      required:
        - transactionId
        - date
        - amount
      properties:
        transactionId:
          description: The UUID of the transaction
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        date:
          description: Booking date of the transaction
          type: string
          format: date
        amount:
          description: Amount of the transaction.
          type: number
          example: 99.99

    CrossCountryReportResource:
      description: Cross Country Transfer report format
      type: object
      required:
        - id
        - creationDate
        - caseId
        - startDate
        - endDate
        - daysOfReport
        - totalTransactionsCount
        - totalTransactionsSum
        - totalTransactionsAvg
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin)
          type: string
          format: date
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        transactionsStartDate:
          description: |
            Timestamp of the date, when user's first transaction took place in the report period under review in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin).
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          type: string
          format: date
        totalTransactionsCount:
          description: |
            The number of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
            The transactions with amount = 0 are also taken into consideration.
          type: integer
          example: 20
        totalTransactionsSum:
          type: number
          description: |
            The sum of the amount of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          example: 150.75
        totalTransactionsAvg:
          type: number
          description: |
            The average of the amount of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          example: 99.99
        crossCountryTransfers:
          type: array
          items:
            $ref: '#/components/schemas/CrossCountryTransferData'
        completeMonths:
          type: array
          items:
            type: string
            description: |
              List of complete (full) calendar months inside the report period under review in the format '<code>YYYY-MM</code>'.
              The complete months list is based on transactions within the reporting time frame. The month with the first transaction determines the first month in this list.
            example: '2020-09'

    CrossCountryTransferData:
      description: |
        The data of the cross country transfer are unique in the combination of originationCountry and destinationCountry. 
        Inside those objects, we find a total sum and average of all transactions between those 2 countries over the report period and a monthly view.
      type: object
      required:
        - originationCountry
        - destinationCountry
        - totalTransactionsCount
        - totalTransactionsSum
        - totalTransactionsAvg
        - monthlyTransfers
      properties:
        originationCountry:
          $ref: '#/components/schemas/CountryData'
        destinationCountry:
          $ref: '#/components/schemas/CountryData'
        frequency:
          $ref: '#/components/schemas/FrequencyTypeEnum'
        totalTransactionsCount:
          description: |
            The number of user's transactions between these countries by the period.
          type: integer
          example: 2
        totalTransactionsSum:
          type: number
          description: The sum of the amount of the user's transactions between these countries by the period.
          example: 150.75
        totalTransactionsAvg:
          type: number
          description: The average amount of the user's transactions between these countries by the period.
          example: 99.99
        monthlyTransfers:
          type: array
          items:
            $ref: '#/components/schemas/CrossCountryMonthlyTransferData'

    CountryData:
      description: The data of the countries
      type: object
      required:
        - code
      properties:
        code:
          description: The country code
          type: string
          example: 'DE'
        name:
          description: The name of the country
          type: string
          example: 'Germany'

    CrossCountryMonthlyTransferData:
      description: The monthly transfer data. The month with the first transaction determines the first month in this list.
      type: object
      required:
        - month
        - totalSum
        - average
        - transactionsCount
      properties:
        month:
          description: The month
          type: string
          example: '01-2023'
        totalSum:
          type: number
          description: The sum of this month.
          example: 150.75
        average:
          type: number
          description: The average of this month.
          example: 99.99
        transactionsCount:
          description: |
            The number of transactions in this month.
          type: integer
          example: 2

    RebookingIncomeSpendingAnalysis:
      description: |
        This part is only fully available if an extended analysis has been performed before.
        
        Transactions can be recognized as rebooking, but without the advanced analysis they represent only a fraction.

        To perform a full analysis, please use this endpoint:
        - `/extendedAnalyses/rebooking` for rebooking data
      type: object
      properties:
        extendedAnalysisPerformed:
          $ref: '#/components/schemas/ExtendedAnalysisPerformed'
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/RebookingAnalysisResults'

    ExtendedAnalysisPerformed:
      description: |
        This flag indicates whether the data can be fully shown by the extended analysis.
        
        <ul>
        <li><code>ANALYSED</code> - The extended analysis has been performed over all transactions</li>
        <li><code>PARTIALLY_ANALYSED</code> - An extended analysis was performed for the transactions, but has not covered all transactions inside this report</li>
        <li><code>NOT_ANALYSED</code> - No extended analysis was performed for the transactions.</li>
      type: string
      enum:
        - ANALYSED
        - PARTIALLY_ANALYSED
        - NOT_ANALYSED

    RebookingAnalysisResults:
      description: |
        This part is only fully available if an extended rebooking analysis was previously performed with `/extendedAnalyses/rebooking`.
        It shows the total sums of incoming and spending rebookings.
        
        Since the analysis of transfers is based on several mechanisms, it may happen that the value of incoming and outgoing transfers is different.
        
        This depends on whether certain characteristics for a transfer posting were found on a single transaction without the offsetting account being known, or whether transfer postings were found on synchronized accounts.
      type: object
      required:
        - totalAmount
      properties:
        totalAmount:
          description: |
            Represents an aggregation of the totals rebookings for the given report.
          type: number
          example: 200.0
        totalRebookingIncome:
          deprecated: true
          description: |
            Represents an aggregation of the totals of incoming rebookings - **only set for the income report**!
          type: number
          example: 200.0
        totalRebookingSpending:
          deprecated: true
          description: |
            Represents an aggregation of the totals of spending rebookings - **only set for the spending report**!.
          type: number
          example: 200.0
        month:
          type: string
          description: Month in the format '<code>YYYY-MM</code>' .
          example: '2020-01'
        transactionsCount:
          type: integer
          description: |
            The total count of all rebooking transactions for the given month.
          example: 1
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

    SpendingReportMonthlyDataResource:
      description: Report data organized by months.
      properties:
        totalSpending:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        rebookings:
          $ref: '#/components/schemas/RebookingIncomeSpendingAnalysis'
        rentAndLiving:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        insurance:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        bankAndCredit:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        loanAndInterest:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        savings:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        travel:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        tax:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        mobility:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        shopping:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        entertainment:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        healthAndWellness:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        children:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        personnelCosts:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        travelExpenses:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        billings:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'
        legal:
          $ref: '#/components/schemas/SpendingMonthlyDataResource'

    SpendingMonthlyDataResource:
      description: |
        Spending data (for all the kinds of spending - <code>totalSpending</code> - or per particular category) organized by months.
        Here we take into consideration the data from both complete and incomplete months inside the report period under review.
      required:
        - totalMonthlyAmounts
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/SpendingTotalMonthlyAmountsResource'
        minTotalMonthlyAmount:
          type: number
          description: The smallest amount of total monthly spending(for all the kinds of spending (<code>totalSpending</code>) or per particular category) within the report period under review. If a person spent 500 euro in June and 400 euro in July, then <code>minTotalMonthlyAmount</code> will be equal to 400 euro.
          example: 100.5
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount of total monthly spending (for all the kinds of spending (<code>totalSpending</code>) or per particular category) within the report period under review. If a person spent 500 euro in June and 400 euro in July, then <code>maxTotalMonthlyAmount</code> will be equal to 500 euro.
          example: 100.5
        averageTotalMonthlyAmount:
          type: number
          description: Average amount of total monthly spending (for all the kinds of spending (<code>totalSpending</code>) or per particular category) within the report period under review.
          example: 100.5
        medianTotalMonthlyAmount:
          type: number
          description: Median amount of total monthly spending (for all the kinds of spending (<code>totalSpending</code>) or per particular category) within the report period under review.
          example: 100.5
        totalTransactionsAmount:
          type: number
          description: Amount of total risk transactions within the report period under review.
          example: 100.5
        totalTransactionsCount:
          type: integer
          description: Count of total risk transactions within the report period under review.
          example: 10

    ContractsAccountResource:
      required:
        - accountId
        - bankId
        - bankName
      type: object
      properties:
        bankName:
          type: string
          description: Name of the bank.
          example: Commerzbank
        bankId:
          type: string
          description: UUID of the bank.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          type: string
          description: IBAN of the bank account.
          example: "DE13700800000061110500"
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountHolderName:
          description: Account holder name
          type: string
          example: "Account Holder"
        accountHolderType:
          $ref: '#/components/schemas/AccountHolderTypeEnum'
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR
        transactions:
          type: array
          description: Array of transactions related to the chosen report type
          items:
            $ref: '#/components/schemas/ContractsTransactionResource'

    BalancesReportResource:
      description: report format
      required:
        - id
        - creationDate
        - caseId
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
        - type
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        type:
          description: |
            Type of the report.
            <ul>
              <li><code>BALANCES</code> - this report type returns the data on account’s balances movement and structure during the specified in maxDaysForCase period.</li>
            </ul>
          enum:
            - BALANCES
          type: string
          example: BALANCES
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        countIncomeTransactions:
          format: int32
          description: The total count of positive transactions associated with the report’s income data.
          type: integer
          example: 17
        countSpendingTransactions:
          format: int32
          description: The total count of negative transactions associated with the report’s spending data.
          type: integer
          example: 0
        totalIncome:
          type: number
          description: The total income.
          example: 150.75
        totalSpending:
          type: number
          description: The total spending.
          example: 0
        totalBalance:
          type: number
          description: The total balance.
          example: 150.75
        accountData:
          type: array
          description: Array of accounts-related data.
          items:
            $ref: '#/components/schemas/AccountBalancesReportResource'
        childReports:
          type: array
          description: |
            Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
          items:
            $ref: '#/components/schemas/ChildReportsResource'

    AccountBalancesReportResource:
      required:
        - accountId
        - bankId
        - bankName
      type: object
      properties:
        bankName:
          type: string
          description: Name of the bank.
          example: Commerzbank
        bankId:
          type: string
          description: UUID of the bank.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          type: string
          description: IBAN of the bank account.
          example: "DE13700800000061110500"
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountHolderName:
          description: Account holder name
          type: string
          example: "Account Holder"
        accountHolderType:
          $ref: '#/components/schemas/AccountHolderTypeEnum'
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR
        balances:
          $ref: '#/components/schemas/TransactionBalancesReportResource'
        monthlyData:
          type: array
          items:
            $ref: '#/components/schemas/MonthlyDataBalancesReportResource'

    MonthlyDataBalancesReportResource:
      description: Monthly data about balances in the account
      required:
        - month
        - minMonthlyBalance
        - maxMonthlyBalance
        - averageMonthlyBalance
        - dailyBalancesCount
        - daysPositiveBalance
        - daysNegativeBalance
      type: object
      properties:
        month:
          type: string
          description: Month for which the values are calculated
          example: '2023-01'
        minMonthlyBalance:
          type: number
          description: The lowest balance available on the account within the month.
          example: 12345.67
        minMonthlyBalanceDate:
          type: string
          description: Date on which the given account had the lowest balance available within the month. Date format '<code>YYYY-MM-DD</code>'.
          example: '2020-01-01'
        maxMonthlyBalance:
          type: number
          description: The highest balance available on the account within the month.
          example: 12345.67
        maxMonthlyBalanceDate:
          type: string
          description: Date on which the given account had the highest balance available within the month. Date format '<code>YYYY-MM-DD</code>'.
          example: '2020-01-01'
        averageMonthlyBalance:
          type: number
          description: The average balance amount on the account within the month.
          example: 12345.67
        dailyBalancesCount:
          description: The number of daily balances which were retrieved for the given account within the month.
          type: integer
          example: 20
        daysPositiveBalance:
          description: The number day with a balance greater or equal zero within the month.
          type: integer
          example: 20
        daysNegativeBalance:
          description: The number day with a balance less than zero within the month.
          type: integer
          example: 11

    TransactionBalancesReportResource:
      description: Account balances
      required:
        - balance
        - averageBalance
        - minimumBalance
        - minimumBalanceDate
        - maximumBalance
        - maximumBalanceDate
        - spending
        - income
      type: object
      properties:
        balancesStartDate:
          description: Timestamp of the date, when user's first daily balance data was retrieved for the given account in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
          type: string
          example: '2020-01-01 00:00:00.000'
        totalBalancesDaysCount:
          description: The number of days, daily balances for which were retrieved for the given account in the report period under review.
          type: integer
          example: 20
        balance:
          type: number
          description: Latest account's balance
          example: 12345.67
        averageBalance:
          type: number
          description: The average balance amount during the period specified in maxDaysForCase.
          example: 12345.67
        minimumBalance:
          type: number
          description: The lowest balance available on the account within specified maxDaysForCase.
          example: 12345.67
        minimumBalanceDate:
          type: string
          description: Date on which the given account had the lowest balance available within the given period. Date format '<code>YYYY-MM-DD</code>'.
          example: '2020-01-01'
        maximumBalance:
          type: number
          description: The highest balance available on the account within the specified maxDaysForCase.
          example: 12345.67
        maximumBalanceDate:
          type: string
          description: Date on which the given account had the highest balance available within the given period. Date format '<code>YYYY-MM-DD</code>'.
          example: '2020-01-01'
        overdraftLimit:
          type: number
          description: The maximum allowed overdraft for the given account if provided by a bank.
          example: 12345.67
        spending:
          type: number
          description: Spending of the account within maxDaysForCase.
          example: 12345.67
        income:
          type: number
          description: Income of the account within maxDaysForCase.
          example: 12345.67

    CaseResource:
      description: Case
      required:
        - id
        - creationDate
        - dataSources
      type: object
      properties:
        id:
          description: UUID of the case.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        customerCaseRef:
          type: string
          description: >-
            Customer provided reference (-string) for the case.
          example: "Id-123456"
        maxDaysForCase:
          description: The time span of the data that is to be analysed for reports creation.
          type: integer
          example: 89
        datePeriodForCase:
          $ref: '#/components/schemas/CreateCaseDatePeriod'
        creationDate:
          description: |
            Creation date of the case, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        dataSources:
          description: A set of data sources stored in the given case file.
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserBankConnection'

    ContractsReportResource:
      description: Contracts report format
      required:
        - id
        - creationDate
        - caseId
        - type
        - countContracts
        - countIncomeTransactions
        - countSpendingTransactions
        - totalIncome
        - totalSpending
        - totalBalance
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        type:
          description: |
            Type of the report.
            Can be:
            <ul>
              <li><code>CONTRACTSINSURANCE</code> - this report type returns the insurance related contracts.</li>
              <li><code>CONTRACTSLOAN</code> - this report type returns the loans related contracts.</li>
              <li><code>CONTRACTSELECTRICITY</code> - this report type returns the electricity related contracts.</li>
              <li><code>CONTRACTSGAS</code> - this report type returns the gas related contracts.</li>
              <li><code>CONTRACTSTELECOMMUNICATION</code> - this report type returns the telecommunication related contracts.</li>
              <li><code>CONTRACTSLOANVALIDATOR</code> - this report type returns the loans validator related contracts.</li>
            </ul>
          enum:
            - CONTRACTSINSURANCE
            - CONTRACTSLOAN
            - CONTRACTSELECTRICITY
            - CONTRACTSGAS
            - CONTRACTSTELECOMMUNICATION
            - CONTRACTSLOANVALIDATOR
          type: string
          example: CONTRACTSINSURANCE
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        transactionsStartDate:
          description: |
            Timestamp of the date, when user's first transaction took place in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
          type: string
          example: '2020-01-01 00:00:00.000'
        totalTransactionsCount:
          description: |
            The number of user's transactions, that took place in the report period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
            The transactions with amount = 0 are also taken into consideration.
          type: integer
          example: 20
        countIncomeTransactions:
          format: int32
          description: The total count of positive transactions associated with the report’s income data.
          type: integer
          example: 0
        countSpendingTransactions:
          format: int32
          description: The total count of negative transactions associated with the report’s spending data.
          type: integer
          example: 1
        totalIncome:
          type: number
          description: The total income.
          example: 0
        totalSpending:
          type: number
          description: The total spending.
          example: -99.99
        totalBalance:
          type: number
          description: The total balance.
          example: -99.99
        countContracts:
          format: int32
          description: The total count of all detected contracts
          type: integer
          example: 1
        contractsData:
          type: array
          description: Array of detected contracts information
          items:
            $ref: '#/components/schemas/ContractsDataResource'
        accountData:
          type: array
          description: Array of accounts-related data with the relevant transactions
            information.
          items:
            $ref: '#/components/schemas/ContractsAccountResource'
        creditCheck:
          type: array
          description: Array of a credit rating check
          items:
            $ref: '#/components/schemas/CreditRatingResult'
        childReports:
          type: array
          description: |
            Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
          items:
            $ref: '#/components/schemas/ChildReportsResource'

    ContractsDataResource:
      description: Contracts Data
      required:
        - contractSource
      properties:
        contractId:
          type: string
          description: UUID of the contract
          example: 4e760145-2e65-4242-ac33-488943528c93
        contractType:
          type: string
          description: Type of the contract
          example: LIFEINSURANCE
          enum:
            - DISABILITYINSURANCE
            - LIABILITYINSURANCE
            - LIFEINSURANCE
            - CAREINSURANCE
            - CARINSURANCE
            - LEGALINSURANCE
            - ACCIDENTINSURANCE
            - TRAVELINSURANCE
            - HEALTHINSURANCE
            - SUPPLEMENTARYHEALTHINSURANCE
            - HOMECONTENTINSURANCE
            - HOMEINSURANCE
            - PRIVATEPENSIONINSURANCE
            - ENDOWMENTINSURANCE
            - CARLOAN
            - REALESTATELOAN
            - LOANANDINTEREST
            - ELECTRICITY
            - GAS
            - PETINSURANCE
            - PETLIABILITYINSURANCE
            - PETHEALTHINSURANCE
            - SUPPLEMENTARYDENTALINSURANCE
            - TELECOMMUNICATION
            - INSURANCE
            - SUBSIDIZEDLOAN
            - PUBLIC_HEALTH_INSURANCE
            - PRIVATE_HEALTH_INSURANCE
            - LANDLINE
            - MOBILE
            - STUDENTHEALTHINSURANCE
            - CARLEASING
            - CAR_FINANCING
        contractSource:
          $ref: '#/components/schemas/ContractSourceEnum'
        matchedPeriod:
          $ref: '#/components/schemas/ContractPeriodEnum'
        matchedContractStatus:
          $ref: '#/components/schemas/ContractStatusEnum'
        newContract:
          type: boolean
          description: True if it is the first report, where the given contract is present
          example: true
        contractStatus:
          $ref: '#/components/schemas/ContractStatusEnum'
        companyName:
          type: string
          description: The name of the company with which the contract was concluded
          example: Allianz Lebensversicherung AG
        customerNumber:
          type: string
          description: Customer number of the contract
          example: 45kjH32010
        contractNumber:
          type: string
          description: Number of the detected contract
          example: ske3802kdj3ud
        companyDetails:
          $ref: '#/components/schemas/CompanyDetails'
        billing:
          $ref: '#/components/schemas/Billing'
        schufaContractDetails:
          $ref: '#/components/schemas/SchufaContractDetailsResource'

    Billing:
      description: Billing history of the contract
      type: object
      required:
        - averageContractIncome
        - averageContractSpending
        - totalContractIncome
        - totalContractSpending
        - totalBillingsCount
      properties:
        period:
          $ref: '#/components/schemas/ContractPeriodEnum'
        firstBillingDate:
          type: string
          description: |
            First billing date detected for this contract within the specified maxDaysForCase period in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: "2020-01-01 00:00:00.000"
        lastBillingDate:
          type: string
          description: |
            Last billing date detected for this contract within the specified maxDaysForCase period in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: "2020-01-01 00:00:00.000"
        lastBillingAmount:
          type: number
          description: |
            The amount of last billing detected for this contract within the specified maxDaysForCase period.
          example: -99.99
        averageContractIncome:
          type: number
          description: Average amount obtained for the contract within the specified maxDaysForCase period
          example: 0
        averageContractSpending:
          type: number
          description: Average amount paid for the contract within the specified maxDaysForCase period
          example: -99.99
        totalContractIncome:
          type: number
          description: Total amount obtained for the contract within the specified maxDaysForCase period
          example: 0
        totalContractSpending:
          type: number
          description: Total amount paid for the contract within the specified maxDaysForCase period
          example: -99.99
        totalBillingsCount:
          type: integer
          description: Total count of billings for the contract within the specified maxDaysForCase period
          example: 1
        history:
          type: array
          description: Billing history containing amounts billed and dates of billing
          items:
            $ref: '#/components/schemas/ContractsBillingHistoryResource'

    CompanyDetails:
      description: Data of the company with which the contract was concluded
      type: object
      required:
        - companyId
      properties:
        companyId:
          type: string
          description: UUID of the company
          example: 4e760145-2e65-4242-ac33-488943528c93
        addressCity:
          type: string
          description: City where the company is located
          example: Stuttgart
        addressCountry:
          type: string
          description: Country where the company is located
          example: Deutschland
        addressZip:
          type: string
          description: Zip code of the company's location
          example: "70178"
        addressStreetName:
          type: string
          description: Name of the street where the company is located
          example: Reinsburgerstraße
        addressStreetNumber:
          type: string
          description: Number of the street where the company is located
          example: 19
        contactMail:
          type: string
          description: Contact mail address of the company
          example: info@allianz.de
        contactPhone:
          type: string
          description: Phone number of the company
          example: +49 89 3800-0

    ContractStatusEnum:
      type: string
      description: |
        Status of the contract.
        Can be:
        <ul>
        <li><code>ACTIVE</code> - the contract is active </li> 
        <li><code>INACTIVE</code> - the contract is inactive.</li> 
        <li><code>UNKNOWN</code> - the status cannot be defined due to absence of the sufficient amount of data</li>
        </ul>
      example: ACTIVE
      enum:
        - ACTIVE
        - INACTIVE
        - UNKNOWN

    SchufaContractDetailsResource:
      description: Additional details for the contract
      type: object
      properties:
        schufaType:
          description: Characteristic type
          type: string
          example: "KR"
        description:
          description: Description of the contract
          type: string
          example: "Credit"
        date:
          type: string
          description: |
            Contract date in the format '<code>YYYY-MM-DD</code>'.
            Depending on the feature code, the date can represent various facts relating to the contract's subject matter, e.g. the date of the contract or the date of the first installment (e.g. in the case of loans).
            In the case of credit rates, the current date is often specified here.
            Sometimes the field may return the data, like <code>UNBEFRISTET</code> for unfixed contracts, thus making the information in this field not reliable.
          example: "2020-01-01"
        amount:
          type: number
          description: >-
            Amount, paid for the contract.
          example: 200
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR

        numberOfRates:
          type: integer
          description: >-
            Number of installments, that have been agreed in terms of the contract.
          example: 36
        typeOfRate:
          $ref: '#/components/schemas/ContractPeriodEnum'
        accountNumber:
          type: string
          maxLength: 25
          description: The account number, which is used for the contract.
          example: "1234567890"
        contractStatus:
          $ref: '#/components/schemas/ContractStatusEnum'

    ContractPeriodEnum:
      type: string
      description: |
        Period of the contract.
        The period is not provided in case the report returns fewer than two transactions for the defined contract within specified maxDaysForCase.
      enum:
        - WEEKLY
        - BI-WEEKLY
        - MONTHLY
        - QUARTERLY
        - HALF-YEARLY
        - YEARLY
      example: MONTHLY

    CreditRatingResult:
      description: >-
        Result of a credit rating check.
      type: object
      properties:
        schufaId:
          description: >-
            Internal Schufa identifier of a user.
          type: string
          maxLength: 10
        schufaReference:
          type: string
          description: >-
            Identifier of the associated business transaction at SCHUFA. It is transferred from Schufa to the participant of the credit report.
          example: "32ae1dc124h153d4gh53"
        participantReference:
          type: string
          description: >-
            Identifier, used for uniquely assigning the received responses to their requests.
          example: "b7adf24e-10b6-4055-95eb-419587a8126d"
          maxLength: 80
        featureCode:
          description: |
            Feature code as used for the request to the SCHUFA Credit Check Service.
          type: string
          minLength: 2
          maxLength: 2
          example: "KH"
          default: "KH"
        consumer:
          $ref: '#/components/schemas/Consumer'
        scoreCheck:
          description: >-
            Credit check data.
          type: array
          items:
            $ref: '#/components/schemas/ScoreCheck'
        schufaData:
          description: Schufa data.
          type: array
          items:
            $ref: '#/components/schemas/Contracts'

    ContractsBillingHistoryResource:
      description: Amounts and Dates billed for the contract
      type: object
      required:
        - amount
        - date
      properties:
        date:
          type: string
          description: Billing date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          example: "2020-01-01 00:00:00.000"
        amount:
          type: number
          description: Billed amount
          example: -99.99
        transactionId:
          description: The UUID of the transaction
          type: string

    ContractSourceEnum:
      description: |
        Type of the contract source.
        Can be:
        <ul>
          <li><code>BANKING</code></li>
          <li><code>SCHUFA </code></li>
          <li><code>BANKING_AND_SCHUFA</code></li>
        </ul>
      type: string
      example: BANKING_AND_SCHUFA
      enum:
        - BANKING
        - SCHUFA
        - BANKING_AND_SCHUFA
      default: BANKING

    CreateDacLoanParams:
      required:
        - dataSourceIds
      description: |-
        Request body for creating the dac loan report.
      type: object
      properties:
        customerCaseRef:
          type: string
          maxLength: 256
          description: >-
            Customer defined reference (-string) for the case in the DAC, e.g. session ID. 
            
            > note: it this recommended to add/append the finAPI process-token to this reference if finAPI's Process Controller is used.
          example: "Id-123456"
        dataSourceIds:
          uniqueItems: true
          type: array
          description: Array of data sources to be stored in the being created case file.
          example:
            - 4e760145-2e65-4242-ac33-488943528c93
            - 4e760145-2e65-4242-ac33-488943528c93
          items:
            type: string
          minItems: 1
        maxDaysForCase:
          description: |
            The time span of the data that is to be analysed for reports creation.
            If not specified, the default value is set at 89 days.
            Maximum allowed value is 3650 days.
            
            *This cannot be combined with `datePeriodForCase`.*
          type: integer
          example: 89
          minimum: 1
          maximum: 3650
        datePeriodForCase:
          $ref: '#/components/schemas/CreateCaseDatePeriod'
        withTransactions:
          description: |
            <code>withTransactions</code> parameter defines whether the reports inside the case file should return transactions data by default or not.
            If not specified, the default value of the parameter is set to true.
          type: boolean
          example: true
          default: true
        businessAnalysisType:
          $ref: '#/components/schemas/BusinessAnalysisType'

    CreateCaseParams:
      required:
        - dataSourceIds
      description: Request body for creating a case
      type: object
      properties:
        customerCaseRef:
          type: string
          maxLength: 256
          description: >-
            Customer defined reference (-string) for the case, e.g. session ID. 
            
            > note: it this recommended to add/append the finAPI process-token to this reference if finAPI's Process Controller is used.
          example: "Id-123456"
        dataSourceIds:
          uniqueItems: true
          type: array
          description: Array of data sources to be stored in the being created case file.
          example:
            - 4e760145-2e65-4242-ac33-488943528c93
            - 4e760145-2e65-4242-ac33-488943528c93
          items:
            type: string
          minItems: 1
        maxDaysForCase:
          description: |
            The time span of the data that is to be analysed for reports creation.
            If not specified, the default value is set at 89 days.
            Maximum allowed value is 3650 days.
            
            *This cannot be combined with `datePeriodForCase`.*
          type: integer
          example: 89
          minimum: 1
          maximum: 3650
        datePeriodForCase:
          $ref: '#/components/schemas/CreateCaseDatePeriod'
        withTransactions:
          description: |
            <code>withTransactions</code> parameter defines whether the reports inside the case file should return transactions data by default or not.
            If not specified, the default value of the parameter is set to true.
          type: boolean
          example: true
          default: true
        businessAnalysisType:
          $ref: '#/components/schemas/BusinessAnalysisType'

    BusinessAnalysisType:
      type: string
      enum:
        - B2B
        - B2C
      default: B2C
      example: B2C
      description: |
        <ul>
          <li><code>B2C</code></li>: for consumer account(s), the following reports are created: <code>INCOME</code>, <code>SPENDING</code>, <code>RENTANDLIVING</code>, <code>CHARGEBACKS</code>, <code>DEBTCOLLECTION</code>, <code>GAMBLING</code>, <code>SEIZURE</code>
          <li><code>B2B</code></li>: for business account(s), the following reports are created: <code>INCOME</code>, <code>SPENDING</code>, <code>BALANCES</code>, <code>CHARGEBACKS</code>, <code>DEBTCOLLECTION</code>, <code>SEIZURE</code>
        </ul>


    CreateCaseDatePeriod:
      description: |
        A period for which the reports should be valid.
        
        *Hint: This cannot be combined with `maxDaysForCase`.*
        
        *Hint: If a period is defined, no continuous reports can't be created.*
      required:
        - dateFrom
        - dateTo
      properties:
        dateFrom:
          type: string
          description: |
            Start date for the report in the format '<code>YYYY-MM-DD</code>'.
          example: "2020-01-01"
        dateTo:
          type: string
          description: |
            End date for the report in the format '<code>YYYY-MM-DD</code>'.
          example: "2020-02-01"

    CreateBalancesCheckParams:
      required:
        - dataSourceId
        - checkAmount
      description: Request body for creating a balances check
      type: object
      properties:
        dataSourceId:
          type: string
          format: uuid
          description: UUID of the data source or account, against which the balances check should be performed.
          example: 4e760145-2e65-4242-ac33-488943528c93
        checkAmount:
          description: |
            Amount, against which the latest available account balance should be checked.
          type: number
          example: 100
          exclusiveMinimum: true
          minimum: 0
        includeOverdraft:
          type: boolean
          description: |
            Indicates whether the overdraft limit should be added to the balance amount for conducting the check.
            If both overdraft limit and account's balance should be taken into account, <code>includeOverdraft</code> should be set to <code>true</code>.
            If only account's latest balance should be taken into account, <code>includeOverdraft</code> should be set to <code>false</code>.
            In case the parameter is not specified, it will be automatically set to <code>false</code>.
          example: false
          default: false

    CreateChildrenCheckParams:
      required:
        - dataSourceId
      description: Request body for creating a children check
      type: object
      properties:
        dataSourceId:
          type: string
          format: uuid
          description: UUID of the data source or account, against which the children check should be performed.
          example: 4e760145-2e65-4242-ac33-488943528c93

    CreateAccountHolderTypeCheckParams:
      required:
        - dataSourceId
      description: Request body for creating an account holder type check
      type: object
      properties:
        dataSourceId:
          type: string
          format: uuid
          description: UUID of the data source or account, against which the account holder type check should be performed.
          example: 4e760145-2e65-4242-ac33-488943528c93

    CreateTopListCheckParams:
      required:
        - dataSourceId
        - groupType
      description: Request body for creating a top list check
      type: object
      properties:
        dataSourceId:
          type: string
          format: uuid
          description: UUID of the data source or account, against which the top list check should be performed.
          example: 4e760145-2e65-4242-ac33-488943528c93
        labels:
          type: array
          description: always includes the higher Level of Detail
          items:
            $ref: '#/components/schemas/LabelResource'
        groupType:
          type: string
          enum:
            - TOP_COUNTERPARTY_SUM
            - TOP_TRANSACTIONS_AMOUNT
            - TOP_TRANSACTION_COUNT
          description: |
            Defines the grouping of the top list. 
            Possible values:
            <ul>
            <li><code>TOP_COUNTERPARTY_SUM</code> - Grouping and sum by IBAN to determine who has the most revenue </li>
            <li><code>TOP_TRANSACTIONS_AMOUNT</code> - Top n transactions, sorted by amount </li>
            <li><code>TOP_TRANSACTION_COUNT</code> - Group by IBAN, sum count of transactions (how has the highest frequency of transactions) </li>
            </ul>
          example: TOP_COUNTERPARTY_SUM
        topCount:
          type: integer
          description: Defines how many entries should be returned (top 10, top 5...). If not specified, the default value is 10
          default: 10
          maximum: 25
          example: 10
        withTransactions:
          description: |
            <code>withTransactions</code> parameter defines whether the response should return transaction IDs by default or not.
            If not specified, the default value of the parameter is set to false.
          type: boolean
          example: true
          default: false
        dateStart:
          type: string
          format: date
          description: |
            (Included) start date for the check, format '<code>YYYY-MM-DD</code>'.

            If not present, the start date is set to 10 years in the past.
        dateEnd:
          type: string
          format: date
          description: |
            (Included) end date for the check, format '<code>YYYY-MM-DD</code>'.

            If not present, the end date is today.
        direction:
          type: string
          enum:
            - ALL
            - INCOME
            - SPENDING
          default: ALL
          description: |
            Used to define the direction (e.g INCOME for all customers and SPENDING for all vendors). Default is ALL and Order is DESC.
            Possible values:
            <ul>
            <li><code>ALL</code> - Both INCOME and SPENDING transactions are taken into account for the top list check </li>
            <li><code>INCOME</code> - Only INCOME transactions are taken into account for the top list check </li>
            <li><code>SPENDING</code> - Only SPENDING transactions are taken into account for the top list check </li>
            </ul>  


    CreateAccountStatementSheetParams:
      required:
        - accountId
      description: Parameters for filtering the data in the resulted pdf
      type: object
      properties:
        accountId:
          type: string
          format: uuid
          description: UUID of the account - restricts the endpoint to one PDF per account
          example: 4e760145-2e65-4242-ac33-488943528c93
        labelGroup:
          description: List of the label group(s) (including sub-labels) - restricts the transactions' list to the ones having these labels and sub-labels
          type: array
          items:
            $ref: '#/components/schemas/LabelResource'
        dateStart:
          type: string
          example: "2000-01-01"
          description: Start date of the transactions to be taken into consideration for the pdf. Set default to 89 days in the past
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        dateEnd:
          type: string
          example: "2000-01-01"
          description: End date of the transactions to be taken into consideration for the pdf. Set default to current date
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'

    CreateReportParams:
      description: Parameters for report creation
      type: object
      required:
        - reportType
      properties:
        reportType:
          $ref: '#/components/schemas/ReportTypeEnum'
        continuousReport:
          $ref: '#/components/schemas/ContinuousReport'

    ContinuousReport:
      description: Parameters for continuous report
      type: object
      required:
        - parentReportId
      properties:
        parentReportId:
          description: UUID of the parent report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        endDate:
          type: string
          description: |
            End date for the continuous report in the format '<code>YYYY-MM-DD</code>'.
            Default (if not present) is <code>today</code> / <code>now</code>
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
          example: "2022-02-01"

    SynchronizeBankConnectionParams:
      description: Synchronize bank connection data sources parameters
      type: object
      properties:
        ibans:
          type: array
          description: Array of accounts' IBANs
          items:
            type: string
            description: IBAN of the account.
            example: DE89370400440532013000
        finapiAccessAccountIds:
          type: array
          description: Array of accounts' identifiers on finAPI Access side.
          items:
            type: integer
            description: Identifiers of the accounts on finAPI Access side.
            example: 200833
        callbackUrl:
          type: string
          description: URL to which a notification about the either updated or failed datasource will be sent.
          format: uri
          example: https://domain.tld
        callbackHandle:
          $ref: '#/components/schemas/callbackHandle'

    DataSources:
      description: Available data sources for the user
      type: object
      properties:
        bankConnections:
          description: Array of imported for the authorized user bank connections.
          type: array
          items:
            $ref: '#/components/schemas/DataSourceBank'
        creditChecks:
          description: Array of imported for the authorized user Credit Rating Data Sources.
          type: array
          items:
            $ref: '#/components/schemas/DataSourceSchufaCreditCheck'

    DataSourceAccount:
      description: Available accounts for the user
      type: object
      required:
        - accountId
        - creationDate
      properties:
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: |
            Creation date of the account, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          type: string
          example: '2020-01-01 00:00:00.000'
        lastUpdate:
          description: |
            Date of the last update of the account, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          type: string
          example: '2020-01-01 00:00:00.000'
        externalId:
          description: External ID of the account. For Banks imported from finAPI Access, this is the Access <code>accountId</code>.
          type: string
          example: 123456
        iban:
          description: IBAN of the account
          type: string
          example: DE13700800000061110500
        accountHolderName:
          type: string
          description: |
            Contains the account holder name.
          example: John Doe
          maxLength: 128
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        status:
          description: |
            Current status of the account.
            Can be:
            <ul>
              <li><code>UPDATED</code></li>
              <li><code>UPDATED_FIXED</code></li>
              <li><code>DOWNLOAD_IN_PROGRESS</code></li>
              <li><code>DOWNLOAD_FAILED</code></li>
              <li><code>DEPRECATED</code></li>
            </ul>
          type: string
          example: UPDATED
          enum:
            - UPDATED
            - UPDATED_FIXED
            - DOWNLOAD_IN_PROGRESS
            - DOWNLOAD_FAILED
            - DEPRECATED

    GenericReport:
      description: Returns the needed report
      type: object
      properties:
        riskIndicators:
          $ref: '#/components/schemas/RiskIndicatorsReportResource'
        chargebacks:
          $ref: '#/components/schemas/RiskReportsResource'
        debtCollection:
          $ref: '#/components/schemas/RiskReportsResource'
        gambling:
          $ref: '#/components/schemas/RiskReportsResource'
        seizure:
          $ref: '#/components/schemas/RiskReportsResource'
        creditLimit:
          $ref: '#/components/schemas/RiskReportsResource'
        maximumAvailableFunds:
          $ref: '#/components/schemas/MaxAvailableFundsReportResource'
        income:
          $ref: '#/components/schemas/IncomeReportResource'
        spending:
          $ref: '#/components/schemas/SpendingReportResource'
        rentAndLiving:
          $ref: '#/components/schemas/RentReportResource'
        insurance:
          $ref: '#/components/schemas/AllReportsResource'
        b2bBalances:
          $ref: '#/components/schemas/BalancesReportResource'
        balances:
          $ref: '#/components/schemas/BalancesReportResource'
        contractsInsurance:
          $ref: '#/components/schemas/ContractsReportResource'
        contractsLoan:
          $ref: '#/components/schemas/ContractsReportResource'
        contractsElectricity:
          $ref: '#/components/schemas/ContractsReportResource'
        contractsTelecommunication:
          $ref: '#/components/schemas/ContractsReportResource'
        contractsGas:
          $ref: '#/components/schemas/ContractsReportResource'
        contractsLoanValidator:
          $ref: '#/components/schemas/ContractsReportResource'
        schufaCreditCheck:
          $ref: '#/components/schemas/SchufaCreditCheckReportResource'
        recurringTransactions:
          $ref: '#/components/schemas/RecurringReportResource'
        crossCountry:
          $ref: '#/components/schemas/CrossCountryReportResource'

    DataSourceBank:
      description: Available banks for the user
      type: object
      required:
        - dataSourceId
        - creationDate
      properties:
        dataSourceId:
          description: UUID of the data source.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: |
            Creation date of the data source, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        lastUpdate:
          description: |
            Date of the last update of the data source, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        externalId:
          description: External ID of the datasource. For Banks imported from finAPI Access, this is the Access <code>bankConnectionId</code>.
          type: string
          example: 123456
        bic:
          description: BIC of the bank
          type: string
          example: COBADEFFXXX
        bankName:
          description: Name of the bank
          type: string
          example: Commerzbank
        bankStatus:
          description: Status of the connection to the bank
          type: string
          example: IN_PROGRESS
          enum:
            - FAILED
            - IN_PROGRESS
            - SUCCESSFUL
        updateRequired:
          description: |-
            the bank's consent for account access has expired, the user has to update bank connection in finAPI Access, 
            otherwise the next datasource synchronization will fail.
          type: boolean
          example: false
        accounts:
          description: Array of accounts imported via bank connection
          type: array
          items:
            $ref: '#/components/schemas/DataSourceAccount'

    DataSourceSchufaCreditCheck:
      description: Available credit rating checks for the user
      type: object
      required:
        - dataSourceId
      properties:
        dataSourceId:
          description: UUID of the data source.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: |
            Creation date of the data source, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        agency:
          description: Name of the agency, that provides the data.
          type: string
          example: SCHUFA
          enum:
            - SCHUFA
        firstName:
          description: Consumer's first name
          type: string
          example: Max
        lastName:
          description: Consumer's last name
          type: string
          example: Mustermann

    ErrorMessageUnauthorized:
      description: Unauthorized
      type: object
      properties:
        error:
          description: Error code
          type: string
          example: "unauthorized"
          nullable: true
        error_description:
          description: Error message
          type: string
          example: "An Authentication object was not found in the SecurityContext"
          nullable: true

    ErrorMessage:
      description: >-
        Response type when a service call was not successful. Contains detail
        about the error(s) that occurred.
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Error code
          type: string
          example: UNEXPECTED_ERROR
        message:
          description: Error message
          type: string
          example: An unexpected error occurred
        date:
          description: >-
            Server date of when the error(s) occurred, in the format YYYY-MM-DD HH:MM:SS.SSS
          type: string
          example: '2020-01-01 00:00:00.000'
          nullable: true
          deprecated: true
        datetime:
          description: >-
            Server date of when the error(s) occurred.
          type: string
          format: date-time
          example: '2023-07-19T16:58:15.346135+02:00'
          nullable: true
        requestId:
          description: UUID of the request
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
          nullable: true
        endpoint:
          description: The service endpoint that was called
          type: string
          example: 'https://finapi.localhost'
          nullable: true

    GenericReportResult:
      description: |
        Returns one of the requested report types.
        
        > Note: * 'b2bBalances' report is deprecated and will be replaced with 'balances' report.*
      type: object
      properties:
        reports:
          $ref: '#/components/schemas/GenericReport'
        triggers:
          deprecated: true
          uniqueItems: true
          type: array
          description: Array of triggers' UUIDs.
          example:
            - 4e760145-2e65-4242-ac33-488943528c93
            - 4e760145-2e65-4242-ac33-488943528c93
          items:
            type: string

    ReportTypeEnum:
      type: string
      description: |
        Type of the report.
        Can be:
        <ul>
          <li><code>RISK_INDICATORS</code> - this report type returns the list of transactions related to risk: chargebacks, debt recovering, gambling activities, seizure, overdraft interest</li>
          <li><code>CHARGEBACKS</code> - this report type returns the list of transactions related to returned charges</li>
          <li><code>DEBTCOLLECTION</code> - this report type returns the list of transactions related to debt recovering</li>
          <li><code>GAMBLING</code> - this report type returns the list of transactions related to gaming and gambling activities</li>
          <li><code>SEIZURE</code> - this report type returns the list of transactions related to seizure</li>
          <li><code>CREDIT_LIMIT</code> - this report type returns the list of transactions related to overdraft interest</li>
          <li><code>INCOME</code> - this report type returns the list of cash inflow-related transactions and gives an overview of the income/spending total balance</li>
          <li><code>RENTANDLIVING</code> - this report type returns the list of transactions related to rent & living-connected expenditures</li>
          <li><code>INSURANCE</code> - this report type returns the list of transactions related to insurance-connected expenditures</li>
          <li><code>SPENDING</code> - this report type returns the list of transactions related to spending</li>
          <li><code>CONTRACTSINSURANCE</code> - this report type returns the insurance related contracts.</li>
          <li><code>CONTRACTSLOAN</code> - this report type returns the loans related contracts.</li>
          <li><code>CONTRACTSELECTRICITY</code> - this report type returns the electricity related contracts.</li>
          <li><code>CONTRACTSGAS</code> - this report type returns the gas related contracts.</li>
          <li><code>CONTRACTSTELECOMMUNICATION</code> - this report type returns the telecommunication related contracts.</li>
          <li><code>MAXIMUMAVAILABLEFUNDS</code> - this report type returns the maximum amount of funds available (MAF) and the date on which they were available on an account (MAF date).</li>
          <li><code>BALANCES</code> - this report type returns the data on account’s balances movement and structure during the specified in maxDaysForCase period.</li>
          <li><code>CONTRACTSLOANVALIDATOR</code> - this report type returns the loans validator related contracts.</li>
          <li><code>RECURRING_TRANSACTIONS</code> - this report type returns the details for recurring transactions.</li>
          <li><code>CROSS_COUNTRY</code> - this report type returns the details for cross country tranfer transactions.</li>
        </ul>
      enum:
        - RISK_INDICATORS
        - CHARGEBACKS
        - DEBTCOLLECTION
        - GAMBLING
        - SEIZURE
        - CREDIT_LIMIT
        - INCOME
        - RENTANDLIVING
        - INSURANCE
        - SPENDING
        - CONTRACTSINSURANCE
        - CONTRACTSLOAN
        - CONTRACTSELECTRICITY
        - CONTRACTSGAS
        - CONTRACTSTELECOMMUNICATION
        - MAXIMUMAVAILABLEFUNDS
        - BALANCES
        - CONTRACTSLOANVALIDATOR
        - RECURRING_TRANSACTIONS
        - CROSS_COUNTRY
      example: INSURANCE

    LabelResource:
      type: string
      enum:
        - RENTANDLIVING
        - CHARGEBACKS
        - CHARGEBACK_FEE
        - CHARGEBACKS_OBJECTION_INCOME
        - CHARGEBACKS_OBJECTION_SPENDING
        - CHARGEBACKS_ACTIVE
        - CHARGEBACKS_PASSIVE
        - DEBTCOLLECTION
        - GAMBLING
        - SEIZURE
        - SEIZURE_ACTIVE
        - SEIZURE_PASSIVE
        - SEIZURE_SALARY
        - OVERDRAFT_INTEREST
        - INTEREST
        - SALARY
        - INCOME
        - CHILDBENEFIT
        - CAPITALINCOME
        - RENTALINCOME
        - PENSIONANDRETIREMENT
        - GOVERNMENTAID
        - ALIMONY
        - CASHDEPOSIT
        - UTILITIES
        - REALESTATELOAN
        - DOMESTICSERVICES
        - RENT
        - COMMERCIAL_RENT
        - DEVICE_RENT
        - RESIDENTIAL_RENT
        - ELECTRICITY
        - GAS
        - TELECOMMUNICATION
        - DISABILITYINSURANCE
        - LIABILITYINSURANCE
        - LIFEINSURANCE
        - CAREINSURANCE
        - CARINSURANCE
        - LEGALINSURANCE
        - ACCIDENTINSURANCE
        - TRAVELINSURANCE
        - HEALTHINSURANCE
        - SUPPLEMENTARYHEALTHINSURANCE
        - HOMECONTENTINSURANCE
        - HOMEINSURANCE
        - PRIVATEPENSIONINSURANCE
        - ENDOWMENTINSURANCE
        - PETLIABILITYINSURANCE
        - PETHEALTHINSURANCE
        - PETINSURANCE
        - BANKCHARGES
        - ACCOUNTTRANSFER
        - LOANANDINTEREST
        - CREDITCARD
        - CASHWITHDRAWAL
        - BUILDINGSAVINGS
        - INVESTMENTINSECURITIES
        - DEPOSIT
        - ARTICLESOFVALUEANDOTHERS
        - SAVINGS
        - INSURANCE
        - BANKANDCREDIT
        - PHARMACEUTICALS
        - MEDICAL_SPECIALIST
        - HOSPITAL
        - HEALTHANDWELLNESS
        - WELLNESSANDBEAUTY
        - ACCOMMODATION
        - PACKAGETRIP
        - TRAVEL
        - DRUGSTORE
        - FOOD
        - PET
        - CARLOAN
        - PAYMENTSOFPROFESSIONALASSOCIATIONS
        - PROFESSIONALEDUCATION
        - CRAFTSMEN
        - DONATION
        - CARRENTAL
        - CARPURCHASE
        - CARTAX
        - CARMAINTENANCE
        - MOBILITY
        - PETROLSTATION
        - CARLEASING
        - MOBILITYSHARING
        - CAROTHERS
        - PUBLICTRANSPORT
        - CARSHARING
        - PARKING
        - TRANSPORT
        - RAIL
        - AIR
        - TAXI
        - UNSCHEDULEDPAYMENT
        - TAX
        - BUS
        - SHOPPING
        - FASHION
        - OFFICESUPPLIES
        - HOBBYANDGARDEN
        - HOMEANDLIVING
        - ONLINESHOPPING
        - DEVICES
        - SOFTWARE
        - GOURMET
        - DISCOUNTER
        - GROCERIES
        - BIOGROCERIES
        - RESTAURANT
        - ONLINEFASHION
        - APPAREL
        - SHOES
        - ENTERTAINMENT
        - DIGITALMEDIA
        - TV_GEZ
        - TVSTREAMING
        - MUSICSTREAMING
        - DIGITALBOOKS
        - GAMING
        - PRINTMEDIA
        - BOOKS
        - NEWSPAPERS
        - MAGAZINES
        - STATIONERY
        - ARTS
        - FILMANDTHEATER
        - MUSICEVENTS
        - ARTEXPO
        - SPORTS
        - ACTIVESPORTS
        - SPORTEVENTS
        - FASTFOOD
        - DIYSTORES
        - SUPPLEMENTARYDENTALINSURANCE
        - HOMEOWNER
        - STUDENT_FUNDING
        - STUDENTGRANT
        - GAMBLINGINCOME
        - SUBSIDIZEDLOAN
        - GOVERNMENTEMPLOYEE
        - FREELANCER
        - MEDICAL_SUPPLY_STORES
        - REBOOKING
        - REBOOKING_INCOME
        - REBOOKING_SPENDING
        - REBOOKING_NAME_BASED
        - REBOOKING_NAME_BASED_INCOME
        - REBOOKING_NAME_BASED_SPENDING
        - CHILDREN
        - BABY
        - CHILDCARE
        - KINDERGARTEN
        - POCKET_MONEY
        - SCHOOL_FEE
        - SCHOOL_TICKET
        - TOYS
        - TUTORING
        - MONEY_TRANSFER
        - MONEY_TRANSFER_SPENDING
        - MONEY_TRANSFER_INCOME
        - PROFITSAVINGS
        - RISK
        - B2B
        - EDUCATION
        - GOVERNMENT
        - PAYMENT_PROCESSING_INCOME
        - PAYMENT_PROCESSING_SPENDING
        - STUDENT_LOAN
        - TAX_RELEVANT
        - GOVERNMENTAL_SERVICES
        - SOLIDARITY_TAX
        - DOG_TAX
        - DELAY_CHARGE
        - CHURCH_TAX
        - CAPITAL_GAINS_TAX
        - BUSINESS_TAX
        - CORPORATE_TAX
        - INHERITANCE_TAX
        - SALARY_TAX
        - VALUE_ADDED_TAX
        - PROPERTY_TAX
        - PROPERTY_TRANSFER_TAX
        - INCOME_TAX
        - PROFIT_TAX
        - CHURCH
        - POLITICAL_PARTY
        - NPO
        - POSTAL_SERVICES
        - BANKING
        - STUDENTACCOMODATION
        - HOME_MAINTENANCE
        - MOBILE
        - LANDLINE
        - PRIVATE_HEALTH_INSURANCE
        - PUBLIC_HEALTH_INSURANCE
        - STUDENTHEALTHINSURANCE
        - PAYMENT_PROCESSING
        - STUDENT
        - INSURANCE_CLAIM_SETTLEMENT
        - TRAVEL_EXPENSES_INCOME
        - LOAN_DISBURSEMENT
        - OPERATING_REVENUE
        - TAX_ADVISORY
        - PERSONNEL_COST
        - HEALTH_INSURANCE_EMPLOYER
        - SALARY_PAYMENTS
        - SOCIAL_SECURITY
        - UNEMPLOYMENT_INSURANCE
        - TRAVEL_EXPENSES
        - CORPORATE_SOFTWARE
        - LEGAL
        - LEGAL_AFFAIRS
        - NOTARY
        - BAILIFFS
        - LAWYER
        - CAR_FINANCING
        - RECURRING
        - RECURRING_INCOMING
        - RECURRING_SPENDING
        - BILLING
        - PRIVATE_WITHDRAWAL
        - PRIVATE_WITHDRAWAL_INCOME
        - PRIVATE_WITHDRAWAL_SPENDING
        - PRIVATE_DEPOSIT
        - PRIVATE_DEPOSIT_INCOME
        - PRIVATE_DEPOSIT_SPENDING
        - TAX_REFUND
        - CROSS_COUNTRY_TRANSFER
        - BANK_INFO
        - CRYPTO
        - INVESTMENTS
        - TRAINEE
        - INVESTMENT_INCOME
        - ACCOUNT_TRANSFER_INCOME

    MafDataResource:
      description: maximum available funds data per account
      required:
        - accountId
        - income
        - mafDate
        - maxAvailableFunds
        - spending
      type: object
      properties:
        latestBalance:
          type: number
          description: Latest account's balance
          example: 12345.67
        mafDate:
          description: |
            Date on which the given account had the maximum amount of available
            funds. Date format '<code>YYYY-MM-DD</code>'.
          type: string
          example: '2020-03-09'
        balancesStartDate:
          description: Timestamp of the date, when user's first daily balance data was retrieved for the given account in the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin).
          type: string
          example: '2020-01-01 00:00:00.000'
        totalBalancesDaysCount:
          description: The number of days, daily balances for which were retrieved for the given account in the report period under review.
          type: integer
          example: 20
        maxAvailableFunds:
          description: |
            The maximum amount of funds available on the account on one of the
            days belonging to the period specified in maxDaysForCase.
          type: number
          example: 100
        income:
          description: The sum of income for the given period as for the given account.
          type: number
          example: 99
        spending:
          description: The sum of spending for the given period as for the given account.
          type: number
          example: 98
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          description: IBAN of the bank account.
          type: string
          example: 'DE13700800000061110500'
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR

    CheckDataResource:
      required:
        - checkData
      description: Balance check result
      type: object
      properties:
        checkData:
          type: array
          items:
            $ref: '#/components/schemas/CheckDataResultResource'

    CheckDataResultResource:
      description: Balances check data per account
      required:
        - accountId
        - checkPassed
        - overdraftAvailable
      type: object
      properties:
        checkPassed:
          description: |
            Indicates whether the latest available account balance is equal or higher than the amount, against which the check is done.
            In case the latest balance is equal or higher than the check amount, the <code>checkPassed </code> parameter value is equal to <code>true</code>.
          type: boolean
          example: true
        latestBalanceDate:
          description: |
            The date of the latest available account balance.
          type: string
          example: '2020-01-01 00:00:00.000'
        overdraftAvailable:
          description: |
            Indicates whether the overdraft limit has been taken into account, while conducting the check.
            In case the overdraft limit is available for the given account and was taken into consideration while conducting the check, <code>overdraftAvailable</code> is set to <code>true</code>.
            In case the overdraft limit is not available for the given account and / or was not taken into consideration while conducting the check, <code>overdraftAvailable</code> is set to <code>false</code>.
          type: boolean
          example: false
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          description: IBAN of the bank account.
          type: string
          example: 'DE13700800000061110500'

    ChildrenCheckDataResource:
      description: Children check result
      required:
        - totalChildrenCount
      type: object
      properties:
        totalChildrenCount:
          description: |
            Total count of children, benefit payments for which are provided to the specified in the request accounts.
            If more than 5 children are recognised in an account, the result is shown with a plus, e.g. 7+.
          type: string
          example: 7+
        checkData:
          type: array
          items:
            $ref: '#/components/schemas/ChildrenCheckDataResultResource'

    ChildrenCheckDataResultResource:
      description: Balances check data per account
      required:
        - accountId
        - childrenCount
      type: object
      properties:
        childrenCount:
          description: |
            Count of children, as of the latest child benefit payment date provided to the given account.
            If there are more than 5 children, the number is shown as 5+, as the exact number of children cannot be determined precisely. 
            From 2024, child benefit for 5 children and more will be in overlapping min and max values.
          type: string
          example: 5+
        latestChildBenefitDate:
          description: |
            The date, when the latest child benefit payment has been received for the given account.
          type: string
          example: '2020-01-01 00:00:00.000'
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          description: IBAN of the bank account.
          type: string
          example: 'DE13700800000061110500'

    AccountHolderTypeCheckResource:
      description: Account holder type check result
      required:
        - checkData
      properties:
        checkData:
          type: array
          items:
            $ref: '#/components/schemas/AccountHolderTypeCheckDataResultResource'

    AccountHolderTypeCheckDataResultResource:
      description: Balances check data per account
      required:
        - accountId
        - accountHolderType
      type: object
      properties:
        accountHolderType:
          $ref: '#/components/schemas/AccountHolderTypeEnum'
        accountId:
          type: string
          description: UUID of the bank account belonging to the imported bank connection.
          example: 4e760145-2e65-4242-ac33-488943528c93
        accountIban:
          description: IBAN of the bank account.
          type: string
          example: 'DE13700800000061110500'
        transactionsStartDate:
          description: |
            Date when user's first transaction has been detected for the imported data of the account.
            This field takes into consideration all the transactions of the user for the account, irrespectively of the assigned to them label.
          type: string
          format: date

    AccountHolderTypeEnum:
      description: |
        The type of account holder.
        Can be:
        <ul>
          <li><code>PRIVATE</code> - the account belongs to one person.</li>
          <li><code>JOINT </code> - the account belongs to more than one person.</li> 
          <li><code>COMPANY</code> - the account belongs to a legal entity (company).</li> 
          <li><code>SELF_EMPLOYER</code> - the account where the account holder name is a private person, but where, for example, salary is paid out or trade tax transfers are transferred to the tax office.</li>
          <li><code>UNKNOWN</code> - the account holder type cannot be defined.</li> 
        </ul>
      type: string
      enum:
        - PRIVATE
        - JOINT
        - COMPANY
        - SELF_EMPLOYER
        - UNKNOWN
      example: JOINT

    TopListCheckResource:
      description: Top list check result
      required:
        - checkData
      properties:
        dateFirstTransaction:
          type: string
          format: date
          description: Date of the first transaction of the check result in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin).
        dateLastTransaction:
          type: string
          format: date
          description: Date of the last transaction of the check result in the format '<code>YYYY-MM-DD</code>' (CET Europe / Berlin).
        topList:
          type: array
          items:
            $ref: '#/components/schemas/TopListCheckDataResultResource'

    TopListCheckDataResultResource:
      description: Top list check result
      required:
        - order
        - counterpartyName
        - transactionCount
        - avgAmountPerTrx
        - amountSum
      type: object
      properties:
        order:
          type: integer
          description: Defines the top number
          example: 1
        counterpartyName:
          type: string
          description: Counterparty name
          example: Bar Centrale
        transactionCount:
          type: integer
          description: Count of total transactions with this counterpart
          example: 1
        avgAmountPerTrx:
          type: number
          description: Average amount over all transactions
          example: -99.99
        amountSum:
          type: number
          description: Sum of all transactions
          example: -99.99
        details:
          type: array
          items:
            $ref: '#/components/schemas/TopListDetailsCheckDataResultResource'

    TopListDetailsCheckDataResultResource:
      description: Details for TOP_COUNTERPARTY_SUM and TOP_TRANSACTIONS_AMOUNT
      required:
        - amount
      type: object
      properties:
        amount:
          type: number
          description: Total amount of the counterpart for groupType TOP_COUNTERPARTY_SUM or amount of the transaction for groupType TOP_TRANSACTIONS_AMOUNT
          example: -99.99
        transactionId:
          type: string
          format: uuid
          description: UUID of the transaction ID, only available for TOP_TRANSACTIONS_AMOUNT
          example: 4e760145-2e65-4242-ac33-488943528c93

    MaxAvailableFundsReportResource:
      description: Maximum available funds report
      required:
        - id
        - creationDate
        - caseId
        - type
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        type:
          description: |
            Type of the report.
            <ul>
              <li><code>MAXIMUMAVAILABLEFUNDS</code> - this report type returns the maximum amount of funds available (MAF) and the date on which they were available on an account (MAF date).</li>
            </ul>
          enum:
            - MAXIMUMAVAILABLEFUNDS
          type: string
          example: MAXIMUMAVAILABLEFUNDS
        startDate:
          description: Timestamp of the start date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        endDate:
          description: Timestamp of the end date of the report period under review in the format '<code>YYYY-MM-DD HH:MM:SS.SSS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        daysOfReport:
          description: The number of full days, that the report period under review contains.
          type: integer
          example: 20
        mafData:
          description: Maximum available funds calculation results for each account
          type: array
          items:
            $ref: '#/components/schemas/MafDataResource'
        childReports:
          type: array
          description: |
            Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
          items:
            $ref: '#/components/schemas/ChildReportsResource'

    ReportResource:
      required:
        - id
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93

    ReportsForCaseResource:
      required:
        - caseId
      type: object
      properties:
        caseId:
          description: UUID of the case file in which the reports are stored.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        reports:
          $ref: '#/components/schemas/GenericReport'
        triggers:
          deprecated: true
          uniqueItems: true
          type: array
          description: Array of triggers' UUIDs.
          example:
            - 4e760145-2e65-4242-ac33-488943528c93
            - 4e760145-2e65-4242-ac33-488943528c93
          items:
            type: string

    DataSourceStatusCallbackResource:
      description: Data source status callback
      type: object
      properties:
        datasourceId:
          description: UUID of the data source (optional, will be set for callback notifications)
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        callbackHandle:
          $ref: '#/components/schemas/callbackHandle'
        datasource:
          $ref: '#/components/schemas/DataSourceStatusResource'

    DataSourceStatusResource:
      description: Data source status
      required:
        - code
        - status
      type: object
      properties:
        status:
          description: |
            Status of the data source.
            Can be:
            <ul>
              <li><code>IN_PROGRESS</code> - the data source creation is in progress.</li>
              <li><code>SUCCESSFUL</code> - the data source creation was completed.</li>
              <li><code>FAILED</code> - the data source creation was not completed due to internal technical error, bank server rejection or abortion.</li>
            </ul>
          enum:
            - IN_PROGRESS
            - SUCCESSFUL
            - FAILED
          type: string
          example: IN_PROGRESS
        code:
          description: |
            Code of the data source status.
            <ul>
              <li><code>CREATED</code> - A datasource has been created.</li>
              <li><code>UPDATED</code> - A datasource has been updated.</li>
              <li><code>SYNC_REQUESTED</code> - A synchronization for this datasource already has been requested.</li>
              <li><code>SYNC_IN_PROGRESS</code> - Not all data has been reveived from the bank yet. Please re-execute datasource synchronization in this case.</li>
              <li><code>DATA_IMPORT_STARTED</code> - The update of the data in Data Intelligence service has to be been finalized.</li>
              <li><code>DATA_IMPORT_IN_PROGRESS</code> - The update of the data in Data Intelligence service is ongoing.</li>
              <li><code>COMPLETED</code> - categorization and update of the data have been finalized.</li>

              <li><code>ANALYTICS_PENDING</code> - extended analysis is waiting for processing. The next code should be <code>ANALYTICS_STARTED</code>.</li>
              <li><code>ANALYTICS_STARTED</code> - extended analysis is in progress. The next code should be <code>COMPLETED</code>.</li>
              <li><code>ANALYTICS_FAILED</code> - extended analysis failed.</li>

              <li><code>UPDATE_REQUIRED</code> - The last automated update of the data source has been rejected by the bank. To import further transactions to DI, the user has to perform a manual login to his bank account. The application, that uses DI, has to initiate the bank connection update flow, either via finAPI Web Form 2.0 <a target='_blank' href='https://docs.finapi.io/?product=web_form_2.0#post-/api/tasks/backgroundUpdate'>API</a> (or by initiating a bank connection update via the finAPI Access <a target='_blank' href='https://docs.finapi.io/?product=access#post-/api/webForms/bankConnectionUpdate'>API</a> for customers using the legacy finAPI web form).</li>
              <li><code>TECHNICAL_ERROR</code> - some technical error has occured, due to which the data source synchronization has failed.</li>
              <li><code>DEPRECATED</code> - the user deleted the bank connection for this datasource in finAPI Access.</li>

              <li><code>BANK_CONNECTION_DUPLICATE</code> - deprecated.</li>
              <li><code>WEB_FORM_NOT_YET_OPENED</code> - deprecated.</li>
              <li><code>WEB_FORM_IN_PROGRESS</code> - deprecated.</li>
              <li><code>WEB_FORM_ABORTED</code> - deprecated.</li>
            </ul>
          enum:
            - CREATED
            - WEB_FORM_NOT_YET_OPENED
            - WEB_FORM_IN_PROGRESS
            - SYNC_IN_PROGRESS
            - COMPLETED
            - WEB_FORM_ABORTED
            - TECHNICAL_ERROR
            - BANK_CONNECTION_DUPLICATE
            - DEPRECATED
            - SYNC_REQUESTED
            - DATA_IMPORT_STARTED
            - UPDATE_REQUIRED
            - UPDATED
            - DATA_IMPORT_IN_PROGRESS
            - ANALYTICS_PENDING
            - ANALYTICS_STARTED
            - ANALYTICS_FAILED
          type: string
          example: SYNC_IN_PROGRESS

    TransactionResource:
      required:
        - transactionId
        - amount
        - bankBookingDate
        - valueDate
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction UUID
          example: 4e760145-2e65-4242-ac33-488943528c93
        valueDate:
          type: string
          description: Value date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: '2020-01-01 00:00:00.000'
        bankBookingDate:
          type: string
          description: Bank booking date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: '2020-01-01 00:00:00.000'
        amount:
          type: number
          description: Transaction amount
          example: -99.99
        purpose:
          type: string
          description: Transaction purpose
          example: Restaurantbesuch
        counterpartName:
          type: string
          description: Counterpart name
          example: Bar Centrale
        counterpartAccountNumber:
          type: string
          description: Counterpart account number
          example: "0061110500"
        counterpartIban:
          type: string
          description: Counterpart IBAN
          example: DE13700800000061110500
        counterpartBlz:
          type: string
          description: Counterpart BLZ
          example: "70080000"
        counterpartBic:
          type: string
          description: Counterpart BIC
          example: DRESDEFF700
        counterpartBankName:
          type: string
          description: Counterpart bank name
          example: Commerzbank vormals Dresdner Bank
        bankTransactionCode:
          description: Bank transaction code
          type: string
          example: "PMNT-IRCT-STDO"
        labels:
          type: array
          description: Array of transactions labels.
          example:
            - ENUMLABEL
          items:
            $ref: '#/components/schemas/LabelResource'
        overdraftInformation:
          $ref: "#/components/schemas/OverdraftInformation"
        chargebackInformation:
          $ref: "#/components/schemas/ChargebackInformation"
        seizureInformation:
          $ref: "#/components/schemas/SeizureInformation"

    OverdraftInformation:
      description: >-
        Extracted details for transactions with related to overdraft interests
      type: object
      properties:
        overdraftInterestAmount:
          description: Overdraft amount included in the transactions amount extracted for this purpose
          type: number
          example: 99.9
        interestAmount:
          description: Interest amount included in the transactions amount extracted for this purpose
          type: number
          example: 99.9
        startDate:
          description: >-
            Start date of the period the overdraft amount applies to. 
            This date is extracted from the transaction as a string, the original formatting by the bank will is kept as is and will not interpreted.
          type: string
          example: 1.1.2022
        endDate:
          description: >-
            End date of the period the overdraft amount applies to.
            This date is extracted from the transaction as a string, the original formatting by the bank is kept as is and will not interpreted.
          type: string
          example: 28.3.2022

    ChargebackInformation:
      description: >-
        Extracted details for transactions with related to chargeback amount
      required:
        - chargebackAmount
      type: object
      properties:
        chargebackAmount:
          description: Chargeback amount included in the transactions amount extracted for this purpose. When it is possible to extract the chargeback amount, the extracted value is used in the calculations of the other fields and monthly objects. When extraction is not possible, the amount of the transaction is used instead.
          type: number
          example: 99.9
        valueDate:
          description: >-
            Value date of the period the chargeback amount applies to.
          type: string
          example: 1.1.2022

    SeizureInformation:
      description: >-
        Extracted details for transactions with related to seizure amount
      required:
        - seizureAmount
      type: object
      properties:
        seizureAmount:
          description: Seizure amount extracted from the purpose
          type: number
          example: 99.9

    ContractsTransactionResource:
      required:
        - amount
        - bankBookingDate
        - purpose
        - valueDate
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction UUID
          example: 4e760145-2e65-4242-ac33-488943528c93
        contractIds:
          description: UUIDs of the contracts to which the transaction belongs
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93
        valueDate:
          type: string
          description: Value date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: '2020-01-01 00:00:00.000'
        bankBookingDate:
          type: string
          description: Bank booking date in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          example: '2020-01-01 00:00:00.000'
        amount:
          type: number
          description: Transaction amount
          example: -99.99
        purpose:
          type: string
          description: Transaction purpose
          example: Restaurantbesuch
        counterpartName:
          type: string
          description: Counterpart name
          example: Bar Centrale
        counterpartAccountNumber:
          type: string
          description: Counterpart account number
          example: "0061110500"
        counterpartIban:
          type: string
          description: Counterpart IBAN
          example: DE13700800000061110500
        counterpartBlz:
          type: string
          description: Counterpart BLZ
          example: "70080000"
        counterpartBic:
          type: string
          description: Counterpart BIC
          example: DRESDEFF700
        counterpartBankName:
          type: string
          description: Counterpart bank name
          example: Commerzbank vormals Dresdner Bank
        bankTransactionCode:
          description: Bank transaction code
          type: string
          example: "PMNT-IRCT-STDO"
        labels:
          type: array
          description: Array of transactions labels.
          example:
            - ENUMLABEL
          items:
            $ref: '#/components/schemas/LabelResource'
      description: Chargebacks transactions

    UserBankConnection:
      description: Bank connection data source
      required:
        - id
        - creationDate
      type: object
      properties:
        id:
          description: UUID of the data source.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: |
            Creation date of the data source, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'

    UserCase:
      description: Case file
      type: object
      required:
        - id
        - creationDate
      properties:
        id:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        customerCaseRef:
          type: string
          description: >-
            Customer provided reference (-string) for the case.
          example: "Id-123456"
        creationDate:
          description: |
            creation date of the case, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        maxDaysForCase:
          description: |
            The time span of the data that is to be analysed for reports creation.
          type: integer
          example: 89
        datePeriodForCase:
          $ref: '#/components/schemas/CreateCaseDatePeriod'
        dataSources:
          $ref: '#/components/schemas/DataSources'
        reports:
          description: A set of reports stored in the given case file
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserReport'

    UserCasesResource:
      description: Case
      type: object
      properties:
        cases:
          description: Set of case files created for the given user
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserCase'

    UserReport:
      description: Report
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: |
            creation date of the report, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        type:
          description: |
            Type of the report
          type: string
          example: CHARGEBACKS
        childReports:
          type: array
          description: |
            Array of reports, created automatically with the specified frequency (defined by <code>interval</code> and <code>intervalPeriod</code>) once the parent report is defined as a continuous one.
          items:
            $ref: '#/components/schemas/ChildReportsResource'

    DeleteUserResource:
      required:
        - deletionId
      type: object
      properties:
        deletionId:
          description: UUID of the deletion job
          type: string
          example: 5e860145-2e65-4242-ac33-488943528c94

    DeleteUserStatusResource:
      required:
        - statusReportService
        - statusDataGateway
      type: object
      properties:
        statusReportService:
          $ref: '#/components/schemas/DeletionStatusEnum'
        statusDataGateway:
          $ref: '#/components/schemas/DeletionStatusEnum'
        messages:
          description: Array of messages related to deletion status
          type: array
          items:
            $ref: '#/components/schemas/DeleteUserStatusMessageResource'

    DeleteUserStatusMessageResource:
      type: object
      properties:
        application:
          description: Name of the application (module) that has failed
          type: string
        message:
          description: Error message
          type: string

    DeletionStatusEnum:
      description: |-
        Status of the deletion in the application.
        Can be:
        <ul>
          <li><code>IN_PROGRESS</code> - the deletion of user’s data is in progress.</li>
          <li><code>SUCCESSFUL</code> - the deletion of user’s data has been successfully finalized.</li>
          <li><code>FAILED</code> - the deletion of user’s data has failed.</li>
        </ul>
      type: string
      enum:
        - IN_PROGRESS
        - SUCCESSFUL
        - FAILED

    SchufaCreditCheckReportResource:
      description: report format
      required:
        - id
        - caseId
        - countContracts
        - countRisks
        - type
        - creationDate
      type: object
      properties:
        id:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        creationDate:
          description: >-
            Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin).
          type: string
          example: '2020-01-01 00:00:00.000'
        caseId:
          description: UUID of the case file
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
        type:
          description: >-
            Type of the report.
            <ul>
              <li><code> SCHUFACREDITCHECK</code> - this report type returns the results of SCHUFA credit check and reported by SCHUFA contracts.</li>
            </ul>
          enum:
            - SCHUFACREDITCHECK
          type: string
          example: SCHUFACREDITCHECK
        countContracts:
          format: int32
          description: The total count of active loan contracts, as reported by SCHUFA, depending on the filter.
          type: integer
          example: 1
        countRisks:
          format: int32
          description: The total count of credit risk features (Negativmerkmale), as reported by SCHUFA.
          type: integer
          example: 2
        countContractsFilter:
          type: string
          example: MA,KR
          description: If a filter was set, this field contains the used characteristic codes.
        schufaData:
          $ref: '#/components/schemas/SchufaData'

    SchufaData:
      description: SCHUFA data
      type: object
      required:
        - schufaReference
      properties:
        schufaId:
          type: string
          description: Internal SCHUFA identifier of a user.
          example: 123
        schufaReference:
          type: string
          description: |
            Identifier of the associated business transaction at SCHUFA.
            It is transferred from SCHUFA to the participant of the credit report.
          example: 32ae1dc124h153d4gh53
        participantReference:
          type: string
          description: Identifier, used for uniquely assigning the received responses to their requests.
          example: b7adf24e-10b6-4055-95eb-419587a8126d
        featureCode:
          description: |
            Feature code as used for the request to the SCHUFA Credit Check Service.
          type: string
          minLength: 2
          maxLength: 2
          example: "KH"
          default: "KH"
        scoreCheck:
          type: array
          description: Credit check data.
          items:
            $ref: '#/components/schemas/ScoreCheck'
        characteristics:
          description: Array of user's contracts and credit risk-related data, as reported by SCHUFA.
          type: array
          items:
            $ref: '#/components/schemas/Contracts'
        contractsCheck:
          deprecated: true
          description: Array of user's contracts, as reported by SCHUFA.
          type: array
          items:
            $ref: '#/components/schemas/Contracts'
        creditCheck:
          deprecated: true
          description: Array of user's credit risk-related data.
          type: array
          items:
            $ref: '#/components/schemas/Contracts'

    Consumer:
      description: SCHUFA consumer, on behalf of this person the service will be called.
      type: object
      required:
        - gender
        - firstName
        - lastName
        - currentAddress
      properties:
        schufaId:
          type: string
          description: SCHUFA internal user ID (only required for 'Basiskontoauskunft').
          example: 123
          maxLength: 10
        title:
          type: string
          description: Consumer's title.
          example: Dr.
          maxLength: 30
        gender:
          type: string
          description: |
            Consumer's gender.
            It can contain the following enums:
            <ul>
              <li>F - Female</li>
              <li>M - Male</li>
              <li>U - Unknown</li>
            </ul>
          enum: [ F, M, U ]
          example: M
        firstName:
          type: string
          maxLength: 44
          minLength: 2
          description: Consumers's first name.
          example: Fritz
        lastName:
          type: string
          maxLength: 46
          minLength: 2
          description: Consumers's last name
          example: Lang
        dateOfBirth:
          type: string
          example: "2000-01-01"
          description: Consumers's date of birth in the format '<code>YYYY-MM-DD</code>'.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        placeOfBirth:
          type: string
          maxLength: 24
          minLength: 2
          description: Consumers place of birth
          example: Berlin
        currentAddress:
          "$ref": "#/components/schemas/Address"

    Address:
      description: Consumers's current address
      type: object
      required:
        - city
        - street
        - zipCode
      properties:
        street:
          type: string
          maxLength: 46
          minLength: 2
          description: Street and house number.
          example: Musterstraße 7
        zipCode:
          type: string
          maxLength: 10
          minLength: 2
          description: ZIP code.
          example: 12345
        city:
          type: string
          maxLength: 44
          minLength: 2
          description: City.
          example: Beispielstadt
        country:
          type: string
          description: Country as provided by the consumer
          enum: [ DEU,AUT,CHE,TUR,AFG,ALB,DZA,ASM,VIR,AND,AGO,AIA,ATA,ATG,ARG,ARM,ABW,AZE,AUS,BHS,BHR,BGD,BRB,BLR,BEL,BLZ,BEN,
                  BMU,BTN,BOL,BES,BIH,BWA,BVT,BRA,VGB,IOT,BRN,BGR,BFA,BDI,CHL,CHN,COK,CRI,CUW,CIV,DMA,DOM,DJI,DNK,ECU,SLV,ERI,
                  EST,FLK,FJI,FIN,FRA,GUF,PYF,ATF,FRO,GAB,GMB,GEO,GHA,GIB,GRD,GRC,GRL,GLP,GUM,GTM,GGY,GIN,GNB,GUY,HTI,HMD,HND,
                  HKG,IND,IDN,IMN,IRQ,IRN,IRL,ISL,ISR,ITA,JAM,JPN,YEM,JEY,JOR,CYM,KHM,CMR,CAN,CPV,KAZ,QAT,KEN,KGZ,KIR,CCK,COL,
                  COM,COD,PRK,KOR,HRV,CUB,KWT,LAO,LSO,LVA,LBN,LBR,LBY,LIE,LTU,LUX,MAC,MDG,MWI,MYS,MDV,MLI,MLT,MAR,MHL,MTQ,MRT,
                  MUS,MYT,MKD,MEX,FSM,MDA,MCO,MNG,MNE,MSR,MOZ,MMR,NAM,NRU,NPL,NCL,NZL,NIC,NLD,NER,NGA,NIU,NFK,NOR,MNP,OMN,TLS,
                  PAK,PLW,PAN,PNG,PRY,PER,PHL,PCN,POL,PRT,PRI,TWN,COG,RWA,ROU,RUS,REU,BLM,MAF,SPM,SLB,ZMB,WSM,SMR,SAU,SWE,SEN,
                  SRB,SYC,SLE,ZWE,SGP,SXM,SVK,SVN,SOM,ESP,LKA,SHN,KNA,LCA,VCT,PSE,SDN,SUR,SJM,SWZ,SYR,STP,ZAF,SGS,SSD,TJK,TZA,
                  THA,TGO,TKL,TON,TTO,TCD,CZE,TUN,TKM,TCA,TUV,UGA,UKR,HUN,UMI,URY,UZB,VUT,VAT,VEN,ARE,USA,GBR,VNM,CXR,ESH,CAF,
                  CYP,EGY,GNQ,ETH,ALA ]
          default: DEU
          example: DEU

    SchufaCreditCheckResource:
      description: |
        Request information to create a credit rating data source.
      type: object
      required:
        - credentials
        - consumer
      properties:
        credentials:
          $ref: '#/components/schemas/SchufaCredentials'
        consumer:
          $ref: '#/components/schemas/Consumer'
        featureCode:
          description: |
            Feature code as used for the request to the SCHUFA Credit Check Service.
          type: string
          minLength: 2
          maxLength: 2
          example: "KH"
          default: "KH"

    SchufaCredentials:
      description: |
        Schufa client credentials for the Service request.
        <br><br>
        These credentials can be provided through the API or can be encrypted and deposited with the FinAPI report service for a client.
        <br><br>
        It is mandatory that one of these requirements is met.
      type: object
      required:
        - schufaUserId
        - schufaPassword
      properties:
        schufaUserId:
          type: string
          description: Password for caller's SCHUFA contract (Teilnehmerkennung).
          example: 300/01182
          minLength: 2
          maxLength: 255
        schufaPassword:
          type: string
          description: Client app specific id to be stored with the check (Teilnehmerkennwort).
          example: MIEAPI12
          minLength: 2
          maxLength: 255

    SchufaDataSourceResource:
      description: Data source credit rating
      type: object
      properties:
        dataSourceId:
          description: UUID of the data source.
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
          minLength: 36
          maxLength: 36
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'

    ScoreCheck:
      description: Represents the current SCHUFA Score of the user.
      type: object
      properties:
        score:
          $ref: '#/components/schemas/Score'
        scoreError:
          type: string
          description: |
            In case of an error, instead of the optional <code>score</code> mentioned above, the Score error element will be returned with the corresponding error text.
          example: Interner Fehler

    Contracts:
      description: Contracts of the user, as reported by SCHUFA.
      type: object
      required:
        - characteristicCode
        - characteristicAttributes
      properties:
        id:
          type: string
          description: >-
            Id of the unique element.
          example: "4612e3c2-9c17-4405-8cfc-fb5f9749dbcc"
        parentId:
          type: string
          description: >-
            If this element is set, it is a subelement of another element.
            The parentID refers to the ID of the other element.
          example: "185a7f74-39ef-4969-af4e-428037ba1f65"
        characteristicCode:
          type: string
          description: The characteristic code (Merkmalcode) describes the reason for the query.
          example: AG
        description:
          type: string
          description: Description of the contract.
        contractDate:
          type: string
          description: |
            Contract date in the format '<code>YYYY-MM-DD</code>'.
            Depending on the feature code, the date can represent various facts relating to the contract's subject matter, e.g. the date of the contract or the date of the first installment (e.g. in the case of loans).
            In the case of credit rates, the current date is often specified here.
            Sometimes the field may return the data, like <code>UNBEFRISTET</code> for unfixed contracts, thus making the information in this field not reliable.
          example: "2020-01-01"
        accountNumber:
          type: string
          maxLength: 25
          description: The account number, which is used for the contract.
          example: "1234567890"
        amount:
          type: number
          description: Amount, paid for the contract.
          example: 200
        currency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR

        numberOfRates:
          type: integer
          description: Number of installments, that have been agreed in terms of the contract.
          example: 15
        typeOfRate:
          type: string
          description: |
            Type of rate.
            Can be:
            <ul>
              <li><code>MONTHLY</code> - monthly rate</li>
              <li><code>YEARLY</code> - yearly rate</li>
            </ul>
          enum:
            - MONTHLY
            - YEARLY
        text:
          type: string
          description: Text, related to the contract.
          example: "2020-01-01"
        characteristicAttributes:
          $ref: '#/components/schemas/ContractCharacteristicAttribute'

    ContractCharacteristicAttribute:
      description: Represents the SCHUFA field <code>Merkmalsattribute</code>
      type: object
      required:
        - attributeType
      properties:
        attributeType:
          description: |
            This element is mandatory and specifies what type of feature it is.
            It can contain the following values:
            <ul>
              <li><code>MAIN</code> - Hauptmerkmal</li>
              <li><code>SUB</code> - Untermerkmal</li>
              <li><code>SINGLE</code> - Einzelmerkmal</li>
              <li><code>PERSON</code> - Personenmerkmal</li>
              <li><code>COMPLETION</code> - Erledigungsmerkmal</li>
            </ul>
          type: string
          enum:
            - MAIN
            - SUB
            - SINGLE
            - PERSON
            - COMPLETION
        withoutDateOfBirth:
          description: |
            Indicator, that shows that the characteristic was reported without a date of birth.
            This can be an indication that the assignment to the consumer may not be absolutely certain, since the date of birth is an important identification criterion.
          type: boolean
          example: true
        customAttribute:
          description: |
            Indicator of  whether the feature has been reported by the participant to whom it is now being reported.
            The optional element is only output in case of positive assignment in the request.
          type: boolean
          example: true

    Score:
      description: SCHUFA score of the user.
      type: object
      properties:
        description:
          type: string
          description: Description of the SCHUFA score
          example: Anfrage zum Girokonto
        value:
          description: SCHUFA score value of the consumer.
          type: string
          example: 8463
        segment:
          description: The element contains the individual specification of the range associated with the score value (e.g. <code>B</code>).
          type: string
          example: B
        text:
          description: Text, that supplements and concretizes the SCHUFA score information.
          type: string
          example: RATINGSTUFE K
        infoText:
          description: Text, that contains further information about the SCHUFA score calculation or represents the exclusive score information.
          type: array
          items:
            type: string
            example: UNBEKANNT VERZOGEN
        riskQuote:
          description: The probability in percent that a (new) credit risk feature will be stored for the consumer under consideration within a period of 15 months.
          type: string
          example: 15,67

    ChildReportsResource:
      required:
        - creationDate
        - reportId
      type: object
      properties:
        creationDate:
          description: Timestamp of when the report was created, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        reportId:
          description: UUID of the report
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93

    AnalyzeTransactionRequest:
      description: Request to start a transaction analysis
      properties:
        callback:
          $ref: '#/components/schemas/Callback'

    Callback:
      description: Callback to get informed when the analysis is ready.
      type: object
      required:
        - callbackUrl
      properties:
        callbackUrl:
          type: string
          description: URL to which the notification about the completed analysis should be sent.
          format: uri
          example: http://domain.tld
        callbackHandle:
          type: string
          maxLength: 255
          minLength: 0
          description: Handle, which is defined by the client to identify the callback and to correlate it to system internal entities.
          example: 38793e87-499d-4860-b947-2c2c8ab10322

    CallbackNotification:
      description: Callback request body of DI.
      type: object
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCodeEnum'
        callbackHandle:
          $ref: '#/components/schemas/callbackHandle'

    StatusCodeEnum:
      description: ...
      type: string
      enum:
        - COMPLETED
        - ANALYTICS_FAILED

    DacLoanPdfReportParams:
      description: Deprecated, please use the <code>Accept-Language</code> header instead.
      type: object
      deprecated: true
      properties:
        locale:
          description: Deprecated, please use the <code>Accept-Language</code> header instead.
          type: string
          minLength: 2
          maxLength: 5
          example: "en"
          default: "de"
          deprecated: true

    AccountTypeEnum:
      description: |
        Type of the account.
        Can be:
        <ul>
          <li><code>CHECKING</code></li>
          <li><code>SAVINGS </code></li>
          <li><code>CREDITCARD</code></li>
          <li><code>SECURITY</code></li>
          <li><code>LOAN</code></li>
          <li><code>POCKET</code></li>
          <li><code>MEMBERSHIP</code></li>
          <li><code>BUILDING_SAVINGS</code></li>
        </ul>
      type: string
      example: CHECKING
      enum:
        - CHECKING
        - SAVINGS
        - CREDITCARD
        - SECURITY
        - LOAN
        - POCKET
        - MEMBERSHIP
        - BUILDING_SAVINGS

    TransactionDataRequest:
      description: Transaction data for creating a datasource, account and transactions.
      type: object
      required:
        - transactionData
      properties:
        transactionData:
          $ref: '#/components/schemas/TransactionDataResource'

    BaseTransactionData:
      description: Transaction data.
      type: object
      required:
        - externalId
        - bankName
      properties:
        externalId:
          description: external Id to have an identifier for the requested data
          type: string
          maxLength: 50
          example: user123
        bankName:
          type: string
          description: Name of the bank.
          example: Commerzbank

    TransactionDataResource:
      allOf:
        - $ref: '#/components/schemas/BaseTransactionData'
      description: Transaction data for the response.
      type: object
      required:
        - externalId
        - bankName
        - accountData
      properties:
        accountData:
          description: List of account data
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/TransactionDataAccountResource'

    BaseTransactionDataAccountResource:
      description: Account data
      required:
        - accountType
        - accountExternalId
      type: object
      properties:
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        accountIban:
          type: string
          description: IBAN of the bank account.
          example: "DE13700800000061110500"
        accountExternalId:
          type: string
          description: |
            External ID for the account.
            Must be unique for a transaction datasource creation.
          example: "12345676"
        accountHolderName:
          type: string
          description: |
            Contains the account holder name.
          example: John Doe
          maxLength: 128
        accountCurrency:
          type: string
          maxLength: 3
          minLength: 3
          description: |
            Currency as 3-character ISO-4217 code.
          example: EUR

    TransactionDataAccountResource:
      allOf:
        - $ref: '#/components/schemas/BaseTransactionDataAccountResource'
      description: Account data
      required:
        - accountTpye
        - transactions
      type: object
      properties:
        transactions:
          type: array
          description: Array of transactions related to the chosen report type
          minItems: 1
          items:
            $ref: '#/components/schemas/BaseTransactionResource'

    BaseTransactionResource:
      description: Transactions
      required:
        - amount
        - bankBookingDate
        - valueDate
      type: object
      properties:
        valueDate:
          type: string
          format: date
          description: Value date in the format YYYY-MM-DD (German time).
        bankBookingDate:
          type: string
          format: date
          description: Bank booking date in the format 'YYYY-MM-DD (German time).
        finapiBookingDate:
          type: string
          format: date
          description: Finapi booking date in the format 'YYYY-MM-DD (German time).
          example: '2020-01-01'
        amount:
          type: number
          description: Amount of the transaction
          example: 100.99
        purpose:
          type: string
          description: Transaction purpose
          example: Restaurantbesuch
        counterpartName:
          type: string
          description: Counterpart name
          example: Bar Centrale
        counterpartBankName:
          type: string
          description: Counterpart bank name
          example: Commerzbank vormals Dresdner Bank
        counterpartAccountNumber:
          type: string
          description: Counterpart account number
          example: "0061110500"
        counterpartIban:
          type: string
          description: Counterpart IBAN
          example: DE13700800000061110500
        counterpartBlz:
          type: string
          description: Counterpart BLZ
          example: "70080000"
        counterpartBic:
          type: string
          description: Counterpart BIC
          example: DRESDEFF700
        counterpartMandateReference:
          type: string
          description: Counterpart mandate reference
          example: MR123
        counterpartCustomerReference:
          type: string
          description: Counterpart customer reference
          example: CUR123
        counterpartCreditorId:
          type: string
          description: Counterpart creditor identifier
          example: CRI123
        counterpartDebitorId:
          type: string
          description: Counterpart debitor identifier
          example: CRI098
        type:
          type: string
          description: Transaction type
          example: Ueberweisungsauftrag
        typeCodeZka:
          type: string
          description: Type code Zka
          example: 999
        typeCodeSwift:
          type: string
          description: Type code Swift
          example: RAPRDE51
        sepaPurposeCode:
          type: string
          description: SEPA purpose code
          example: OTHR
        endToEndReference:
          type: string
          description: End-To-End Reference
          example: 001100550526
        bankTransactionCode:
          description: Bank transaction code
          type: string
          example: "PMNT-IRCT-STDO"

    TransactionDataSourceResponse:
      description: Response for the created data sources.
      properties:
        dataSources:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceBank'

    callbackHandle:
      type: string
      maxLength: 255
      minLength: 0
      description: Handle, which is defined by the client to identify the callback and to correlate it to system internal entities.
      example: 38793e87-499d-4860-b947-2c2c8ab10322

    CreateAggregationResourceRequest:
      description: Request input parameter for the aggregations.
      required:
        - aggregations
      properties:
        aggregations:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateAggregationResource'

    CreateAggregationResource:
      description: Aggregation resource
      type: object
      required:
        - alias
        - includeLabelGroup
      properties:
        alias:
          description: Define which aggregation it is
          type: string
          example: MyFirstAggregation
        includeLabelGroup:
          description: Defines which labels should be used for the aggregation.
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/LabelResource'
        excludeLabelGroup:
          description: Defines which labels should be used for the aggregation.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LabelResource'

    AggregationResourceResponse:
      description: Response Aggregation resource
      type: object
      required:
        - aggregations
        - completeMonths
      properties:
        aggregations:
          description: Aggregation
          type: array
          items:
            $ref: '#/components/schemas/AggregationResource'
        completeMonths:
          type: array
          items:
            type: string
            description: |
              List of complete (full) calendar months inside the report period under review in the format '<code>YYYY-MM</code>'.
              The complete months list is based on transactions within the reporting time frame. The month with the first transaction determines the first month in this list.
            example: '2020-09'

    AggregationResource:
      description: Aggregation resource
      type: object
      required:
        - alias
        - totalTransactionsCount
        - totalIncome
        - totalSpending
        - totalAmount
      properties:
        alias:
          description: Define which aggregation it is
          type: string
          example: MyFirstAggregation
        totalTransactionsCount:
          description: |
            The number of user's transactions, that took place in the aggregation period under review.
            All of the user's transactions are taken into consideration in this field, regardless of the label assigned to them.
            The transactions with amount = 0 are also taken into consideration.
          type: integer
          example: 20
        totalIncome:
          type: number
          description: The total income.
          example: 150.75
        totalSpending:
          type: number
          description: The total spending.
          example: 0
        totalAmount:
          type: number
          description: The total balance.
          example: 150.75
        firstTransactionDate:
          description: Timestamp of when the first Transaction was created, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        lastTransactionDate:
          description: Timestamp of when the last Transaction was created, in the format '<code>YYYY-MM-DD HH:MM:SS</code>' (CET Europe / Berlin)
          type: string
          example: '2020-01-01 00:00:00.000'
        monthlyData:
          $ref: '#/components/schemas/AggregationMonthlyDataResource'

    AggregationMonthlyDataResource:
      description: Monthly data in the aggregation
      required:
        - minTotalMonthlyAmount
        - maxTotalMonthlyAmount
        - averageTotalMonthlyAmount
        - medianTotalMonthlyAmount
      type: object
      properties:
        totalMonthlyAmounts:
          type: array
          items:
            $ref: '#/components/schemas/AggregationTotalMonthlyDataResource'
        minTotalMonthlyAmount:
          type: number
          description: The lowest amount available within the month.
          example: 12345.67
        maxTotalMonthlyAmount:
          type: number
          description: The highest amount available within the month.
          example: 12345.67
        averageTotalMonthlyAmount:
          type: number
          description: The average amount within the month.
          example: 12345.67
        medianTotalMonthlyAmount:
          description: The number of daily balances which were retrieved for the given account within the month.
          type: number
          example: 123.45

    AggregationTotalMonthlyDataResource:
      description: Monthly data in the aggregation
      required:
        - month
        - totalIncome
        - totalSpending
        - totalAmount
      type: object
      properties:
        month:
          type: string
          description: Month for which the values are calculated
          example: '2023-01'
        totalIncome:
          type: number
          description: The total income.
          example: 150.75
        totalSpending:
          type: number
          description: The total spending.
          example: 0
        totalAmount:
          type: number
          description: The total amount.
          example: 150.75
        transactionIds:
          type: array
          items:
            type: string
            example: 4e760145-2e65-4242-ac33-488943528c93

  parameters:
    locale:
      in: header
      name: Accept-Language
      schema:
        type: string
        enum:
          - de
          - en
      description: requested locale, only <code>de</code> and <code>en</code> are supported. If not present, <code>de</code> will be used

  examples:
    createReportBodyExample:
      value:
        reportType: BANKANDCREDIT
    createReportContinuousBodyExample:
      value:
        reportType: BANKANDCREDIT
        continuousReport:
          parentReportId: 38793e87-499d-4860-b947-2c2c8ab10322
          endDate: 2023-01-31
    errorMessage400Example:
      value:
        code: INVALID_PARAMETER
        message: Invalid input parameter.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage400SchufaManualProcessingExample:
      value:
        code: ERROR_CODE_SCHUFA_MANUAL_PROCESSING
        message: 'Code: Business; Reason: Bei der Verarbeitung der Businesslogik aufgetretene Ausnahme; Details:  ExceptionResponse(schufaReference=schufa, userReference=user, manualProcessing=ExceptionResponse.ManualProcessing(retrievalReference=manual), manualProcessingNotWanted=null, electronicReportNotPossible=null, reportFactualErrors=[], reportTechnicalErrors=[])'
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage403Example:
      value:
        code: SCHUFA_SERVICE_BUSINESS_ERROR
        message: SCHUFA Service Business error.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404ReportExample:
      value:
        code: ENTITY_NOT_FOUND
        message: Report not found
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404ContinuousReportExample:
      value:
        code: ENTITY_NOT_FOUND
        message: Continuous report with ID '4e760145-2e65-4242-ac33-488943528c93' not found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404AnalysisExample:
      value:
        code: ENTITY_NOT_FOUND
        message: No data sources found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404CaseExample:
      value:
        code: ENTITY_NOT_FOUND
        message: Case file with ID '4e760145-2e65-4242-ac33-488943528c93' not found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404CasesExample:
      value:
        code: ENTITY_NOT_FOUND
        message: No case file found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404DataSourceExample:
      value:
        code: ENTITY_NOT_FOUND
        message: Data source with ID '4e760145-2e65-4242-ac33-488943528c93' not found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404DataSourcesExample:
      value:
        code: ENTITY_NOT_FOUND
        message: No data sources found.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404AccountExample:
      value:
        code: ENTITY_NOT_FOUND
        message: 'Account not found by params: IBAN=null, Access Account Id=null'
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage404BankConnectionDataSourceExample:
      value:
        code: ENTITY_NOT_FOUND
        message: 'No data sources found.'
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage422CaseUnprocessableExample:
      value:
        code: ILLEGAL_ENTITY_STATE
        message: Not all data sources completed successfully.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423ReportExistExample:
      value:
        code: RESOURCE_LOCKED
        message: No report duplicates are allowed.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423BankConnectionSyncExample:
      value:
        code: RESOURCE_LOCKED
        message: Datasource synchronization already in progress for 4e760145-2e65-4242-ac33-488943528c93.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423ConcurrentAccess:
      value:
        code: CODE_CONCURRENT_ACCESS
        message: A data element could not be stored, potential concurrent API access. Please try again.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423SubscriptionExistExample:
      value:
        code: RESOURCE_LOCKED
        message: Subscription for the continuous report with ID '4e760145-2e65-4242-ac33-488943528c93' already exists.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423AnalysisStartedExample:
      value:
        code: RESOURCE_LOCKED
        message: Analysis has already started.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage423SchufaDataSourceDuplicateExample:
      value:
        code: RESOURCE_LOCKED
        message: It is not allowed to store multiple SCHUFA Credit Check Data Sources inside a single case file.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage500:
      value:
        code: UNEXPECTED_ERROR
        message: An unexpected error occurred.
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost'
    errorMessage500InvalidParameter:
      value:
        code: INVALID_PARAMETER
        message: The request was rejected because the URL contained a potentially malicious String "//"
        date: '2020-01-01 00:00:00.000'
        requestId: '1a532f483f922ead'
        endpoint: 'https://finapi.localhost//'

    incomeReportResponseExample:
      value:
        {
          "reports": {
            "income": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "INCOME",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 17,
              "countSpendingTransactions": 0,
              "totalIncome": 150.75,
              "totalSpending": 0,
              "totalBalance": 150.75,
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": 100.5,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ],
                      "overdraftInformation": {
                        "overdraftInterestAmount": 99.9,
                        "interestAmount": 99.9,
                        "startDate": "1.1.2022",
                        "endDate": "28.3.2022"
                      },
                      "chargebackInformation": {
                        "chargebackAmount": -10.9,
                        "valueDate": "2020-01-01 00:00:00.000"
                      },
                      "seizureInformation": {
                        "seizureAmount": -278.15
                      }
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ],
              "totalDebt": -200,
              "totalRent": 0,
              "spendingToIncomeRatio": 0.75,
              "debtToIncomeRatio": 0.75,
              "rentToIncomeRatio": 0.75,
              "completeMonths": [
                "2020-09"
              ],
              "monthlyData": {
                "totalIncome": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "salary": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ],
                      "employers": [
                        "Bar Centrale"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 3,
                  "firstDate": "2021-07-10 00:00:00.000",
                  "lastDate": "2021-08-10 00:00:00.000"
                },
                "rebookings": {
                  "extendedAnalysisPerformed": "ANALYSED",
                  "totalMonthlyAmounts": [
                    {
                      "totalRebookingIncome": 200,
                      "totalRebookingSpending": 200,
                      "month": "2020-01",
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ]
                },
                "capitalIncome": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "rentalIncome": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "pensionAndRetirement": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "governmentAid": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "alimony": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "cashDeposit": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "childBenefit": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "studentGrant": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "gamblingIncome": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "operatingRevenue": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "taxRefund": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "loanDisbursement": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                }
              }
            }
          }
        }

    spendingReportResponseExample:
      value:
        {
          "reports": {
            "spending": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "SPENDING",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 29,
              "countIncomeTransactions": 17,
              "countSpendingTransactions": 0,
              "totalIncome": 150.75,
              "totalSpending": 0,
              "totalBalance": 150.75,
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -100.5,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ],
                      "overdraftInformation": {
                        "overdraftInterestAmount": 99.9,
                        "interestAmount": 99.9,
                        "startDate": "1.1.2022",
                        "endDate": "28.3.2022"
                      },
                      "chargebackInformation": {
                        "chargebackAmount": -10.9,
                        "valueDate": "2020-01-01 00:00:00.000"
                      },
                      "seizureInformation": {
                        "seizureAmount": -278.15
                      }
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ],
              "totalDebt": -200,
              "totalRent": 0,
              "spendingToIncomeRatio": 0.75,
              "debtToIncomeRatio": 0.75,
              "rentToIncomeRatio": 0.75,
              "completeMonths": [
                "2020-09"
              ],
              "monthlyData": {
                "totalSpending": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "rebookings": {
                  "extendedAnalysisPerformed": "ANALYSED",
                  "totalMonthlyAmounts": [
                    {
                      "totalRebookingIncome": 200,
                      "totalRebookingSpending": 200,
                      "month": "2020-01",
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ]
                },
                "rentAndLiving": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "insurance": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "bankAndCredit": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "loanAndInterest": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "savings": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "travel": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "tax": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "mobility": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "shopping": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "entertainment": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "healthAndWellness": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "children": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "personnelCosts": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "travelExpenses": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "legal": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 100.5,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 100.5,
                  "maxTotalMonthlyAmount": 100.5,
                  "averageTotalMonthlyAmount": 100.5,
                  "medianTotalMonthlyAmount": 100.5,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 1
                },
                "billings": {
                  "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": 0.00,
                      "transactionsCount": 0,
                      "transactionIds": [

                      ]
                    }
                  ],
                  "minTotalMonthlyAmount": 0,
                  "maxTotalMonthlyAmount": 0,
                  "averageTotalMonthlyAmount": 0,
                  "medianTotalMonthlyAmount": 0,
                  "totalTransactionsAmount": 100.5,
                  "totalTransactionsCount": 0
                }
              }
            }
          }
        }

    rentAndLivingReportResponseExample:
      value:
        {
          "reports": {
            "rentAndLiving": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "RENTANDLIVING",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 17,
              "countSpendingTransactions": 0,
              "totalIncome": 150.75,
              "totalSpending": 0,
              "totalBalance": 150.75,
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ],
                      "chargebackInformation": {
                        "chargebackAmount": -10.9,
                        "valueDate": "2020-01-01 00:00:00.000"
                      }
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    riskIndicatorsReportResponseExample:
      value:
        {
          "reports": {
            "riskIndicators": {
              "id": "9e6cec12-164b-47db-a93d-251a282d0cd5",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "chargebacks": {
                "id": "4e760145-2e65-4242-ac33-488943528c93",
                "creationDate": "2020-01-01 00:00:00.000",
                "caseId": "4e760145-2e65-4242-ac33-488943528c93",
                "type": "CHARGEBACKS",
                "startDate": "2020-01-01 00:00:00.000",
                "endDate": "2020-02-01 00:00:00.000",
                "daysOfReport": 20,
                "transactionsStartDate": "2020-01-01 00:00:00.000",
                "totalTransactionsCount": 20,
                "countIncomeTransactions": 17,
                "countSpendingTransactions": 0,
                "totalIncome": 150.75,
                "totalSpending": 0,
                "totalBalance": 150.75,
                "accountData": [
                  {
                    "bankName": "TESTBANK",
                    "bankId": "b23d5c7e-488f-497e-b066-29d6ffeaf26b",
                    "accountId": "4a373ad6-a1f6-11ec-b909-0242ac120002",
                    "accountIban": "DE11700500000008670111",
                    "accountHolderName": "Max Müller und Christina Schneider",
                    "accountHolderType": "JOINT",
                    "accountCurrency": "EUR",
                    "transactions": [
                      {
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                        "valueDate": "2020-01-01 00:00:00.000",
                        "bankBookingDate": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "purpose": "Restaurantbesuch",
                        "counterpartName": "Bar Centrale",
                        "counterpartAccountNumber": "0061110500",
                        "counterpartIban": "DE13700800000061110500",
                        "counterpartBlz": "70080000",
                        "counterpartBic": "DRESDEFF700",
                        "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                        "labels": [
                          "ENUMLABEL"
                        ],
                        "chargebackInformation": {
                          "chargebackAmount": -10.99,
                          "valueDate": "2020-01-01 00:00:00.000"
                        }
                      }
                    ]
                  }
                ],
                "completeMonths": [
                  "2020-01"
                ],
                "monthlyData": {
                  "chargebacks": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [

                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  },
                  "chargebacksPassive": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [

                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  },
                  "chargebacksObjection": {
                    "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": -99.9,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    },
                    {
                      "month": "2020-02",
                      "totalAmount": 0,
                      "transactionsCount": 0,
                      "transactionIds": [

                      ]
                    }
                      ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  },
                  "chargebacksObjectionPassive": {
                    "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": -99.9,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    },
                    {
                      "month": "2020-02",
                      "totalAmount": 0,
                      "transactionsCount": 0,
                      "transactionIds": [

                      ]
                    }
                  ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  },
                  "chargebacksUndefined": {
                    "totalMonthlyAmounts": [
                    {
                      "month": "2020-01",
                      "totalAmount": -99.9,
                      "transactionsCount": 1,
                      "transactionIds": [
                        "4e760986-2e65-4242-ac33-488943528c93"
                      ]
                    },
                    {
                      "month": "2020-02",
                      "totalAmount": 0,
                      "transactionsCount": 0,
                      "transactionIds": [

                      ]
                    }
                  ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  }
                }
              },
              "debtCollection": {
                "id": "4e760145-2e65-4242-ac33-488943528c93",
                "creationDate": "2020-01-01 00:00:00.000",
                "caseId": "4e760145-2e65-4242-ac33-488943528c93",
                "type": "DEBTCOLLECTION",
                "startDate": "2020-01-01 00:00:00.000",
                "endDate": "2020-01-01 00:00:00.000",
                "daysOfReport": 20,
                "transactionsStartDate": "2020-01-01 00:00:00.000",
                "totalTransactionsCount": 20,
                "countIncomeTransactions": 17,
                "countSpendingTransactions": 0,
                "totalIncome": 150.75,
                "totalSpending": 0,
                "totalBalance": 150.75,
                "accountData": [
                  {
                    "bankName": "TESTBANK",
                    "bankId": "b23d5c7e-488f-497e-b066-29d6ffeaf26b",
                    "accountId": "4a373ad6-a1f6-11ec-b909-0242ac120002",
                    "accountIban": "DE11700500000008670111",
                    "accountHolderName": "Max Müller und Christina Schneider",
                    "accountHolderType": "JOINT",
                    "accountCurrency": "EUR",
                    "transactions": [
                      {
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                        "valueDate": "2020-01-01 00:00:00.000",
                        "bankBookingDate": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "purpose": "Restaurantbesuch",
                        "counterpartName": "Bar Centrale",
                        "counterpartAccountNumber": "0061110500",
                        "counterpartIban": "DE13700800000061110500",
                        "counterpartBlz": "70080000",
                        "counterpartBic": "DRESDEFF700",
                        "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                        "labels": [
                          "ENUMLABEL"
                        ],
                        "chargebackInformation": {
                          "chargebackAmount": -10.9,
                          "valueDate": "2020-01-01 00:00:00.000"
                        }
                      }
                    ]
                  }
                ],
                "completeMonths": [
                  "2020-01"
                ],
                "monthlyData": {
                  "debtCollection": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [
                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  }
                }
              },
              "gambling": {
                "id": "4e760145-2e65-4242-ac33-488943528c93",
                "creationDate": "2020-01-01 00:00:00.000",
                "caseId": "4e760145-2e65-4242-ac33-488943528c93",
                "type": "GAMBLING",
                "startDate": "2020-01-01 00:00:00.000",
                "endDate": "2020-01-01 00:00:00.000",
                "daysOfReport": 20,
                "transactionsStartDate": "2020-01-01 00:00:00.000",
                "totalTransactionsCount": 20,
                "countIncomeTransactions": 17,
                "countSpendingTransactions": 0,
                "totalIncome": 150.75,
                "totalSpending": 0,
                "totalBalance": 150.75,
                "accountData": [
                  {
                    "bankName": "TESTBANK",
                    "bankId": "b23d5c7e-488f-497e-b066-29d6ffeaf26b",
                    "accountId": "4a373ad6-a1f6-11ec-b909-0242ac120002",
                    "accountIban": "DE11700500000008670111",
                    "accountHolderName": "Max Müller und Christina Schneider",
                    "accountHolderType": "JOINT",
                    "accountCurrency": "EUR",
                    "transactions": [
                      {
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                        "valueDate": "2020-01-01 00:00:00.000",
                        "bankBookingDate": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "purpose": "Restaurantbesuch",
                        "counterpartName": "Bar Centrale",
                        "counterpartAccountNumber": "0061110500",
                        "counterpartIban": "DE13700800000061110500",
                        "counterpartBlz": "70080000",
                        "counterpartBic": "DRESDEFF700",
                        "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                        "labels": [
                          "ENUMLABEL"
                        ],
                        "chargebackInformation": {
                          "chargebackAmount": -10.9,
                          "valueDate": "2020-01-01 00:00:00.000"
                        }
                      }
                    ]
                  }
                ],
                "completeMonths": [
                  "2020-01"
                ],
                "monthlyData": {
                  "gambling": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [
                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  }
                }
              },
              "seizure": {
                "id": "4e760145-2e65-4242-ac33-488943528c93",
                "creationDate": "2020-01-01 00:00:00.000",
                "caseId": "4e760145-2e65-4242-ac33-488943528c93",
                "type": "SEIZURE",
                "startDate": "2020-01-01 00:00:00.000",
                "endDate": "2020-01-01 00:00:00.000",
                "daysOfReport": 20,
                "transactionsStartDate": "2020-01-01 00:00:00.000",
                "totalTransactionsCount": 20,
                "countIncomeTransactions": 17,
                "countSpendingTransactions": 0,
                "totalIncome": 150.75,
                "totalSpending": 0,
                "totalBalance": 150.75,
                "accountData": [
                  {
                    "bankName": "TESTBANK",
                    "bankId": "b23d5c7e-488f-497e-b066-29d6ffeaf26b",
                    "accountId": "4a373ad6-a1f6-11ec-b909-0242ac120002",
                    "accountIban": "DE11700500000008670111",
                    "accountHolderName": "Max Müller und Christina Schneider",
                    "accountHolderType": "JOINT",
                    "accountCurrency": "EUR",
                    "transactions": [
                      {
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                        "valueDate": "2020-01-01 00:00:00.000",
                        "bankBookingDate": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "purpose": "Restaurantbesuch",
                        "counterpartName": "Bar Centrale",
                        "counterpartAccountNumber": "0061110500",
                        "counterpartIban": "DE13700800000061110500",
                        "counterpartBlz": "70080000",
                        "counterpartBic": "DRESDEFF700",
                        "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                        "labels": [
                          "ENUMLABEL"
                        ],
                        "chargebackInformation": {
                          "chargebackAmount": -10.9,
                          "valueDate": "2020-01-01 00:00:00.000"
                        },
                        "seizureInformation": {
                          "seizureAmount": -278.15
                        }
                      }
                    ]
                  }
                ],
                "completeMonths": [
                  "2020-01"
                ],
                "monthlyData": {
                  "seizure": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [
                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  },
                  "seizurePassive": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [
                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  }
                }
              },
              "creditLimit": {
                "id": "4e760145-2e65-4242-ac33-488943528c93",
                "creationDate": "2020-01-01 00:00:00.000",
                "caseId": "4e760145-2e65-4242-ac33-488943528c93",
                "type": "CREDITLIMIT",
                "startDate": "2020-01-01 00:00:00.000",
                "endDate": "2020-01-01 00:00:00.000",
                "daysOfReport": 20,
                "transactionsStartDate": "2020-01-01 00:00:00.000",
                "totalTransactionsCount": 20,
                "countIncomeTransactions": 17,
                "countSpendingTransactions": 0,
                "totalIncome": 150.75,
                "totalSpending": 0,
                "totalBalance": 150.75,
                "accountData": [
                  {
                    "bankName": "TESTBANK",
                    "bankId": "b23d5c7e-488f-497e-b066-29d6ffeaf26b",
                    "accountId": "4a373ad6-a1f6-11ec-b909-0242ac120002",
                    "accountIban": "DE11700500000008670111",
                    "accountHolderName": "Max Müller und Christina Schneider",
                    "accountHolderType": "JOINT",
                    "accountCurrency": "EUR",
                    "transactions": [
                      {
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                        "valueDate": "2020-01-01 00:00:00.000",
                        "bankBookingDate": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "purpose": "Restaurantbesuch",
                        "counterpartName": "Bar Centrale",
                        "counterpartAccountNumber": "0061110500",
                        "counterpartIban": "DE13700800000061110500",
                        "counterpartBlz": "70080000",
                        "counterpartBic": "DRESDEFF700",
                        "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                        "labels": [
                          "ENUMLABEL"
                        ],
                        "overdraftInformation": {
                          "overdraftInterestAmount": 99.9,
                          "interestAmount": 99.9,
                          "startDate": "1.1.2022",
                          "endDate": "28.3.2022"
                        }
                      }
                    ]
                  }
                ],
                "completeMonths": [
                  "2020-01"
                ],
                "monthlyData": {
                  "creditLimit": {
                    "totalMonthlyAmounts": [
                      {
                        "month": "2020-01",
                        "totalAmount": -99.9,
                        "totalOverdraftInterestAmount": -0.9,
                        "totalInterestAmount": -99.0,
                        "transactionsCount": 1,
                        "transactionIds": [
                          "4e760986-2e65-4242-ac33-488943528c93"
                        ]
                      },
                      {
                        "month": "2020-02",
                        "totalAmount": 0,
                        "totalOverdraftInterestAmount": 0,
                        "totalInterestAmount": 0,
                        "transactionsCount": 0,
                        "transactionIds": [
                        ]
                      }
                    ],
                    "minTotalMonthlyAmount": -99.9,
                    "maxTotalMonthlyAmount": 0.00,
                    "averageTotalMonthlyAmount": -49.95,
                    "medianTotalMonthlyAmount": 0.00,
                    "totalTransactionsAmount": 100.5,
                    "totalTransactionsCount": 1
                  }
                }
              }
            }
          }

        }

    mafReportResponseExample:
      value:
        {
          "reports": {
            "maximumAvailableFunds": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "MAXIMUMAVAILABLEFUNDS",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "mafData": [
                {
                  "latestBalance": 12345.67,
                  "mafDate": "2020-03-09",
                  "balancesStartDate": "2020-01-01 00:00:00.000",
                  "totalBalancesDaysCount": 20,
                  "maxAvailableFunds": 100,
                  "income": 99,
                  "spending": 98,
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountCurrency": "EUR"
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    insuranceReportResponseExample:
      value:
        {
          "reports": {
            "insurance": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "INSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 17,
              "countSpendingTransactions": 0,
              "totalIncome": 150.75,
              "totalSpending": 0,
              "totalBalance": 150.75,
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ],
                      "chargebackInformation": {
                        "chargebackAmount": -10.9,
                        "valueDate": "2020-01-01 00:00:00.000"
                      }
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsInsuranceReportResponseExample:
      value:
        {
          "reports": {
            "contractsInsurance": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSINSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LIFEINSURANCE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "Allianz Lebensversicherung AG",
                  "customerNumber": "45kjH32010",
                  "contractNumber": "ske3802kdj3ud",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsLoanReportResponseExample:
      value:
        {
          "reports": {
            "contractsLoan": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSINSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LIFEINSURANCE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "Allianz Lebensversicherung AG",
                  "customerNumber": "45kjH32010",
                  "contractNumber": "ske3802kdj3ud",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsLoanValidatorReportResponseExample:
      value:
        {
          "reports": {
            "contractsLoanValidator": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSLOANVALIDATOR",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LOANANDINTEREST",
                  "contractSource": "BANKING_AND_SCHUFA",
                  "matchedPeriod": "MONTHLY",
                  "matchedContractStatus": "INACTIVE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "ING-DiBa",
                  "contractNumber": "5702771424",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  },
                  "schufaContractDetails": {
                    "schufaType": "HP",
                    "description": "grundpfandrechtlich gesicherter Kredit",
                    "date": "2020-06-30",
                    "amount": 200001.0,
                    "currency": "EUR",
                    "numberOfRates": 12,
                    "typeOfRate": "MONTHLY",
                    "contractStatus": "INACTIVE"
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "creditCheck": [
                {
                  "schufaReference": "schufaRef2",
                  "participantReference": "partRef2",
                  "featureCode": "KH",
                  "consumer": {
                    "gender": "M",
                    "firstName": "Nofritz",
                    "lastName": "Nolang",
                    "dateOfBirth": "2020-01-01",
                    "currentAddress": {
                      "street": "Musterstrasse 7",
                      "zipCode": "12345",
                      "city": "Beispielstadt",
                      "country": "DEU"
                    }
                  },
                  "schufaData": [
                    {
                      "id": "${json-unit.matches:isValidUUID}",
                      "characteristicCode": "GI",
                      "description": "Girokonto",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "${json-unit.matches:isValidUUID}",
                      "characteristicCode": "HP",
                      "description": "grundpfandrechtlich gesicherter Kredit",
                      "contractDate": "2020-06-30",
                      "amount": 200001.0,
                      "currency": "EUR",
                      "numberOfRates": 12,
                      "typeOfRate": "MONTHLY",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    }
                  ]
                },
                {
                  "schufaReference": "schufaRef1",
                  "participantReference": "partRef1",
                  "featureCode": "KH",
                  "consumer": {
                    "gender": "M",
                    "firstName": "Nofritz",
                    "lastName": "Nolang",
                    "dateOfBirth": "2020-01-01",
                    "currentAddress": {
                      "street": "Musterstrasse 7",
                      "zipCode": "12345",
                      "city": "Beispielstadt",
                      "country": "DEU"
                    }
                  },
                  "scoreCheck": [
                    {
                      "score": {
                        "description": "score description1",
                        "segment": "segment1",
                        "text": "text1",
                        "infoText": [
                          "info1",
                          "info2"
                        ],
                        "riskQuote": "1.23"
                      }
                    },
                    {
                      "score": { },
                      "scoreError": "Score error 1"
                    }
                  ],
                  "schufaData": [
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c8c",
                      "characteristicCode": "GI",
                      "description": "Girokonto",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c8b",
                      "characteristicCode": "HP",
                      "description": "grundpfandrechtlich gesicherter Kredit",
                      "contractDate": "UNBEFRISTET",
                      "accountNumber": "ZAHLBAR IN 1ER RATE",
                      "amount": 200000.0,
                      "currency": "EUR",
                      "numberOfRates": 72,
                      "typeOfRate": "YEARLY",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c8a",
                      "characteristicCode": "RK",
                      "description": "Rahmenkredit",
                      "contractDate": "2020-06-30",
                      "amount": 200000.0,
                      "currency": "EUR",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c89",
                      "characteristicCode": "MA",
                      "description": "Mitverpflichtung für ein Blankobauspardarlehen",
                      "contractDate": "2020-06-30",
                      "amount": 200000.0,
                      "currency": "EUR",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c88",
                      "characteristicCode": "HP",
                      "description": "grundpfandrechtlich gesicherter Kredit",
                      "contractDate": "2020-09-01",
                      "numberOfRates": 24,
                      "typeOfRate": "YEARLY",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c87",
                      "characteristicCode": "CC",
                      "description": "Kreditkarte",
                      "contractDate": "1999-07-28",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c86",
                      "characteristicCode": "KW",
                      "description": "Abwicklungskonto",
                      "contractDate": "2020-05-15",
                      "characteristicAttributes": {
                        "attributeType": "MAIN",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c85",
                      "characteristicCode": "SG",
                      "description": "Saldo nach Gesamtfaelligstellung",
                      "contractDate": "2020-05-15",
                      "amount": 1000.0,
                      "currency": "EUR",
                      "characteristicAttributes": {
                        "attributeType": "SUB",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c84",
                      "characteristicCode": "SE",
                      "description": "titulierter Saldo",
                      "contractDate": "2020-06-15",
                      "amount": 1500.0,
                      "currency": "EUR",
                      "characteristicAttributes": {
                        "attributeType": "SUB",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c83",
                      "characteristicCode": "SV",
                      "description": "Saldovergleich",
                      "contractDate": "2020-09-01",
                      "accountNumber": "ZAHLBAR IN 1ER RATE",
                      "amount": 555.0,
                      "currency": "EUR",
                      "characteristicAttributes": {
                        "attributeType": "SUB",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c82",
                      "characteristicCode": "KH",
                      "description": "Anfrage Immobilienkreditkonditionen",
                      "contractDate": "2021-02-11",
                      "characteristicAttributes": {
                        "attributeType": "SINGLE",
                        "withoutDateOfBirth": false,
                        "customAttribute": true
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c81",
                      "parentId": "4e760145-2e65-4242-ac33-488943528c82",
                      "characteristicCode": "ER",
                      "description": "Erledigt",
                      "contractDate": "2020-02-01",
                      "characteristicAttributes": {
                        "attributeType": "COMPLETION",
                        "withoutDateOfBirth": false,
                        "customAttribute": false
                      }
                    },
                    {
                      "id": "4e760145-2e65-4242-ac33-488943528c80",
                      "characteristicCode": "RV",
                      "description": "Restschuldbefreiung versagt",
                      "contractDate": "2020-11-05",
                      "accountNumber": "AZ 2020-20 MUENCHEN",
                      "characteristicAttributes": {
                        "attributeType": "SINGLE",
                        "withoutDateOfBirth": true,
                        "customAttribute": false
                      }
                    }
                  ]
                },
                {
                  "schufaReference": "12178496",
                  "featureCode": "KH",
                  "consumer": {
                    "gender": "M",
                    "firstName": "Nofritz",
                    "lastName": "Nolang",
                    "dateOfBirth": "2020-01-01",
                    "currentAddress": {
                      "street": "Musterstrasse 7",
                      "zipCode": "12345",
                      "city": "Beispielstadt",
                      "country": "DEU"
                    }
                  },
                  "scoreCheck": [
                    {
                      "score": {
                        "description": "Score-Info",
                        "infoText": [
                          "01 OHNE SCORE, KUNDE IST DER SCHUFA UNBEKANNT"
                        ]
                      }
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsGasReportResponseExample:
      value:
        {
          "reports": {
            "contractsGas": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSINSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LIFEINSURANCE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "Allianz Lebensversicherung AG",
                  "customerNumber": "45kjH32010",
                  "contractNumber": "ske3802kdj3ud",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsElectricityReportResponseExample:
      value:
        {
          "reports": {
            "contractsElectricity": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSINSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LIFEINSURANCE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "Allianz Lebensversicherung AG",
                  "customerNumber": "45kjH32010",
                  "contractNumber": "ske3802kdj3ud",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    contractsTelecommunicationReportResponseExample:
      value:
        {
          "reports": {
            "contractsTelecommunication": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "CONTRACTSINSURANCE",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01 00:00:00.000",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countContracts": 1,
              "contractsData": [
                {
                  "contractId": "4e760145-2e65-4242-ac33-488943528c93",
                  "contractType": "LIFEINSURANCE",
                  "newContract": true,
                  "contractStatus": "ACTIVE",
                  "companyName": "Allianz Lebensversicherung AG",
                  "customerNumber": "45kjH32010",
                  "contractNumber": "ske3802kdj3ud",
                  "companyDetails": {
                    "companyId": "4e760145-2e65-4242-ac33-488943528c93",
                    "addressCity": "Stuttgart",
                    "addressCountry": "Deutschland",
                    "addressZip": 70178,
                    "addressStreetName": "Reinsburgerstraße",
                    "addressStreetNumber": 19,
                    "contactMail": "info@allianz.de",
                    "contactPhone": "+49 89 3800-0"
                  },
                  "billing": {
                    "period": "MONTHLY",
                    "firstBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingDate": "2020-01-01 00:00:00.000",
                    "lastBillingAmount": -99.99,
                    "averageContractIncome": 0,
                    "averageContractSpending": -99.99,
                    "totalContractIncome": 0,
                    "totalContractSpending": -99.99,
                    "totalBillingsCount": 1,
                    "history": [
                      {
                        "date": "2020-01-01 00:00:00.000",
                        "amount": -99.99,
                        "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      }
                    ]
                  }
                }
              ],
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountCurrency": "EUR",
                  "transactions": [
                    {
                      "transactionId": "4e760986-2e65-4242-ac33-488943528c93",
                      "contractIds": [
                        "4e760145-2e65-4242-ac33-488943528c93"
                      ],
                      "valueDate": "2020-01-01 00:00:00.000",
                      "bankBookingDate": "2020-01-01 00:00:00.000",
                      "amount": -99.99,
                      "purpose": "Restaurantbesuch",
                      "counterpartName": "Bar Centrale",
                      "counterpartAccountNumber": "0061110500",
                      "counterpartIban": "DE13700800000061110500",
                      "counterpartBlz": "70080000",
                      "counterpartBic": "DRESDEFF700",
                      "counterpartBankName": "Commerzbank vormals Dresdner Bank",
                      "labels": [
                        "ENUMLABEL"
                      ]
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    balancesReportResponseExample:
      value:
        {
          "reports": {
            "balances": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "type": "BALANCES",
              "startDate": "2020-01-01 00:00:00.000",
              "endDate": "2020-01-01 00:00:00.000",
              "daysOfReport": 20,
              "countIncomeTransactions": 17,
              "countSpendingTransactions": 0,
              "totalIncome": 150.75,
              "totalSpending": 0,
              "totalBalance": 150.75,
              "accountData": [
                {
                  "bankName": "Commerzbank",
                  "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                  "accountIban": "DE13700800000061110500",
                  "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                  "balances": {
                    "balancesStartDate": "2020-01-01 00:00:00.000",
                    "totalBalancesDaysCount": 20,
                    "balance": 12345.67,
                    "averageBalance": 12345.67,
                    "minimumBalance": 12345.67,
                    "minimumBalanceDate": "2020-01-01",
                    "maximumBalance": 12345.67,
                    "maximumBalanceDate": "2020-01-01",
                    "overdraftLimit": 12345.67,
                    "spending": 12345.67,
                    "income": 12345.67
                  },
                  "monthlyData": [
                    {
                      "month": "2023-01",
                      "minMonthlyBalance": 1000.0,
                      "minMonthlyBalanceDate": "2020-01-01",
                      "maxMonthlyBalance": 3000.0,
                      "maxMonthlyBalanceDate": "2020-01-01",
                      "averageMonthlyBalance": 1323.43,
                      "dailyBalancesCount": 20
                    }
                  ]
                }
              ],
              "childReports": [
                {
                  "creationDate": "2020-01-01 00:00:00.000",
                  "reportId": "4e760145-2e65-4242-ac33-488943528c93"
                }
              ]
            }
          }
        }

    recurringTransactionReportResponseExample:
      value:
        {
          "reports": {
            "recurringTransactions": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "startDate": "2020-01-01",
              "endDate": "2020-01-01",
              "daysOfReport": 20,
              "transactionsStartDate": "2020-01-01",
              "totalTransactionsCount": 20,
              "countIncomeTransactions": 0,
              "countSpendingTransactions": 1,
              "totalIncome": 0,
              "totalSpending": -99.99,
              "totalBalance": -99.99,
              "countRecurrencies": 1,
              "recurrencyData": [
                {
                  "recurrenceGroupId": "4e760145-2e65-4242-ac33-488943528c93",
                  "frequency": "Monthly",
                  "firstTransactionDate": "2020-01-01",
                  "lastTransactionDate": "2020-01-01",
                  "recurrenceCounterpart": "Allianz Lebensversicherung AG",
                  "recurrenceCounterpartIBAN": "DExxx",
                  "accountData": {
                    "bankName": "Commerzbank",
                    "bankId": "4e760145-2e65-4242-ac33-488943528c93",
                    "accountIban": "DE13700800000061110500",
                    "accountId": "4e760145-2e65-4242-ac33-488943528c93",
                    "accountHolderName": "John Doe",
                    "accountHolderType": "PRIVATE",
                    "accountCurrency": "EUR"
                  },
                  "details": {
                    "lastAmount": -99.99,
                    "averageRecurrencyIncome": 0,
                    "averageRecurrencySpending": -99.99,
                    "totalRecurrencyIncome": 0,
                    "totalRecurrencySpending": -99.99,
                    "totalRecurrencyCount": 1,
                    "labels" :["SALARY", "INCOME"],
                    "history": [
                      {
                        "transactionId": "8a01f385-b290-4333-95f9-f5ba1a55b749",
                        "date": "2020-01-01",
                        "amount": -99.99
                      }
                    ]
                  }
                }
              ]
            }
          }
        }

    crossCountryTransfersReportResponseExample:
      value:
        {
          "reports": {
            "crossCountry": {
              "id": "4e760145-2e65-4242-ac33-488943528c93",
              "creationDate": "2020-01-01 00:00:00.000",
              "caseId": "4e760145-2e65-4242-ac33-488943528c93",
              "startDate": "2020-01-20",
              "endDate": "2020-12-01",
              "daysOfReport": 300,
              "transactionsStartDate": "2020-01-21",
              "totalTransactionsCount": 10,
              "totalTransactionsSum": 4431.1,
              "totalTransactionsAvg": 2421.1,
              "crossCountryTransfers": [
                {
                  "originationCountry": {
                    "code": "DE",
                    "name": "Germany"
                  },
                  "destinationCountry": {
                    "code": "FR",
                    "name": "France"
                  },
                  "frequency": "MONTHLY",
                  "totalTransactionsCount": 2,
                  "totalTransactionsSum": 3431.1,
                  "totalTransactionsAvg": 1421.1,
                  "monthlyTransfers": [
                    {
                      "month": "2023-01",
                      "average": 2401.1,
                      "totalSum": 5000.0,
                      "transactionsCount": 2
                    },
                    {
                      "month": "2023-02",
                      "average": 2401.1,
                      "totalSum": 5000.0,
                      "transactionsCount": 2
                    }
                  ]
                }
              ],
              "completeMonths": [
                "2023-01",
                "2023-02"
              ]
            }
          }
        }
