---
openapi: 3.0.1
info:
  title: finAPI Process Controller - Solutions
  version: "2024.32.1"
  description: |-
    Welcome to finAPI!

    The following pages give you some general information on how to use the API.
    The actual API services documentation then follows further below. You can use the menu to jump between API sections.

    This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button.

    *Note that you need to be authorized to make a successful API call for some endpoints.
    To authorize, a process token must be created and the access token must be fetched via the GET endpoint.
    This can then be set via `QUICK AUTH` for the further session.*
    
    In general, authorized API endpoints require authorization with an OAuth user-token with the necessary (product-specific- or administrative-) scopes as defined in this document. 
    **Authorization with OAuth client-tokens is not possible**. For retrieval of the required __authorization token__ to use this service, refer to the 
    [DI Solutions Public Documentation](https://documentation.finapi.io/dippd/getting-started-authorization)'s authorization-related chapter to elaborate the approach suitable for your product,
    and to understand the required scopes.
    
    Besides the built-in client, we provide [Postman](https://www.postman.com/downloads/) collection for 
    testing on our sandbox environment (right-click on the links to store the 
    <a href="https://di-processctl-finapi-general-sandbox.finapi.io/postman_customer/finapi-process-controller-postman-customer.zip" target="_blank">ZIP archive file</a>.

    You should also check out the Developer Portal for more information. If you need any help with the API, contact support@finapi.io

    <sub>Application-Version: 1.378.0</sub>
  contact:
    name: finAPI GmbH
    url: https://www.finapi.io/impressum/
    email: kontakt@finapi.io
  x-logo:
    url: https://docs.finapi.io/assets/img/fin-API-Logo_RGB.png
servers:
  - url: 'https://di-processctl.finapi-general-staging.finapi.net/api/v1'
  - url: 'https://di-processctl-finapi-general-live.finapi.io/api/v1'
tags:
  - name: Configuration
  - name: Data Import
  - name: GiroCheck
  - name: Payment
  - name: KreditCheck
  - name: KreditCheck B2B - deprecated
  - name: GiroIdent
  - name: Contract Management

paths:
  "/configuration/{processToken}":
    post:
      tags:
        - Configuration
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfig'
      responses:
        '204':
          description: Success
        '400':
          description: Validation error or invalid reconfiguration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage400Example'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
              examples:
                unauthorized:
                  $ref: '#/components/examples/errorMessage401Unauthorized'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: createConfiguration
      summary: Create a new configuration for the process
      description: "Create a new process configuration; the process will apply this new configuration and replace the existing one"
    get:
      tags:
        - Configuration
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowParameters"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get configuration parameters
      operationId: getConfiguration
      description: "Returns the parameters for the given configuration"

  "/configuration/{processToken}/states":
    get:
      tags:
        - Configuration
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowState"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: getStates
      summary: Get states
      description: "Returns state events for the given process recorded until now."

  "/dataImports/{processToken}":
    get:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '200':
          description: State of all imports for the given process
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResults"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage404Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get state of all imports
      operationId: getDataImportResults
      description: "Gets states for the imports for a process"

    post:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDetails'
      callbacks:
        import:
          '{$request.body#/callback-url}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/ImportResultsEvent"
              responses:
                '200':
                  description: Response if callback was accepted.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateImportResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: dataImport
      summary: Import data from bank(s)
      description: |-
        Import via web form to Access, and synchronize datasource to DI

        `iban` is a mandatory input depending on the process; 
        Multiple `additionalAccountType` parameters can be added, the value must match the `AccountType` enum.
        Parameters either may be passed via API call, or set as parameter.

  "/dataImports/{processToken}/{importId}":
    get:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/importIdentifier'
      responses:
        '200':
          description: Current state of the import. Returns a list of imported accounts in case of <code>SUCCESSFUL</code> state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get result of an import
      operationId: getDataImportResult
      description: "Gets final states for the import"
    put:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/importIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDetails'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateImportResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Update an import of a bank
      operationId: updateDataImport
      description: "Repeat import via web form to Access (for example for a failed import), and synchronize datasource to DI. Replaces the previous result."
    delete:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/importIdentifier'
      responses:
        '200':
          description: Success
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Delete the data import
      operationId: deleteDataImport
      description: "Deletes a data import instance"

  "/dataImports/{processToken}/{importId}/{accountId}":
    delete:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/importIdentifier'
        - $ref: '#/components/parameters/accountIdentifier'
      responses:
        '200':
          description: Success
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage404Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Delete account
      operationId: deleteAccount
      description: |- 
        Deletes an account for a given data import instance.
        <br> 
        Deletion of the last account of an import will implicitely delete the import instance itself.

  "/dataImports/{processToken}/analyze":
    post:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '201':
          description: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Start data analysis
      operationId: dataImportAnalyze
      description: |- 
        Triggers an extended analysis in the DI Report Service, for example to detect rebookings.
        
        > Note: shall be called after all imports of bank connections is completed and the import is finalized. 

    get:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '200':
          description: Current state of the analysis.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get result of an analysis
      operationId: getDataImportAnalyzeResult
      description: "Gets final states for the analysis"

  "/dataImports/{processToken}/finalize":
    post:
      tags:
        - Data Import
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process or instance token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Finalize the data import step
      operationId: dataImportFinalize
      description: "Finalize the data import. Implicitly invalidated the process token to prevent further imports in finAPI Access."

  "/payments/{processToken}/payment/{accountId}":
    post:
      tags:
        - Payment
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/accountIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWithAccountDetails'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePaymentResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: Not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                notFoundResource:
                  $ref: '#/components/examples/errorMessage404Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Create a payment with account ID
      description: |
        Initiates payment from a specific checking account using an account ID. 
        A pre-requisite for using this service is, the payment account must already be imported and stored in Access 
        and associated with an account ID. This is ideal for customers who's use case might involve monitoring and 
        managing payment accounts and also recurring possible payment initiations from the same account.
      operationId: createForPaymentWithAccountId

  "/payments/{processToken}/{paymentId}":
    get:
      tags:
        - Payment
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK, KREDITCHECK, KREDITCHECK_B2B, DEBITFLEX, GIRO_IDENT, ACCESS ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/paymentIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitiatePaymentResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: Not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                notFoundResource:
                  $ref: '#/components/examples/errorMessage404Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Retrieve Payment state and result
      operationId: getPaymentState
      description: |-
        Retrieve Payment state and result.

  "/checks/{processToken}/kreditcheck/b2c":
    post:
      tags:
        - KreditCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDacLoanCheck'
      callbacks:
        kreditcheck:
          '{$request.body#/callback-url}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DacLoanCheckResultEvent"
              responses:
                '200':
                  description: Response if callback was accepted.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDacLoanCheckResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: creditCheckB2cCreate
      summary: Create credit check B2C
      description: |-
        Create a Kreditcheck.

  "/checks/{processToken}/kreditcheck/b2b":
    post:
      tags:
        - KreditCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDacLoanB2bCheck'
      callbacks:
        kreditcheck:
          '{$request.body#/callback-url}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/DacLoanCheckResultEvent"
              responses:
                '200':
                  description: Response if callback was accepted.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDacLoanCheckResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: creditCheckB2bCreate
      summary: Create credit check B2B
      description: |-
        Create a Kreditcheck.

  "/checks/{processToken}/kreditcheck/{kreditCheckId}":
    get:
      tags:
        - KreditCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK, KREDITCHECK_B2B, FINAPI_CLIENT_ADMIN ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DacLoanCheckResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get credit check
      operationId: getCreditCheckResult
      description: "Get a DAC for Loan check result"

  "/checks/{processToken}/kreditcheck/{kreditCheckId}/analysis/dacForLoan/zip":
    get:
      tags:
        - KreditCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK, KREDITCHECK_B2B, FINAPI_CLIENT_ADMIN ]
      parameters:
        - $ref: '#/components/parameters/locale'
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: The result was not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get the result of PDF DAC4Loan as zip file
      operationId: getCreditCheckAnalysisDacForLoan
      description: "Get the result of all dacForLoan PDF as zip file"

  "/checks/{processToken}/kreditcheck/{kreditCheckId}/analysis/account/pdf":
    get:
      tags:
        - KreditCheck
      security:
        - ApiOAuth2: [ FINAPI_CLIENT_ADMIN ]
      parameters:
        - $ref: '#/components/parameters/locale'
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: The result was not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get the result of the account analysis as pdf file
      operationId: getCreditCheckAnalysisAccount
      description: >-
        Get the result of the account analysis as pdf file.
        
        > Note: The endpoint is restricted to the client's client-admin.
        
        > Note: It is possible to configure the Kreditcheck as a plain Digital Account Check variant (without a descission). In this case, a result PDF is not provided.

  "/checks/{processToken}/creditCheckB2B":
    post:
      tags:
        - KreditCheck B2B - deprecated
      deprecated: true
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCreditCheckB2B'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCreditCheckB2BResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
      operationId: creditCheckB2BLegacyCreate
      summary: Create credit check B2B
      description: |-
        Create a credit check B2B

  "/checks/{processToken}/creditCheckB2B/{kreditCheckId}":
    get:
      tags:
        - KreditCheck B2B - deprecated
      deprecated: true
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditCheckB2BResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '404':
          description: The result was not available within the defined timeout.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
      summary: Get credit check B2B
      operationId: getCreditCheckB2BLegacyResult
      description: "Get a credit check B2B result"

  "/checks/{processToken}/creditCheckB2B/{kreditCheckId}/analysis/account/pdf":
    get:
      tags:
        - KreditCheck B2B - deprecated
      deprecated: true
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B ]
      parameters:
        - $ref: '#/components/parameters/locale'
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: The result was not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get the result of the account analysis as pdf file
      operationId: getCreditCheckB2BLegacyAccount
      description: "Get the result of the account analysis as pdf file"

  "/checks/{processToken}/creditCheckB2B/{kreditCheckId}/analysis/dacForLoan/zip":
    get:
      tags:
        - KreditCheck B2B - deprecated
      deprecated: true
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B, FINAPI_CLIENT_ADMIN ]
      parameters:
        - $ref: '#/components/parameters/locale'
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/kreditCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '404':
          description: The result was not available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get the result of all dacForLoan B2B PDF as zip file
      operationId: getCreditCheckB2BLegacyAnalysisDacForLoan
      description: "Get the result of all dacForLoan B2B PDF as zip file"

  "/checks/{processToken}/liquidity":
    post:
      tags:
        - GiroCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLiquidityResult"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: checkLiquidityCreate
      summary: Create check
      description: |-
        Evaluates if the account is risk-bearing

  "/checks/{processToken}/liquidity/{liquidityId}":
    get:
      tags:
        - GiroCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/liquidityIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Liquidity"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get check
      operationId: getCheckLiquidityResult
      description: "Get the check result"

  "/checks/{processToken}/liquidity/{liquidityId}/authorize":
    post:
      tags:
        - GiroCheck
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, GIROCHECK ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/liquidityIdentifier'
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Authorize get check
      operationId: authorizeLiquidityCheck
      description: |
        Authorizes forwarding of the check result to the customer company.

  "/checks/{processToken}/identity/basis":
    post:
      tags:
        - GiroIdent
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, KREDITCHECK_B2B, GIRO_IDENT ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCreateParams'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckCreateResponse"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: checkIdentityBasisCreate
      summary: Create a GiroIdent Basis check
      description: |-
        Evaluates the user's identity.
        
        An import has to be executed upfront. 
        The IBAN provided during the import step is forwarded to GiroIdent, and mandatory in the import step.

  "/checks/{processToken}/identity/{identityCheckId}/basis":
    get:
      tags:
        - GiroIdent
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, KREDITCHECK_B2B, GIRO_IDENT ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/identityCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckModel"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get a GiroIdent Basis check result
      operationId: getCheckIdentityBasisResult
      description: "Get the check result"

  "/checks/{processToken}/identity/plus":
    post:
      tags:
        - GiroIdent
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, GIRO_IDENT ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCreatePlusParams'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckCreateResponse"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: checkIdentityPlusCreate
      summary: Create a GiroIdent Plus check
      description: |-
        Evaluates the user's identity, incl. SCHUFA identity check

        An import has to be executed upfront.
        The IBAN provided during the import step is forwarded to GiroIdent, and mandatory in the import step.

  "/checks/{processToken}/identity/{identityCheckId}/plus":
    get:
      tags:
        - GiroIdent
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, GIRO_IDENT ]
      parameters:
        - $ref: '#/components/parameters/processToken'
        - $ref: '#/components/parameters/identityCheckIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckPlusModel"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      summary: Get a GiroIdent Plus check result
      operationId: getCheckIdentityPlusResult
      description: "Get the check result"

  "/checks/{processToken}/identity/nameValidation":
    post:
      tags:
        - GiroIdent
      security:
        - ApiOAuth2: [ FINAPI_INTERNAL, DATA_INTELLIGENCE, KREDITCHECK_B2B, KREDITCHECK, GIRO_IDENT ]
      parameters:
        - $ref: '#/components/parameters/processToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NameValidationRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameValidationResults"
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageUnauthorized"
        '403':
          description: Not authorized for the given process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage403Example'
        '423':
          description: A required prerequisite is still in progress or not created yet.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                unauthorizedForResource:
                  $ref: '#/components/examples/errorMessage423Example'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorMessage"
              examples:
                invalidInputParameter:
                  $ref: '#/components/examples/errorMessage500Example'
      operationId: checkIdentityNameValidation
      summary: Validate the names for a list of persons and/or companies
      description: |-
        Validates the names for a list or persons and companies. The (overall) result is a success, if for all persons/companies
        the name could be matched at least for on of the imported accounts, at least one mismatch will lead to a failed result.  
        
        At least one import has to be executed upfront. 

components:
  securitySchemes:
    ApiOAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost/api/v1/auth/token
          scopes:
            DATA_INTELLIGENCE: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be DataIntelligence-enabled.
            GIROCHECK: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be GiroCheck-enabled.
            KREDITCHECK: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be KreditCheck-enabled.
            KREDITCHECK_B2B: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be KreditCheckb2B-enabled.
            DEBITFLEX: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be Debitflex-enabled.
            GIRO_IDENT: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be GiroIdent-enabled.
            SCHUFA_API: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be Schufa-API-enabled.
            DI_LABELLING: Grants access to an endpoint. The finAPI-Access mandator (configuration) has to be DI-Keywordlabelling-enabled.
            ACCESS: Grants access to an endpoint The finAPI-Access mandator (configuration) has to be Access-enabled

            FINAPI_INTERNAL: internal calls from other finAPI services will be granted.
            
            FINAPI_FINAPI_ADMIN: Grants access to endpoint, if it is called with finAPI's finapi-admin user.
            FINAPI_CLIENT_ADMIN: Grants access to endpoint, if it is called by the clients's finAPI client-admin user.

            CLIENT: Grants access to endpoint, if it is called by finAPI Access client token.
  schemas:
    PaymentWithAccountDetails:
      required:
        - orders
        - sender
      type: object
      properties:
        executionDate:
          type: string
          description: |
            Execution date for the money transfer(s), in the format <code>YYYY-MM-DD</code>.
            May not be in the past. If not specified, then the current date will
            be used."
          format: date
          nullable: true
          example: "2022-12-31"
        batchBookingPreferred:
          type: boolean
          description: |
            This field is only relevant when you pass multiple orders.
            It determines whether the orders should be processed by the bank as
            one collective booking (in case of <code>true</code>), or as separate
            bookings (in case of <code>false</code>). Note that it is subject to
            the bank whether it will regard the field.
          nullable: true
          example: true
          default: true
        profileId:
          maxLength: 36
          minLength: 36
          type: string
          description: |
            The profile to be applied to the web form.<br/>This will overwrite
            the default profile, if such a profile exists.
          nullable: true
          example: a2c9fc3b-1777-403c-8b2f-1ce4d90157a2
        instantPayment:
          type: boolean
          description: |
            Whether the order should be submitted to the bank as an instant
            SEPA order. <br/><br/><strong>NOTE:</strong><br/>&bull; Submitting an
            instant payment will work only with interfaces that support it.<br/>&bull;
            Instant payments work only for a single order, not for collective orders.<br/>&bull;
            The bank may charge a fee for instant payments, depending on the agreement
            between the user and the bank.<br/>&bull; The payment might get rejected
            if the source and/or target account doesn't support instant payments.<br/><br/>If
            you are interested in additional banks where we can support Instant
            Payments, please contact our Sales or support team"
          example: false
          default: false
        orders:
          maxItems: 15000
          minItems: 1
          type: array
          description: Payment orders
          items:
            $ref: '#/components/schemas/PaymentWithAccountOrder'
      description: Parameters for a payment with an account

    PaymentWithAccountOrder:
      required:
        - amount
        - recipient
      type: object
      properties:
        recipient:
          $ref: '#/components/schemas/PaymentWithAccountRecipient'
        structuredRemittanceInformation:
          uniqueItems: true
          type: array
          description: |
            This attribute is used to submit structured remittance information
            for the domestic payments. Please refer to the documentation for more
            details. For more information, please check the <a href=\"https://documentation.finapi.io/payments/Czech-Republic-Domestic-Transfers.3045916711.html\"
            >FAQ article</a>."
          example:
            - VS:12345
            - KS:12345
            - SS:12345
          items:
            type: string
        amount:
          $ref: '#/components/schemas/Amount'
        purpose:
          maxLength: 2000
          minLength: 1
          type: string
          description: The purpose of the transfer transaction
          nullable: true
          example: Well done
        sepaPurposeCode:
          pattern: "^[a-zA-Z0-9]{4}$"
          type: string
          description: | 
            SEPA purpose code, according to ISO 20022, external codes
            set.<br/>Please note that the SEPA purpose code may be ignored by some
            banks. Only applicable for the SEPA transfers and will be discarded
            for other transfers.
          nullable: true
          example: SALA
        endToEndId:
          maxLength: 35
          minLength: 1
          type: string
          description: |
            End-To-End ID for the transfer transaction. Only applicable
            for the SEPA transfers and will be discarded for other transfers.
          nullable: true
          example: endToEndId
      description: Payment order

    PaymentWithAccountRecipient:
      required:
        - iban
      type: object
      properties:
        name:
          maxLength: 70
          minLength: 1
          type: string
          description: |
            Name of the counterparty. Must be provided for the SEPA transfers.<br/>Note
            that neither finAPI nor the involved bank are guaranteed to validate
            the counterparty name. Even if the name does not depict the actual registered
            account holder of the target account, the order might still be successful.
          nullable: true
          example: Max Mustermann
        iban:
          maxLength: 34
          minLength: 1
          type: string
          description: A normalized (without spaces) IBAN of the counterparty's account
          example: DE77533700080111111100
        bic:
          pattern: "^[A-Z]{4}(AD|AE|AF|AG|AI|AL|AM|AO|AQ|AR|AS|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BJ|BL|BM|BN|BO|BQ|BR|BS|BT|BV|BW|BY|BZ|CA|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|CR|CU|CV|CW|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EE|EG|EH|ER|ES|ET|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|IO|IQ|IR|IS|IT|JE|JM|JO|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MF|MG|MH|MK|ML|MM|MN|MO|MP|MQ|MR|MS|MT|MU|MV|MW|MX|MY|MZ|NA|NC|NE|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|SS|ST|SV|SX|SY|SZ|TC|TD|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TR|TT|TV|TW|TZ|UA|UG|UM|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|XK|YE|YT|ZA|ZM|ZW)[2-9A-Z][0-9A-NP-Z](XXX|[0-9A-WYZ]{1}[0-9A-Z]{2})?$"
          type: string
          description: BIC of the counterparty's account
          nullable: true
          example: DEUTDEFF533
        address:
          $ref: '#/components/schemas/AddressData'
      description: Payment Recipient

    CreatePaymentResult:
      description: The result for the import instance creation, includes references to the web form to open.
      type: object
      required:
        - webFormId
        - webFormUrl
        - paymentId
      properties:
        webFormId:
          type: string
          description: webform id
        webFormUrl:
          type: string
          description: webform url
        paymentId:
          type: string
          format: uuid
          description: identifier for this payment instance for the given flow; a flow may import multiple banks.

    InitiatePaymentResult:
      required:
        - payment
        - status
      type: object
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        errorMessage:
          description: >-
            The message will contain details about the error if the status is <code>FAILED</code>.
          type: string
          example: "internal error"
          nullable: true
        payment:
          type: object
          required:
            - status
          properties:
            status:
              $ref: '#/components/schemas/PaymentStatusEnum'
            paymentId:
              type: integer
              description: |
                Identifier of the payment in the Access API
              format: int64
              nullable: true
              example: 42
            errorCode:
              type: string
              description: |
                Reason of the web form failure.
              nullable: true
              example: INTERNAL_ERROR
            errorMessage:
              type: string
              description: Details of web form failure.
              nullable: true
              example: Invalid credentials.

    PaymentStatusEnum:
      type: string
      description: Web form status
      example: COMPLETED
      enum:
        - NOT_YET_OPENED
        - IN_PROGRESS
        - COMPLETED
        - COMPLETED_WITH_ERROR
        - EXPIRED
        - ABORTED

    ImportDetails:
      required:
        - daysToImport
      description: parameters
      type: object
      properties:
        search:
          type: string
          description: input for bank search, may be a bank name, a BLZ, an IBAN or the city the bank is located in
          example: finAPI demo bank
        iban:
          type: string
          description: IBAN of the bank account to use
          example: DE77533700080111111100
        loadOwnerData:
          type: boolean
          description: whether account holder details shall be downloaded from the bank
          default: false
        maxDaysForDownload:
          type: integer
          description: |-
            number of days to import transactions from the bank. If not set the configuration parameter <code>maxDaysImport</code> will be applied, 
            respectively it's process specific default value.
          example: 200
          minimum: 124
        webFormProfile:
          type: string
          description: web form profile ID for GUI customization, created by the customer for his mandator
          example: "default"
        accountTypes:
          description: Account types. Default is <code>CHECKING</code>.
          type: array
          items:
            "$ref": "#/components/schemas/AccountType"
        callbackUrl:
          type: string
          description: >-
            URL to which the notification with the import result is sent.
            
            The notification is sent in case of a final state of the check is reached (<code>SUCCESSFUL</code>, <code>FAILED</code>).
            <br>
            <strong>Note:</strong> a secured connection is expected to be used for the notifications, unsecured callbacks may be blocked in future SW versions.
          format: uri
          example: https://domain.tld

    AccountType:
      description: |
        Type of the account.
        Can be:
        <ul>
          <li><code>CHECKING</code></li>
          <li><code>SAVINGS </code></li>
          <li><code>CREDITCARD</code></li>
          <li><code>SECURITY</code></li>
          <li><code>LOAN</code></li>
          <li><code>POCKET</code></li>
          <li><code>MEMBERSHIP</code></li>
          <li><code>BUILDING_SAVINGS</code></li>
        </ul>
      type: string
      enum:
        - CHECKING
        - SAVINGS
        - CREDITCARD
        - SECURITY
        - LOAN
        - POCKET
        - MEMBERSHIP
        - BUILDING_SAVINGS
      example: CHECKING

    CreateImportResult:
      description: The result for the import instance creation, includes references to the web form to open.
      type: object
      required:
        - webFormId
        - webFormUrl
        - importId
      properties:
        webFormId:
          type: string
          description: webform id
        webFormUrl:
          type: string
          description: webform url
        importId:
          type: string
          format: uuid
          description: identifier for this import instance for the given flow; a flow may import multiple banks.

    ImportResultsEvent:
      description: Callback payload object containing the import results
      type: object
      required:
        - processToken
        - importId
        - result
      properties:
        processToken:
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
        importId:
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
        result:
          "$ref": "#/components/schemas/ImportResult"
        errorMessage:
          description: Details for results if the result state is <code>FAILED</code>.
          type: string
          example: "Internal error"

    ImportResults:
      description: >- 
        status of all imports. <br>
        The overall status is <code>IN_PROGRESS</code> if one import is in <code>IN_PROGRESS</code>, 
        <code>SUCCESSFUL</code> if at least one import has been <code>SUCCESSFUL</code>, otherwise <code>FAILED</code>.
      type: object
      required:
        - status
        - imports
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        imports:
          type: array
          items:
            "$ref": "#/components/schemas/ImportResultWithId"

    ImportResultWithId:
      description: id, status and bank details for the import
      type: object
      required:
        - importId
        - status
      properties:
        importId:
          description: data import id
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
        result:
          "$ref": "#/components/schemas/ImportResult"

    AnalysisResult:
      description: status of the analysis
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"

    ImportResult:
      description: status and bank details for the import
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        errorMessage:
          description: >-
            The message will contain details about the error if the status is <code>FAILED</code>.
          type: string
          example: "internal error"
        accounts:
          description: imported accounts
          type: array
          items:
            "$ref": "#/components/schemas/ImportedAccount"

    ImportedAccount:
      description: basic details for imported account
      type: object
      required:
        - accountId
        - accountType
        - accountNumber
        - accountCurrency
      properties:
        bank:
          type: string
          description: the name of the bank
          example: "Test Bank"
        iban:
          type: string
          description: the account's iban
          example: DE77533700080111111100
        accountId:
          type: string
          description: the unique id of the account
          example: "123456"
        accountHolder:
          type: string
          description: the account holder's name as stated in the bank account
          example: "Max Musterman"
        accountNumber:
          type: string
          description: the account number, for credit cards the card number (if no IBAN is associated with the credit card)
          example: "1111111"
        accountName:
          type: string
          description: the account name
          example:
            - 'Girokonto'
            - 'VISA Kreditkarte'
        accountCurrency:
           $ref: '#/components/schemas/Currency'
        accountType:
          "$ref": "#/components/schemas/AccountType"

    Account:
      description: finAPI identifier of the account
      type: object
      required:
        - accountId
      properties:
        accountId:
          type: string
          description: the unique id of the account

    CreateConfig:
      required:
        - processId
      description: flow parameters
      type: object
      properties:
        processId:
          "$ref": "#/components/schemas/ProcessId"
        processParameters:
          description: |
            The parameter allow to set prerequisites, thresholds and input values for the processing of the process.
          type: array
          items:
            "$ref": "#/components/schemas/ProcessParameter"

    FlowParameters:
      description: flow parameters
      type: object
      properties:
        mandatorNameKey:
          type: string
          description: |
            Contains the key for the mandator name to retrieve the correct content from the CMS.
            This key is configured in the Process Controller per mandator and is a kind of abbreviation of the real client name.
          example: DEFAULT
        processParameters:
          description: |
            The parameter allow to set prerequisites, thresholds and input values for
            the server components in the finAPI flow controller.
          type: array
          items:
            "$ref": "#/components/schemas/ProcessParameter"

    FlowState:
      required:
        - processId
        - flowStates
      description: state events for the flow
      type: object
      properties:
        processId:
          "$ref": "#/components/schemas/ProcessId"
        flowStates:
          type: array
          items:
            "$ref": "#/components/schemas/FlowStateEvent"

    FlowStateEvents:
      description: "Expected state events for a flow"
      type: object
      required:
        - flowStates
      properties:
        flowStates:
          type: array
          items:
            "$ref": "#/components/schemas/FlowStateEvent"

    FlowStateEvent:
      description: "State event for a flow"
      type: object
      required:
        - eventType
      properties:
        eventType:
          "$ref": "#/components/schemas/FlowStateEventType"
        instanceId:
          description: "identifier for the instance of the server component that posted the event (only if multiple instances are supported; example: DATA_IMPORT"
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'

    FlowStateEventType:
      description: "State event enum for a flow"
      type: string
      enum:
        - DATA_IMPORT_STARTED
        - DATA_IMPORT_WEBFORM_CREATED
        - DATA_IMPORT_WEBFORM_ABORTED
        - DATA_IMPORT_WEBFORM_EXPIRED
        - DATA_IMPORT_WEBFORM_COMPLETED
        - DATA_IMPORT_WEBFORM_COMPLETED_WITH_ERROR
        - DATA_IMPORT_FAILED
        - DATA_IMPORT_COMPLETED
        - DATA_IMPORT_DELETED
        - DATA_IMPORT_ACCOUNT_DELETED
        - DATA_IMPORT_DONE
        - DATA_IMPORT_DS_SYNC_STARTED
        - DATA_IMPORT_DS_SYNC_FAILED
        - DATA_IMPORT_DS_SYNC_COMPLETED
        - REBOOKING_ANALYSIS_STARTED
        - REBOOKING_ANALYSIS_NOT_NEEDED
        - REBOOKING_ANALYSIS_FAILED
        - REBOOKING_ANALYSIS_COMPLETED
        - CHECK_LIQUIDITY_STARTED
        - CHECK_LIQUIDITY_CASE_CREATED
        - CHECK_LIQUIDITY_CREATED
        - CHECK_LIQUIDITY_AMOUNT_AUTHORIZED
        - CHECK_LIQUIDITY_FAILED
        - CHECK_LIQUIDITY_COMPLETED
        - CHECK_DACFORLOAN_STARTED
        - CHECK_DACFORLOAN_CASE_CREATED
        - CHECK_DACFORLOAN_LOANVALIDATION_CREATED
        - CHECK_DACFORLOAN_CREATED
        - CHECK_DACFORLOAN_EMAIL_SENT
        - CHECK_DACFORLOAN_EMAIL_FAILED
        - CHECK_DACFORLOAN_FAILED
        - CHECK_DACFORLOAN_COMPLETED
        - CHECK_IDENTITY_BASIS_CREATED
        - CHECK_IDENTITY_BASIS_FAILED
        - CHECK_IDENTITY_BASIS_COMPLETED
        - CHECK_IDENTITY_PLUS_CREATED
        - CHECK_IDENTITY_PLUS_FAILED
        - CHECK_IDENTITY_PLUS_COMPLETED
        - PAYMENT_EXECUTE_STARTED
        - PAYMENT_EXECUTE_WEBFORM_CREATED
        - PAYMENT_EXECUTE_WEBFORM_IN_PROGRESS
        - PAYMENT_EXECUTE_WEBFORM_ABORTED
        - PAYMENT_EXECUTE_WEBFORM_CANCELED
        - PAYMENT_EXECUTE_COMPLETED
        - PAYMENT_EXECUTE_FAILED
        - FLOW_DELETED

    ProcessId:
      description: |
        Process Identifier.

        Depending on the application or the product to be used, please select the correct value.

        With regard to `ProcessId`s for products, this has an impact on the configuration.

        If only the user management is needed, the value `USER_ONLY` can be used.
      type: string
      enum:
        - USER_ONLY
        - GIROCHECK
        - DEBITFLEX
        - GIROIDENT
        - CREDIT_CHECK_LOAN
        - CREDIT_CHECK_ACCOUNT
        - CREDIT_CHECK_B2B
        - PAYMENT
      example: "USER_ONLY"

    ProcessParameter:
      type: object
      description: |
        A parameter to a set prerequisite, threshold and input value for the processing of the process.
      required:
        - serverComponent
        - parameterType
        - name
      properties:
        serverComponent:
          type: string
          description: |
            the flow controller component the parameter applies to.
            <ul>
              <li><code>ALL</code>: refers to a parameter relevant for the complete flow</li>
              <li><code>DATA_IMPORT</code></li>
              <li><code>PAYMENT_EXECUTE</code></li>
              <li><code>CHECK_LIQUIDITY</code></li>
              <li><code>CHECK_DACFORLOAN</code></li>
              <li><code>CHECK_IDENTITY</code></li>
            </ul>
          enum:
            - ALL
            - DATA_IMPORT
            - PAYMENT_EXECUTE
            - CHECK_LIQUIDITY
            - CHECK_DACFORLOAN
            - CHECK_IDENTITY
        parameterType:
          type: string
          description: |
            Defines, how the parameter is use
            <ul>
              <li><code>INPUT</code></li> defines a (secure) input value for a component, that shall not be passed by the user/browser application.
              <li><code>VALIDATE </code></li> defines a validation threshold, that defines, whether the component execution is considered to be successful.
              <li><code>PREREQUISITE</code></li> defines an additional server componenent, that must have been executed successfully upfront.
              <li><code>CONFIGURATION</code></li> defines a configuration respectively customization for widget or server component.
              <li><code>CREDENTIALS</code></li> defines a (secure) input value for a component, that shall not be passed by the user/browser application, and will encrypted inside the service.            
            </ul>
          enum:
            - INPUT
            - VALIDATE
            - PREREQUISITE
            - CONFIGURATION
            - CREDENTIALS
          example: PREREQUISITE
        name:
          type: string
          description: name of the parameter
          example: "singleDataSource "
        value:
          type: string
          description: value of the parameter
          example: "true"

    CreateDacLoanCheck:
      description: input for Kreditcheck creation
      type: object
      properties:
        rateAmount:
          description: "Amount to check for loan. Must not be includes in request, if the amount has been set as flow parameter."
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 1000
        rateInsteadRent:
          description: "indicates whether the customer will continue to pay his rent in parallel to the loan."
          type: boolean
          example: true
        personalData:
          description: Personal data of the applicant(s)
          type: array
          items:
            "$ref": "#/components/schemas/PersonalData"
        callbackUrl:
          type: string
          description: >-
            URL to which the notification with the kredit result is sent.
            
            The notification is sent in case of a final state of the check is reached (<code>SUCCESSFUL</code>, <code>FAILED</code>).
            <br>
            <strong>Note:</strong> a secured connection is expected to be used for the notifications, unsecured callbacks may be blocked in future SW versions.
          format: uri
          example: https://domain.tld

    CreateDacLoanB2bCheck:
      description: input for Kreditcheck B2B
      type: object
      required:
        - applicantData
      properties:
        creditReportingCredentials:
          description: Credentials to access credit rating services
          type: object
          required:
            - schufaCredentials
          properties:
            schufaCredentials:
              "$ref": "#/components/schemas/SchufaCredentials"
        applicantData:
          description: |
            Data of the applicant.
          required:
            - companyData
          type: object
          properties:
            personalData:
              description: Personal data of the applicant(s)
              type: array
              items:
                "$ref": "#/components/schemas/PersonalData"
            companyData:
              "$ref": "#/components/schemas/CompanyDataB2B"
        callbackUrl:
          type: string
          description: >-
            URL to which the notification with the kreditcheck result is sent.
            
            The notification is sent in case of a final state of the check is reached (<code>SUCCESSFUL</code>, <code>FAILED</code>).
            <br>
            <strong>Note:</strong> a secured connection is expected to be used for the notifications, unsecured callbacks may be blocked in future SW versions.
          format: uri
          example: https://domain.tld

    CreateDacLoanCheckResult:
      description: result of the kreditcheck creation
      type: object
      required:
        - kreditCheckId
      properties:
        kreditCheckId:
          type: string
          format: uuid
          description: instance id

    CreateCreditCheckB2B:
      description: input for credit check B2B
      type: object
      properties:
        creditCheckType:
          description: Type of the credit check process
            <ul>
            <li><code>FULL</code></li> Full Credit Check.
            <li><code>SIMPLE</code></li> Onboarding check.
            </ul>
          type: string
          enum:
            - FULL
            - SIMPLE
        creditReportingCredentials:
          description: Credentials to access credit rating services
          type: object
          required:
            - accountInformation
            - schufaCredentials
            - crefoCredentials
          properties:
            schufaCredentials:
              "$ref": "#/components/schemas/SchufaCredentials"
            crefoCredentials:
              "$ref": "#/components/schemas/CrefoCredentials"
        applicantData:
          description: |
            Data of the applicant. The kind of data depends on the business type of the applicant
          type: object
          properties:
            requestCreditCard:
              type: boolean
              default: false
            requestAccountLimit:
              type: boolean
              default: true
            personalData:
              description: Personal data of the applicant(s)
              type: array
              items:
                "$ref": "#/components/schemas/PersonalData"
            companyData:
              "$ref": "#/components/schemas/CompanyData"
        accounts:
          description: finAPI identifiers of the accounts
          type: array
          items:
            "$ref": "#/components/schemas/Account"
          minItems: 0
          maxItems: 10

    PersonalData:
      description: The data of the applicant, on behalf of this person the service will be called.
      type: object
      required:
        - gender
        - firstName
        - lastName
        - currentAddress
      properties:
        title:
          type: string
          maxLength: 30
          description: Consumer's title.
          example: "Dr."
        gender:
          type: string
          description: >-
            Applicant's gender. It can contain the following enums:
            <ul>
              <li>F - Female</li>
              <li>M - Male</li>
              <li>U - Unknown</li>
            </ul>
          enum: [ F, M, U ]
          example: M
        firstName:
          type: string
          maxLength: 44
          minLength: 2
          pattern: '^\D+'
          description: Applicant's first name.
          example: "Fritz"
        lastName:
          type: string
          maxLength: 46
          minLength: 2
          pattern: '.*[a-zA-Z].*'
          description: Applicant's last name
          example: "Lang"
        dateOfBirth:
          type: string
          example: "2000-01-01"
          description: >-
            Applicant's date of birth in the format YYYY-MM-DD
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        placeOfBirth:
          type: string
          maxLength: 44
          minLength: 2
          description: Applicant's place of birth
          example: Berlin
        currentAddress:
          "$ref": "#/components/schemas/Address"
      title: Personal data of the applicant

    CompanyDataB2B:
      description: The company data of the applicant, on behalf of this the service will be called.
      type: object
      required:
        - companyName
        - companyType
      properties:
        companyType:
          description: Company type enumeration
            <ul>
            <li><code>FREIBERUFLER</code></li> Freiberufler.
            <li><code>GMBH</code></li> Gesellschaft mit beschränkter Haftung.
            <li><code>GMBH_CO_KG</code></li> Kommanditgesellschaft GmbH & Co.
            <li><code>OHG</code></li> Offene Handelsgesellschaft.
            <li><code>GBR</code></li> Gesellschaft bürgerlichen Rechts.
            <li><code>EK</code></li> Einzelfirma.
            <li><code>KG</code></li> Kommanditgesellschaft.
            </ul>
          type: string
          enum:
            - FREIBERUFLER
            - GMBH
            - GMBH_CO_KG
            - OHG
            - GBR
            - EK
            - KG
          example: GMBH
        companyName:
          type: string
          maxLength: 90
          description: Name of the company
          example: My Company & Co
        currentAddress:
          "$ref": "#/components/schemas/CompanyAddress"
        companyRegisterType:
          type: string
          maxLength: 20
          example: gmbh
        companyRegisterId:
          type: string
          maxLength: 18
          example: HRA 12345
        companyRegisterPostcode:
          type: string
          maxLength: 25
          example: 12345
        companyRegisterCity:
          type: string
          maxLength: 44
          example: Beispielstadt
        companyVATId:
          type: string
          maxLength: 50
          example: 123456789

    CompanyData:
      description: The company data of the applicant, on behalf of this the service will be called.
      type: object
      required:
        - companyType
      properties:
        companyType:
          description: Company type enumeration
            <ul>
            <li><code>FREIBERUFLER</code></li> Freiberufler.
            <li><code>GMBH</code></li> Gesellschaft mit beschränkter Haftung.
            <li><code>GMBH_CO_KG</code></li> Kommanditgesellschaft GmbH & Co.
            <li><code>OHG</code></li> Offene Handelsgesellschaft.
            <li><code>GBR</code></li> Gesellschaft bürgerlichen Rechts.
            <li><code>EK</code></li> Einzelfirma.
            <li><code>KG</code></li> Kommanditgesellschaft.
            <li><code>UG</code></li> Unternehmergesellschaft (haftungsbeschränkt).
            </ul>
          type: string
          enum:
            - FREIBERUFLER
            - GMBH
            - GMBH_CO_KG
            - OHG
            - GBR
            - EK
            - KG
            - UG
          example: GMBH
        companyName:
          type: string
          maxLength: 90
          description: Name of the company
          example: My Company & Co
        crefoIdentificationNumber:
          type: string
          maxLength: 21
          description: Unique Crefo identification number
          example: 0123456789
        currentAddress:
          "$ref": "#/components/schemas/CompanyAddress"
        companyRegisterType:
          type: string
          maxLength: 20
          example: HRA
        companyRegisterId:
          type: string
          maxLength: 18
          example: 12345
        companyRegisterPostcode:
          type: string
          maxLength: 25
          example: 12345
        companyRegisterCity:
          type: string
          maxLength: 44
          example: Beispielstadt
        companyVATId:
          type: string
          maxLength: 50
          example: 123456789

    CompanyType:
        description: Company type enumeration
          <ul>
          <li><code>FREIBERUFLER</code></li> Freiberufler.
          <li><code>GMBH</code></li> Gesellschaft mit beschränkter Haftung.
          <li><code>GMBH_CO_KG</code></li> Kommanditgesellschaft GmbH & Co.
          <li><code>OHG</code></li> Offene Handelsgesellschaft.
          <li><code>GBR</code></li> Gesellschaft bürgerlichen Rechts.
          <li><code>EK</code></li> Einzelfirma.
          <li><code>KG</code></li> Kommanditgesellschaft.
          <li><code>UG</code></li> Unternehmergesellschaft (haftungsbeschränkt).
          </ul>
        type: string
        enum:
          - FREIBERUFLER
          - GMBH
          - GMBH_CO_KG
          - OHG
          - GBR
          - EK
          - KG
          - UG
        example: GMBH

    SchufaCredentials:
      description: >-
        Schufa client credentials for the Service request.

        These credentials can be provided through the API or can be encrypted and deposited with the FinAPI
        report service for a client.

        It is mandatory that one of these requirements is met.SCHUFA client credentials for the Service request.
      type: object
      required:
        - schufaUserId
        - schufaPassword
      properties:
        schufaUserId:
          type: string
          description: Client app specific id for caller SCHUFA's contract (Teilnehmerkennung).
          maxLength: 128
          example: 300/01182
        schufaPassword:
          type: string
          maxLength: 128
          description: Password for caller SCHUFA's contract  (Teilnehmerkennwort).
          example: MIEAPI12
      title: SCHUFA credentials

    CrefoCredentials:
      description: >-
        CREFO client credentials for the Service request.

        These credentials can be provided through the API or can be encrypted and deposited with the FinAPI
        report service for a client.

        It is mandatory that one of these requirements is met. CREFO client credentials for the Service request.
      type: object
      required:
        - crefoUserAccount
        - crefoGeneralPassword
        - crefoIndividualPassword
      properties:
        crefoUserAccount:
          type: string
          maxLength: 12
          description: Client app specific user account for caller CREFO service
          example: 300/01182
        crefoGeneralPassword:
          type: string
          maxLength: 8
          description: General password for caller of CREFO service
          example: MIEAPI12
        crefoIndividualPassword:
          type: string
          maxLength: 8
          description: Individual password for caller of CREFO service
          example: MIEAPI12
      title: CREFO credentials

    CreateCreditCheckB2BResult:
      description: result for credit check B2B
      type: object
      required:
        - creditCheckB2BId
      properties:
        creditCheckB2BId:
          type: string
          format: uuid
          description: instance id

    DacLoanCheckResultEvent:
      description: Callback payload object containing the kreditcheck results
      type: object
      required:
        - processToken
        - importId
        - result
      properties:
        processToken:
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
        kreditCheckId:
          type: string
          format: uuid
          example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
        result:
          "$ref": "#/components/schemas/DacLoanCheckResult"
        errorMessage:
          description: Details for results if the result state is <code>FAILED</code>.
          type: string
          example: "Internal error"

    DacLoanCheckResult:
      description: input for dac loan check
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        rateAmount:
          description: "Applied amount to check for loan (b2c only)."
          type: number
          example: 1000
        rateInsteadRent:
          description: "Applied flag for rental continuation (b2c only)."
          type: boolean
          example: true
        clientReference:
          description: Client reference
          type: string
          example: 'client123'
          maxLength: 512
        overallVerdict:
          "$ref": "#/components/schemas/DecisionVerdict"
        bankConnections:
          type: array
          items:
            "$ref": "#/components/schemas/ResultCreditCheckBankConnection"
        contactsLoanValidatorReportId:
          type: string
          format: uuid
          description: |-
            Data Intelligence report ID, it is returned if the LoanValidator feature is enabled.
            
            With this ID, the report can be downloaded from the Data Intelligence service. The report
            will include the SCHUFA Credit Checks.
          example: "ea54cc41-da7a-487f-8430-5d35c3ffe6b8"
        resultRules:
          type: array
          items:
            "$ref": "#/components/schemas/ResultRules"

    CreditCheckB2BResult:
      description: input for credit check B2B
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        decisionCredit:
          "$ref": "#/components/schemas/DecisionVerdictCreditCheckB2B"
        decisionAccount:
          "$ref": "#/components/schemas/DecisionVerdictCreditCheckB2B"
        derivedCreditLimitAmount:
          type: number
        derivedCreditCardLimitAmount:
          type: number
        bankConnections:
          type: array
          items:
            "$ref": "#/components/schemas/ResultCreditCheckB2BBankConnection"
        creditBureauDataSchufa:
          "$ref": "#/components/schemas/CreditBureauDataSchufa"
        creditBureauDataCrefo:
          "$ref": "#/components/schemas/CreditBureauDataCrefo"
        resultRules:
          type: array
          items:
            "$ref": "#/components/schemas/ResultRulesCreditCheckB2B"

    CreditBureauDataSchufa:
      type: object
      properties:
        scoreRiskQuote:
          type: string
        scoreSegment:
          type: string
        scoreText:
          type: array
          items:
            type: string
        scoreValue:
          type: string
        vrRatingDate:
          type: string
        vrRatingPD:
          type: string
        vrRatingSyntax:
          type: string
        vrRatingClass:
          type: string
        response:
          type: string
          description: "Raw response string from Schufa API, or an error message"

    CreditBureauDataCrefo:
      type: object
      properties:
        oneYearPD:
          type: string
        solvencyIndexTwoZero:
          type: string
        vrRatingClass:
          type: string
        vrRatingDate:
          type: string
        vrRatingPD:
          type: string
        vrRatingPDDec:
          type: string
        vrRatingSyntax:
          type: string
        vrRatingType:
          type: string
        response:
          type: string
          description: "Raw XML response string from Crefo API, or an error message"

    ResultCreditCheckBankConnection:
      description: dacLoan check result per bank connection
      type: object
      required:
        - bankConnectionId
        - accounts
      properties:
        resultBankConnection:
          "$ref": "#/components/schemas/DecisionVerdict"
        bankName:
          description: "Bank name"
          type: string
          example: "Test Bank"
        bankConnectionId:
          description: Access bankconnection id
          type: string
          example: "123456"
        accounts:
          type: array
          items:
            "$ref": "#/components/schemas/ResultCreditCheckAccount"

    ResultCreditCheckB2BBankConnection:
      description: credit check b2b result per bank connection
      type: object
      required:
        - resultBankConnection
        - bankConnectionId
        - accounts
      properties:
        resultBankConnection:
          "$ref": "#/components/schemas/DecisionVerdictCreditCheckB2B"
        bankName:
          description: "Bank name"
          type: string
        bankConnectionId:
          description: Access bankconnection id
          type: string
        accounts:
          type: array
          items:
            "$ref": "#/components/schemas/ResultCreditCheckB2BAccount"

    ResultCreditCheckAccount:
      description: dacLoan check result per bank account
      type: object
      properties:
        accountId:
          description: Access account Id
          type: string
          example: "123456"
        caseId:
          description: Data Intelligence Case Id
          type: string
          format: uuid
          example: "dc4e43c9-7315-4cae-b798-5017ecbe6072"
        resultAccount:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterAccount:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterBasic:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterIncome:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterRedflag:
          "$ref": "#/components/schemas/DecisionVerdict"
        resultRules:
          type: array
          items:
            "$ref": "#/components/schemas/ResultRules"
        incomeSpendingCalculation:
          "$ref": "#/components/schemas/IncomeSpendingCalculation"

    ResultCreditCheckB2BAccount:
      description: credit check b2b result per bank account
      type: object
      required:
        - resultAccount
      properties:
        accountId:
          description: Access account Id
          type: string
        resultAccount:
          "$ref": "#/components/schemas/DecisionVerdictCreditCheckB2B"
        resultRules:
          type: array
          items:
            "$ref": "#/components/schemas/ResultRulesCreditCheckB2B"

    ResultRules:
      description: DSS cluster result code
      type: object
      required:
        - cluster
        - code
        - text
      properties:
        cluster:
          type: string
          example: "Account"
        code:
          type: string
          example: "AG04"
        text:
          type: string
          example: "Keine Pfändungszahlungen"
        result:
          "$ref": "#/components/schemas/DecisionVerdict"

    ResultRulesCreditCheckB2B:
      description: DSS cluster result code
      type: object
      required:
        - cluster
        - code
        - text
      properties:
        cluster:
          type: string
          example: "Account"
        code:
          type: string
          example: "AG04"
        text:
          type: string
          example: "Keine Pfändungszahlungen"
        result:
          "$ref": "#/components/schemas/DecisionVerdictCreditCheckB2B"

    IncomeSpendingCalculation:
      description: Income/spending calculation
      type: object
      properties:
        totalIncome:
          "$ref": "#/components/schemas/Amount"
        totalSpending:
          "$ref": "#/components/schemas/Amount"
        balanceIncomeSpending:
          "$ref": "#/components/schemas/Amount"
        income:
          type: array
          items:
            "$ref": "#/components/schemas/IncomeSpendingItem"
        spending:
          type: array
          items:
            "$ref": "#/components/schemas/IncomeSpendingItem"

    IncomeSpendingItem:
      description: Income/spending calculation item
      type: object
      required:
        - type
        - amount
      properties:
        type:
          "$ref": "#/components/schemas/IncomeSpendingItemType"
        amount:
          "$ref": "#/components/schemas/Amount"

    IncomeSpendingItemType:
      description: |-
        Possible entry types for the income/spending calculation 
        <ul>
          <li><code>SALARY</code>: income</li>
          <li><code>PENSION</code>: income</li>
          <li><code>CHILD_BENEFIT</code>: income</li>
          <li><code>ALIMONY</code>: income</li>
          <li><code>GOVERNMENT_AID</code>: income</li>
          <li><code>STUDENT_GRANT</code>: income</li>
          <li><code>RENTAL_INCOME</code>: income</li>
          <li><code>OPERATING_REVENUES</code>: income</li>
          <li><code>CASH_DEPOSIT</code>: income</li>      
          <li><code>TAX_REFUND</code>: income</li>       
          <li><code>CAPITAL_INVESTED</code>: income</li>      
          <li><code>OTHER_INCOME</code>: income</li> 
          <li><code>LOAN_DISBURSEMENT</code>: income</li> 
        
          <li><code>OPERATING_EXPENSES</code>: spending</li>      
          <li><code>RENT_AND_LIVING</code>: spending</li> 
          <li><code>RENTAL_EXTRA_COSTS</code>: spending</li> 
          <li><code>CREDIT_AND_LEASING</code>: spending</li>         
          <li><code>BANK_AND_CREDIT</code>: spending</li>       
          <li><code>INSURANCE</code>: spending</li>          
          <li><code>PERSONEL_EXPENSES</code>: spending</li>   
          <li><code>MOBILITY</code>: spending</li>  
          <li><code>ENTERTAINMENT</code>: spending</li>          
          <li><code>CREDITCARD</code>: spending</li>       
          <li><code>TAX</code>: spending</li>         
          <li><code>CAPITAL_WITHDRAWALS</code>: spending</li>
          <li><code>OTHER_SPENDING</code>: spending</li>
          <li><code>CASHWITHDRAWAL</code>: spending</li>       
          <li><code>FLATRATE_LIVING</code>: spending</li>   
        </ul>
      type: string
      enum:
        - SALARY
        - PENSION
        - CHILD_BENEFIT
        - ALIMONY
        - GOVERNMENT_AID
        - STUDENT_GRANT
        - RENTAL_INCOME
        - OPERATING_REVENUES
        - CASH_DEPOSIT
        - TAX_REFUND
        - CAPITAL_INVESTED
        - OTHER_INCOME
        - LOAN_DISBURSEMENT
        - OPERATING_EXPENSES
        - RENT_AND_LIVING
        - RENTAL_EXTRA_COSTS
        - CREDIT_AND_LEASING
        - BANK_AND_CREDIT
        - INSURANCE
        - PERSONEL_EXPENSES
        - MOBILITY
        - ENTERTAINMENT
        - CREDITCARD
        - TAX
        - CAPITAL_WITHDRAWALS
        - OTHER_SPENDING
        - CASHWITHDRAWAL
        - FLATRATE_LIVING
      example: "SALARY"

    CreateLiquidityResult:
      description: input for dac loan check
      type: object
      required:
        - liquidityId
      properties:
        liquidityId:
          type: string
          format: uuid
          description: instance id

    Liquidity:
      description: evaluate account check result
      type: object
      required:
        - authorizedToForward
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        authorizedToForward:
          type: boolean
          default: false
          description: indicates whether the user authorized to forward the verdict
        overallVerdict:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterAccount:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterBasic:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterIncome:
          "$ref": "#/components/schemas/DecisionVerdict"
        clusterRedflag:
          "$ref": "#/components/schemas/DecisionVerdict"

    DecisionVerdict:
      description: |-
        Decision result indicator
        <ul>
          <li><code>GREEN</code>: success</li>
          <li><code>YELLOW</code>: inconclusive</li>
          <li><code>RED</code>: failed</li>      
        </ul>
        The verdict is only present, if a valid value could be calculated.
      type: string
      enum:
        - GREEN
        - YELLOW
        - RED
      example: "GREEN"

    DecisionVerdictCreditCheckB2B:
      description: |-
        Decision result indicator
        <ul>
          <li><code>GREEN</code>: success</li>
          <li><code>RED</code>: failed</li>
        </ul>
        The verdict is only present, if a valid value could be calculated.
      type: string
      enum:
        - GREEN
        - RED
      example: "GREEN"

    NameValidationRequest:
      type: object
      description: List of all persons or companies, for which names shall be validated vs. the imported accounts.
      properties:
        personsOrCompanies:
          type: array
          items:
            "$ref": "#/components/schemas/NameValidation"

    NameValidation:
      type: object
      description: >-
        A persons or company, for which names shall be validated vs. the imported accounts.
        
        > Note: At least either first + last name or a company name must be provided to receive a result, otherwise the validation is unsuccessful.
      properties:
        firstName:
          type: string
          minLength: 2
          description: User's first name.
          example: Erwin
        lastName:
          type: string
          minLength: 2
          description: User's last name
          example: Mustermann
        companyName:
          type: string
          maxLength: 128
          minLength: 2
          description: Optional company name.
          example: Big Deal AG

    NameValidationResults:
      type: object
      description: Name validation for all persons or companies in the input.
      properties:
        nameEqualityAll:
          type: boolean
          description: >-
            Indicates if all names/companies could be matched.
          example: true
        nameEqualityAtLeastOne:
          type: boolean
          description: >-
            Indicates if at lest one names/company could be matched.
          example: true
        detailedResult:
          type: array
          items:
            "$ref": "#/components/schemas/NameValidationResult"

    NameValidationResult:
      type: object
      required:
        - status
      description: >-
        Calculation result of the SCHUFA name similarity service for an individual set first/last name and an optional company name.
        
        In case of success, the <code>accountId</code> for the matched imported account will be provided. 
        The <code>validationDetails</code> provide details on the confidence of the result and whether person or company matched 
        (in case of provisioning), or both.
      properties:
        nameEquality:
          type: boolean
          description: >-
            Overall normalized equality score, combining personal names and company id. 
            
            The threshold for the normalization is approximately 0.85 and will becontinuously adopted by the algorithm.
          example: true
        firstName:
          type: string
          minLength: 2
          description: User's first name, as provided in the input.
          example: Erwin
        lastName:
          type: string
          minLength: 2
          description: User's last name, as provided in the input.
          example: Mustermann
        companyName:
          type: string
          maxLength: 128
          minLength: 2
          description: Company name, as provided in the input.
          example: Big Deal AG
        accountId:
          type: string
          description: >-
            The ids of the imported accounts for the given process, that was matched for the given input.
          example: 237455
        decisionConfidence:
          type: number
          description: >-
            Overall confidence for the decision, combining personal names and company id, from (including) 0.00 to 1.00.
          example: 0.92
        personNameEquality:
          type: boolean
          description: Normalized equality score first and last name. Only included, if the person is provided.
          example: true
        personDecisionConfidence:
          type: number
          description: >-
            Confidence for the decision, from (including) 0.00 to 1.00. Only included, if the person is provided.
          example: 0.92
        companyNameEquality:
          type: boolean
          description: Normalized equality score for the company name. Only included, if the company is provided.
          example: true
        companyDecisionConfidence:
          type: number
          description: >-
            Confidence for the decision, from (including) 0.00 to 1.00. Only included, if the company is provided.
          example: 0.92

    NameValidationResultExtended:
      description: >-
        Calculation result of the SCHUFA name similarity service for first/last name and an optional company name.
        
        > Note: internal extended object not used by API
      allOf:
        - $ref: '#/components/schemas/NameValidationResult'
        - type: object
          properties:
            confirmedFirstName:
              type: string
              minLength: 2
              description: User's first name, as confirmed by the validation.
              example: Erwin
            confirmedLastName:
              type: string
              minLength: 2
              description: User's last name, as confirmed by the validation.
              example: Mustermann

    CheckCreateParams:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          minLength: 2
          description: User's first name.
          example: Erwin
        lastName:
          type: string
          minLength: 2
          description: User's last name
          example: Mustermann
        companyName:
          type: string
          maxLength: 128
          minLength: 2
          description: Optional company name.
          example: Big Deal AG
        accountId:
          type: string
          description: >-
            The unique id of the account, as returned in the result of the import step (optional).
            
            If set, the related IBAN for this account will be used, and GiroIdent will perform a **strict** check
            only this account, and not for all accounts imported from the bank.
            
            > Note: By default, the IBAN specified for the import step will be used for the GiroIdent, and all accounts 
            of the imported bank are considered for the identity validation.
          example: 237455
        externalId:
          type: string
          maxLength: 255
          description: Client app specific ID to be stored with the check.
          example: user-12345
      title: Create Basis Check Parameters

    CheckCreatePlusParams:
      type: object
      required:
        - currentAddress
        - dateOfBirth
        - firstName
        - lastName
        - gender
      properties:
        firstName:
          type: string
          maxLength: 44
          minLength: 2
          pattern: '^\D+'
          description: User's first name.
          example: Erwin
        lastName:
          type: string
          maxLength: 46
          minLength: 2
          pattern: '.*[a-zA-Z].*'
          description: User's last name
          example: Mustermann
        title:
          type: string
          maxLength: 30
          description: Title of the user.
          example: Dr.
        gender:
          type: string
          description: >-
            User's gender. It can contain the following enums:
            <ul>
              <li>F - Female</li>
              <li>M - Male</li>
              <li>U - Unknown</li>
            </ul>
          enum: [ F, M, U ]
          example: M
        dateOfBirth:
          type: string
          example: "2000-01-01"
          description: User's date of birth in the format YYYY-MM-DD.
          minLength: 10
          maxLength: 10
          pattern: '\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
        currentAddress:
          "$ref": "#/components/schemas/Address"
        accountId:
          type: string
          description: >-
            The unique id of the account, as returned in the result of the import step (optional).
            
            If set, the related IBAN for this account will be used, and GiroIdent will perform a **strict** check
            only this account, and not for all accounts imported from the bank.
            
            > Note: By default, the IBAN specified for the import step will be used for the GiroIdent, and all accounts 
            of the imported bank are considered for the identity validation.
          example: 237455
        externalId:
          type: string
          maxLength: 255
          description: Client app specific ID to be stored with the check.
          example: user-12345
      title: Create Plus Check Parameters

    Address:
      description: User's current address
      type: object
      required:
        - city
        - street
        - zip
      properties:
        street:
          type: string
          maxLength: 46
          minLength: 2
          description: Street and house number.
          example: Musterstraße 7
        zip:
          type: string
          maxLength: 10
          minLength: 2
          description: ZIP code.
          example: "12345"
        city:
          type: string
          maxLength: 44
          minLength: 2
          description: City.
          example: Beispielstadt
        country:
          $ref: '#/components/schemas/CountryCode'
      title: Address

    CompanyAddress:
      description: Company's current address
      type: object
      properties:
        companyStreet:
          type: string
          maxLength: 30
          description: Street.
          example: Musterstraße
        companyStreetHouseNumber:
          type: string
          maxLength: 5
          example: 5
        companyStreetHouseNumberAffix:
          type: string
          maxLength: 10
          example: B
        companyPostcode:
          type: string
          maxLength: 9
          description: ZIP code.
          example: 12345
        companyCity:
          type: string
          maxLength: 44
          description: City.
          example: Beispielstadt
        companyCountry:
          type: string
          maxLength: 2
          description: Country as provided by the user, ISO 3166
          default: DE
          example: DE
      title: CompanyAddress

    CheckCreateResponse:
      type: object
      required:
        - identityCheckId
      properties:
        identityCheckId:
          type: string
          format: uuid
          description: The assigned UUID for the check.
          example: be5caf2b-6b99-464f-88af-eeaee5347d52
      title: CheckCreateResponse

    GiroIdentStatusEnum:
      type: string
      description: >-
        Status of a check process.

        <ul>
          <li>NOT_STARTED - process has not been started yet.</li>
          <li>IN_PROGRESS - process is ongoing.</li>
          <li>REDIRECT_PAYMENT - the response contains a redirect URL to the payment web form (only relevant for GwG Total flow)</li>
          <li>COMPLETED - Successful termination of the flow. The client app may evaluate the returned parameters for the identity validation.</li>
          <li>COMPLETED_WITH_ERROR - An error occurred in the identity check flow.</li>
        </ul>
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - REDIRECT_PAYMENT
        - COMPLETED
        - COMPLETED_WITH_ERROR
      example: COMPLETED

    CheckModel:
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        giroIdentStatus:
          "$ref": "#/components/schemas/GiroIdentStatusEnum"
        giroIdentStatusDetails:
          type: array
          description: Additional details related to the status of check, if available.
          items:
            $ref: '#/components/schemas/CheckStatusDetail'
        errorMessage:
          type: string
          description: >-
            The message will contain details about the error if the status is COMPLETED_WITH_ERROR.
          example: "internal error"
        nameEquality:
          type: boolean
          description: Normalized equality score. The threshold for the normalization is approximately 0.85 and will be continuously adopted by the algorithm.
          example: true
        nameEqualityScore:
          type: number
          description: >-
            Equality score for the best matching account holder name and first and last name provided.
            from (including) 0.00 to 1.00.

            * 0.00 no similarity at all

            * 1.00 completely equal
          example: 0.92
        nameEqualityDetails:
          $ref: '#/components/schemas/AccountNameValidationExtendedResult'
      title: Basis Check Result Model

    AccountNameValidationExtendedResult:
      description: >-
        Calculation result of the SCHUFA name similarity service for first/last name and company name.
        <br>
        Details will be included only in case of a provided company name.
      type: object
      required:
        - personNameEquality
        - personNameEqualityScore
        - companyNameEquality
        - companyNameEqualityScore
      properties:
        personNameEquality:
          type: boolean
          description: Normalized equality score. The threshold for the normalization is approximately 0.85 and will becontinuously adopted by the algorithm.
          example: true
        personNameEqualityScore:
          type: number
          description: >-
            Equality score for the best matching account holder name and first and last name provided.
            from (including) 0.00 to 1.00.

            * 0.00 no similarity at all

            * 1.00 completely equal
          example: 0.92
        companyNameEquality:
          type: boolean
          description: Normalized equality score. The threshold for the normalization is approximately 0.85 and will becontinuously adopted by the algorithm.
          example: true
        companyNameEqualityScore:
          type: number
          description: >-
            Equality score for the best matching account holder name and company name provided.
            from (including) 0.00 to 1.00.

            * 0.00 no similarity at all

            * 1.00 completely equal
          example: 0.92

    CheckStatusDetail:
      type: string
      description: >-
        Additional details related to the check status, if available.
      example: STRICT_CHECK_NO_IBAN_MATCH
      title: Additional status details for a check.

    CheckPlusModel:
      type: object
      required:
        - status
      properties:
        status:
          "$ref": "#/components/schemas/StatusEnum"
        giroIdentStatus:
          "$ref": "#/components/schemas/GiroIdentStatusEnum"
        giroIdentStatusDetails:
          type: array
          description: Additional details related to the status of check, if available.
          items:
            $ref: '#/components/schemas/CheckStatusDetail'
        errorMessage:
          type: string
          description: >-
            The message will contain details about the error if the status is COMPLETED_WITH_ERROR.
          example: "internal error"
        nameEquality:
          type: boolean
          description: Normalized equality score. The threshold for the normalization is approximately 0.85 and will be continuously adopted by the algorithm.
          example: true
        nameEqualityScore:
          type: number
          description: >-
            Equality score for the best matching account holder name and first and last name provided.
            from (including) 0.00 to 1.00.

            * 0.00 no similarity at all

            * 1.00 completely equal
          example: 0.92
        schufaIdentityCheck:
          type: number
          description: Value is 0 or between 85 and 100. 100 meaning exact match, 0 - complete missmatch.
          example: 0.99
        schufaIdentityCheckDetails:
          $ref: '#/components/schemas/SchufaIdentityCheckDetails'
      title: Plus Check Result Model

    SchufaIdentityCheckDetails:
      description: >-
        Individual check results for the user's address details. Values between 0 and 100. 100 meaning exact match, 0 - complete missmatch.      type: object
      properties:
        birthdayMatchScore:
          type: number
          description: Match score for the user's birthday
          example: 0.88
        cityMatchScore:
          type: number
          description: Match score for the user's address city
          example: 0.88
        streetMatchScore:
          type: number
          description: Match score for the user's address street
          example: 0.88
        zipMatchScore:
          type: number
          description: Match score for the user's address zip code
          example: 0.88

    StatusEnum:
      description: Status enumeration of a resource
      type: string
      enum:
        - SUCCESSFUL
        - IN_PROGRESS
        - FAILED
      example: "SUCCESSFUL"

    AddressData:
      type: object
      properties:
        street:
          maxLength: 70
          minLength: 1
          type: string
          description: Street of the counterparty's address
          example: Pariser Platz
        houseNumber:
          maxLength: 16
          minLength: 1
          type: string
          description: House number of the counterparty's address
          example: "1"
        postCode:
          maxLength: 16
          minLength: 1
          type: string
          description: Post code of the counterparty's address
          example: "10117"
        city:
          maxLength: 35
          minLength: 1
          type: string
          description: City of the counterparty's address
          example: Berlin
        country:
          $ref: '#/components/schemas/CountryCode'
      description: | 
        The address data of the counterparty.<br/><br/>These address fields
        are only relevant in very few cases if the debtor bank requires the counterparty's address.
      nullable: true

    CountryCode:
      type: string
      description: Country as provided by the user
      enum: [ DEU,AUT,CHE,TUR,AFG,ALB,DZA,ASM,VIR,AND,AGO,AIA,ATA,ATG,ARG,ARM,ABW,AZE,AUS,BHS,BHR,BGD,BRB,BLR,BEL,BLZ,BEN,
              BMU,BTN,BOL,BES,BIH,BWA,BVT,BRA,VGB,IOT,BRN,BGR,BFA,BDI,CHL,CHN,COK,CRI,CUW,CIV,DMA,DOM,DJI,DNK,ECU,SLV,ERI,
              EST,FLK,FJI,FIN,FRA,GUF,PYF,ATF,FRO,GAB,GMB,GEO,GHA,GIB,GRD,GRC,GRL,GLP,GUM,GTM,GGY,GIN,GNB,GUY,HTI,HMD,HND,
              HKG,IND,IDN,IMN,IRQ,IRN,IRL,ISL,ISR,ITA,JAM,JPN,YEM,JEY,JOR,CYM,KHM,CMR,CAN,CPV,KAZ,QAT,KEN,KGZ,KIR,CCK,COL,
              COM,COD,PRK,KOR,HRV,CUB,KWT,LAO,LSO,LVA,LBN,LBR,LBY,LIE,LTU,LUX,MAC,MDG,MWI,MYS,MDV,MLI,MLT,MAR,MHL,MTQ,MRT,
              MUS,MYT,MKD,MEX,FSM,MDA,MCO,MNG,MNE,MSR,MOZ,MMR,NAM,NRU,NPL,NCL,NZL,NIC,NLD,NER,NGA,NIU,NFK,NOR,MNP,OMN,TLS,
              PAK,PLW,PAN,PNG,PRY,PER,PHL,PCN,POL,PRT,PRI,TWN,COG,RWA,ROU,RUS,REU,BLM,MAF,SPM,SLB,ZMB,WSM,SMR,SAU,SWE,SEN,
              SRB,SYC,SLE,ZWE,SGP,SXM,SVK,SVN,SOM,ESP,LKA,SHN,KNA,LCA,VCT,PSE,SDN,SUR,SJM,SWZ,SYR,STP,ZAF,SGS,SSD,TJK,TZA,
              THA,TGO,TKL,TON,TTO,TCD,CZE,TUN,TKM,TCA,TUV,UGA,UKR,HUN,UMI,URY,UZB,VUT,VAT,VEN,ARE,USA,GBR,VNM,CXR,ESH,CAF,
              CYP,EGY,GNQ,ETH,ALA ]
      default: DEU
      example: DEU

    Amount:
      required:
        - currency
        - value
      type: object
      properties:
        value:
          type: number
          description: The amount of the payment. Must be a positive decimal number
            with at most two decimal places.
          example: 0.04
        currency:
          $ref: '#/components/schemas/Currency'
      description: Amount details

    Currency:
      type: string
      maxLength: 3
      minLength: 3
      description: >-
        Currency as 3-character ISO-4217 code.
      example: "EUR"
      default: "EUR"

    ErrorMessage:
      description: >-
        Response type when a service call was not successful. Contains detail
        about the error(s) that occurred.
      required:
        - code
        - message
      type: object
      properties:
        code:
          description: Error code
          type: string
          example: UNEXPECTED_ERROR
        message:
          description: Error message
          type: string
          example: An unexpected error occurred
        date:
          description: >-
            Server date of when the error(s) occurred, in the format YYYY-MM-DD HH:MM:SS.SSS
          type: string
          example: '2020-01-01 00:00:00.000'
          nullable: true
          deprecated: true
        datetime:
          description: >-
            Server date of when the error(s) occurred.
          type: string
          format: date-time
          example: '2023-07-19T16:58:15.346135+02:00'
          nullable: true
        requestId:
          description: UUID of the request
          type: string
          example: 4e760145-2e65-4242-ac33-488943528c93
          nullable: true
        endpoint:
          description: The service endpoint that was called
          type: string
          example: 'https://finapi.localhost'
          nullable: true

    ErrorMessageUnauthorized:
      description: Unauthorized
      type: object
      properties:
        error:
          description: Error code
          type: string
          example: "unauthorized"
          nullable: true
        error_description:
          description: Error message
          type: string
          example: "An Authentication object was not found in the SecurityContext"
          nullable: true

  parameters:
    locale:
      in: header
      name: Accept-Language
      schema:
        type: string
        enum:
          - de
          - en
        example: "de"
      description: requested locale defining the language of the result resource. Defaults to <code>de</code>
    processToken:
      in: path
      name: processToken
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the process
    importIdentifier:
      in: path
      name: importId
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the import instance, a flow may refer to multiple imported banks
    accountIdentifier:
      in: path
      name: accountId
      required: true
      schema:
        type: string
        example: '12344556'
      description: identifying the access account
    liquidityIdentifier:
      in: path
      name: liquidityId
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the liquidity evaluation instance
    kreditCheckIdentifier:
      in: path
      name: kreditCheckId
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the kreditcheck
    identityCheckIdentifier:
      in: path
      name: identityCheckId
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the dac for loan instance
    paymentIdentifier:
      in: path
      name: paymentId
      required: true
      schema:
        type: string
        format: uuid
        example: '71d16b0a-845a-4f8d-aae9-4771d28e98c3'
      description: UUID identifying the payment

  examples:
    errorMessage401Unauthorized:
      value:
        error: "unauthorized"
        error_description: "An Authentication object was not found in the SecurityContext"
    errorMessage400Example:
      value:
        code: ERR_FL_VAL_0x00GC
        message: Invalid request parameter or configuration.
        date: '2020-01-01 00:00:00.000'
        requestId: 4e760145-2e65-4242-ac33-488943528c93
        endpoint: '\/api\/v1\/import\/90967c71\\-8c44\\-496c\\-b13f\\-cad40ae1c879a'
    errorMessage403Example:
      value:
        code: ERR_FL_FLOW_UNAUTHORIZED_ERROR
        message: Not autorized to use the resource.
        date: '2020-01-01 00:00:00.000'
        requestId: 4e760145-2e65-4242-ac33-488943528c93
        endpoint: '\/api\/v1\/import\/90967c71\\-8c44\\-496c\\-b13f\\-cad40ae1c879a'
    errorMessage404Example:
      value:
        code: ERR_PT_0x06PNF
        message: Unable to find process or user.
        date: '2020-01-01 00:00:00.000'
        requestId: 4e760145-2e65-4242-ac33-488943528c93
        endpoint: '\/api\/v1\/contracts\/90967c71\\-8c44\\-496c\\-b13f\\-cad40ae1c879a'
    errorMessage423Example:
      value:
        code: ERR_FL_NF_0x00ER
        message: Required resource not created.
        date: '2020-01-01 00:00:00.000'
        requestId: 4e760145-2e65-4242-ac33-488943528c93
        endpoint: '\/api\/v1\/contracts\/90967c71\\-8c44\\-496c\\-b13f\\-cad40ae1c879a'
    errorMessage500Example:
      value:
        code: UNEXPECTED_ERROR
        message: An unexpected error occurred.
        date: '2020-01-01 00:00:00.000'
        requestId: 4e760145-2e65-4242-ac33-488943528c93
        endpoint: 'https://finapi.localhost'
