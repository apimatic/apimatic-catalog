{
  "swagger": "2.0",
  "info": {
    "description": "# Overview\n\n* **Version:** 1.0.0\n* **Servers**: `https://login.xsolla.com/api`\n* **Protocols**: https\n* **Accepts**: application/json\n* **Responds with**: application/json\n* **[Contact us by email](mailto:integration@xsolla.com)**\n* **Contact URL:** https://xsolla.com/\n\nThis section describes API calls for working with [Login](https://developers.xsolla.com/doc/login). [Set up](/doc/login/integration-guide/integrate-solution/#login_guide_integration_api) your Login project in [Publisher Account](https://publisher.xsolla.com/) before sending requests.\n\n# Download API definition\nYou can download the API definition in two formats:\n* [YAML](https://api.redocly.com/registry/bundle/xsolla/login-api/v1/openapi.yaml?branch=main)\n* [JSON](https://api.redocly.com/registry/bundle/xsolla/login-api/v1/openapi.json?branch=main)\n\n# Glossary\nYou have access to the following Login project types in Publisher Account:\n* Standard Login project\n* Shadow Login project\n\nTo find more information on it, see [Cross-platform account](https://developers.xsolla.com/doc/login/features/cross-platform-account/) feature.\n\n\n## Rate limits\nAre the restrictions applied by Xsolla API on the frequency of access by a user within a defined timeframe.\n\n## Standard Login project\nIs a Login project that is used to store main accounts.\n\n## Shadow Login project\nIs a Login project that is used to store platform accounts.\n\n## Main account\nIs an account type that is created in a standard Login project and linked to platform accounts. The main account is used to identify the player on different platforms.\n\n## Platform account\nIs an account type that is created in a shadow Login project and connected to a definite publishing platform. The platform account can’t be linked to another platform account. Also, you can’t unlink the accounts from a main account.\n\n## Publishing platform\nIs a game platform that is used for game distribution (e.g. Steam, PlayStation, Xbox, etc.).\n\n# Authentication\nLogin API supports the following token types:\n* User token. It is used for sending requests to the following user resources:\n    * profile\n    * friends\n    * attributes\n* Server token. It is used for sending requests to application resources such as settings or user data. The following requests are available:\n    * [Create platform accounts](https://developers.xsolla.com/api/login/operation/auth-by-custom-id)\n    * [Get user data](https://developers.xsolla.com/api/login/operation/get-users-ids-by-social-id-and-platform)\n    * [Link accounts](https://developers.xsolla.com/api/login/operation/link-accounts-by-code)\n    * [Link user accounts via external ID](https://developers.xsolla.com/api/login/operation/link-user-ids-via-external-id)\n\n## Authentication schemes\nYou can determine whether an API call is client or server-side by the scheme of authentication:\n\n- Client-side — are called without authentication or with the <code>Authorization</code> header: <code>Bearer \\<user_JWT\\></code> header, where <code>\\<user_JWT\\></code> — is the user token.\n- Server-side API calls for implementing the user flow — are called with the header:\n<code>X-SERVER-AUTHORIZATION: \\<server_JWT\\></code>, where <code>\\<server_JWT\\></code> — is the server token.\n\n## Getting a user token\nTo get the token, send one of the following requests:\n* user registration ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) or [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user))\n* authentication by username and password ([JWT](https://developers.xsolla.com/api/login/operation/auth-by-username-and-password), [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-by-username-and-password), or [JWT auth by username and password](https://developers.xsolla.com/api/login/operation/jwt-auth-by-username-and-password))\n* authentication via social networks ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) or [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network))\n* silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) or [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication))\n* [authentication via a social network access token](https://developers.xsolla.com/api/login/operation/jwt-auth-via-access-token-of-social-network)\n* [authentication via a publishing platform](https://developers.xsolla.com/api/login/operation/auth-by-custom-id)\n\nAfter JWT authentication, the user is redirected to the Callback URL with a token in a query-parameter: `<Callback URL>?token=<User token (JWT)>`.\n\nAfter OAuth 2.0 protocol-based authentication, send the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) request to the Xsolla Login server to exchange the received `code` parameter for a user token (`access_token`).\n\n## Getting a server token\n\nTo get a server token:\n1. [Set up server OAuth 2.0 client](#set-up-server-oauth-20-client).\n2. [Generate server JWT](#generate-server-jwt).\n\n### Set up server OAuth 2.0 client\n1. Open your project in [Publisher Account](https://publisher.xsolla.com/) and go to the **Login section**.\n2. Click **Configure** in the panel of a **Login** project.\n3. Go to the **Security** block and select the **OAuth 2.0** section.\n4. Click **Add OAuth 2.0 Client**.\n5. Check the **Server (server-to-server connection)** box.\n6. Specify **Token lifetime**.\n7. Click **Connect**.\n8. Copy and save the client ID and secret key.\n\n\n### Generate server JWT\nOn the back end of your application, implement a method to get the server JWT using the [Generate JWT API](https://developers.xsolla.com/api/login/operation/generate-jwt/) call. The request must contain the following parameters:\n* `grant_type` is the type of getting JWT, pass the `client_credentials` value.\n* `client_secret` is the secret key that is received when you set up the server OAuth 2.0 client.\n* `client_id` is the client ID received when you set up the server OAuth 2.0 client.\n\n# Rate limits\nTo prevent Xsolla system overloads and protect against sudden spikes in incoming traffic, Xsolla limits the number of requests received by the Xsolla API within a specified period of time. If the limit is exceeded, the Xsolla API returns an HTTP response with the <code>429</code> status code.\n\nRate limits vary by method, IP-address, authentication scheme, and other factors.\n\nRate limits for server-side methods are applied to methods with server-side authentication — methods that are called with the <code>X-SERVER-AUTHORIZATION: \\<server_JWT\\></code> header, where <code>\\<server_JWT\\></code> is the server token.\n\nRate limits for client-side methods are applied to methods without authentication or with client-side authentication — methods that are called with the <code>Authorization: Bearer \\<user_JWT\\></code> header, where <code>\\<user_JWT\\></code> is the user token.\n\n<b>Example of a method with server-side authentication:</b>\n![Example of a method with server-side authentication](https://cdn.xsolla.net/developers/current/images/api_docs/login-rate-limits-1.png)\n<b>Example of a method with client-side authentication:</b>\n![Example of a method with server-side authentication](https://cdn.xsolla.net/developers/current/images/api_docs/login-rate-limits-2.png)\n\nRate limits for client-side methods do not change and are necessary to prevent brute-force attacks. The maximum request rate for server-side methods is higher than for client-side methods.\nYou can refer to the recommendations on how to manage rate limits in the [documentation](https://developers.xsolla.com/api/getting-started/#api_rate_limits).\n\n<div class=\"note\"><strong>Note</strong>\nIn certain cases, it is possible to adjust the rate limits by request. To request the rate limits adjustment, contact your Customer Success Manager or email <a href=\"mailto:mailto:csm@xsolla.com\">csm@xsolla.com</a>.</div>\n\n# JWT structure\nEvery token has a [JWT](https://jwt.io/) format and contains a definite information in a payload.\n\n## User JWT\nUser JWT is a token received as a result of authentication or registration. A token payload contains information about the user and authentication call.\n\nGetting a user token via the OAuth 2.0 protocol requires an OAuth 2.0 client. The user token is passed in the `Authorization: Bearer <JWT>` header.\n\n## Main claims\nA token will contain the main claims after authentication or email address confirmation. Presence of these claims does not depend on the user database and authentication call.\n\n<table>\n   <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>exp</code></td>\n        <td><a href=\"https://www.unixtimestamp.com/\">Unix Timestamp</a></td>\n        <td>Yes</td>\n        <td>Date and time of token expiration. Default expiration time is 24 hours. You can change expiration time for every Login project.</td>\n    </tr>\n    <tr>\n        <td><code>iss</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>Service that signed the token: <code>https://login.xsolla.com</code>.</td>\n    </tr>\n    <tr>\n        <td><code>iat</code></td>\n        <td><a href=\"https://www.unixtimestamp.com/\">Unix Timestamp</a></td>\n        <td>Yes</td>\n        <td>Date and time of giving the token.</td>\n    </tr>\n    <tr>\n        <td><code>sub</code></td>\n        <td>string (UUID)</td>\n        <td>Yes</td>\n        <td>User ID written on the Xsolla Login server side.</td>\n    </tr>\n    <tr>\n        <td><code>groups</code></td>\n        <td>array</td>\n        <td>Yes</td>\n        <td>\n          <p>The list of groups the user is in. Every group is written in the following format:\n            <ul>\n              <li><code>id</code> — group ID</li>\n              <li><code>name</code> — group name</li>\n              <li><code>is_default</code> — shows whether the group is default or not (<code>true</code> or <code>false</code> values).</li>\n            </ul>\n          </p>\n          <p>There can be only one default group. This group initially includes all users before they are distributed into different groups.</p>\n        </td>\n    </tr>\n    <tr>\n        <td><code>xsolla_login_project_id</code></td>\n        <td>string (UUID)</td>\n        <td>Yes</td>\n        <td>Login project ID.</td>\n    </tr>\n    <tr>\n        <td><code>type</code></td>\n        <td>string</td>\n        <td></td>\n        <td>\n          <p>Authentication option:\n          <ul><li><code>xsolla_login</code> — login via username/email and password.</li>\n          <li><code>social</code> — social login</li>\n          <li><code>email</code> — passwordless login via one-time code received by email.</li>\n          <li><code>phone</code> — passwordless login via one-time code received by SMS.</li>\n          <li><code>firebase</code> — login via username/email and password when the user data storage is Firebase.</li>\n          <li><code>playfab</code> — login via username/email and password when the user data storage is PlayFab.</li>\n          <li><code>proxy</code> — login via username/email and password when the user data storage is custom.</li>\n          <li><code>device</code> — login with device ID.</li>\n          <li><code>server_custom_id</code> — login with custom ID.</li></ul>\n          </p>\n          <p>There can be only one default group. This group initially includes all users before they are distributed into different groups.</p>\n        </td>\n    </tr>\n    <tr>\n        <td><code>avatar</code></td>\n        <td>string</td>\n        <td></td>\n        <td>User avatar URL.</td>\n    </tr>\n    <tr>\n        <td><code>username</code></td>\n        <td>string</td>\n        <td></td>\n        <td>Username.</td>\n    </tr>\n    <tr>\n        <td><code>publisher_id</code></td>\n        <td>integer</td>\n        <td></td>\n        <td>ID of a merchant who owns a Login project.</td>\n    </tr>\n    <tr>\n        <td><code>email</code></td>\n        <td>string</td>\n        <td></td>\n        <td>User email address.</td>\n    </tr>\n    <tr>\n        <td><code>payload</code></td>\n        <td>string</td>\n        <td></td>\n        <td>Additional information that is passed in the payload parameter during authentication.</td>\n    </tr>\n    <tr>\n        <td><code>promo_email_agreement</code></td>\n        <td>boolean</td>\n        <td></td>\n        <td>\n          <p>May have one of the following values:\n            <ul>\n              <li><code>true</code> if the user agrees to receive a newsletter.</li>\n              <li><code>false</code> otherwise.</li>\n            </ul>\n            Has the <code>true</code> value by default.\n          </p>\n          <p>To add the feature to the registration form of the <a href=\"https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget\">Login widget</a>:\n            <ul>\n              <li>Contact your Account Manager if you use Widget 2.0.</li>\n              <li>Add the <code>fields</code> parameter with the <code>promo_email_agreement</code> value to the <a href=\"https://github.com/xsolla/xsolla-login-js-sdk#step-2-initializing-widget\">initialization code</a> if you use the previous version of the widget.</li>\n            </ul>\n          </p>\n        </td>\n    </tr>\n    <tr>\n        <td><code>connection_information</code></td>\n        <td>string</td>\n        <td></td>\n        <td>Shows whether the user confirmed their birth date or not. Confirmation is made via the <a href=\"https://www.ok-name.co.kr/\">okname</a> service.</td>\n    </tr>\n  </tbody>\n</table>\n\n## PlayFab storage\nClaims that are contained in the token after authentication if you use [PlayFab storage](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/).\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>external_account_id</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>User PlayFab ID.</td>\n    </tr>\n    <tr>\n        <td><code>session_ticket</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>\n          <p>A <b>SessionTicket</b> parameter received during an authentication request or requests to the <a href=\"https://api.playfab.com/documentation/client\">PlayFab API</a>.\n          </p>\n          <p>A token contains the claim if you authenticate users via the OAuth 2.0 protocol and pass the <code>playfab</code> value to the <code>scope</code> parameter.\n          </p>\n        </td>\n    </tr>\n    <tr>\n        <td><code>entity_token</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>An <b>EntityToken.EntityToken</b> parameter.</td>\n    </tr>\n    <tr>\n        <td><code>entity_type</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>An <b>EntityToken.Entity.Type</b> parameter. Can have only the <code>title_player_account</code> value.</td>\n    </tr>\n    <tr>\n        <td><code>entity_id</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>An <b>EntityToken.Entity.Id</b> parameter.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Custom storage\nClaims that are contained in the token after authentication if you use [custom storage](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/).\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>provider</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>Name of a social network used for authentication. If the user authenticates via username and password, the claim has the <code>xsolla</code> value.</td>\n    </tr>\n    <tr>\n        <td><code>external_account_id</code></td>\n        <td>string</td>\n        <td></td>\n        <td>User ID on your server side.</td>\n    </tr>\n    <tr>\n        <td><code>partner_data</code></td>\n        <td></td>\n        <td></td>\n        <td>Data of any type returned by your server in the response body during authentication.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Social authentication\nClaims that are contained in the token after authentication via a social network.\nPresence of these claims does not depend on the user database.\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>provider</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>Name of a social network used for authentication.</td>\n    </tr>\n    <tr>\n        <td><code>id</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>User ID in a social network.</td>\n    </tr>\n    <tr>\n        <td><code>is_cross_auth</code></td>\n        <td>boolean</td>\n        <td></td>\n        <td>Shows that the silent authentication request is in progress.</td>\n    </tr>\n    <tr>\n        <td><code>social_access_token</code></td>\n        <td>string</td>\n        <td></td>\n        <td>Social network account <code>access_token</code> parameter used for authentication. Contact your Account Manager to set up the feature.</td>\n    </tr>\n    <tr>\n        <td><code>picture</code></td>\n        <td>string (URL)</td>\n        <td></td>\n        <td>Link to the user profile picture in a social network.</td>\n    </tr>\n    <tr>\n        <td><code>birthday</code></td>\n        <td>date (<a href=\"https://www.ietf.org/rfc/rfc3339.txt\">RFC3339</a>)</td>\n        <td></td>\n        <td>User birth date in a social network.</td>\n    </tr>\n    <tr>\n        <td><code>gender</code></td>\n        <td>string</td>\n        <td></td>\n        <td>User gender in a social network.</td>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td>string</td>\n        <td></td>\n        <td>User nickname in a social network.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Authentication via the OAuth 2.0 protocol\nClaims that are contained in the token after OAuth 2.0 authentication.\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>jti</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>Unique token ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Authentication via a phone number\nClaim which is contained in the token after authentication via a phone number.\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>phone_number</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>User's phone number used for authentication. The phone number format based on the country code, area code, and line number without any dividers.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Server JWT\nThe server token is passed in the `X-SERVER-AUTHORIZATION` header.\n\nThe token payload contains information about resources owned by the OAuth 2.0 client. The token has access to calls with server-based authentication for these resources.\n\n<table>\n  <thead>\n    <tr>\n        <td>Claim</td>\n        <td>Type</td>\n        <td>Required</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td><code>xsolla_login_project_id</code></td>\n        <td>string (UUID)</td>\n        <td>Yes</td>\n        <td>ID of a Login project that owns the OAuth 2.0 client.</td>\n    </tr>\n    <tr>\n        <td><code>resources</code></td>\n        <td>array</td>\n        <td>Yes</td>\n        <td>\n          <p>List of resources owned by a OAuth 2.0 client. Possible types of resources:\n            <ul>\n              <li><code>publisher_id</code> — resources of a merchant who owns the Login project</li>\n              <li><code>publisher_project_id</code> — resources of a project in <a href=\"https://publisher.xsolla.com/\">Publisher Account</a>.</li>\n            </ul>\n          </p>\n          <p>Every group is written in the following format:\n            <ul>\n              <li><code>name</code> — resource type</li>\n              <li><code>value</code> — resource ID</li>\n            </ul>\n          </p>\n        </td>\n    </tr>\n    <tr>\n        <td><code>jti</code></td>\n        <td>string</td>\n        <td>Yes</td>\n        <td>Unique token ID.</td>\n    </tr>\n  </tbody>\n</table>\n\n# JWT validation\nAfter successful authentication, every user has a [JWT](https://jwt.io/libraries) generated for them. Generated JWT is signed by a secret key. To make sure that a JWT is relevant and belongs to the user of your Login project, you should validate its value.\n\nTo validate a JWT:\n1. Open your project in [Publisher Account](https://publisher.xsolla.com/) and go to the **Login** section.\n2. Click **Configure** in the panel of a Login option.\n3. On the navigation page, go to the **Security** block and select the **JWT Signature** section.\n4. Select your encryption method and copy the value of the **Secret key** or **New public JSON Web Key** field, depending on the selected method.\n5. Choose the [library](https://jwt.io/libraries) and connect it on the server side of your application.\n6. Pass the value, copied in the step 4, to the validation function entry.\n\n\n<div class=\"notice\">\n  <p><strong>Notice</strong></p><p>Do not reveal your secret key to anyone. If it was compromised, please update it.</p>\n</div>\n\n# Errors\nIn case of error responses the Xsolla Login server returns a JSON object with the following fields:\n\n<table>\n  <thead>\n    <tr>\n        <td>Field</td>\n        <td>Type</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>code</td>\n        <td>string</td>\n        <td>Xsolla Login server error code.</td>\n    </tr>\n    <tr>\n        <td>description</td>\n        <td>string</td>\n        <td>Error description. The text is always in English. Do not use this text in case of an error, as the value can change in the future.</td>\n    </tr>\n  </tbody>\n</table>\n\n```json\n{\n  \"error\": {\n    \"code\": \"000-000\",\n    \"description\": \"description\"\n  }\n}\n```\n\n## 400 Bad Request\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>0</td>\n        <td>Request has invalid parameters.</td>\n    </tr>\n    <tr>\n        <td>010-019</td>\n        <td>Client authentication failed (e.g. unknown client, no client authentication included, or unsupported authentication method).</td>\n    </tr>\n    <tr>\n        <td>010-022</td>\n        <td>Parameter state missing or too weak as it has less than 8 characters.</td>\n    </tr>\n    <tr>\n        <td>010-023</td>\n        <td>Authorization grant or refresh token is invalid, expired, revoked, doesn’t match the redirection URI used in authorization request, or issued for another client.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 401 Unauthorized\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>002-016</td>\n        <td>Invalid token.</td>\n    </tr>\n    <tr>\n        <td>002-040</td>\n        <td>Unable to authorize banned user.</td>\n    </tr>\n    <tr>\n        <td>003-001</td>\n        <td>Wrong username or password.</td>\n    </tr>\n    <tr>\n        <td>003-007</td>\n        <td>User account not confirmed.</td>\n    </tr>\n    <tr>\n        <td>003-025</td>\n        <td>Error occurred while getting OAuth 2.0 access token.</td>\n    </tr>\n    <tr>\n        <td>003-040</td>\n        <td>Unauthorized user.</td>\n    </tr>\n    <tr>\n        <td>010-026</td>\n        <td>Xsolla Login server or resource owner denied request.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 403 Forbidden\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>1901-0001</td>\n        <td>Invalid token.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 404 Not Found\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>003-002</td>\n        <td>User not found.</td>\n    </tr>\n    <tr>\n        <td>003-019</td>\n        <td>Project not found.</td>\n    </tr>\n    <tr>\n        <td>003-061</td>\n        <td>Object not found.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 418 I’m a teapot\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>004-001</td>\n        <td>Something went wrong.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 422 Unprocessable Entity\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>0</td>\n        <td>Nickname missed in query.</td>\n    </tr>\n    <tr>\n        <td>002-050</td>\n        <td>User’s two-factor authentication settings not changed.</td>\n    </tr>\n    <tr>\n        <td>003-003</td>\n        <td>User with specified username already exists.</td>\n    </tr>\n    <tr>\n        <td>003-020</td>\n        <td>Call unavailable for this Login project.</td>\n    </tr>\n    <tr>\n        <td>003-022</td>\n        <td>This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Account Manager.</td>\n    </tr>\n    <tr>\n        <td>003-033</td>\n        <td>Mismatch project type.</td>\n    </tr>\n    <tr>\n        <td>006-003</td>\n        <td>OAuth 2.0 clients with client_credentials grant type only can have access list.</td>\n    </tr>\n    <tr>\n        <td>010-015</td>\n        <td>Social network authentication failed: SERVICE_NAME.</td>\n    </tr>\n    <tr>\n        <td>010-016</td>\n        <td>This social account already linked to another user.</td>\n    </tr>\n    <tr>\n        <td>010-032</td>\n        <td>Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account &gt; Login &gt; your Login project &gt; Social connections.</td>\n    </tr>\n    <tr>\n        <td>030-024</td>\n        <td>Password reset disabled for this Login project.</td>\n    </tr>\n    <tr>\n        <td>2002-0001</td>\n        <td>Duplicated attributes.</td>\n    </tr>\n  </tbody>\n</table>\n\n## 429 Too Many Requests\n\n<table>\n  <thead>\n    <tr>\n        <td>Code</td>\n        <td>Description</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n        <td>002-054</td>\n        <td>Allowed number of search attempts exceeded. Wait one second before next request.</td>\n    </tr>\n    <tr>\n        <td>010-005</td>\n        <td>Allowed number of requests exceeded.</td>\n    </tr>\n    <tr>\n        <td>1900-0001</td>\n        <td>Allowed number of requests exceeded.</td>\n    </tr>\n  </tbody>\n</table>\n",
    "title": "Login API",
    "version": "v1"
  },
  "host": "login.xsolla.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "description": "Methods to manage custom email providers.",
      "name": "custom email providers",
      "x-displayName": "Custom Email Providers"
    },
    {
      "description": "Methods to manage custom SMS providers.",
      "name": "custom sms providers",
      "x-displayName": "Custom SMS Providers"
    },
    {
      "description": "Methods to manage supplementary user fields.",
      "name": "fields",
      "x-displayName": "Supplementary Fields"
    },
    {
      "name": "internal oauth 2.0",
      "x-displayName": "Internal OAuth 2.0"
    },
    {
      "name": "emails - jwt",
      "x-displayName": "JWT"
    },
    {
      "name": "emails - oauth 2.0",
      "x-displayName": "OAuth 2.0"
    },
    {
      "name": "custom email templates",
      "x-displayName": "Custom templates"
    },
    {
      "description": "Methods to authenticate the user via the JWT protocol.",
      "name": "jwt",
      "x-displayName": "JWT"
    },
    {
      "description": "Methods to authenticate the user via the OAuth 2.0 protocol.",
      "name": "oauth 2.0",
      "x-displayName": "OAuth 2.0"
    },
    {
      "description": "Methods for management attributes (by client).",
      "name": "client",
      "x-displayName": "Client"
    },
    {
      "description": "Methods for management attributes (by server).",
      "name": "server",
      "x-displayName": "Server"
    },
    {
      "description": "Methods for management RSA keys in project.",
      "name": "rsa",
      "x-displayName": "RSA"
    },
    {
      "description": "Methods for management webhooks in project.",
      "name": "webhooks",
      "x-displayName": "Webhooks"
    },
    {
      "description": "Methods for multi-factor authentication in user account (by client).",
      "name": "mfa",
      "x-displayName": "MFA"
    },
    {
      "description": "Methods for management profile in user account (by client).",
      "name": "user profile",
      "x-displayName": "User profile"
    },
    {
      "description": "Methods for management friends in user account (by client).",
      "name": "user friends",
      "x-displayName": "User friends"
    },
    {
      "description": "Methods for management social networks in user account (by client).",
      "name": "social networks",
      "x-displayName": "Social networks"
    },
    {
      "name": "confirmation",
      "x-displayName": "Confirmation"
    },
    {
      "name": "resetting",
      "x-displayName": "Resetting"
    },
    {
      "name": "settings",
      "x-displayName": "Settings"
    },
    {
      "name": "server side",
      "x-displayName": "Server side"
    },
    {
      "name": "linking",
      "x-displayName": "Linking"
    },
    {
      "name": "devices",
      "x-displayName": "Devices"
    },
    {
      "description": "Methods for manage and use checklists into Publisher Account",
      "name": "checklist"
    },
    {
      "description": "Methods for user export & import management.",
      "name": "bulk user management",
      "x-displayName": "Bulk user management"
    },
    {
      "name": "other"
    },
    {
      "description": "Methods for manage project age restrictions",
      "name": "age restrictions",
      "x-displayName": "Age restrictions"
    },
    {
      "description": "Methods to manage SMS limit.",
      "name": "sms limit",
      "x-displayName": "SMS Limit"
    },
    {
      "description": "Methods for manage user groups",
      "name": "user groups",
      "x-displayName": "User groups"
    },
    {
      "description": "Methods to ping services.",
      "name": "health check",
      "x-displayName": "Health Check"
    },
    {
      "description": "Methods to process widget settings.",
      "name": "widget",
      "x-displayName": "Widget"
    },
    {
      "description": "Methods to get callbacks after social authentication or okname.",
      "name": "callbacks",
      "x-displayName": "Callbacks"
    },
    {
      "description": "Methods for the Chinese CAPTCHA.",
      "name": "captcha",
      "x-displayName": "Captcha"
    },
    {
      "description": "Methods to process user agreement with the Consent to Data Processing.",
      "name": "consent to data processing",
      "x-displayName": "Consent to Data Processing"
    },
    {
      "description": "Methods called by server. Require server authentication.",
      "name": "server old",
      "x-displayName": "Server Old"
    }
  ],
  "paths": {
    "/attributes/custom_id/get": {
      "post": {
        "description": "Gets a list of particular user’s attributes.",
        "operationId": "get-attributes-by-server-custom-id",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "It is necessary to specify your login project ID and list of server_custom_ids",
              "properties": {
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "server_custom_ids": {
                  "description": "Array of server_custom_ids",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 250,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "attributes": {
                    "description": "List of attributes of the specified user.",
                    "items": {
                      "$ref": "#/definitions/getServerAttribute"
                    },
                    "type": "array"
                  },
                  "server_custom_id": {
                    "description": "Game ID. Used for server Auth by partner identity",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get attributes by server_custom_ids",
        "tags": [
          "server"
        ]
      }
    },
    "/attributes/users/get": {
      "post": {
        "description": "Gets a list of users by an attribute. Returns a list of the users’ IDs, their emails, and the attributes that were specified in the ‘key’ object of the request.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-users-by-attribute-from-server",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "It is necessary to specify your merchant ID or login ID from Publisher Account",
              "properties": {
                "after": {
                  "description": "Update date of user’s attribute and ID of the latest attribute in the `keys` list. Do not set it at the first time.\nWhen you get users by attribute, they are sorted by their update date. If several attributes have the same update date, they are sorted by attribute ID.\nIt is used for API pagination.\n",
                  "type": "string",
                  "x-nullable": true
                },
                "attr_type": {
                  "default": "client",
                  "description": "Definition of user’s access level to service attributes.",
                  "enum": [
                    "client",
                    "server"
                  ],
                  "type": "string",
                  "x-nullable": false
                },
                "attribute": {
                  "$ref": "#/definitions/targetAttribute"
                },
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 5,
                  "type": "array"
                },
                "limit": {
                  "$ref": "#/definitions/limit"
                },
                "login_project_id": {
                  "description": "Login ID from Publisher Account which you want to get user’s attributes for. If you do specify it, it is use instead your merchant ID and project ID from Publisher Account.",
                  "type": "string"
                },
                "publisher_id": {
                  "description": "Your merchant ID the request is made for. Needed for request authorizing.",
                  "type": "integer",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to get users for. If you do not specify it, it returns users without the value of this parameter.",
                  "type": "integer"
                },
                "search_type": {
                  "default": "equal",
                  "description": "Сomparison condition that defines search criteria.",
                  "enum": [
                    "equal",
                    "like"
                  ],
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "attribute"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-XL-AFTER": {
                "description": "Date and ID of the latest attribute in the `keys` list that are used for API pagination. You should set this value to the `after` parameter to get the next part of users.",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "properties": {
                  "attributes": {
                    "description": "List of attributes of the specified user.",
                    "items": {
                      "$ref": "#/definitions/getServerAttribute"
                    },
                    "type": "array"
                  },
                  "email": {
                    "description": "User's email.",
                    "type": "string"
                  },
                  "user_id": {
                    "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get users by attribute from server",
        "tags": [
          "server"
        ]
      }
    },
    "/attributes/users/me/get": {
      "post": {
        "description": "Gets a list of particular user’s attributes. Returns only attributes with the `client` value of `attr_type` parameter.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for client-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-users-attributes-from-client",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "publisher_project_id": {
                  "description": "Project ID you want to get attributes for from Publisher Account. If you do not specify it, the method returns attributes without the value of this parameter.",
                  "type": "integer"
                },
                "user_id": {
                  "description": "User ID which attributes you want to get. The request returns only attributes with the public value of the `permission` parameter. If you do not specify it or put the user ID of the current user there, the request returns only attributes with any value for the permission parameter.",
                  "format": "uuid",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/getAttribute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesBearer": []
          }
        ],
        "summary": "Get user’s attributes from client",
        "tags": [
          "client"
        ]
      }
    },
    "/attributes/users/me/get_read_only": {
      "post": {
        "description": "Gets a list of particular user’s read-only attributes. Returns only attributes with the `server` value of the `attr_type` parameter, which was set only for reading.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for client-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-users-read-only-attributes-from-client",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "publisher_project_id": {
                  "description": "Project ID you want to get attributes for from Publisher Account. If you do not specify it, the method returns attributes without the value of this parameter.",
                  "type": "integer"
                },
                "user_id": {
                  "description": "User ID which attributes you want to get. The request returns only attributes with the public value of the `permission` parameter. If you do not specify it or put the user ID of the current user there, the request returns only attributes with any value for the permission parameter.",
                  "format": "uuid",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/getAttribute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesBearer": []
          }
        ],
        "summary": "Get user’s read-only attributes from client",
        "tags": [
          "client"
        ]
      }
    },
    "/attributes/users/me/update": {
      "post": {
        "description": "Updates and creates particular user’s attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for client-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "update-users-attributes-from-client",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "attributes": {
                  "description": "List of attributes of the specified game.\nTo add attribute which does not exist, set this attribute to the `key` parameter.\nTo update `value` of the attribute, specify its `key` parameter and set the new `value`. You can change several attributes at a time.\n",
                  "items": {
                    "$ref": "#/definitions/attribute"
                  },
                  "type": "array"
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only.",
                  "type": "integer"
                },
                "removing_keys": {
                  "description": "List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttributesAreDuplicated": {
                "error_code": "2002-0001",
                "error_description": "Duplicated attributes."
              },
              "OperationUnavailableInReadOnlyMode": {
                "error_code": "2003-0001",
                "error_description": "This call temporarily unavailable."
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesBearer": []
          }
        ],
        "summary": "Update user’s attributes from client",
        "tags": [
          "client"
        ]
      }
    },
    "/attributes/users/{user_id}/get": {
      "post": {
        "description": "Gets user’s attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-users-attributes-from-server",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "publisher_id": {
                  "description": "Your merchant ID the request is made for. Need for request authorizing.",
                  "type": "integer",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to get user’s attributes for. If you do not specify it, it returns attributes for all games with them.",
                  "type": "integer"
                }
              },
              "required": [
                "publisher_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/getServerAttribute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttributesAreDuplicated": {
                "error_code": "2002-0001",
                "error_description": "Duplicated attributes."
              },
              "OperationUnavailableInReadOnlyMode": {
                "error_code": "2003-0001",
                "error_description": "This call temporarily unavailable."
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get user’s attributes from server",
        "tags": [
          "server"
        ]
      }
    },
    "/attributes/users/{user_id}/get_read_only": {
      "post": {
        "description": "Gets a list of user’s read-only attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-users-read-only-attributes-from-server",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "keys": {
                  "description": "List of attributes’ keys which you want to get. If you do not specify them, the method returns all user’s attributes.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "publisher_id": {
                  "description": "Your merchant ID the request is made for. Need for request authorizing.",
                  "type": "integer",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to get user’s attributes for. If you do not specify it, it returns attributes for all games with them.",
                  "type": "integer"
                }
              },
              "required": [
                "publisher_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/getAttribute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttributesAreDuplicated": {
                "error_code": "2002-0001",
                "error_description": "Duplicated attributes."
              },
              "OperationUnavailableInReadOnlyMode": {
                "error_code": "2003-0001",
                "error_description": "This call temporarily unavailable."
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get user’s read-only attributes from server",
        "tags": [
          "server"
        ]
      }
    },
    "/attributes/users/{user_id}/update": {
      "post": {
        "description": "Updates and creates user’s attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "update-users-attributes-from-server",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "attributes": {
                  "description": "List of attributes of the specified game.\nTo add attribute which does not exist, set this attribute to the `key` parameter.\nTo update `value` of the attribute, specify its `key` parameter and set new `value`. You can change several attributes at a time.\n",
                  "items": {
                    "$ref": "#/definitions/serverAttribute"
                  },
                  "type": "array"
                },
                "publisher_id": {
                  "description": "Your merchant ID the request is made for. Needed for request authorizing.",
                  "type": "integer",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only.",
                  "type": "integer"
                },
                "removing_keys": {
                  "description": "List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "publisher_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttributesAreDuplicated": {
                "error_code": "2002-0001",
                "error_description": "Duplicated attributes."
              },
              "OperationUnavailableInReadOnlyMode": {
                "error_code": "2003-0001",
                "error_description": "This call temporarily unavailable."
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Update user’s attributes from server",
        "tags": [
          "server"
        ]
      }
    },
    "/attributes/users/{user_id}/update_read_only": {
      "post": {
        "description": "Updates and creates user’s read-only attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "update-users-read-only-attributes-from-server",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "attributes": {
                  "description": "List of attributes of the specified game.\nTo add attribute which does not exist, set this attribute to the `key` parameter.\nTo update `value` of the attribute, specify its `key` parameter and set new `value`. You can change several attributes at a time.\n",
                  "items": {
                    "$ref": "#/definitions/attribute"
                  },
                  "type": "array"
                },
                "publisher_id": {
                  "description": "Your merchant ID the request is made for. Need for request authorizing.",
                  "type": "integer",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you want to update the value of specified attributes for. If you do not specify it, the method updates attributes that are general to all games only.",
                  "type": "integer"
                },
                "removing_keys": {
                  "description": "List of attributes which you want to delete. If you specify the same attribute in `attributes` parameter, it will not be deleted.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "publisher_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttributesAreDuplicated": {
                "error_code": "2002-0001",
                "error_description": "Duplicated attributes."
              },
              "OperationUnavailableInReadOnlyMode": {
                "error_code": "2003-0001",
                "error_description": "This call temporarily unavailable."
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Update user’s read-only attributes from server",
        "tags": [
          "server"
        ]
      }
    },
    "/login": {
      "post": {
        "description": "Authenticates the user by the username/email and password specified.",
        "operationId": "auth-by-username-and-password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "password": "password123",
                "remember_me": false,
                "username": "John"
              },
              "properties": {
                "password": {
                  "description": "User password.",
                  "type": "string",
                  "x-isnullable": false
                },
                "remember_me": {
                  "description": "Whether the user agrees to save the authentication data. Default is `false`.",
                  "type": "boolean",
                  "x-isnullable": false
                },
                "username": {
                  "description": "Username or email address.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` value is the user JWT.",
                  "type": "string"
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Wrong username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Unauthorized",
            "examples": {
              "OAuthSocialRequestFailed": {
                "error": {
                  "code": 0,
                  "description": "path /api/login123/ was not found"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UnavailableProjectMethod": {
                "error": {
                  "code": 0,
                  "description": "projectId in query is required"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "300-003",
                  "description": "rate limit error"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth by username and password",
        "tags": [
          "jwt"
        ]
      }
    },
    "/login/device/{device_type}": {
      "post": {
        "description": "Authenticates a user via a particular device ID. To enable silent authentication, use the [instruction](/doc/login/authentication-options/device-id/#login_features_device_id_presettings).",
        "operationId": "jwt-auth-via-device-id",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Device info.",
              "example": {
                "device": "ONEPLUS A6003",
                "device_id": "1AF516EFACD646F6"
              },
              "properties": {
                "device": {
                  "description": "Manufacturer and model name of the device.",
                  "maxLength": 100,
                  "type": "string",
                  "x-isnullable": false
                },
                "device_id": {
                  "description": "Device ID:\n* For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.\n* For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.\n",
                  "maxLength": 36,
                  "minLength": 16,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "device",
                "device_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Type of the device.",
            "enum": [
              "android",
              "ios"
            ],
            "in": "path",
            "name": "device_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "token": {
                  "description": "Xsolla Login user JWT.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "DependencyService": {
                "error": {
                  "code": "010-035",
                  "description": "Dependency service unavailable: playfab."
                }
              },
              "InvalidParam": {
                "error": {
                  "code": "002-027",
                  "description": "Invalid device_id parameter."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via device ID",
        "tags": [
          "jwt"
        ]
      }
    },
    "/login/email/confirm": {
      "post": {
        "description": "Completes authentication by the user email address and a confirmation code. The code lifetime is 3 minutes.\n\nThis call is used only with the [Start auth by email](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-email) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their email address.\n2. The user enters their email address.\n3. The application sends the [Start auth by email](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-email) request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.\n4. The Xsolla Login server sends the email and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends this request to the Xsolla Login server with the received ID.\n8. The user is considered as authorized.\n",
        "operationId": "jwt-complete-auth-by-email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "code": {
                  "description": "Confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "operation_id": {
                  "description": "ID of the confirmation code. You can find its value in the response to a previous request.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code",
                "email",
                "operation_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` parameter has the user JWT format.",
                  "type": "string"
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttemptsToSendAuthCodeHaveBeenSpent": {
                "error": {
                  "code": "003-049",
                  "description": "You exceeded limited number of attempts to use authorization code."
                }
              },
              "ExternalAccountIDIsNotReturnedForLoginWithCustomStorage": {
                "error": {
                  "code": "003-048",
                  "description": "Invalid response from your API. It must contain user ID as account_id response body parameter."
                }
              },
              "WrongAuthorizationCode": {
                "error": {
                  "code": "003-039",
                  "description": "Wrong authorization code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Complete auth by email",
        "tags": [
          "jwt"
        ]
      }
    },
    "/login/email/request": {
      "post": {
        "description": "Starts authentication by the user email address and sends a confirmation code to their email address. The code lifetime is 3 minutes.\n\nThis call is used only with the [Complete auth by email](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-email) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their email address.\n2. The user enters their email address.\n3. The application sends this request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.\n4. The Xsolla Login server sends the email and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the linke.\n7. The application sends the [Complete auth by email](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-email) request with the received ID to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "jwt-start-auth-by-email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "link_url": {
                  "description": "URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.",
                  "format": "uri",
                  "type": "string"
                },
                "send_link": {
                  "description": "Shows whether a link is sent with the confirmation code in the email or not.\n\nThe link can be used instead of the confirmation code to log in.\n\nIf the parameter has the `true` value, the link is sent in the email.\n",
                  "type": "boolean"
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string"
                }
              },
              "required": [
                "operation_id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessEmailAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-056",
                  "description": "Passwordless authentication via email address disabled for this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Start auth by email",
        "tags": [
          "jwt"
        ]
      }
    },
    "/login/phone/confirm": {
      "post": {
        "description": "Completes authentication by the user phone number and a confirmation code. The code lifetime is 3 minutes.\n\nThis call is used only with the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their phone number.\n2. The user enters their phone number.\n3. The application sends the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.\n4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends this request to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "jwt-complete-auth-by-phone-number",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "code": {
                  "description": "Confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "phone_number": {
                  "description": "User phone number.",
                  "pattern": "^\\+(\\d){5,25}$",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code",
                "phone_number",
                "operation_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL with the `token` and `remember_me` parameters to redirect the user to after successful authentication. The `token` parameter has the user JWT format.",
                  "type": "string"
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttemptsToSendAuthCodeHaveBeenSpent": {
                "error": {
                  "code": "003-049",
                  "description": "You exceeded limited number of attempts to use authorization code."
                }
              },
              "ExternalAccountIDIsNotReturnedForLoginWithCustomStorage": {
                "error": {
                  "code": "003-048",
                  "description": "Invalid response from your API. It must contain user ID as account_id response body parameter."
                }
              },
              "WrongAuthorizationCode": {
                "error": {
                  "code": "003-039",
                  "description": "Wrong authorization code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Complete auth by phone number",
        "tags": [
          "jwt"
        ]
      }
    },
    "/login/phone/request": {
      "post": {
        "description": "Starts authentication by the user phone number and sends a confirmation code to their phone number. The code lifetime is 3 minutes.\n\nThis call is used only with the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-phone-number) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their phone number.\n2. The user enters their phone number.\n3. The application sends this request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.\n4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/jwt-complete-auth-by-phone-number) request with the received ID to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "jwt-start-auth-by-phone-number",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "link_url": {
                  "description": "URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.",
                  "format": "uri",
                  "type": "string"
                },
                "phone_number": {
                  "description": "User phone number.",
                  "pattern": "^\\+(\\d){5,25}$",
                  "type": "string",
                  "x-isnullable": false
                },
                "send_link": {
                  "description": "Shows whether a link is sent with the confirmation code in the SMS or not.\n\nThe link can be used instead of the confirmation code to log in.\n\nIf the parameter has the `true` value, the link is sent in the SMS.\n",
                  "type": "boolean"
                }
              },
              "required": [
                "phone_number"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string"
                }
              },
              "required": [
                "operation_id"
              ],
              "type": "object"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessPhoneAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-050",
                  "description": "Passwordless authentication via phone number disabled for this Login project."
                }
              },
              "RateLimitPhoneAuthorization": {
                "error": {
                  "code": "003-038",
                  "description": "You exceeded limited number of attempts to send SMS."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012,",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Start auth by phone number",
        "tags": [
          "jwt"
        ]
      }
    },
    "/oauth2/auth": {
      "get": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Checks the presence of a valid SSO session. Redirects to the URL passed in the `redirect_url` parameter with an authorization code.",
        "operationId": "oauth2-authorize",
        "parameters": [
          {
            "description": "Will be set to code, indicating that the application expects to receive an authorization code if successful.",
            "enum": [
              "code"
            ],
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "This URL must match one of the URLs the developer registered when creating the application, and the authorization server should reject the request if it does not match. To set up this parameter, contact your Customer Success Manager.",
            "in": "query",
            "name": "redirect_uri",
            "required": true,
            "type": "string"
          },
          {
            "description": "The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user.",
            "in": "query",
            "name": "scope",
            "required": true,
            "type": "string"
          },
          {
            "description": "The state parameter is used by the application to store request-specific data and/or prevent CSRF attacks. The authorization server must return the unmodified state value back to the application. This is the recommended parameter.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "The audience parameter may contain multiple strings separated by a url-encoded space (+ or %20). The audience values themselves must also be url encoded.",
            "in": "query",
            "name": "audience",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "If true is passed method will redirect to widget at first and then to partner's callback. If false, method will redirect straight to partner's callback.",
            "in": "query",
            "name": "popup",
            "type": "boolean"
          },
          {
            "description": "Generated challenge from the `code_verifier` (https://datatracker.ietf.org/doc/html/rfc7636#section-4-2).",
            "in": "query",
            "name": "code_challenge",
            "type": "string"
          },
          {
            "description": "Method used to generate the challenge. For now, you can only use the method `S256` to generate `code_challenge`.",
            "enum": [
              "S256"
            ],
            "in": "query",
            "name": "code_challenge_method",
            "type": "string"
          },
          {
            "description": "Service parameter for pop up flow. Does not affect API behaviour.",
            "in": "query",
            "name": "widget_only",
            "type": "boolean"
          },
          {
            "description": "Service parameter for pop up flow. Does not affect API behaviour.",
            "in": "query",
            "name": "enable_post_message_login",
            "type": "boolean"
          },
          {
            "description": "Service parameter for pop up flow. Does not affect API behaviour.",
            "in": "query",
            "name": "disable_socials",
            "type": "boolean"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL generated from the `redirect_uri` with `code` parameter. The `code` parameter is the user authentication code which must be exchanged to a JWT. If the request contained a `state` parameter, the URL will also include the exact value from the request.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "418": {
            "description": "I’m a teapot",
            "examples": {
              "application/json": {
                "error": {
                  "code": "004-001",
                  "description": "Something went wrong."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "OAuth 2.0 Authorize",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/clear_sso": {
      "get": {
        "description": "Deletes user's SSO cookie for given project.",
        "operationId": "clear-sso-cookie",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Clear SSO",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/consent": {
      "post": {
        "description": "Saves the user's consent to the application of certain scopes for a specific OAuth 2.0 client.",
        "operationId": "oauth2-save-consent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "approval": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "client_id": {
                  "description": "Your application ID.",
                  "type": "string",
                  "x-nullable": false
                },
                "redirect_uri": {
                  "description": "This URL must match one of the URLs the developer registered when creating the application, and the authorization server should reject the request if it does not match. To set up this parameter, contact your Customer Success Manager.",
                  "type": "string",
                  "x-nullable": false
                },
                "scope": {
                  "description": "The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user. If there is more than one scope value, then they are separated by a space.",
                  "type": "string"
                },
                "state": {
                  "description": "The state parameter is used by the application to store request-specific data and/or prevent CSRF attacks. The authorization server must return the unmodified state value back to the application. This is the recommended parameter.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "client_id",
                "redirect_uri",
                "state"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL generated from the `redirect_uri`. If the request contained a `state` parameter, the URL will also include the exact value from the request.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Save consent for OAuth 2.0",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/consent/validate": {
      "post": {
        "description": "Checks if the user gave consent to the application of the user data collection scope for a specific OAuth 2.0 client.",
        "operationId": "oauth2-check-consent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "client_id": {
                  "description": "Your application ID.",
                  "type": "string",
                  "x-nullable": false
                },
                "scope": {
                  "description": "The request may have one or more scope values indicating additional access requested by the application. The authorization server will need to display the requested scopes to the user. If there is more than one scope value, then they are separated by a space.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "client_id",
                "scope"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "approval": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "refused_scopes": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-nullable": true
                }
              },
              "required": [
                "approval"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Check consent for OAuth 2.0",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login": {
      "post": {
        "description": "Authenticates the user by the username/email and password specified. To finish user authentication, get the user JWT by sending the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) request.",
        "operationId": "oauth-20-auth-by-username-and-password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "password": "password123",
                "username": "John"
              },
              "properties": {
                "password": {
                  "description": "User password.",
                  "type": "string",
                  "x-isnullable": false
                },
                "username": {
                  "description": "Username or email address.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.\n",
            "in": "query",
            "name": "audience",
            "type": "string"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "InvalidOAuth20State": {
                "error": {
                  "code": "010-022",
                  "description": "Parameter state missing or too weak as it has less than 8 characters."
                }
              },
              "InvalidRequest": {
                "error": {
                  "code": "010-017",
                  "description": "Request is missing required parameter, includes invalid parameter value, includes parameter more than once, or is malformed."
                }
              },
              "InvalidScope": {
                "error": {
                  "code": "010-020",
                  "description": "Requested scope is invalid, unknown, or malformed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Wrong username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "CaptchaRequired": {
                "error": {
                  "code": "010-007",
                  "description": "Incorrect CAPTCHA input."
                }
              },
              "LoginAuthenticationNotAllowed": {
                "error": {
                  "code": "003-021",
                  "description": "Authentication disabled for this Login project."
                }
              },
              "UnavailableProjectMethod": {
                "error": {
                  "code": "003-020",
                  "description": "Call unavailable for this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth by username and password",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/device/{device_type}": {
      "post": {
        "description": "Authenticates a user via a particular device ID.",
        "operationId": "oauth-20-auth-via-device-id",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Device info.",
              "example": {
                "device": "ONEPLUS A6003",
                "device_id": "1AF516EFACD646F6"
              },
              "properties": {
                "device": {
                  "description": "Manufacturer and model name of the device.",
                  "maxLength": 100,
                  "type": "string",
                  "x-isnullable": false
                },
                "device_id": {
                  "description": "Device ID:\n* For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.\n* For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.\n",
                  "maxLength": 36,
                  "minLength": 16,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "device",
                "device_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Type of the device.",
            "enum": [
              "android",
              "ios"
            ],
            "in": "path",
            "name": "device_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "InvalidOAuth20State": {
                "error": {
                  "code": "010-022",
                  "description": "Parameter state missing or too weak as it has less than 8 characters."
                }
              },
              "InvalidRequest": {
                "error": {
                  "code": "010-017",
                  "description": "Request is missing required parameter, includes invalid parameter value, includes parameter more than once, or is malformed."
                }
              },
              "InvalidScope": {
                "error": {
                  "code": "010-020",
                  "description": "Requested scope is invalid, unknown, or malformed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "DependencyService": {
                "error": {
                  "code": "010-035",
                  "description": "Dependency service unavailable: playfab."
                }
              },
              "InvalidParam": {
                "error": {
                  "code": "002-027",
                  "description": "Invalid device_id parameter."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via device ID",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/email/confirm": {
      "post": {
        "description": "Completes authentication by the user email address and a confirmation code. The code lifetime is 3 minutes.\n\nThis call is used only with the [Start auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-email) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their email address.\n2. The user enters their email address.\n3. The application sends the [Start auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-email) request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.\n4. The Xsolla Login server sends the email and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends this request to the Xsolla Login server with the received ID.\n8. The user is considered as authorized.\n",
        "operationId": "oauth-20-complete-auth-by-email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "code": {
                  "description": "Confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "operation_id": {
                  "description": "ID of the confirmation code. You can find its value in the response to a previous request.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code",
                "email",
                "operation_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string"
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttemptsToSendAuthCodeHaveBeenSpent": {
                "error": {
                  "code": "003-049",
                  "description": "You exceeded limited number of attempts to use authorization code."
                }
              },
              "ExternalAccountIDIsNotReturnedForLoginWithCustomStorage": {
                "error": {
                  "code": "003-048",
                  "description": "Invalid response from your API. It must contain user ID as account_id response body parameter."
                }
              },
              "WrongAuthorizationCode": {
                "error": {
                  "code": "003-039",
                  "description": "Wrong authorization code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Complete auth by email",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/email/request": {
      "post": {
        "description": "Starts authentication by the user email address and sends a confirmation code to their email address. The code lifetime is 3 minutes.\n\nThis call is used only with the [Complete auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-email) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their email address.\n2. The user enters their email address.\n3. The application sends this request to the Xsolla Login server:\n   a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make email contain the confirmation code and link.\n   b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.\n4. The Xsolla Login server sends the email and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends the [Complete auth by email](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-email) request with the received ID to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "oauth-20-start-auth-by-email",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "link_url": {
                  "description": "URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.",
                  "format": "uri",
                  "type": "string"
                },
                "send_link": {
                  "description": "Shows whether a link is sent with the confirmation code in the email or not.\n\nThe link can be used instead of the confirmation code to log in.\n\nIf the parameter has the `true` value, the link is sent in the email.\n",
                  "type": "boolean"
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `offline` to use `refresh_token` from the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string"
                }
              },
              "required": [
                "operation_id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessEmailAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-056",
                  "description": "Passwordless authentication via email address disabled for this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Start auth by email",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/phone/confirm": {
      "post": {
        "description": "Completes authentication by the user phone number and a confirmation code. The code lifetime is 3 minutes.\n\nThis call is used only with the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their phone number.\n2. The user enters their phone number.\n3. The application sends the [Start auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number) request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.\n4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends this request to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "oauth-20-complete-auth-by-phone-number",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "code": {
                  "description": "Confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                },
                "phone_number": {
                  "description": "User phone number.",
                  "pattern": "^\\+(\\d){5,25}$",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code",
                "phone_number",
                "operation_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string"
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UnableToAuthorizeBannedUser": {
                "error": {
                  "code": "002-040",
                  "description": "Unable to authorize banned user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "AttemptsToSendAuthCodeHaveBeenSpent": {
                "error": {
                  "code": "003-049",
                  "description": "You exceeded limited number of attempts to use authorization code."
                }
              },
              "ExternalAccountIDIsNotReturnedForLoginWithCustomStorage": {
                "error": {
                  "code": "003-048",
                  "description": "Invalid response from your API. It must contain user ID as account_id response body parameter."
                }
              },
              "WrongAuthorizationCode": {
                "error": {
                  "code": "003-039",
                  "description": "Wrong authorization code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Complete auth by phone number",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/phone/request": {
      "post": {
        "description": "Starts authentication by the user phone number and sends a confirmation code to their phone number. The code lifetime is 3 minutes.\n\nThis call is used only with the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-phone-number) call.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their phone number.\n2. The user enters their phone number.\n3. The application sends this request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send the [Get confirmation code](https://developers.xsolla.com/api/login/operation/get-confirmation-code) request to make SMS contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the SMS will contain the confirmation code only.\n4. The Xsolla Login server sends the SMS and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends the [Complete auth by phone number](https://developers.xsolla.com/api/login/operation/oauth-20-complete-auth-by-phone-number) request with the received ID to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "oauth-20-start-auth-by-phone-number",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "link_url": {
                  "description": "URL to redirect the user to the status authentication page. **Required** if the parameter `send_link` is `true`.",
                  "format": "uri",
                  "type": "string"
                },
                "phone_number": {
                  "description": "User phone number.",
                  "pattern": "^\\+(\\d){5,25}$",
                  "type": "string",
                  "x-isnullable": false
                },
                "send_link": {
                  "description": "Shows whether a link is sent with the confirmation code in the SMS or not.\n\nThe link can be used instead of the confirmation code to log in.\n\nIf the parameter has the `true` value, the link is sent in the SMS.\n",
                  "type": "boolean"
                }
              },
              "required": [
                "phone_number"
              ],
              "type": "object"
            }
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `offline` to use `refresh_token` from the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "operation_id": {
                  "description": "ID of the confirmation code.",
                  "type": "string"
                }
              },
              "required": [
                "operation_id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessPhoneAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-050",
                  "description": "Passwordless authentication via phone number disabled for this Login project."
                }
              },
              "RateLimitPhoneAuthorization": {
                "error": {
                  "code": "003-038",
                  "description": "You exceeded limited number of attempts to send SMS."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012,",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Start auth by phone number",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/login/token": {
      "post": {
        "description": "Authenticates the user by the username/email and password and returns a JWT. Exchanging the code to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call is not needed.",
        "operationId": "jwt-auth-by-username-and-password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "password": "password123",
                "username": "John"
              },
              "properties": {
                "password": {
                  "description": "User password.",
                  "type": "string",
                  "x-isnullable": false
                },
                "username": {
                  "description": "Username or email address.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "access_token": "2YotnFZFEjr1zCsicMWpAA",
                "expires_in": 3600,
                "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
                "token_type": "bearer"
              }
            },
            "schema": {
              "properties": {
                "access_token": {
                  "description": "User JWT.",
                  "type": "string"
                },
                "expire_in": {
                  "description": "JWT expiration period in seconds. Default value is 3600 seconds.",
                  "type": "integer"
                },
                "refresh_token": {
                  "description": "Refresh token for updating the `access_token`.",
                  "type": "string"
                },
                "token_type": {
                  "description": "JWT type with `bearer` value.",
                  "type": "string"
                }
              },
              "required": [
                "access_token",
                "token_type"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidGrant": {
                "error": {
                  "code": "010-023",
                  "description": "Authorization grant or refresh token is invalid, expired, revoked, doesn’t match the redirection URI used in authorization request, or issued for another client."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Wrong username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "JWT auth by username and password",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/logout": {
      "get": {
        "description": "Logs the user out and deletes the user session according to the value of the `sessions` parameter. Call the [Check user authentication](https://developers.xsolla.com/api/login/operation/check-user-authentication) call to see if the user is logged in.",
        "operationId": "log-user-out",
        "parameters": [
          {
            "description": "Shows how the user is logged out and how the user session is deleted. The parameter has the following values:\n* `sso` is used for deleting only the SSO user session.\n* `all` is used for deleting the SSO user session and invalidating all access and refresh tokens.\n",
            "enum": [
              "sso",
              "all"
            ],
            "in": "query",
            "name": "sessions",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          },
          {
            "ExternalBearer": []
          }
        ],
        "summary": "Log user out",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/social/{oauth2_cross_social_provider_name}/cross_auth": {
      "get": {
        "description": "Exchanges the user JWT from Steam, Xbox, or Epic Games to the JWT in your project (`projectId`).\nTo enable silent authentication, use the [instruction](https://developers.xsolla.com/doc/login/features/silent-authentication).\n",
        "operationId": "oauth-20-silent-authentication",
        "parameters": [
          {
            "description": "Name of the platform the user authorized in. Can be `steam`, `xbox`, `epicgames`.\n",
            "in": "path",
            "name": "oauth2_cross_social_provider_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your app ID in the platform.",
            "in": "query",
            "name": "app_id",
            "type": "string"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.\n",
            "in": "query",
            "name": "audience",
            "type": "string"
          },
          {
            "description": "Session ticket received from the platform.",
            "in": "query",
            "name": "session_ticket",
            "type": "string"
          },
          {
            "description": "Code received from the platform.",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "default": true,
            "description": "Shows how the Xsolla Login server should respond. If you set:\n* `true` value, the Xsolla Login server returns the 302 response code. URL for user redirection with user JWT will be in the `Location` header.\n* `false` value, the Xsolla Login server returns the 200 response code. URL for user redirection with user JWT will be in the response body.\n",
            "in": "query",
            "name": "is_redirect",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Do not create new user if they not exist yet. Existing users will be authorized as usual",
            "in": "query",
            "name": "no_user_creation",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL with the `token` parameter to redirect the user to your project.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "application/json": {
                "error": {
                  "code": "010-015",
                  "description": "Social network authentication failed: steam."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Silent authentication",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/social/{provider_name}/login_redirect": {
      "get": {
        "description": "Redirects the user to the page for authentication via the specified social network.\n",
        "operationId": "oauth-20-auth-via-social-network",
        "parameters": [
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n\nWhen the `email` is requested and the social network did not respond with the `email` value:\n* the user will be asked to input an email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),\n* the user must be asked to input an email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.\n\nAfter the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL to authenticate the user via the social network.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "InvalidOAuth20State": {
                "error": {
                  "code": "010-022",
                  "description": "Parameter state missing or too weak as it has less than 8 characters."
                }
              },
              "InvalidRequest": {
                "error": {
                  "code": "010-017",
                  "description": "Request is missing required parameter, includes invalid parameter value, includes parameter more than once, or is malformed."
                }
              },
              "InvalidScope": {
                "error": {
                  "code": "010-020",
                  "description": "Requested scope is invalid, unknown, or malformed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Bad Request",
            "examples": {
              "GettingOAuth20TokenError": {
                "error": {
                  "code": "003-025",
                  "description": "Error occurred while getting OAuth 2.0 access token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via social network",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/social/{provider_name}/login_url": {
      "get": {
        "description": "Gets the link for authentication via the social network. The link is valid for 10 minutes.\n\nYou can get the link by this call and add it to your button for authentication via a social network.\n",
        "operationId": "oauth-20-get-link-for-social-auth",
        "parameters": [
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n\nWhen the `email` is requested and the social network did not respond with the `email` value:\n* the user will be asked to input an email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),\n* the user must be asked to input an email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.\n\nAfter the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "url": "http://someurl.com"
              },
              "properties": {
                "url": {
                  "description": "URL for authentication via the social network.",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "InvalidOAuth20State": {
                "error": {
                  "code": "010-022",
                  "description": "Parameter state missing or too weak as it has less than 8 characters."
                }
              },
              "InvalidRequest": {
                "error": {
                  "code": "010-017",
                  "description": "Request is missing required parameter, includes invalid parameter value, includes parameter more than once, or is malformed."
                }
              },
              "InvalidScope": {
                "error": {
                  "code": "010-020",
                  "description": "Requested scope is invalid, unknown, or malformed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Bad Request",
            "examples": {
              "GettingOAuth20TokenError": {
                "error": {
                  "code": "003-025",
                  "description": "Error occurred while getting OAuth 2.0 access token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Get link for social auth",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/social/{provider_name}/login_with_token": {
      "post": {
        "description": "Authenticates the user with the access token using social network credentials.",
        "operationId": "oauth-20-auth-via-access-token-of-social-network",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Social credentials.",
              "properties": {
                "access_token": {
                  "description": "Access token received from a social network.",
                  "type": "string",
                  "x-isnullable": false
                },
                "access_token_secret": {
                  "description": "Parameter `oauth_token_secret` received from the authorization request. **Required** for Twitter only.",
                  "type": "string",
                  "x-isnullable": false
                },
                "openid": {
                  "description": "Parameter `openid` received from a social network. **Required** for Wechat only.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "access_token"
              ],
              "type": "object"
            }
          },
          {
            "description": "Name of the social network connected to the Login in Publisher Account.\n\nCan have the following values: `facebook`, `google`, `linkedin`, `twitter`, `discord`, `naver`, `baidu`, `wechat`, `qq_mobile`.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via access token of social network",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/sso": {
      "get": {
        "description": "Checks if a user has already logged in via a service. If they have, you will receive an OAuth 2.0 authorization code without user participation. Used in [Single Sign-on](https://developers.xsolla.com/doc/login/features/single-sign-on).",
        "operationId": "check-user-authentication",
        "parameters": [
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with `code` and `state` parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "InvalidParameter": {
                "error": {
                  "code": 0,
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "UserIsUnauthorized": {
                "error": {
                  "code": "003-040",
                  "description": "Unauthorized user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Check user authentication",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Use this call:\n* To get a [user JWT](/api/login/overview/#section/Authentication/Getting-a-user-token).\n* To refresh the JWT when it expires. Works only if `scope=offline` is passed in the registration or authentication call.\n* To get a [server JWT](/api/login/overview/#section/Authentication/Getting-a-server-token). The user participation isn’t needed.\n* To exchange user JWT for a new one with different scope.\n\nUsage of this call depends on the value of the `grant_type` parameter.\n",
        "operationId": "generate-jwt",
        "parameters": [
          {
            "description": "Value of this parameter received in the response to the last request of this call with `authorization_code` or `refresh_token` values in the `grant_type` parameter. **Required** if `grant_type=refresh_token`.",
            "in": "formData",
            "name": "refresh_token",
            "type": "string"
          },
          {
            "description": "The type of getting the JWT. Can be:\n* `authorization_code` to exchange the code received in the authentication call to the JWT. The value of the `code` parameter must be specified.\n* `refresh_token` to get the refreshed JWT when the previous value is expired. The value of the `refresh_token` parameter must be specified.\n* `client_credentials` to get the server JWT. The values of the `client_id` and `client_secret` parameters must be specified.\n* `urn:ietf:params:oauth:grant-type:token_exchange` to exchange existing user JWT with different scope.\n",
            "in": "formData",
            "name": "grant_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your secret key. The value for this parameter depends on the value of the `grant_type` parameter:\n* If it’s `authorization_code`, [create an OAuth 2.0 client and use its secret key](https://developers.xsolla.com/doc/login/features/connecting-oauth2/). **Required** if you created an OAuth 2.0 client with confidential authentication type.\n* If it’s `client_credentials`, contact your Customer Success Manager to create a server OAuth 2.0 client and get its secret key. **Required** for this client type.\n\nNote that values for `client_secret` and `client_id` parameters should be used from the same client.\n",
            "in": "formData",
            "name": "client_secret",
            "type": "string"
          },
          {
            "description": "Your application ID. The value for this parameter depends on the value of the `grant_type` parameter:\n* If it’s `authorization_code`, [create an OAuth 2.0 client and use its client ID](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).\n* If it’s `client_credentials`, contact your Customer Success Manager to create a server OAuth 2.0 client and get its client ID.\n\nNote that values for `client_secret` and `client_id` parameters should be used from the same client.\n",
            "in": "formData",
            "name": "client_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Authentication code that is exchanged to a JWT. **Required** if `grant_type=authorization_code`.",
            "in": "formData",
            "name": "code",
            "type": "string"
          },
          {
            "description": "The code verifier for the PKCE request, that the app originally generated before the authorization request.",
            "in": "formData",
            "name": "code_verifier",
            "type": "string"
          },
          {
            "description": "List of domains for which token can be applied",
            "in": "formData",
            "name": "audience",
            "type": "string"
          },
          {
            "description": "A list of space-delimited, case-sensitive strings, as defined in Section 3.3 of [RFC6749], that allow the client to specify the desired scope of the requested security token in the context of the service or resource where the token will be used. The values and associated semantics of scope are service specific and expected to be described in the relevant service documentation\n",
            "in": "formData",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "A security token that represents the identity of the party on behalf of whom the request is being made. Typically, the subject of this token will be the subject of the security token issued in response to the request.",
            "in": "formData",
            "name": "subject_token",
            "type": "string"
          },
          {
            "description": "A security token that represents the identity of the party on behalf of whom the request is being made. Typically, the subject of this token will be the subject of the security token issued in response to the request.",
            "enum": [
              "access_token"
            ],
            "in": "formData",
            "name": "subject_token_type",
            "type": "string"
          },
          {
            "description": "A security token that represents the identity of the acting party. Typically, this will be the party that is authorized to use the requested security token and act on behalf of the subject.",
            "in": "formData",
            "name": "actor_token",
            "type": "string"
          },
          {
            "description": "An identifier, as described in Section 3, that indicates the type of the security token in the actor_token parameter. This is REQUIRED when the actor_token parameter is present in the request but MUST NOT be included otherwise.",
            "enum": [
              "server_token"
            ],
            "in": "formData",
            "name": "actor_token_type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "access_token": "2YotnFZFEjr1zCsicMWpAA",
                "expires_in": 3600,
                "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
                "scope": "email user_profile",
                "token_type": "bearer"
              }
            },
            "schema": {
              "properties": {
                "access_token": {
                  "description": "Xsolla Login JWT.",
                  "type": "string"
                },
                "expires_in": {
                  "description": "JWT expiration period in seconds. Default value is 3600 seconds.",
                  "type": "integer"
                },
                "refresh_token": {
                  "description": "Value to refresh the JWT. Used for getting new `access_token`.",
                  "type": "string"
                },
                "scope": {
                  "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.",
                  "type": "string"
                },
                "token_type": {
                  "description": "JWT type with `bearer` value.",
                  "type": "string"
                }
              },
              "required": [
                "access_token",
                "token_type"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "418": {
            "description": "I’m a teapot",
            "examples": {
              "application/json": {
                "error": {
                  "code": "004-001",
                  "description": "Something went wrong."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Generate JWT",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/token/revoke": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Revokes an obtained access token\n",
        "operationId": "revoke-jwt",
        "parameters": [
          {
            "in": "formData",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "access_token",
              "refresh_token"
            ],
            "in": "formData",
            "name": "token_type_hint",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "revoke_all",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "418": {
            "description": "I’m a teapot",
            "examples": {
              "application/json": {
                "error": {
                  "code": "004-001",
                  "description": "Something went wrong."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Revoke Token",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/user": {
      "post": {
        "description": "Creates a new user.\n\n* If you store user data at Xsolla or in custom storage, the user will receive an account confirmation [email](https://developers.xsolla.com/doc/login/how-to/email-customization/).\n* If you store user data at PlayFab, you can set up sending the account confirmation email to the user. Use the [PlayFab instruction](https://developers.xsolla.com/doc/login/references/playfab-storage/#recipes_users_storage_playfab_how_it_works_registration_confirmation) for this.\n* If you store user data at Firebase, the user will receive an account confirmation message from Firebase side.\n\nSee the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page for more information about user data storages.\n",
        "operationId": "oauth-20-register-new-user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "email": "john-email@email.com",
                "fields": {
                  "additional_agreement": true,
                  "nickname": "Johny",
                  "promo_email_agreement": true
                },
                "password": "password123",
                "username": "John"
              },
              "properties": {
                "accept_consent": {
                  "description": "Whether the user gave consent to processing of their personal data.",
                  "type": "boolean",
                  "x-isnullable": true
                },
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "fields": {
                  "description": "Parameters used for [extended registration form](https://developers.xsolla.com/doc/login/features/extended-registration-form/). To use this feature, please contact your Customer Success Manager.",
                  "type": "object",
                  "x-isnullable": true
                },
                "password": {
                  "description": "User password.",
                  "maxLength": 100,
                  "minLength": 6,
                  "type": "string",
                  "x-isnullable": false
                },
                "username": {
                  "description": "Username.",
                  "maxLength": 255,
                  "minLength": 3,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password",
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "Grant type used in your project that has the enabled OAuth 2.0 protocol. Must be `code` to get the user authentication code in the response. The received code must be exchanged to a JWT via the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to finish user authentication.",
            "in": "query",
            "name": "response_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
            "in": "query",
            "name": "scope",
            "type": "string"
          },
          {
            "description": "Identification parameter of the application the token was issued for. Parameter value will be passed in the `aud` JWT field.\n",
            "in": "query",
            "name": "audience",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK (Account confirmation is disabled)",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL generated from the `redirect_uri` with additional parameters. The `code` parameter is the user authentication code which must be exchanged to a JWT.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "type": "object"
            }
          },
          "204": {
            "description": "No Content (Account confirmation is enabled)"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidClient": {
                "error": {
                  "code": "010-019",
                  "description": "Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method)."
                }
              },
              "application/json": {
                "error": {
                  "code": "000-000",
                  "description": "description"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UserAlreadyExists": {
                "error": {
                  "code": "003-003",
                  "description": "User with specified username already exists."
                }
              },
              "application/json": {
                "error": {
                  "code": "000-000",
                  "description": "description"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Register new user",
        "tags": [
          "oauth 2.0"
        ]
      }
    },
    "/oauth2/user/resend_confirmation_link": {
      "post": {
        "description": "Resends an account confirmation email to a user. To complete account confirmation, the user should follow the link in the email.",
        "operationId": "oauth-20-resend-account-confirmation-email",
        "parameters": [
          {
            "description": "Your application ID. Get it after [creating an OAuth 2.0 client](https://developers.xsolla.com/doc/login/features/connecting-oauth2/).",
            "in": "query",
            "name": "client_id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          },
          {
            "description": "Value used for additional user verification. Often used to mitigate [CSRF Attacks](https://en.wikipedia.org/wiki/Cross-site_request_forgery). The value will be returned in the response. Must be longer than 8 symbols.",
            "in": "query",
            "name": "state",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "username": "john-email@email.com"
              },
              "properties": {
                "username": {
                  "description": "Username or user email address.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "409": {
            "description": "Conflict",
            "examples": {
              "UserAlreadyHaveConfirmationLink": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              },
              "WrongConfirmationCode": {
                "error": {
                  "code": "010-010",
                  "description": "Invalid confirmation code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Resend account confirmation email",
        "tags": [
          "emails - oauth 2.0"
        ]
      }
    },
    "/otc/code": {
      "get": {
        "description": "Waits until the user follows the link provided via email or SMS and returns the confirmation code for authentication. If you sent this call and after 20 seconds you didn't get the code, there was an error. In this case, resend the call immediately. The code lifetime is 3 minutes.\n\nThe workflow of using this call:\n1. The application opens an authentication form so the user can enter their email address.\n2. The user enters their email address.\n3. The application sends the **Start auth by email or phone number** (JWT or OAuth 2.0) request to the Xsolla Login server:\n  a. If the parameter `send_link` is `true`, after this request, you should send this same request to make email or SMS contain the confirmation code and link.\n  b. If the parameter `send_link` is `false` or not passed, the email will contain the confirmation code only.\n4. The Xsolla Login server sends an email or SMS to the user and returns the ID of the confirmation code.\n5. The application shows a field so the user can fill in the confirmation code.\n6. The user enters the received confirmation code or follows the link.\n7. The application sends the **Complete auth by email or phone number** (JWT or OAuth 2.0) request with the received ID to the Xsolla Login server.\n8. The user is considered as authorized.\n",
        "operationId": "get-confirmation-code",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login identifier of the user. Can be either an email address or phone number.",
            "in": "query",
            "name": "login",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the confirmation code. You can find its value in the response to a previous request.",
            "in": "query",
            "name": "operation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "code": {
                  "description": "Confirmation code.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code"
              ],
              "type": "object"
            }
          },
          "408": {
            "description": "Deadline exceeded",
            "examples": {
              "DeadlineExceeded": {
                "error": {
                  "code": "010-050",
                  "description": "Deadline exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Get confirmation code",
        "tags": [
          "confirmation"
        ]
      }
    },
    "/password/reset/confirm": {
      "post": {
        "description": "Confirms the user password reset.\n\nYou can reset user password if you use Login widget forms or your own password reset forms. If you use your own forms, contact your Customer Success Manager and specify the URL of your password reset form.\n\nThe workflow of using this call with your own forms:\n1. The application opens a form so the user can enter their email or username.\n2. The user enters their email or username.\n3. The application sends the [Reset password](https://developers.xsolla.com/api/login/operation/reset-password) request to the Xsolla Login server.\n4. The Xsolla Login server sends a confirmation email to the user.\n5. The user follows the link in the email and proceeds to the form for setting a new password.\n6. The user enters a new password and clicks **Set new password**.\n7. The application or Login widget sends this request to the Xsolla Login server.\n",
        "operationId": "confirm-password-reset",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details for changing the password.",
              "example": {
                "new_password": "password1230",
                "reset_code": "ABJ8UKuTvNILBAEdfiKIpgHtiz6teYVPXMBFdpaw5mI",
                "user_id": "1a9c23f5-d1dc-4d8e-afbe-6a6bac6464eb"
              },
              "properties": {
                "new_password": {
                  "description": "New user password.",
                  "maxLength": 100,
                  "minLength": 6,
                  "type": "string",
                  "x-isnullable": false
                },
                "reset_code": {
                  "description": "Code to verify the user who changes the password. Is generated by the Xsolla Login server and passed to the URL of the password reset form.",
                  "type": "string",
                  "x-isnullable": false
                },
                "user_id": {
                  "description": "User ID. Is passed to the URL of the password reset form. **Required**.",
                  "format": "uuid",
                  "type": "string",
                  "x-isnullable": true
                }
              },
              "required": [
                "new_password",
                "reset_code"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Confirm password reset",
        "tags": [
          "resetting"
        ]
      }
    },
    "/password/reset/request": {
      "post": {
        "description": "Resets the user password with user confirmation. If the user data is kept in the Xsolla data storage or on your side, users receive a [password change confirmation email](https://developers.xsolla.com/doc/login/how-to/email-customization). If the user data is kept in the PlayFab storage, password reset is done on PlayFab’s side. To get more information, see the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page.\n\nThe workflow of using this call:\n1. The application opens a form so the user can enter their email or username.\n2. The user enters their email or username.\n3. The application sends this request to the Xsolla Login server.\n4. The Xsolla Login server sends a confirmation email to the user.\n5. The user follows the link in the email and proceeds to the form for setting a new password.\n6. The user enters a new password and clicks **Set new password**.\n7. The application sends the [Confirm password reset](https://developers.xsolla.com/api/login/operation/confirm-password-reset) request to the Xsolla Login server.\n\nIf you use your own password reset form, use the [Confirm password reset](https://developers.xsolla.com/api/login/operation/confirm-password-reset) call to reset the user password.\n",
        "operationId": "reset-password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "username": "John"
              },
              "properties": {
                "username": {
                  "description": "Email to send the password change verification message to.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "Region in the `<language code>_<country code>` format, where:\n\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n\nThe list of social networks will be sorted from most to least used, according to the variable value.\n",
            "in": "query",
            "minLength": 2,
            "name": "locale",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "PasswordResettingTurnedOff": {
                "description": "Password reset disabled for this Login project.",
                "error": "030-024"
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Reset password",
        "tags": [
          "resetting"
        ]
      }
    },
    "/project/{project_id}/attribute_schema": {
      "delete": {
        "description": "Deletes [JSON Schema](https://json-schema.org/) of user attributes from the Login project.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "delete-attributes-schema",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Delete Schema",
        "tags": [
          "server"
        ]
      },
      "get": {
        "description": "Gets [JSON Schema](https://json-schema.org/) of user attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-attributes-schema",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error_code": "2005-0001",
                "error_description": "Schema not found"
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get Schema",
        "tags": [
          "server"
        ]
      },
      "put": {
        "description": "Updates [JSON Schema](https://json-schema.org/) of user attributes.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "put-attributes-schema",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON Schema for user attribute validation",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error_code": "2004-0001",
                "error_description": "JSON Schema is invalid or defined properties has depth level greater than 1"
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error_code": "2005-0001",
                "error_description": "Schema not found"
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Update Schema",
        "tags": [
          "server"
        ]
      }
    },
    "/projects": {
      "get": {
        "description": "Get project list.",
        "operationId": "get-project-list",
        "parameters": [
          {
            "format": "int32",
            "in": "query",
            "name": "publisher_id",
            "required": true,
            "type": "integer",
            "x-nullable": false
          },
          {
            "format": "int32",
            "in": "query",
            "name": "publisher_project_id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "allowed_origins": {
                    "items": {
                      "format": "url",
                      "type": "string",
                      "x-nullable": false
                    },
                    "type": "array",
                    "x-nullable": false
                  },
                  "authentication_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "consent_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "cookie_policy": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "email_confirmation_needed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "fail_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "firebase_apikey": {
                    "type": "string",
                    "x-nullable": true
                  },
                  "game_pages": {
                    "items": {
                      "format": "url",
                      "type": "string",
                      "x-nullable": false
                    },
                    "type": "array",
                    "x-nullable": false
                  },
                  "id": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "is_device_auth_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_email_auth_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_passwordless_captcha_enabled": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_phone_auth_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_username_email": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "login_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "login_urls": {
                    "items": {
                      "format": "url",
                      "type": "string",
                      "x-nullable": false
                    },
                    "type": "array",
                    "x-nullable": false
                  },
                  "max_oauth2_refresh_sessions": {
                    "type": "integer",
                    "x-nullable": false
                  },
                  "name": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "notification_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "password_reset_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "password_reset_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "passwordless_registration_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "playfab_title_id": {
                    "type": "string",
                    "x-nullable": true
                  },
                  "privacy_policy": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "publisher_id": {
                    "format": "int32",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "publisher_project_id": {
                    "format": "int32",
                    "type": "integer",
                    "x-nullable": true
                  },
                  "registration_allowed": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "registration_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "social_friends_enabled": {
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "social_login_proxy_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "token_expiration_time": {
                    "format": "int32",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "tos_url": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": true
                  },
                  "type": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "updated_at": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "users_storage": {
                    "enum": [
                      "xsolla",
                      "custom",
                      "playfab",
                      "firebase"
                    ],
                    "type": "string",
                    "x-nullable": false
                  },
                  "widget_generation": {
                    "format": "int64",
                    "type": "integer",
                    "x-nullable": false
                  }
                },
                "required": [
                  "id",
                  "name",
                  "publisher_id",
                  "publisher_project_id",
                  "updated_at"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Get project list",
        "tags": [
          "projects"
        ]
      },
      "post": {
        "description": "Create project.",
        "operationId": "create-project",
        "parameters": [
          {
            "format": "int32",
            "in": "query",
            "name": "publisher_id",
            "required": true,
            "type": "integer",
            "x-nullable": false
          },
          {
            "format": "int32",
            "in": "query",
            "name": "publisher_project_id",
            "type": "integer"
          },
          {
            "in": "query",
            "name": "is_ng_verification",
            "type": "boolean",
            "x-nullable": false
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "game_pages": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "name": {
                  "type": "string",
                  "x-nullable": false
                },
                "type": {
                  "default": "master",
                  "enum": [
                    "master",
                    "shadow"
                  ],
                  "type": "string",
                  "x-nullable": true
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "allowed_origins": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "authentication_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "consent_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "cookie_policy": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "email_confirmation_needed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "fail_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "firebase_apikey": {
                  "type": "string",
                  "x-nullable": true
                },
                "game_pages": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "id": {
                  "type": "string",
                  "x-nullable": false
                },
                "is_device_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_email_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_passwordless_captcha_enabled": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_phone_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_username_email": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "login_urls": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "max_oauth2_refresh_sessions": {
                  "type": "integer",
                  "x-nullable": false
                },
                "name": {
                  "type": "string",
                  "x-nullable": false
                },
                "notification_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "password_reset_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "password_reset_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "passwordless_registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "playfab_title_id": {
                  "type": "string",
                  "x-nullable": true
                },
                "privacy_policy": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "publisher_id": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": false
                },
                "publisher_project_id": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": true
                },
                "registration_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "social_friends_enabled": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "social_login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "token_expiration_time": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": false
                },
                "tos_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "type": {
                  "type": "string",
                  "x-nullable": false
                },
                "updated_at": {
                  "type": "string",
                  "x-nullable": false
                },
                "users_storage": {
                  "enum": [
                    "xsolla",
                    "custom",
                    "playfab",
                    "firebase"
                  ],
                  "type": "string",
                  "x-nullable": false
                },
                "widget_generation": {
                  "format": "int64",
                  "type": "integer",
                  "x-nullable": false
                }
              },
              "required": [
                "id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Create project",
        "tags": [
          "projects"
        ]
      }
    },
    "/projects/{project_id}/age_rating": {
      "delete": {
        "description": "Deletes age restriction for a selected country in a project.",
        "operationId": "delete-age-restriction",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.",
            "in": "query",
            "name": "code",
            "pattern": "^[a-zA-Z]{2}$",
            "required": true,
            "type": "string",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "summary": "Delete age restriction for country",
        "tags": [
          "age restrictions"
        ]
      },
      "get": {
        "description": "Returns a list of countries with age restrictions in a project.",
        "operationId": "list-age-restrictions",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "country_code": {
                    "type": "string"
                  },
                  "rating_name": {
                    "type": "string"
                  }
                },
                "required": [
                  "country_code",
                  "rating_name",
                  "age"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "summary": "List age restrictions for project",
        "tags": [
          "age restrictions"
        ]
      },
      "post": {
        "description": "Creates or updates existing age restriction for a selected country in a project.",
        "operationId": "create-age-restriction",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restriction"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "summary": "Create age restriction for country",
        "tags": [
          "age restrictions"
        ]
      }
    },
    "/projects/{project_id}/age_rating/batch": {
      "post": {
        "description": "Updates, deletes, or creates age restrictions for all countries in a project. You may set default restrictions for all countries and set country-specific restrictions, if any. <div class=\"notice\"><strong>Notice</strong><br>Each new call overrides previous settings.</div>\n",
        "operationId": "batch-age-restrictions",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/restriction"
              },
              "maxItems": 100,
              "type": "array"
            },
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "summary": "Manage age restrictions for countries",
        "tags": [
          "age restrictions"
        ]
      }
    },
    "/projects/{project_id}/email_whitelist": {
      "delete": {
        "description": "Delete record from list of email domain whitelist",
        "operationId": "delete-project-whitelist",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "204": {
            "description": "Record was deleted"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Delete record from list of domains which was excluded to check by SMTP",
        "tags": [
          "EDW"
        ]
      },
      "get": {
        "description": "Get list of email domain whitelist",
        "operationId": "get-project-whitelist",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/whitelist"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Get list of domains which was excluded to check by SMTP",
        "tags": [
          "EDW"
        ]
      },
      "post": {
        "description": "Create email domain whitelist record",
        "operationId": "post-project-whitelist",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/whitelistRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Record was created"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Create record of list of domains which was excluded to check by SMTP",
        "tags": [
          "EDW"
        ]
      }
    },
    "/projects/{project_id}/events/{event_type}/webhooks": {
      "get": {
        "description": "Gets the list of webhooks information for the specified type of events.",
        "operationId": "get-webhooks-for-event",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Event type. Can have the following values:\n* `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.\n* `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).\n* `email_confirmation` is used for user email address confirmation.\n* `link_social_account` is used for linking user’s social account.\n* `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.\n",
            "enum": [
              "registration",
              "authorization",
              "email_confirmation",
              "link_social_account",
              "new_verified_user"
            ],
            "in": "path",
            "name": "event_type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/respWebhookSettings"
              },
              "type": "array"
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get webhooks for event",
        "tags": [
          "webhooks"
        ]
      },
      "post": {
        "description": "Creates a webhook for the specified event. The webhook has the following format:\n<pre>\n{\n    \"event_type\": \"Event type\",\n    \"event_time\": \"Date and time when the event occurred in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format\",\n    \"project_id\": \"Login project ID\",\n    \"data\": {\n         // Some other data, can be different for different events and include nested objects\n     }\n}\n</pre>\n",
        "operationId": "add-webhook-for-event",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Event type. Can have the following values:\n* `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.\n* `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).\n* `email_confirmation` is used for user email address confirmation.\n* `link_social_account` is used for linking user’s social account.\n* `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.\n",
            "enum": [
              "registration",
              "authorization",
              "email_confirmation",
              "link_social_account",
              "new_verified_user"
            ],
            "in": "path",
            "name": "event_type",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Webhook information.",
              "example": {
                "url": "https://example.com/hook/second"
              },
              "properties": {
                "url": {
                  "description": "Valid URL to which the Xsolla Login server sends the webhook.",
                  "format": "uri",
                  "maxLength": 500,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/respWebhookSettings"
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MaxNumberOfWebhooks": {
                "error": {
                  "code": "004-002",
                  "description": "Maximum number of webhooks (3) already configured for the event."
                }
              },
              "WebhookURLIsAlreadyUsed": {
                "error": {
                  "code": "004-003",
                  "description": "Webhook for specified URL already configured for specified type of event."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Add webhook for event",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/projects/{project_id}/events/{event_type}/webhooks/{webhook_id}": {
      "delete": {
        "description": "Deletes a webhook with the specified ID.",
        "operationId": "delete-webhook-for-event",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Event type. Can have the following values:\n* `registration` is used for user registration by login and password ([JWT](https://developers.xsolla.com/api/login/operation/jwt-register-new-user) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-register-new-user)), social authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-social-network) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network)), silent authentication ([JWT](https://developers.xsolla.com/api/login/operation/jwt-silent-authentication) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-silent-authentication)), authentication by a phone number ([JWT](https://developers.xsolla.com/api/login/operation/jwt-start-auth-by-phone-number) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-start-auth-by-phone-number)), and [registration of a new user from the server](https://developers.xsolla.com/api/login/operation/register-new-user-from-server) as well.\n* `authorization` is used for user authorization by login and password (JWT and OAuth 2.0), social authentication (JWT and OAuth 2.0), silent authentication (JWT and OAuth 2.0), and authentication by a phone number (JWT and OAuth 2.0).\n* `email_confirmation` is used for user email address confirmation.\n* `link_social_account` is used for linking user’s social account.\n* `new_verified_user` is used for user registration when they pass all the necessary verification steps. These verification steps can be email address confirmation, age confirmation via the okname service, [additional data collection](https://developers.xsolla.com/doc/login/features/collecting-emails/), etc. You should configure these steps by yourself.\n",
            "enum": [
              "registration",
              "authorization",
              "email_confirmation",
              "link_social_account",
              "new_verified_user"
            ],
            "in": "path",
            "name": "event_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the webhook that you want to delete.",
            "in": "path",
            "name": "webhook_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Delete webhook for event",
        "tags": [
          "webhooks"
        ]
      }
    },
    "/projects/{project_id}/export_users": {
      "post": {
        "description": "Exports user data (personal information and attributes) from the Login project to an archive of CSV files. You will receive the archive of user data to the specified email address.\n\nThe call can be requested 1 time per hour.\n",
        "operationId": "export-users",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "email": {
                  "description": "Email address to which the link with the result is sent.",
                  "format": "email",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "email"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Export user data",
        "tags": [
          "bulk user management"
        ]
      }
    },
    "/projects/{project_id}/fine_configuration": {
      "get": {
        "description": "Getting project configuration. Contains general settings, widget settings",
        "operationId": "project-configuration-get",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "add_social_access_token": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "allowed_origins": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": false
                },
                "authentication_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "consent_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "cookie_policy": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "email_confirmation_needed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "fail_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "firebase_apikey": {
                  "type": "string",
                  "x-nullable": true
                },
                "game_pages": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": false
                },
                "id": {
                  "type": "string",
                  "x-nullable": false
                },
                "is_device_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_email_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_passwordless_captcha_enabled": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_phone_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "is_username_email": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "login_urls": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": false
                },
                "max_oauth2_refresh_sessions": {
                  "type": "integer",
                  "x-nullable": false
                },
                "name": {
                  "type": "string",
                  "x-nullable": false
                },
                "notification_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "password_reset_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "password_reset_callback_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "password_reset_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "passwordless_registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "playfab_title_id": {
                  "type": "string",
                  "x-nullable": true
                },
                "privacy_policy": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "publisher_id": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": false
                },
                "publisher_project_id": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": true
                },
                "registration_allowed": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "social_friends_enabled": {
                  "type": "boolean",
                  "x-nullable": false
                },
                "social_login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "token_expiration_time": {
                  "format": "int32",
                  "type": "integer",
                  "x-nullable": false
                },
                "tos_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "type": {
                  "type": "string",
                  "x-nullable": false
                },
                "updated_at": {
                  "type": "string",
                  "x-nullable": false
                },
                "users_storage": {
                  "enum": [
                    "xsolla",
                    "custom",
                    "playfab",
                    "firebase"
                  ],
                  "type": "string",
                  "x-nullable": false
                },
                "widget_generation": {
                  "format": "int64",
                  "type": "integer",
                  "x-nullable": false
                }
              },
              "required": [
                "add_social_access_token",
                "allowed_origins",
                "authentication_allowed",
                "consent_url",
                "cookie_policy",
                "email_confirmation_needed",
                "fail_url",
                "firebase_apikey",
                "game_pages",
                "id",
                "is_device_auth_allowed",
                "is_email_auth_allowed",
                "is_passwordless_captcha_enabled",
                "is_phone_auth_allowed",
                "is_username_email",
                "login_proxy_url",
                "login_urls",
                "max_oauth2_refresh_sessions",
                "name",
                "notification_proxy_url",
                "password_reset_allowed",
                "password_reset_callback_url",
                "password_reset_proxy_url",
                "passwordless_registration_proxy_url",
                "playfab_title_id",
                "privacy_policy",
                "publisher_id",
                "publisher_project_id",
                "registration_allowed",
                "registration_proxy_url",
                "social_friends_enabled",
                "social_login_proxy_url",
                "token_expiration_time",
                "tos_url",
                "type",
                "updated_at",
                "users_storage",
                "widget_generation"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Getting project configuration",
        "tags": [
          "general"
        ]
      },
      "patch": {
        "description": "Updates project configuration. The method accepts JSON in body. The request may contain all configuration parameters or a separate one as well.",
        "operationId": "project-configuration-edit",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "config",
            "required": true,
            "schema": {
              "description": "Login project configuration parameters.",
              "properties": {
                "add_social_access_token": {
                  "description": "Toggler for enable append social network's token to Login JWT token",
                  "type": "boolean",
                  "x-nullable": true
                },
                "allowed_origins": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "authentication_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "consent_url": {
                  "format": "url",
                  "maxLength": 255,
                  "minLength": 12,
                  "type": "string",
                  "x-nullable": true
                },
                "cookie_policy": {
                  "format": "url",
                  "maxLength": 255,
                  "minLength": 12,
                  "type": "string",
                  "x-nullable": true
                },
                "email_confirmation_needed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "fail_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "firebase_apikey": {
                  "type": "string",
                  "x-nullable": true
                },
                "game_pages": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "is_device_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_email_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_enable_magic_link": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_ng_verification": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_passwordless_captcha_enabled": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_phone_auth_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "is_username_email": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "login_urls": {
                  "items": {
                    "format": "url",
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": true
                },
                "max_oauth2_refresh_sessions": {
                  "maximum": 20,
                  "minimum": 1,
                  "type": "integer",
                  "x-nullable": true
                },
                "name": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-nullable": true
                },
                "notification_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "password_reset_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "password_reset_callback_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "password_reset_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "passwordless_registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "playfab_title_id": {
                  "pattern": "[0-9A-Z]{1,255}",
                  "type": "string",
                  "x-nullable": true
                },
                "privacy_policy": {
                  "format": "url",
                  "maxLength": 255,
                  "minLength": 12,
                  "type": "string",
                  "x-nullable": true
                },
                "publisher_project_id": {
                  "format": "int32",
                  "maximum": 2147483647,
                  "minimum": 1,
                  "type": "integer",
                  "x-nullable": true
                },
                "registration_allowed": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "registration_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "social_friends_enabled": {
                  "type": "boolean",
                  "x-nullable": true
                },
                "social_login_proxy_url": {
                  "format": "url",
                  "type": "string",
                  "x-nullable": true
                },
                "solution": {
                  "description": "Solution the Login project was created for. Possible values: [ \"webshop\", \"launcher\", \"login\", \"sdk\" ].\n",
                  "type": "string",
                  "x-nullable": true
                },
                "token_expiration_time": {
                  "format": "int32",
                  "maximum": 2592000,
                  "minimum": 60,
                  "type": "integer",
                  "x-nullable": true
                },
                "tos_url": {
                  "format": "url",
                  "maxLength": 255,
                  "minLength": 12,
                  "type": "string",
                  "x-nullable": true
                },
                "users_storage": {
                  "enum": [
                    "xsolla",
                    "custom",
                    "playfab",
                    "firebase"
                  ],
                  "type": "string",
                  "x-nullable": true
                },
                "widget_generation": {
                  "format": "int64",
                  "maximum": 2,
                  "minimum": 1,
                  "type": "integer",
                  "x-nullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok. Configuration saved"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Update project configuration",
        "tags": [
          "general"
        ]
      }
    },
    "/projects/{project_id}/jwks.json": {
      "get": {
        "description": "A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.\n",
        "operationId": "json-web-key-set",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/jwks"
            },
            "x-isnullable": false
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "JSON Web Key Set",
        "tags": [
          "rsa"
        ]
      }
    },
    "/projects/{project_id}/keys": {
      "delete": {
        "description": "Deletes all project RSA keys. After that all tokens are signed by HS256 algorithm.\n",
        "operationId": "delete-projects-keys",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Delete all project keys",
        "tags": [
          "rsa"
        ]
      },
      "get": {
        "description": "Gets a list of the public RSA project keys.\n\nTo validate user JWT, choose the library and pass an appropriate public key from the response to this call to the validation function.\n",
        "operationId": "get-projects-keys",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": [
                {
                  "alg": "RS256",
                  "e": "10001",
                  "kid": "NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg",
                  "kty": "RSA",
                  "n": "yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ",
                  "use": "sig"
                }
              ],
              "items": {
                "$ref": "#/definitions/key"
              },
              "type": "array"
            },
            "x-isnullable": false
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Get project keys",
        "tags": [
          "rsa"
        ]
      },
      "post": {
        "description": "Generates new RSA key and returns public key.\nTo validate user JWT, choose the library and pass an appropriate public key from the response to this call to the validation function.",
        "operationId": "post-projects-key",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/key"
            },
            "x-isnullable": false
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Generate RSA key",
        "tags": [
          "rsa"
        ]
      }
    },
    "/projects/{project_id}/mfa": {
      "get": {
        "description": "Gets project two-factor authentication settings.",
        "operationId": "get-project-two-factor-authentication-settings",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "mfa_types": [
                  {
                    "mfa_type": "email",
                    "priority": 1
                  }
                ],
                "mfa_url": "https://login-widget.xsolla.com/latest/otp"
              },
              "properties": {
                "mfa_types": {
                  "description": "List of data about project two-factor authentication settings.",
                  "items": {
                    "properties": {
                      "mfa_type": {
                        "description": "Type of MFA SMS or Email.",
                        "enum": [
                          "sms",
                          "email"
                        ],
                        "type": "string",
                        "x-isnullable": false
                      },
                      "priority": {
                        "description": "Priority of MFA type \"1\" for higher and \"2\" for lower.",
                        "maximum": 2,
                        "minimum": 1,
                        "type": "integer",
                        "x-isnullable": false
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "mfa_url": {
                  "description": "URL to redirect user for MFA flow.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Get project two-factor authentication settings",
        "tags": [
          "mfa"
        ]
      },
      "put": {
        "description": "Updates project two-factor authentication settings. The user must confirm the changes by entering a one-time code.\n",
        "operationId": "update-project-two-factor-authentication-settings",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "mfa_types": {
                  "items": {
                    "properties": {
                      "mfa_type": {
                        "description": "Type of MFA: SMS or Email.",
                        "enum": [
                          "sms",
                          "email"
                        ],
                        "type": "string",
                        "x-isnullable": false
                      },
                      "priority": {
                        "description": "Priority of MFA type \"1\" for higher and \"2\" for lower.",
                        "maximum": 2,
                        "minimum": 1,
                        "type": "integer",
                        "x-isnullable": false
                      }
                    },
                    "required": [
                      "mfa_type",
                      "priority"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "mfa_url": {
                  "description": "URL to redirect user for MFA flow.",
                  "type": "string",
                  "x-isnullable": true
                }
              },
              "required": [
                "mfa_types"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "application/json": {
                "error": {
                  "code": "002-050",
                  "description": "User’s two-factor authentication settings not changed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Update project two-factor authentication settings",
        "tags": [
          "mfa"
        ]
      }
    },
    "/projects/{project_id}/sms_limit": {
      "delete": {
        "description": "Deletes an SMS limit by project and country.",
        "operationId": "delete-sms-limit",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country code per ISO 3166.",
            "in": "query",
            "name": "code",
            "pattern": "^[a-zA-Z]{2}$",
            "required": true,
            "type": "string",
            "x-nullable": false
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MismatchProjectType": {
                "error": {
                  "code": "003-033",
                  "description": "Mismatch project type."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Delete SMS limit by project and country",
        "tags": [
          "sms limit"
        ]
      }
    },
    "/projects/{project_id}/social/provider_token": {
      "put": {
        "description": "Configure social provider token in Login JWT.",
        "operationId": "put-social-provider-token",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "add_social_token": {
                  "type": "boolean",
                  "x-nullable": false
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Change settigns for connected social provider",
        "tags": [
          "settings"
        ]
      }
    },
    "/projects/{project_id}/social/{provider_name}/custom_scope": {
      "put": {
        "description": "Manage custom Oauth2 scopes for provider.",
        "operationId": "put-social-provider-custom-scope",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "custom_scope": {
                  "items": {
                    "type": "string",
                    "x-nullable": false
                  },
                  "type": "array",
                  "x-nullable": false
                },
                "refresh_always": {
                  "type": "boolean",
                  "x-nullable": false
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "ProjectNotFound": {
                "error": {
                  "code": "003-019",
                  "description": "Project not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Change scope settigns for connected social provider",
        "tags": [
          "settings"
        ]
      }
    },
    "/projects/{project_id}/templates/email/{template_id}/{locale}/{template_type}": {
      "get": {
        "description": "Gets all information about the specific template.",
        "operationId": "get-custom-email-template",
        "parameters": [
          {
            "description": "type of template\n",
            "enum": [
              "custom",
              "password_reset",
              "account_confirmation",
              "email_confirmation",
              "welcome_email",
              "passwordless_auth_by_code",
              "passwordless_auth_by_code_link"
            ],
            "in": "path",
            "name": "template_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
            "in": "path",
            "name": "template_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
            "in": "path",
            "name": "locale",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Email template data.",
              "example": {
                "body": "Hi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.",
                "header": "Welcome email",
                "locale": "en_US",
                "template_id": "Welcome email template",
                "template_type": "custom"
              },
              "properties": {
                "body": {
                  "description": "Email content without opening and closing body tags.",
                  "type": "string",
                  "x-isnullable": false
                },
                "header": {
                  "description": "Email subject.",
                  "type": "string",
                  "x-isnullable": false
                },
                "locale": {
                  "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_id": {
                  "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_type": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "template_id",
                "locale",
                "header",
                "body",
                "template_type"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "CustoTemplateUnprocessable": {
                "error": {
                  "code": "003-073",
                  "description": "Unknown error with custom email template. Try again."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get custom email template",
        "tags": [
          "custom email templates"
        ],
        "x-secret": false
      },
      "post": {
        "description": "Creates an email template with custom structure, styles, and texts. You can add the variables for some texts to the template. To add the relevant texts for these variables, use the [Send email based on template](https://developers.xsolla.com/api/login/operation/send-email-based-on-template) call.\n",
        "operationId": "create-custom-email-template",
        "parameters": [
          {
            "description": "type of template\n",
            "enum": [
              "custom",
              "password_reset",
              "account_confirmation",
              "email_confirmation",
              "welcome_email",
              "passwordless_auth_by_code",
              "passwordless_auth_by_code_link"
            ],
            "in": "path",
            "name": "template_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
            "in": "path",
            "name": "template_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
            "in": "path",
            "name": "locale",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Email template data in HTML format. Use the [email development recommendations](https://developers.xsolla.com/doc/login/how-to/email-customization/#login_how_to_email_customization_recommendations).",
              "example": {
                "body": "Hi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.",
                "header": "Welcome email"
              },
              "properties": {
                "body": {
                  "description": "Email content without opening and closing body tags.",
                  "type": "string",
                  "x-isnullable": false
                },
                "header": {
                  "description": "Email subject.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "header",
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Email template data.",
              "example": {
                "body": "Hi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.",
                "header": "Welcome email",
                "locale": "en_US",
                "template_id": "Welcome email template",
                "template_type": "custom"
              },
              "properties": {
                "body": {
                  "description": "Email content without opening and closing body tags.",
                  "type": "string",
                  "x-isnullable": false
                },
                "header": {
                  "description": "Email subject.",
                  "type": "string",
                  "x-isnullable": false
                },
                "locale": {
                  "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_id": {
                  "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_type": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "template_id",
                "locale",
                "header",
                "body",
                "template_type"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "409": {
            "description": "Conflict",
            "examples": {
              "TemplateExists": {
                "error": {
                  "code": "003-074",
                  "description": "Template with this template_id already exists in this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "CustoTemplateUnprocessable": {
                "error": {
                  "code": "003-073",
                  "description": "Unknown error with custom email template. Try again."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Create custom email template",
        "tags": [
          "custom email templates"
        ],
        "x-secret": false
      },
      "put": {
        "description": "Updates the specific custom email template.",
        "operationId": "update-custom-email-template",
        "parameters": [
          {
            "description": "type of template\n",
            "enum": [
              "custom",
              "password_reset",
              "account_confirmation",
              "email_confirmation",
              "welcome_email",
              "passwordless_auth_by_code",
              "passwordless_auth_by_code_link"
            ],
            "in": "path",
            "name": "template_type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
            "in": "path",
            "name": "template_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
            "in": "path",
            "name": "locale",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Email template data in HTML format. Use the [email development recommendations](https://developers.xsolla.com/doc/login/how-to/email-customization/#login_how_to_email_customization_recommendations).",
              "example": {
                "body": "Hi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.",
                "header": "Welcome email"
              },
              "properties": {
                "body": {
                  "description": "Email content without opening and closing body tags.",
                  "type": "string",
                  "x-isnullable": false
                },
                "header": {
                  "description": "Email subject.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "header",
                "body"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "Email template data.",
              "example": {
                "body": "Hi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.",
                "header": "Welcome email",
                "locale": "en_US",
                "template_id": "Welcome email template",
                "template_type": "custom"
              },
              "properties": {
                "body": {
                  "description": "Email content without opening and closing body tags.",
                  "type": "string",
                  "x-isnullable": false
                },
                "header": {
                  "description": "Email subject.",
                  "type": "string",
                  "x-isnullable": false
                },
                "locale": {
                  "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_id": {
                  "description": "Name of the template. Can include latin characters, digits, characters “-” and “_”.",
                  "type": "string",
                  "x-isnullable": false
                },
                "template_type": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "template_id",
                "locale",
                "header",
                "body",
                "template_type"
              ],
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "CustoTemplateUnprocessable": {
                "error": {
                  "code": "003-073",
                  "description": "Unknown error with custom email template. Try again."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Update custom email template",
        "tags": [
          "custom email templates"
        ],
        "x-secret": false
      }
    },
    "/projects/{project_id}/user_groups": {
      "get": {
        "description": "Gets a list of user groups in project.",
        "operationId": "get-project-user-groups",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "Group ID.",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "is_default": {
                    "description": "Shows whether the group is default or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_deletable": {
                    "description": "Shows whether the group can be deleted or not. Default groups can’t be deleted.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "name": {
                    "description": "Group name.",
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "required": [
                  "id",
                  "name",
                  "is_default",
                  "is_deletable"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get project groups",
        "tags": [
          "user groups"
        ]
      },
      "post": {
        "description": "Adds a new user group to a project.",
        "operationId": "post-project-user-group",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "description": "A user group name.",
                  "maxLength": 255,
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Add new group to project",
        "tags": [
          "user groups"
        ]
      }
    },
    "/projects/{project_id}/user_groups/{group_id}": {
      "delete": {
        "description": "Deletes a user group. <div class=\"notice\"><strong>Notice</strong><br>A user group can't be deleted if it contains users.</div>\n",
        "operationId": "del-project-user-group",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Group ID. Call the [Get groups](/api/login/operation/get-project-user-groups/) method to get it.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Delete group from project",
        "tags": [
          "user groups"
        ]
      },
      "put": {
        "description": "Changes a user group name.",
        "operationId": "put-project-user-group",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Group ID. Call the [Get groups](/api/login/operation/get-project-user-groups/) method to get it.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "new_name": {
                  "description": "A new name for a group.",
                  "maxLength": 255,
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "new_name"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Update group name",
        "tags": [
          "user groups"
        ]
      }
    },
    "/projects/{project_id}/user_import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Imports user data from a CSV format file to the Login project.",
        "operationId": "upload-import-file",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "CSV file containing user data.",
            "in": "formData",
            "name": "users",
            "required": true,
            "type": "file"
          },
          {
            "description": "File containing field numbers and names. The index should start at 0.",
            "format": "json",
            "in": "formData",
            "name": "mapping",
            "required": true,
            "type": "string"
          },
          {
            "description": "Email to send a report to.",
            "format": "email",
            "in": "formData",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "default": ",",
            "description": "CSV separator.",
            "in": "formData",
            "name": "comma",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Import user data",
        "tags": [
          "bulk user management"
        ]
      }
    },
    "/projects/{project_id}/users/batch/search/by_ids": {
      "post": {
        "description": "Searches users by the `user_id` parameter and gets a list of thier names, ids and avatars.\n",
        "operationId": "search-users-by-user-id-list",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "List of ID to search by.",
              "properties": {
                "user_ids": {
                  "description": "Array of User ID.",
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "maxItems": 20,
                  "minItems": 1,
                  "type": "array"
                }
              },
              "required": [
                "user_ids"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/searchUserInfoLite",
              "example": [
                {
                  "avatar": "https://pbs.twimg.com/profile_images/874276177757336672/kUuht00m_400x400.jpg",
                  "name": "Joe Davidson",
                  "user_id": "2a6e0079-d7a7-11e8-963b-82010aa80778"
                },
                {
                  "avatar": "https://pbs.twimg.com/profile_images/874276177757336222/kUuht00m_400x400.jpg",
                  "name": "Patrick Davidson",
                  "user_id": "1e6e2979-d7f7-11e8-963b-42010aa80910"
                }
              ]
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Search users by user_id list",
        "tags": [
          "users"
        ]
      }
    },
    "/projects/{project_id}/users/search": {
      "get": {
        "description": "Search users by criteria, with pagination and ordering",
        "operationId": "search-users-by-filter",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "enum": [
              "username",
              "contact",
              "group",
              "activity",
              "nickname",
              "custom_id"
            ],
            "in": "query",
            "name": "order_column",
            "type": "string"
          },
          {
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "order_dir",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "user_groups",
            "type": "array"
          },
          {
            "in": "query",
            "name": "status",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "search_query",
            "type": "string"
          },
          {
            "enum": [
              "contact",
              "phone",
              "id",
              "social-id",
              "username",
              "nickname",
              "custom_id"
            ],
            "in": "query",
            "name": "search_by",
            "type": "string"
          },
          {
            "in": "query",
            "name": "activity_from",
            "type": "string"
          },
          {
            "in": "query",
            "name": "activity_to",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "count": {
                  "description": "Count all user by criteria without pagination",
                  "type": "integer"
                },
                "next_after": {
                  "description": "Offset for next page of search",
                  "type": "integer"
                },
                "users": {
                  "description": "List of found users",
                  "items": {
                    "$ref": "#/definitions/user"
                  },
                  "type": "array"
                }
              },
              "required": [
                "count",
                "user",
                "next_after"
              ],
              "type": "object"
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Search users",
        "tags": [
          "users"
        ]
      }
    },
    "/projects/{project_id}/users/{user_id}/attributes": {
      "get": {
        "description": "Gets a list of user’s attributes. Returns only attributes values for user by his ID.<div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>",
        "operationId": "get-attributes-by-user-id",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/getServerAttribute"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "examples": {
              "AccessDenied": {
                "error_code": "2001-0002",
                "error_description": "Access denied"
              },
              "application/json": {
                "error_code": "0000-0000",
                "error_description": "description."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "error_code": "1900-0001",
                "error_description": "Allowable number of requests exceeded."
              }
            },
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        },
        "security": [
          {
            "AttributesServer": []
          }
        ],
        "summary": "Get attributes by user ID",
        "tags": [
          "server"
        ]
      }
    },
    "/projects/{project_id}/users/{user_id}/ban": {
      "delete": {
        "description": "Remove ban from user",
        "operationId": "del-projects-users-ban",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Unban user",
        "tags": [
          "users"
        ]
      },
      "post": {
        "description": "Add ban to the user on period or permanent",
        "operationId": "post-projects-users-ban",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "date_from": {
                  "type": "string",
                  "x-nullable": true
                },
                "date_to": {
                  "type": "string",
                  "x-nullable": true
                },
                "reason": {
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "reason"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK."
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [],
        "summary": "Ban user",
        "tags": [
          "users"
        ]
      }
    },
    "/projects/{project_id}/users/{user_id}/server_custom_id": {
      "put": {
        "description": "Allow change the user custom ID on project.",
        "operationId": "put-user-custom-id",
        "parameters": [
          {
            "description": "User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "server_custom_id": {
                  "maxLength": 255,
                  "type": "string",
                  "x-nullable": true
                }
              },
              "required": [
                "server_custom_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Change user's server custom ID",
        "tags": [
          "users"
        ]
      }
    },
    "/projects/{project_id}/users/{user_id}/user_groups": {
      "delete": {
        "description": "Deletes user groups. <div class=\"notice\"><strong>Notice</strong><br><ul><li>A Default group cannot be passed to this method.</li><li>This method automatically updates user tags in Mailchimp if you have [connected it](https://developers.xsolla.com/doc/login/how-to/exporting-users-to-mailchimp/#login_how_to_exporting_users_to_mailchimp).</li></ul></div>\n",
        "operationId": "delete-user-groups",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "List of user groups ID.",
              "example": {
                "user_groups": [
                  1,
                  2,
                  3
                ]
              },
              "properties": {
                "user_groups": {
                  "description": "List of user groups ID.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "required": [
                "user_groups"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessPhoneAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-050",
                  "description": "Passwordless authentication via phone number disabled for this Login project."
                }
              },
              "RateLimitPhoneAuthorization": {
                "error": {
                  "code": "003-038",
                  "description": "You exceeded limited number of attempts to send SMS."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012,",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Delete user groups",
        "tags": [
          "user groups"
        ]
      },
      "get": {
        "description": "Gets all user's groups.",
        "operationId": "get-user-groups",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "Group ID.",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "is_default": {
                    "description": "Shows whether the group is default or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_deletable": {
                    "description": "Shows whether the group is delatable or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 45,
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "required": [
                  "id",
                  "is_default",
                  "name",
                  "is_deletable"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get user groups",
        "tags": [
          "user groups"
        ]
      },
      "patch": {
        "description": "Updates user's groups. <div class=\"notice\"><strong>Notice</strong><br><ul><li>Pass IDs of all groups where the users should be, other groups will be automatically deactivated for this user.</li><li>This method automatically updates user tags in Mailchimp if you have [connected it](/doc/login/how-to/exporting-users-to-mailchimp/#login_how_to_exporting_users_to_mailchimp).</li></ul></div>\n",
        "operationId": "update-user-groups",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "List of user groups ID.",
              "example": {
                "user_groups": [
                  1,
                  2,
                  3
                ]
              },
              "properties": {
                "user_groups": {
                  "description": "List of user groups ID.",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                }
              },
              "required": [
                "user_groups"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "Group ID.",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "is_default": {
                    "description": "Shows whether the group is default or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_deletable": {
                    "description": "Shows whether the group is delatable or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 45,
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "required": [
                  "id",
                  "is_default",
                  "name",
                  "is_deletable"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessPhoneAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-050",
                  "description": "Passwordless authentication via phone number disabled for this Login project."
                }
              },
              "RateLimitPhoneAuthorization": {
                "error": {
                  "code": "003-038",
                  "description": "You exceeded limited number of attempts to send SMS."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012,",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Update user groups",
        "tags": [
          "user groups"
        ]
      },
      "put": {
        "description": "Manages groups for a user. A default group cannot be passed to this method. <div class=\"notice\"><strong>Notice</strong><br><ul><li>A Default group cannot be passed to this method.</li><li>This method automatically updates user tags in Mailchimp if you have [connected it](https://developers.xsolla.com/doc/login/how-to/exporting-users-to-mailchimp/#login_how_to_exporting_users_to_mailchimp).</li></ul></div>\n",
        "operationId": "manage-user-groups",
        "parameters": [
          {
            "description": "User ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "List of user groups ID.",
              "example": {
                "add_user_groups": [
                  1,
                  2,
                  3
                ],
                "remove_user_groups": [
                  4,
                  5,
                  6
                ]
              },
              "properties": {
                "add_user_groups": {
                  "description": "List of user groups ID.",
                  "items": {
                    "type": "integer"
                  },
                  "maxItems": 1000,
                  "type": "array"
                },
                "remove_user_groups": {
                  "description": "List of user groups ID.",
                  "items": {
                    "type": "integer"
                  },
                  "maxItems": 1000,
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "properties": {
                  "id": {
                    "description": "Group ID.",
                    "type": "integer",
                    "x-nullable": false
                  },
                  "is_default": {
                    "description": "Shows whether the group is default or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "is_deletable": {
                    "description": "Shows whether the group is delatable or not.",
                    "type": "boolean",
                    "x-nullable": false
                  },
                  "name": {
                    "description": "Group name.",
                    "maxLength": 45,
                    "type": "string",
                    "x-nullable": false
                  }
                },
                "required": [
                  "id",
                  "is_default",
                  "name",
                  "is_deletable"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MisconfiguredProject": {
                "error": {
                  "code": "003-022",
                  "description": "This Login project misconfigured. Change this Login project settings in Xsolla Publisher Account or contact your Customer Success Manager."
                }
              },
              "PasswordlessPhoneAuthenticationIsDisabledForLogin": {
                "error": {
                  "code": "003-050",
                  "description": "Passwordless authentication via phone number disabled for this Login project."
                }
              },
              "RateLimitPhoneAuthorization": {
                "error": {
                  "code": "003-038",
                  "description": "You exceeded limited number of attempts to send SMS."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012,",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Manage groups for user",
        "tags": [
          "user groups"
        ]
      }
    },
    "/projects/{project_id}/users_count": {
      "get": {
        "description": "Get the number of users on project.",
        "operationId": "get-users-count",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "properties": {
                "user_count": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get user count",
        "tags": [
          "users"
        ]
      }
    },
    "/projects/{project_id}/welcome_email": {
      "delete": {
        "description": "Switch off welcome email\n",
        "operationId": "switch-off-welcome-email",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "409": {
            "description": "Conflict",
            "examples": {
              "UserAlreadyHaveConfirmationLink": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Switch off welcome email",
        "tags": [
          "custom email templates"
        ]
      },
      "post": {
        "description": "Switch on welcome email\n",
        "operationId": "switch-on-welcome-email",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "path",
            "name": "project_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "409": {
            "description": "Conflict",
            "examples": {
              "UserAlreadyHaveConfirmationLink": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Switch on welcome email",
        "tags": [
          "custom email templates"
        ]
      }
    },
    "/social/{cross_social_provider_name}/cross_auth": {
      "get": {
        "description": "Exchanges the user JWT from Steam, Xbox, or Epic Games for the JWT in your project (`projectId`).\n\nYou will get the link to redirect the user to your project.\n\nTo enable silent authentication, use the [instruction](https://developers.xsolla.com/doc/login/features/silent-authentication).\n",
        "operationId": "jwt-silent-authentication",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "Name of the platform the user authorized in. Can be `steam`, `xbox`, `epicgames`.\n",
            "in": "path",
            "name": "cross_social_provider_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.\n\nWhen the `email` is requested and the social network did not respond with the `email` value:\n* the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),\n* the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.\n\nAfter the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "name": "fields",
            "type": "array"
          },
          {
            "description": "Your app ID in the platform.",
            "in": "query",
            "name": "app_id",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          },
          {
            "description": "Session ticket received from the platform.",
            "in": "query",
            "name": "session_ticket",
            "type": "string"
          },
          {
            "description": "Code received from the platform.",
            "in": "query",
            "name": "code",
            "type": "string"
          },
          {
            "default": true,
            "description": "Shows how the Xsolla Login server should respond. If you set:\n* `true` value, the Xsolla Login server returns the 302 response code. URL for user redirection with user JWT will be in the `Location` header.\n* `false` value, the Xsolla Login server returns the 200 response code. URL for user redirection with user JWT will be in the response body.\n",
            "in": "query",
            "name": "is_redirect",
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Do not create new user if they not exist yet. Existing users will be authorized as usual",
            "in": "query",
            "name": "no_user_creation",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "login_url": {
                  "description": "URL with the `token` parameter to redirect the user to your project.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "login_url"
              ],
              "type": "object"
            }
          },
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL with the `token` parameter to redirect the user to your project.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "application/json": {
                "error": {
                  "code": "010-015",
                  "description": "Social network authentication failed: steam."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Silent authentication",
        "tags": [
          "jwt"
        ]
      }
    },
    "/social/{provider_name}/login_redirect": {
      "get": {
        "description": "Redirects the user to the page for authentication via the specified social network.",
        "operationId": "jwt-auth-via-social-network",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.\n\nWhen the `email` is requested and the social network did not respond with the `email` value:\n* the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),\n* the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.\n\nAfter the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "name": "fields",
            "type": "array"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL to authenticate the user via the social network.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Bad Request",
            "examples": {
              "GettingOAuth20TokenError": {
                "error": {
                  "code": "003-025",
                  "description": "Error occurred while getting OAuth 2.0 access token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via social network",
        "tags": [
          "jwt"
        ]
      }
    },
    "/social/{provider_name}/login_url": {
      "get": {
        "description": "Gets the link for authentication via the social network. The link is valid for 10 minutes.\n\nYou can get the link by this call and add it to your button for authentication via the social network.\n",
        "operationId": "jwt-get-link-for-social-auth",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "List of parameters which must be requested from the user or social network additionally and written to the JWT. The parameters must be separated by a comma. For example, `email`.\n\nWhen the `email` is requested and the social network did not respond with the `email` value:\n* the user will be asked to input their email in the corresponding form if you integrated [Login Widget](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_widget),\n* the user must be asked to input their email in the corresponding form of your own interface if you integrated [Login API](https://developers.xsolla.com/doc/login/integration-guide/integrate-solution/#login_guide_integration_api). Please send the URL of this form to your Customer Success Manager.\n\nAfter the email is inputted, the user receives an email confirmation [message](https://developers.xsolla.com/doc/login/how-to/email-customization/). To disable email confirmation, please contact your Customer Success Manager.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "name": "fields",
            "type": "array"
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "url": "http://someurl.com"
              },
              "properties": {
                "url": {
                  "description": "URL for authentication via the social network.",
                  "type": "string"
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Bad Request",
            "examples": {
              "GettingOAuth20TokenError": {
                "error": {
                  "code": "003-025",
                  "description": "Error occurred while getting OAuth 2.0 access token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Get link for social auth",
        "tags": [
          "jwt"
        ]
      }
    },
    "/social/{provider_name}/login_with_token": {
      "post": {
        "description": "Authenticates the user with the access token using social network credentials.",
        "operationId": "jwt-auth-via-access-token-of-social-network",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Social credentials.",
              "properties": {
                "access_token": {
                  "description": "Access token received from a social network.",
                  "type": "string",
                  "x-isnullable": false
                },
                "access_token_secret": {
                  "description": "Parameter `oauth_token_secret` received from the authorization request. **Required** for Twitter only.",
                  "type": "string",
                  "x-isnullable": false
                },
                "openid": {
                  "description": "Parameter `openid` received from a social network. **Required** for Wechat only.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "access_token"
              ],
              "type": "object"
            }
          },
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          },
          {
            "description": "Name of the social network connected to the Login in Publisher Account.\n\nCan have the following values: `facebook`, `google`, `linkedin`, `twitter`, `discord`, `naver`, `baidu`, `wechat`, `qq_mobile`.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAZ21haWwuY29tIiwiZXhwIjoxNjU4MjE5OTYyLCJncm91cHMiOlt7ImlkIjoyLCJuYW1lIjoiZGVmYXVsdCIsImlzX2RlZmF1bHQiOnRydWV9XSwiaWF0IjoxNjU4MTMzNTYyLCJpZCI6IjY1NDYzNjQ4NTcxMjY1NCIsImlzX21hc3RlciI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9sb2dpbi54c29sbGEuY29tIiwibmFtZSI6IlRlc3QgdGVzdCIsInBheWxvYWQiOiIxMjM0NTY3ODkwIiwicGljdHVyZSI6IiIsInByb21vX2VtYWlsX2FncmVlbWVudCI6ZmFsc2UsInByb3ZpZGVyIjoiZmFjZWJvb2siLCJwdWJsaXNoZXJfaWQiOjEsInNlcnZlcl9jdXN0b21faWQiOiIxMjM0NTY3ODkwIiwic29jaWFsX2FjY2Vzc190b2tlbiI6ImZhY2Vib29rX3Rva2VuIiwic3ViIjoiYWU5OTQ2NjQtYTRkMi00ODJjLTkyYjAtZmZiNzY3NWQ5ZDE1IiwidHlwZSI6InNvY2lhbCIsInVzZXJuYW1lIjpudWxsLCJ4c29sbGFfbG9naW5fYWNjZXNzX2tleSI6IkhYc01WUlpkbXdrbmVzWTBtaTRKVDFYSVJuN21TOGVOaHNRcWk1OG5rQmsiLCJ4c29sbGFfbG9naW5fcHJvamVjdF9pZCI6IjEzNzU5MjNiLTg3ZjMtNGEyMC1hYzJiLWQwYTI4NzMwZTQyMCJ9.tn5VqaT15MZlI5Jhfii2WC-jr_TwH2J1q27fSRi1EBs"
              },
              "properties": {
                "token": {
                  "description": "Xsolla Login user JWT.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Auth via access token of social network",
        "tags": [
          "jwt"
        ]
      }
    },
    "/social/{provider_name}/refresh_token": {
      "post": {
        "description": "Refreshes social token by social refresh token from JWT.\n",
        "operationId": "jwt-refresh-social-token",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be: Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "provider_name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "token": "some jwt"
              },
              "properties": {
                "token": {
                  "description": "Login JWT with refreshed social tokens.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Bad Request",
            "examples": {
              "GettingOAuth20TokenError": {
                "error": {
                  "code": "003-025",
                  "description": "Error occurred while getting OAuth 2.0 access token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialNetworkIsDisabled": {
                "error": {
                  "code": "010-032",
                  "description": "Authentication via this social network not enabled for this Login project. Enable it in your Xsolla Publisher Account > Login > your Login project > Social connections."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Refresh social tokens in JWT",
        "tags": [
          "jwt"
        ]
      }
    },
    "/templates/email/send": {
      "post": {
        "description": "Sends an email based on a custom template and data that you provided to the specified email address.",
        "operationId": "send-email-based-on-template",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Data for sending an email based on a custom template.",
              "example": {
                "email": "john_smith@gmail.com",
                "template": {
                  "id": "Welcome email template",
                  "locale": "en_US",
                  "params": {
                    "first_name": "John",
                    "last_name": "Smith",
                    "site_link": "https://example.com/"
                  }
                }
              },
              "properties": {
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "template": {
                  "properties": {
                    "id": {
                      "description": "Name of the template created by the [Create custom email template](https://developers.xsolla.com/api/login/operation/create-custom-email-template) call.",
                      "type": "string",
                      "x-isnullable": false
                    },
                    "locale": {
                      "description": "Region of the texts that you provided in the template in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
                      "maxLength": 5,
                      "minLength": 5,
                      "type": "string",
                      "x-isnullable": true
                    },
                    "params": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "JSON object with texts for all variables that you specified in the email template created by the [Create custom email template](https://developers.xsolla.com/api/login/operation/create-custom-email-template) call.\n\n// If you created body of the template with\n<pre>\nHi {{first_name}} {{last_name}}!<br>We will be glad to see you on the {{site_link}} page.\n</pre>\n// Pass the following JSON here\n<pre>\n\"params\": {\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"site_link\": \"https://example.com/\"\n}\n</pre>\n",
                      "type": "object"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "email",
                "template"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "CustomTemplateNotFound": {
                "error": {
                  "code": "003-071",
                  "description": "Custom email template not found."
                }
              },
              "InvalidLocaleFormat": {
                "error": {
                  "code": "002-027",
                  "description": "Invalid locale parameter."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "InvalidCustomData": {
                "error": {
                  "code": "003-070",
                  "description": "Custom variables for custom email template are the same as default Xsolla variables for emails."
                }
              },
              "InvalidEmailAddress": {
                "error": {
                  "code": "010-018",
                  "description": "Invalid email address."
                }
              },
              "InvalidLocale": {
                "error": {
                  "code": "002-027",
                  "description": "Invalid locale parameter."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Send email based on template",
        "tags": [
          "custom email templates"
        ],
        "x-secret": false
      }
    },
    "/user": {
      "post": {
        "description": "Creates a new user.\n\n* If you store user data at Xsolla or custom storage, the user will receive an account confirmation [message](https://developers.xsolla.com/doc/login/customization/email-customization/).\n* If you store user data at PlayFab, the user will *not* receive an account confirmation [message](https://developers.xsolla.com/doc/login/customization/email-customization/).\n* If you store user data at Firebase, the user will receive an account confirmation message from Firebase side.\n\nSee the [Comparison of user data storages](https://developers.xsolla.com/doc/login/references/users-storages-comparison/) page for more information about user data storages.\n",
        "operationId": "jwt-register-new-user",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "email": "john-email@email.com",
                "fields": {
                  "additional_agreement": true,
                  "nickname": "Johny",
                  "promo_email_agreement": true
                },
                "password": "password123",
                "username": "John"
              },
              "properties": {
                "accept_consent": {
                  "description": "Whether the user gave consent to processing of their personal data.",
                  "type": "boolean",
                  "x-isnullable": true
                },
                "email": {
                  "description": "User email address.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "fields": {
                  "description": "Parameters used for [extended registration form](https://developers.xsolla.com/doc/login/features/extended-registration-form/). To use this feature, please contact your Customer Success Manager.",
                  "type": "object",
                  "x-isnullable": true
                },
                "password": {
                  "description": "User password.",
                  "maxLength": 100,
                  "minLength": 6,
                  "type": "string",
                  "x-isnullable": false
                },
                "username": {
                  "description": "Username.",
                  "maxLength": 255,
                  "minLength": 3,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password",
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK (Account confirmation is disabled)",
            "schema": {
              "example": {
                "login_url": "http://someurl.com?token=XXXXXXX"
              },
              "properties": {
                "login_url": {
                  "description": "URL with the `token` and `remember_me` parameters to redirect the user to after successful registration. The `token` value is the user JWT.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "204": {
            "description": "No Content (Account confirmation is enabled)"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UserAlreadyExists": {
                "error": {
                  "code": "003-003",
                  "description": "User with specified username already exists."
                }
              },
              "application/json": {
                "error": {
                  "code": "000-000",
                  "description": "description"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Register new user",
        "tags": [
          "jwt"
        ]
      }
    },
    "/user/resend_confirmation_link": {
      "post": {
        "description": "Resends an account confirmation email to a user. To complete account confirmation, the user should follow the link in the email.",
        "operationId": "jwt-resend-account-confirmation-email",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "username": "john-email@email.com"
              },
              "properties": {
                "username": {
                  "description": "Username or user email address.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username"
              ],
              "type": "object"
            }
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "LoginURLIsNotConfiguredForThisProject": {
                "error": {
                  "code": "010-003",
                  "description": "Login project for specified projectId parameter not found or there are no Callback URLs in settings of your Login project in Xsolla Publisher Account."
                }
              },
              "WrongConfirmationCode": {
                "error": {
                  "code": "010-010",
                  "description": "Invalid confirmation code."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Resend account confirmation email",
        "tags": [
          "emails - jwt"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user with requested body parameters. These parameters are set as confirmed. Combination of parameters passed to the body must include at least `email` or `phone_number` parameter. The call is used only if you set up [Xsolla storage](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_xsolla). <div class=\"notice\"><strong>Notice</strong><br>[Rate limits for server-side methods](/api/login/overview/#section/Rate-limits) are applied to this method.</div>\n",
        "operationId": "register-new-user-from-server",
        "parameters": [
          {
            "description": "Login project ID from [Publisher Account](https://publisher.xsolla.com/).",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "email": "asd123@asd123.asd",
                "external_account_id": "1234567890asdfghjkl",
                "phone_number": 123456789
              },
              "properties": {
                "email": {
                  "description": "User email address.",
                  "type": "string",
                  "x-isnullable": true
                },
                "external_account_id": {
                  "description": "User ID from your game.",
                  "type": "string",
                  "x-isnullable": true
                },
                "phone_number": {
                  "description": "User phone number. Is used for authentication via a phone number.",
                  "pattern": "^\\+(\\d){5,25}$",
                  "type": "string",
                  "x-isnullable": true
                },
                "phone_number_verified": {
                  "description": "Flag indicates that the phone number has been verified.",
                  "type": "boolean",
                  "x-isnullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "user_id": "ff449154-7e2f-11e8-ad67-d89d67155224"
              },
              "properties": {
                "user_id": {
                  "description": "The Xsolla Login user ID. You can find it in **your Login project > Users > Username/ID** section of Publisher Account.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "user_id"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "InvalidEmailAddress": {
                "error": {
                  "code": "010-018",
                  "description": "Invalid email address."
                }
              },
              "UnavailableProjectMethod": {
                "error": {
                  "code": "003-020",
                  "description": "Call unavailable for this Login project."
                }
              },
              "UserWithSpecifiedEmailAlreadyExists": {
                "error": {
                  "code": "003-004",
                  "description": "User with specified email address already exists."
                }
              },
              "UserWithSpecifiedPhoneAlreadyExists": {
                "error": {
                  "code": "003-012",
                  "description": "User with specified phone number already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Register new user from server",
        "tags": [
          "server side"
        ]
      }
    },
    "/users/account/code": {
      "post": {
        "description": "Creates the code for linking the [platform account](/api/login/overview/#section/Glossary/Platform-account) to the existing [main account](/api/login/overview/#section/Glossary/Main-account) when the user logs in to the game via a gaming console.\n\nThe call is used with [Link accounts by code request](https://developers.xsolla.com/api/login/operation/link-accounts-by-code).\n",
        "operationId": "create-code-for-linking-accounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "code": "123456"
              }
            },
            "schema": {
              "properties": {
                "code": {
                  "description": "Code for linking.",
                  "example": "123456",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "code"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "UserNotFound": {
                "error": {
                  "code": "003-002",
                  "description": "User not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MismatchProjectType": {
                "error": {
                  "code": "003-033",
                  "description": "Mismatch project type."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create code for linking accounts",
        "tags": [
          "linking"
        ]
      }
    },
    "/users/account/link": {
      "post": {
        "description": "Links the [platform account](/api/login/overview/#section/Glossary/Platform-account) to the existing [main account](/api/login/overview/#section/Glossary/Main-account) by the code.\n\nTo link accounts, the game server uses this call with the response from the [Create code for linking accounts](https://developers.xsolla.com/api/login/operation/create-code-for-linking-accounts) request.\n",
        "operationId": "link-accounts-by-code",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Data for linking a platform account.",
              "example": {
                "code": 234155,
                "platform": "xbox,",
                "publisher_project_id": "12423354,",
                "user_id": "4352354,"
              },
              "properties": {
                "code": {
                  "description": "Code by which service links accounts.",
                  "maxLength": 6,
                  "minLength": 6,
                  "type": "string",
                  "x-isnullable": false
                },
                "platform": {
                  "description": "Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`.",
                  "type": "string",
                  "x-isnullable": false
                },
                "project_id": {
                  "description": "Shadow Login ID from Publisher Account.\n\n**Shadow Login** is a project which ID you do not need to pass to this call. Contact your Customer Success Manager to set it up.\n",
                  "format": "uuid",
                  "type": "string",
                  "x-isnullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you make a request for.\n\nIf you specify it, but do not specify the `project_id` parameter, the service will be linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.\n",
                  "type": "integer",
                  "x-isnullable": true
                },
                "user_id": {
                  "description": "User ID from Social Provider.",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "user_id",
                "platform",
                "code"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "MismatchProjectType": {
                "error": {
                  "code": "003-033",
                  "description": "Mismatch project type."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Link accounts by code",
        "tags": [
          "linking"
        ]
      }
    },
    "/users/account/link_external_id": {
      "post": {
        "description": "Links a user from your game to a user from your Login project via an external ID. You will not be able to link the same external ID to different users and update the external ID of a user if they already have it.\n\nYou can find an external ID in:\n* a user JWT after successful authentication as a value of the `external_account_id` claim,\n* a response of the [Get user details](https://developers.xsolla.com/api/login/operation/get-user-details) call as a value of the `external_id` parameter.\n",
        "operationId": "link-user-ids-via-external-id",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Data for linking users via an external ID.",
              "example": {
                "external_account_id": "A1234BB23",
                "user_id": "6bd371c2-8044-11e9-b0a8-39deff2bb627"
              },
              "properties": {
                "external_account_id": {
                  "description": "User ID from your game. Used as an external ID by which users will be linked.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "user_id": {
                  "description": "The Xsolla Login user ID. You can find it in **Publisher Account** > your Login project > **Users** > **Username/ID**.",
                  "format": "uuid",
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "external_account_id",
                "user_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              },
              "InvalidParameter": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "UserNotFound": {
                "error": {
                  "code": "003-002",
                  "description": "User not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "ExternalIDAlreadyLinked": {
                "error": {
                  "code": "003-037",
                  "description": "External account ID already linked to other user."
                }
              },
              "UserAlreadyHasAnExternalID": {
                "error": {
                  "code": "003-036",
                  "description": "User already has external account ID."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Link user IDs via external ID",
        "tags": [
          "server side"
        ]
      }
    },
    "/users/age/check": {
      "post": {
        "description": "Checks user’s age for a particular region. The age requirements depend on the region. Service determines the user’s location by the IP address.",
        "operationId": "check-users-age",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "dob": {
                  "description": "User’s birth date in the `YYYY-MM-DD` format.",
                  "format": "date",
                  "type": "string",
                  "x-nullable": false
                },
                "project_id": {
                  "description": "Login ID from Publisher Account.",
                  "format": "uuid",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "dob",
                "project_id"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "accepted": {
                  "description": "Shows whether the user reached the required age or not. The parameter can have the `true` or `false` value.",
                  "type": "boolean",
                  "x-nullable": false
                }
              },
              "required": [
                "accepted"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "summary": "Check user’s age",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/linking_info": {
      "post": {
        "description": "The call will return:\n* user ID if the user has linked the [main account](/api/login/overview/#section/Glossary/Main-account).\n* user ID if the user has linked the [platform account](/api/login/overview/#section/Glossary/Platform-account).\n* `xl_uid=null` if the user does not have a linked account.\n",
        "operationId": "get-users-ids-by-social-id-and-platform",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "List of social IDs and platforms which need user ID.",
              "example": {
                "publisher_project_id": 12423354,
                "users": [
                  {
                    "platform": "xbox",
                    "user_id": 4352354
                  }
                ]
              },
              "properties": {
                "project_id": {
                  "description": "Login ID from Publisher Account.",
                  "format": "uuid",
                  "type": "string",
                  "x-isnullable": true
                },
                "publisher_project_id": {
                  "description": "Project ID from Publisher Account which you make a request for.\n\nIf you specify it, but do not specify `project_id` parameter, service will be found linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.\n",
                  "type": "integer",
                  "x-isnullable": true
                },
                "users": {
                  "description": "Social ID and platform for which it is needed to get user ID.",
                  "items": {
                    "properties": {
                      "platform": {
                        "description": "Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`.",
                        "type": "string",
                        "x-isnullable": false
                      },
                      "user_id": {
                        "description": "User ID from Social Provider.",
                        "type": "string",
                        "x-isnullable": false
                      }
                    },
                    "required": [
                      "user_id",
                      "platform"
                    ],
                    "type": "object"
                  },
                  "maxItems": 50,
                  "type": "array"
                }
              },
              "required": [
                "users"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": [
                {
                  "email": "johnsmith@mail.com",
                  "external_account_id": "A1234BB23",
                  "platform": "xbox",
                  "user_id": "12334",
                  "xl_uid": "48b39231-27ac-4cfc-b0bf-9815dbb3ada1"
                }
              ],
              "items": {
                "properties": {
                  "email": {
                    "description": "User email address.",
                    "type": "string",
                    "x-nullable": true
                  },
                  "external_account_id": {
                    "description": "User ID from your game. Used as an external ID by which users will be linked.",
                    "type": "string",
                    "x-nullable": true
                  },
                  "platform": {
                    "description": "Name of chosen Social Provider. Can be `steam`, `xbox`, `epicgames`.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "user_id": {
                    "description": "User ID from Social Provider.",
                    "type": "string",
                    "x-nullable": false
                  },
                  "xl_uid": {
                    "description": "The Xsolla Login user ID. You can find it in **Publisher Account** > Login settings > **Users** > **Username/ID**.",
                    "type": "string",
                    "x-nullable": true
                  }
                },
                "required": [
                  "xl_uid",
                  "user_id",
                  "platform"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Get user’s IDs by social ID and platform",
        "tags": [
          "server side"
        ]
      }
    },
    "/users/login/server_custom_id": {
      "post": {
        "description": "Authenticates a user by a particular custom ID. If the user does not exist, they are created.",
        "operationId": "auth-by-custom-id",
        "parameters": [
          {
            "description": "Login project ID from Publisher Account. If you do not specify it, [shadow Login](/api/login/overview/#section/Glossary/Shadow-Login-project) will be used for the specified `publisher_project_id` parameter.\n\nShadow Login ID you do not need to pass to this call.\n",
            "format": "uuid",
            "in": "query",
            "name": "projectId",
            "type": "string"
          },
          {
            "description": "Your custom data. The value of the parameter will be returned in the `payload` claim of the **user JWT**. Recommended maximum length less than 500 characters. Note, that this parameter is only available if you use a custom user data storage.",
            "in": "query",
            "name": "payload",
            "type": "string",
            "x-isnullable": true
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User’s details.",
              "example": {
                "attributes": [
                  {
                    "attr_type": "server",
                    "key": "company",
                    "permission": "private",
                    "value": "facebook-promo"
                  },
                  {
                    "attr_type": "server",
                    "key": "custom-id",
                    "permission": "private",
                    "value": 48582
                  }
                ],
                "server_custom_id": "1234567890asdfghjkl",
                "social_profile": {
                  "platform": "xbox",
                  "user_id": 4352354
                }
              },
              "properties": {
                "attributes": {
                  "description": "User attributes that are updated or created on authduring authentication.",
                  "items": {
                    "properties": {
                      "attr_type": {
                        "description": "Definition of user’s access level to service attributes:\n  * `client` - A user-editable attribute. The values for this type of attributes are entered by a user or specified according to the in-game logics on the client side. For example, the name and character stats, game difficulty level, etc.\n  * `server` - A read-only attribute. The values for this type of attributes are entered and edited on the server side of your application. We recommend that you use them for configuration of game character stats or user parameters that shouldn’t change regularly. For example, chance to get a bonus, game character key parameters, user categories, etc.\n",
                        "enum": [
                          "client",
                          "server"
                        ],
                        "type": "string"
                      },
                      "key": {
                        "description": "Name of attribute that is used to identify user’s attribute. Must be unique per user.",
                        "maxLength": 256,
                        "pattern": "[A-Za-z0-9_]+",
                        "type": "string",
                        "x-nullable": false
                      },
                      "permission": {
                        "description": "Definition of user’s access level to other users’ attributes.",
                        "enum": [
                          "private",
                          "public"
                        ],
                        "type": "string"
                      },
                      "read_only": {
                        "type": "boolean"
                      },
                      "value": {}
                    },
                    "required": [
                      "key",
                      "value",
                      "attr_type",
                      "permission"
                    ],
                    "type": "object"
                  },
                  "type": "array",
                  "x-isnullable": false
                },
                "server_custom_id": {
                  "description": "Custom ID that already exists on your server. **Note:** It is not the same ID as the Xsolla Login user ID.",
                  "maxLength": 256,
                  "type": "string",
                  "x-isnullable": false
                },
                "social_profile": {
                  "description": "User social profile.",
                  "properties": {
                    "platform": {
                      "description": "Name of the social provider.",
                      "type": "string",
                      "x-isnullable": false
                    },
                    "user_id": {
                      "description": "User ID from a social provider.",
                      "type": "string",
                      "x-isnullable": false
                    }
                  },
                  "required": [
                    "user_id",
                    "platform"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "server_custom_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Project ID from Publisher Account which you make a request for.\n\nIf you specify it, but do not specify `project_id` parameter, service will be found linked to its `project_id`. Contact your Customer Success Manager to link `project_id` to `publisher_project_id`.\n",
            "in": "query",
            "name": "publisher_project_id",
            "type": "integer"
          },
          {
            "default": "0",
            "description": "Shows whether to deactivate the existing user JWT values and activate the one generated by this call. Can have the following values:\n* `1` to deactivate the existing values and activate a new one,\n* `0` to keep the existing values activated.\n",
            "in": "query",
            "name": "with_logout",
            "type": "string",
            "x-isnullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6IiIsImV4cCI6MTY1MzEyMzk5MCwiZ3JvdXBzIjpbXSwiaWF0IjoxNjUzMDM3NTkwLCJpc3MiOiJodHRwczovL2xvZ2luLnhzb2xsYS5jb20iLCJwdWJsaXNoZXJfaWQiOjMsInNlcnZlcl9jdXN0b21faWQiOiJteS1jdXN0b20taWQtbm90LWxpbmtlZCIsInN1YiI6IjI0MTBkNmMzLWFhZDEtNGY0OS04ODNlLTQ2Y2FkM2ZiMmJjMiIsInR5cGUiOiJzZXJ2ZXJfY3VzdG9tX2lkIiwidXNlcm5hbWUiOm51bGwsInhzb2xsYV9sb2dpbl9hY2Nlc3Nfa2V5IjoiSFhzTVZSWmRtd2tuZXNZMG1pNEpUMVhJUm43bVM4ZU5oc1FxaTU4bmtCayIsInhzb2xsYV9sb2dpbl9wcm9qZWN0X2lkIjoiMTM3NTkyM2ItODdmMy00YTIwLWFjMmItZDBhMjg3MzBlNDIwIn0.D8dFMN5Bmgnpejq1EhZUZQP_D5iFhpO_RXnVyE03qUI"
              },
              "properties": {
                "token": {
                  "description": "Xsolla Login user JWT.",
                  "type": "string"
                }
              },
              "required": [
                "token"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "AccessDenied": {
                "error": {
                  "code": "010-026",
                  "description": "Xsolla Login server or resource owner denied request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "SocialProfileLinkedToAnotherUser": {
                "error": {
                  "code": "010-016",
                  "description": "This social account already linked to another user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Server": []
          }
        ],
        "summary": "Auth by custom ID",
        "tags": [
          "jwt"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Gets details of the user authenticated by the JWT.",
        "operationId": "get-user-details",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "birthday": "1995-01-05",
                "country": "USA",
                "devices": [
                  {
                    "device": "Xiaomi Redmi 9 Pro",
                    "last_used_at": "2017-01-01T10:00:00+0000",
                    "type": "android"
                  },
                  {
                    "device": "iPhone 10",
                    "last_used_at": "2017-01-01T10:00:00+0000",
                    "type": "ios"
                  }
                ],
                "email": "johny-doe@example.com",
                "external_id": "123",
                "first_name": "John",
                "gender": "m",
                "groups": [
                  {
                    "id": 1,
                    "is_default": false,
                    "name": "admin"
                  },
                  {
                    "id": 5,
                    "is_default": true,
                    "name": "user"
                  }
                ],
                "id": "11",
                "is_anonymous": false,
                "last_login": "2018-05-17T11:22:52+0000",
                "last_name": "Doe",
                "nickname": "Johny",
                "phone": "+79136759832",
                "phone_auth": "79136759832",
                "registered": "2017-01-01T00:00:00+0000",
                "tag": "234125",
                "username": "Johny200"
              }
            },
            "schema": {
              "$ref": "#/definitions/userInfo"
            }
          },
          "401": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "ExternalBearer": []
          }
        ],
        "summary": "Get user details",
        "tags": [
          "user profile"
        ]
      },
      "patch": {
        "description": "Updates the details of the authenticated user by JWT.",
        "operationId": "update-user-details",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Updated user details.",
              "example": {
                "birthday": "1990-12-12",
                "first_name": "John",
                "gender": "f",
                "nickname": "Johny"
              },
              "properties": {
                "birthday": {
                  "description": "User birth date in the following format: `YYYY-MM-DD`. Can be changed only once.\n",
                  "type": "string",
                  "x-isnullable": true
                },
                "first_name": {
                  "description": "User first name.",
                  "maxLength": 255,
                  "type": "string",
                  "x-isnullable": true
                },
                "gender": {
                  "description": "User gender. Can be:\n* `f` for female\n* `m` for male\n* `other`\n* `prefer not to answer`\n",
                  "type": "string",
                  "x-isnullable": true
                },
                "last_name": {
                  "description": "User last name.",
                  "maxLength": 255,
                  "type": "string",
                  "x-isnullable": true
                },
                "nickname": {
                  "description": "User nickname.",
                  "maxLength": 255,
                  "type": "string",
                  "x-isnullable": true
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "birthday": "1995-01-05",
                "country": "USA",
                "devices": [
                  {
                    "device": "Xiaomi Redmi 9 Pro",
                    "last_used_at": "2017-01-01T10:00:00+0000",
                    "type": "android"
                  },
                  {
                    "device": "iPhone 10",
                    "last_used_at": "2017-01-01T10:00:00+0000",
                    "type": "ios"
                  }
                ],
                "email": "johny-doe@example.com",
                "external_id": "123",
                "first_name": "John",
                "gender": "m",
                "groups": [
                  {
                    "id": 1,
                    "is_default": false,
                    "name": "admin"
                  },
                  {
                    "id": 5,
                    "is_default": true,
                    "name": "user"
                  }
                ],
                "id": "11",
                "is_anonymous": false,
                "last_login": "2018-05-17T11:22:52+0000",
                "last_name": "Doe",
                "nickname": "Johny",
                "phone": "+79136759832",
                "phone_auth": "79136759832",
                "registered": "2017-01-01T00:00:00+0000",
                "tag": "234125",
                "username": "Johny200"
              }
            },
            "schema": {
              "$ref": "#/definitions/userInfo"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "InvalidParameterGender": {
                "error": {
                  "code": "010-006",
                  "description": "Invalid parameter gender."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update user details",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/devices": {
      "get": {
        "description": "Gets a list of user’s devices.",
        "operationId": "get-users-devices",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/deviceInfo"
              },
              "type": "array"
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get user’s devices",
        "tags": [
          "devices"
        ]
      }
    },
    "/users/me/devices/{device_type}": {
      "post": {
        "description": "Links the specified device to the user account. To enable authentication via device ID and linking, use the [instruction](/doc/login/authentication-options/device-id/#login_features_device_id_presettings).",
        "operationId": "link-device-to-account",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Device info.",
              "example": {
                "device": "ONEPLUS A6003",
                "device_id": "1AF516EFACD646F6"
              },
              "properties": {
                "device": {
                  "description": "Manufacturer and model name of the device.",
                  "maxLength": 100,
                  "type": "string",
                  "x-isnullable": false
                },
                "device_id": {
                  "description": "Device ID:\n* For Android, it is an [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) constant.\n* For iOS, it is an [identifierForVendor](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor?language=objc) property.\n",
                  "maxLength": 36,
                  "minLength": 16,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "device",
                "device_id"
              ],
              "type": "object"
            }
          },
          {
            "description": "Type of the device.",
            "enum": [
              "android",
              "ios"
            ],
            "in": "path",
            "name": "device_type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "DependencyService": {
                "error": {
                  "code": "010-035",
                  "description": "Dependency service unavailable: playfab."
                }
              },
              "InvalidParam": {
                "error": {
                  "code": "002-027",
                  "description": "Invalid device_id parameter."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Link device to account",
        "tags": [
          "devices"
        ]
      }
    },
    "/users/me/devices/{id}": {
      "delete": {
        "description": "Unlinks the specified device from the user account. To enable authentication via device ID and unlinking, contact your Customer Success Manager.",
        "operationId": "unlink-device-from-account",
        "parameters": [
          {
            "description": "Device ID of the device you want to unlink. It is generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "SpecifiedDeviceNotFound": {
                "error": {
                  "code": "003-053",
                  "description": "Specified device not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UserHasOnlyOneWayToLogIn": {
                "error": {
                  "code": "010-006",
                  "description": "The user has access to only one login method."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Unlink device from account",
        "tags": [
          "devices"
        ]
      }
    },
    "/users/me/email": {
      "get": {
        "description": "Gets the email of the authenticated user by JWT.",
        "operationId": "get-user-email",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "User details.",
              "example": {
                "current_email": "test@email.com"
              },
              "properties": {
                "current_email": {
                  "description": "User email address.",
                  "type": "string",
                  "x-nullable": true
                }
              },
              "required": [
                "current_email"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get user email",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/link_email_password": {
      "post": {
        "description": "Adds the username/email and password authentication to the existing user account. This call is used if the account is created via device ID or phone number.",
        "operationId": "add-username-email-auth-to-account",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "User details.",
              "example": {
                "email": "john-email@email.com",
                "password": "password123",
                "username": "John"
              },
              "properties": {
                "email": {
                  "description": "User email address.",
                  "format": "email",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                },
                "password": {
                  "description": "User password.",
                  "maxLength": 100,
                  "minLength": 6,
                  "type": "string",
                  "x-isnullable": false
                },
                "promo_email_agreement": {
                  "default": 1,
                  "description": "User consent to receive the newsletter.",
                  "enum": [
                    0,
                    1
                  ],
                  "minimum": 0,
                  "type": "integer",
                  "x-isnullable": true
                },
                "username": {
                  "description": "Username.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "required": [
                "username",
                "password",
                "email"
              ],
              "type": "object"
            }
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "email_confirmation_required": true
              },
              "properties": {
                "email_confirmation_required": {
                  "description": "Whether the user has to confirm the email address or not.",
                  "type": "boolean"
                }
              },
              "required": [
                "email_confirmation_required"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UserWithSpecifiedEmailAlreadyExists": {
                "error": {
                  "code": "003-004",
                  "description": "User with specified email address already exists."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Add username/email auth to account",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/login_urls": {
      "get": {
        "description": "Gets links for authentication via the social networks enabled in **your Login project > General settings > Social Networks** section of [Publisher Account](https://publisher.xsolla.com/). The links are valid for 10 minutes.\n\nYou can get the link by this call and add it to your button for authentication via the social network.\n",
        "operationId": "get-links-for-social-auth",
        "parameters": [
          {
            "description": "Region in the `<language code>_<country code>` format, where:\n\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country/region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n\nThe list of the links will be sorted from most to least used social networks, according to the variable value.\n",
            "in": "query",
            "name": "locale",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": [
                {
                  "auth_url": "http://someurl1.com",
                  "provider": "provider1"
                },
                {
                  "auth_url": "http://someurl2.com",
                  "provider": "provider2"
                }
              ],
              "items": {
                "$ref": "#/definitions/socialAuthUrl"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get links for social auth",
        "tags": [
          "social networks"
        ]
      }
    },
    "/users/me/mfa": {
      "get": {
        "description": "Gets user’s two-factor authentication settings. You must enable two-factor authentication for the Login project. Contact your Customer Success Manager to enable it.",
        "operationId": "get-users-two-factor-authentication-settings",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "List of data about user’s two-factor authentication settings.",
              "example": [
                {
                  "change_restricted": false,
                  "enabled": true,
                  "mfa_type": "email"
                }
              ],
              "items": {
                "$ref": "#/definitions/mfa"
              },
              "type": "array"
            },
            "x-isnullable": false
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UnavailableProjectMethod": {
                "error": {
                  "code": "003-020",
                  "description": "Call unavailable for this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get user’s two-factor authentication settings",
        "tags": [
          "mfa"
        ]
      },
      "post": {
        "description": "Updates user’s two-factor authentication settings. The user must confirm the changes by entering a one-time code.\n\nThe workflow of using this call:\n1. The user enables or disables two-factor authentication.\n2. The application sends the request to the Xsolla Login server.\n3. The Xsolla Login server sends the one-time confirmation code to the user and returns the URL of the two-factor authentication page.\n4. The application redirects the user to the URL.\n5. The user enters the one-time code.\n6. New two-factor authentication settings are applied.\n\nYou must enable two-factor authentication for the Login project. Contact your Customer Success Manager to enable it.\n",
        "operationId": "update-users-two-factor-authentication-settings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Data of user’s two-factor authentication settings.",
              "example": {
                "enabled": true,
                "mfa_type": "email"
              },
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Status of two-factor authentication settings. Set `true` value for enabling, and `false` value otherwise.",
                  "type": "boolean",
                  "x-nullable": false
                },
                "locale": {
                  "description": "Region in the `<language code>_<country code>` format, where:\n* `language code`: language code in the [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format;\n* `country code`: country or region code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n",
                  "type": "string",
                  "x-nullable": false
                },
                "mfa_type": {
                  "description": "Type of the second factor. Can be: `email` or `sms`. You must enable the specified type for the Login project. Contact your Customer Success Manager to set it up.\n",
                  "enum": [
                    "email",
                    "sms"
                  ],
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "mfa_type"
              ],
              "type": "object"
            }
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project** and select the **Callback URLs** section in the upper block of the navigation page. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "URL of the two-factor authentication page.",
              "example": {
                "url": "https://xl-widget.xsolla.com/otp?projectId=c7569172-bd62-11e8-a7b5-0242ac111112&challenge_id=0ad73aba-e378-43bb-97c9-0e70af86b2f4&email=lo%2A%2A%2Ar5%40m%2A%2A%2Al.ru"
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "application/json": {
                "error": {
                  "code": "002-050",
                  "description": "User’s two-factor authentication settings not changed."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update user’s two-factor authentication settings",
        "tags": [
          "mfa"
        ]
      }
    },
    "/users/me/phone": {
      "get": {
        "description": "Gets the phone number of the authenticated user by JWT.\n\nThe phone number in this call is used only for passing the two-factor authentication.\n",
        "operationId": "get-user-phone-number",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "User details.",
              "example": {
                "phone_number": "+79551596067"
              },
              "properties": {
                "phone_number": {
                  "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).\n",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "phone_number"
              ],
              "type": "object"
            }
          },
          "204": {
            "description": "No Content (Phone number is empty)"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get user phone number",
        "tags": [
          "user profile"
        ]
      },
      "post": {
        "description": "Updates the phone number of the authenticated user by JWT.\n\nThe phone number in this call is used only for passing the two-factor authentication.\n",
        "operationId": "update-user-phone-number",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Updated user details.",
              "example": {
                "phone_number": "+79091091076"
              },
              "properties": {
                "phone_number": {
                  "description": "Updated user phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).\n",
                  "maxLength": 25,
                  "minLength": 5,
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "phone_number"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "(Unprocessable Entity) Semantic errors in the request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "002-008",
                  "description": "Phone number already belongs to other user."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update user phone number",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/phone/{phoneNumber}": {
      "delete": {
        "description": "Deletes the phone number of the authenticated user by JWT.\n\nThe phone number in this call is used only for passing the two-factor authentication.\n",
        "operationId": "delete-user-phone-number",
        "parameters": [
          {
            "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).\n",
            "in": "path",
            "name": "phoneNumber",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete user phone number",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/picture": {
      "delete": {
        "description": "Deletes the profile picture of the authenticated user by JWT.",
        "operationId": "delete-user-picture",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Delete user picture",
        "tags": [
          "user profile"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Uploads the profile picture of the authenticated user by JWT.",
        "operationId": "upload-user-picture",
        "parameters": [
          {
            "in": "body",
            "name": "picture",
            "schema": {
              "properties": {
                "picture": {
                  "description": "User profile picture in the binary format.",
                  "format": "binary",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "picture": "https://someurl.com/avatar1fjf1we1f8swe9ln.jpg"
              },
              "properties": {
                "picture": {
                  "description": "CDN link with the user image.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "picture"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Upload user picture",
        "tags": [
          "user profile"
        ]
      }
    },
    "/users/me/relationships": {
      "get": {
        "description": "Gets a list of users added as friends of the authenticated user.",
        "operationId": "get-users-friends",
        "parameters": [
          {
            "description": "Parameter that is used for API pagination.",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "default": 20,
            "description": "Maximum number of users that are returned at a time.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "Friends type. Can be:\n* `friends` to get the list of the users added to the friend list\n* `friend_requested` to get the list of the users to who got the friend request\n* `friend_requested_by` to get the list of the users from who sent a friend request\n* `blocked` to get the list of the users added to the friend list, but blocked\n* `blocked_by` to get the list of the users who blocked this user\n",
            "enum": [
              "friends",
              "friend_requested",
              "friend_requested_by",
              "blocked",
              "blocked_by"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "Condition for sorting the users. Can be:\n* `by_nickname` to sort the list alphabetically by the nickname\n* `by_updated` to sort the list by the date when users recently added someone to their friend list or blocked them\n",
            "enum": [
              "by_nickname",
              "by_updated"
            ],
            "in": "query",
            "name": "sort_by",
            "required": true,
            "type": "string"
          },
          {
            "description": "Condition for sorting the list of users. Can be:\n* `asc` to apply the `sort_by` value in ascending order\n* `desc` to apply the `sort_by` value in descending order\n",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sort_order",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "next_after": {
                  "description": "Value of the `after` parameter that should be passed while requesting this call for the next time.",
                  "type": "string"
                },
                "next_url": {
                  "description": "URL of the request for using this call for the next time.",
                  "type": "string"
                },
                "relationships": {
                  "description": "Friends details.",
                  "items": {
                    "$ref": "#/definitions/relationship"
                  },
                  "type": "array"
                }
              },
              "required": [
                "relationships",
                "next_url",
                "next_after"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          },
          {
            "APIKey": []
          }
        ],
        "summary": "Get user’s friends",
        "tags": [
          "user friends"
        ]
      },
      "post": {
        "description": "Updates the friend list of the authenticated user.",
        "operationId": "update-users-friends",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "Friends details.",
              "example": {
                "action": "friend_request_add",
                "user": "00000000-0000-0000-0000-000000000000"
              },
              "properties": {
                "action": {
                  "description": "Type of the action. Can be:\n\n* `friend_request_add` to send a friend request,\n* `friend_request_cancel` to cancel the friend request that was sent,\n* `friend_request_approve` to confirm the friend request,\n* `friend_request_deny` to cancel the friend request that was received,\n* `friend_remove` to delete the user from the friend list,\n* `block` to block the user,\n* `unblock` to unblock the user.\n",
                  "enum": [
                    "friend_request_add",
                    "friend_request_cancel",
                    "friend_request_approve",
                    "friend_request_deny",
                    "friend_remove",
                    "block",
                    "unblock"
                  ],
                  "type": "string"
                },
                "user": {
                  "description": "ID of the user to change relationship with.",
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "application/json": {
                "error": {
                  "code": "0",
                  "description": "Query parameter projectId value '8513c0-0336-4927-b351-02ccec7f3cb6'\nviolated a constraint (This is not a valid UUID).\n"
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update user’s friends",
        "tags": [
          "user friends"
        ]
      }
    },
    "/users/me/social_friends": {
      "get": {
        "description": "Gets a list of user’s friends from a social provider.",
        "operationId": "get-social-account-friends",
        "parameters": [
          {
            "description": "Name of the chosen social provider which you can enable in your [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Social connections**. If you do not specify it, the call gets friends from all social providers.",
            "enum": [
              "steam",
              "xbox",
              "twitter",
              "facebook",
              "vk"
            ],
            "in": "query",
            "name": "platform",
            "type": "string"
          },
          {
            "default": 0,
            "description": "Number of the elements from which the list is generated.",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 500,
            "description": "Maximum number of friends that are returned at a time.",
            "in": "query",
            "maximum": 500,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": false,
            "description": "Shows whether the social friends are from your game.",
            "in": "query",
            "name": "with_xl_uid",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/socialFriendsResponse200",
              "example": {
                "data": [
                  {
                    "avatar": "https://pbs.twimg.com/profile_images/874276177757336672/kUuht00m_400x400.jpg",
                    "name": "John Smith",
                    "platform": "twitter",
                    "user_id": "johnsmith007",
                    "xl_uid": "2a6e0079-d7a7-11e8-963b-82010aa80778"
                  },
                  {
                    "avatar": "https://sun9-61.userapi.com/c10785/u105544870/e_dr9637b7.jpg?ava=1",
                    "name": "Riley Parker",
                    "platform": "vk",
                    "user_id": "19932423423424390",
                    "xl_uid": "1e6e2979-d7f7-11e8-963b-42010aa80910"
                  }
                ],
                "limit": 500,
                "offset": 1000,
                "total_count": 4000,
                "with_xl_uid": true
              }
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get social account friends",
        "tags": [
          "user friends"
        ]
      }
    },
    "/users/me/social_friends/update": {
      "post": {
        "description": "Begins data processing to update a list of user’s friends from a social provider. Note that there may be a delay in data processing because of the Xsolla Login server or provider server high loads.",
        "operationId": "update-social-account-friends",
        "parameters": [
          {
            "description": "Name of the chosen social provider which you can enable in your [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Social connections**. If you do not specify it, the call gets friends from all social providers.",
            "enum": [
              "steam",
              "xbox",
              "twitter",
              "facebook",
              "vk"
            ],
            "in": "query",
            "name": "platform",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UnavailableProjectMethod": {
                "error": {
                  "code": "003-020",
                  "description": "Call unavailable for this Login project."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Update social account friends",
        "tags": [
          "user friends"
        ]
      }
    },
    "/users/me/social_providers": {
      "get": {
        "description": "Gets a list of the social networks linked to the user account.",
        "operationId": "get-linked-networks",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": [
                {
                  "full_name": "John Doe",
                  "nickname": "John Doe",
                  "picture": "https://someurl.com/some_picture.jpg",
                  "provider": "vk",
                  "social_id": "12345678"
                }
              ]
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/socialProvider"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get linked networks",
        "tags": [
          "social networks"
        ]
      }
    },
    "/users/me/social_providers/{providerName}": {
      "delete": {
        "description": "Deletes social network linked to the user account.",
        "operationId": "delete-linked-networks",
        "parameters": [
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be:\n  Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "providerName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "UserHasOnlyOneWayToLogIn": {
                "error": {
                  "code": "010-006",
                  "description": "The user has access to only one login method."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Deletes Linked Network\n",
        "tags": [
          "social networks"
        ]
      }
    },
    "/users/me/social_providers/{providerName}/login_redirect": {
      "get": {
        "description": "Links the social network, which is used by the player for authentication, to the user account.\n\nThe linking flow:\n1. The user authenticates on the game website.\n2. The UI offers to link the social network to the user account.\n3. The Xsolla Login server redirects the user to the social network.\n4. The user authenticates in the social network.\n5. The Xsolla Login server links the social network to the user account.\n6. The Xsolla Login server redirects the user to the game website.\n",
        "operationId": "link-social-network-to-account",
        "parameters": [
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be:\n  Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "providerName",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project > General settings**. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection",
            "headers": {
              "Location": {
                "description": "URL to authenticate the user via the social network.",
                "type": "string"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Link social network to account",
        "tags": [
          "social networks"
        ]
      }
    },
    "/users/me/social_providers/{providerName}/login_url": {
      "get": {
        "description": "Gets the URL to link the social network to the user’s account. The social network should be used for authentication.\n\nThe linking flow:\n1. The user authenticates on the game website.\n2. The UI offers to link the social network to the user account.\n3. The Xsolla Login server returns social network URL.\n4. The game website redirects the user to the social network.\n5. The user authenticates in the social network.\n6. The Xsolla Login server links the social network to the user account.\n7. The Xsolla Login server redirects the user to the game website.\n",
        "operationId": "get-url-to-link-social-network-to-account",
        "parameters": [
          {
            "description": "Name of the social network connected to Login in Publisher Account. Can be:\n  Name of the social network connected to Login in Publisher Account. Can be: [`amazon`](https://developer.amazon.com/docs/), [`apple`](https://developer.apple.com/documentation/sign_in_with_apple/sign_in_with_apple_rest_api/authenticating_users_with_sign_in_with_apple), [`babka`](/doc/login/how-to/xsolla-account-login/#login_babka_button_integration_oauth_client_creation), [`baidu`](https://developer.baidu.com/wiki/index.php?title=docs/oauth/client), [`battlenet`](https://develop.battle.net/documentation/guides/using-oauth/client-credentials-flow), [`discord`](https://discord.com/developers/docs/topics/oauth2), [`epicgames`](https://dev.epicgames.com/docs/dev-portal/client-credentials), [`facebook`](https://developers.facebook.com/docs/facebook-login/guides/advanced/manual-flow/), [`github`](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps), [`google`](https://developers.google.com/identity/protocols/oauth2),[`kakao`](https://developers.kakao.com/docs/latest/en/kakaologin/common), [`linkedin`](https://learn.microsoft.com/en-us/linkedin/shared/authentication/client-credentials-flow), [`mailru`](https://help.mail.ru/developers/oauth/settings), [`microsoft`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`msn`](https://learn.microsoft.com/en-us/graph/permissions-reference), [`naver`](https://developers.naver.com/docs/common/openapiguide/appregister), [`ok`](https://apiok.ru/dev/app/create#section-2), [`paypal`](https://developer.paypal.com/home/#get-api-credentials), [`qq`](https://wiki.connect.qq.com/__trashed-2), [`reddit`](https://github.com/reddit-archive/reddit/wiki/OAuth2#getting-started), [`steam`](https://partner.steamgames.com/doc/webapi_overview/oauth), [`twitch`](https://dev.twitch.tv/docs/authentication/#registration), [`twitter`](https://developer.twitter.com/en/docs/authentication/oauth-1-0a/api-key-and-secret), [`vimeo`](https://developer.vimeo.com/api/guides/start#register-your-app),[`vk`](https://dev.vk.com/ru/api/getting-started), [`wechat`](https://developers.weixin.qq.com/doc/oplatform/en/Website_App/WeChat_Login/Wechat_Login.html), [`weibo`](https://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E), [`xbox`](https://learn.microsoft.com/en-us/graph/permissions-reference),[ `yahoo`](https://developer.yahoo.com/oauth2/guide), [`yandex`](https://yandex.ru/dev/id/doc/ru/register-client), [`youtube`](https://developers.google.com/youtube/registering_an_application).\n\nIf you store user data in [PlayFab](https://developers.xsolla.com/doc/login/integration-guide/connect-users-storage/#login_guide_connect_users_storage_playfab), only `twitch` is available.\n",
            "in": "path",
            "name": "providerName",
            "required": true,
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, two-factor authentication configuration, or password reset confirmation. Must be identical to the **Callback URL** specified in the **URL** block of [Publisher Account](https://publisher.xsolla.com/). To find it, go to **Login > your Login project > General settings**. **Required** if there are several Callback URLs.",
            "in": "query",
            "name": "login_url",
            "type": "string"
          },
          {
            "description": "URL to redirect the user to after account confirmation, successful authentication, or password reset confirmation. To set up this parameter, contact your Customer Success Manager or email to [csm@xsolla.com](mailto:csm@xsolla.com).\n<div class=\"notice\"><strong>Notice</strong><br> The parameter is required if you have more than one redirect URI in your project settings.</div>\n",
            "in": "query",
            "name": "redirect_uri",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "properties": {
                "url": {
                  "description": "URL to authenticate the user via the social network.",
                  "type": "string",
                  "x-nullable": false
                }
              },
              "required": [
                "url"
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get URL to link social network to account",
        "tags": [
          "social networks"
        ]
      }
    },
    "/users/search": {
      "get": {
        "description": "Searches users by the `id`, `email` ans `phone` parameters. Search can be performed instantly when the user starts entering the search parameter.\n\nNotice: user who request call should has permissions at LDAP\n",
        "operationId": "search-users-by-admin",
        "parameters": [
          {
            "description": "User's UUID identifier",
            "format": "uuid",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "User's email address",
            "format": "email",
            "in": "query",
            "maxLength": 100,
            "minLength": 3,
            "name": "email",
            "type": "string"
          },
          {
            "description": "User's phone number",
            "in": "query",
            "maxLength": 15,
            "minLength": 7,
            "name": "phone",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "schema": {
              "items": {
                "$ref": "#/definitions/user"
              },
              "type": "array"
            },
            "x-nullable": false
          },
          "400": {
            "description": "Bad Request",
            "examples": {
              "InvalidParameters": {
                "error": {
                  "code": "0",
                  "description": "Request has invalid parameters."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InactiveUser": {
                "error": {
                  "code": "003-007",
                  "description": "User account not confirmed."
                }
              },
              "WrongUsernameOrPassword": {
                "error": {
                  "code": "003-001",
                  "description": "Incorrect username or password."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "application/json": {
                "error": {
                  "code": "003-061",
                  "description": "Object not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Shared search users by all projects",
        "tags": [
          "users"
        ]
      }
    },
    "/users/search/by_nickname": {
      "get": {
        "description": "Searches users by the `nickname` parameter and gets a list of them. Search can be performed instantly when the user starts entering the search parameter.\n\nThe workflow of using this call:\n1. The user enters a nickname or tag, or nickname and tag.\n2. The Xsolla Login server searches for users in the Login project data of the user who initiated a search.\n\nThe current user can execute this call only one time per second.\n",
        "operationId": "search-users-by-nickname",
        "parameters": [
          {
            "description": "The search string that may contain:\n* nickname only. Search is performed by substring at the beginning of the nickname.\n* tag only, is used with \"#\" at the beginning. Search is performed by substring at the beginning of the tag.\n* nickname and tag together, is used with \"#\" and without space. Search is performed by full nickname and substring at the beginning of the tag.\n",
            "in": "query",
            "maxLength": 255,
            "minLength": 3,
            "name": "nickname",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Number of the elements from which the list is generated.",
            "in": "query",
            "maximum": 100,
            "minimum": 0,
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Maximum number of users that are returned at a time.",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/searchUserInfo",
              "example": {
                "offset": 3,
                "total_count": 100,
                "users": [
                  {
                    "avatar": "https://pbs.twimg.com/profile_images/874276177757336672/kUuht00m_400x400.jpg",
                    "is_me": true,
                    "last_login": "2018-10-01T13:15:08+05:00",
                    "nickname": "Quana",
                    "registered": "2018-10-01T13:15:08+05:00",
                    "tag": "24234",
                    "user_id": "2a6e0079-d7a7-11e8-963b-82010aa80778"
                  },
                  {
                    "avatar": "https://pbs.twimg.com/profile_images/874276177757336222/kUuht00m_400x400.jpg",
                    "is_me": false,
                    "last_login": "2018-10-01T13:15:08+05:00",
                    "nickname": "Quanare",
                    "registered": "2018-10-01T13:15:08+05:00",
                    "tag": "249078",
                    "user_id": "1e6e2979-d7f7-11e8-963b-42010aa80910"
                  },
                  {
                    "is_me": false,
                    "last_login": "2018-10-01T13:15:08+05:00",
                    "nickname": "Quanare",
                    "registered": "2018-10-01T13:15:08+05:00",
                    "tag": "434535",
                    "user_id": "2e6e2979-d7f7-11e8-963b-42010aa80922"
                  }
                ]
              }
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "examples": {
              "NicknameMissedInTheQuery": {
                "error": {
                  "code": "0",
                  "description": "Nickname missed in query."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "application/json": {
                "AllowableNumberOfSearchUsersRequestsExceeded": {
                  "code": "002-054",
                  "description": "Allowed number of search attempts exceeded. Wait one second before next request."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Search users by nickname",
        "tags": [
          "user friends"
        ]
      }
    },
    "/users/{user_id}/public": {
      "get": {
        "description": "Gets the user information from their public profile by the user ID.",
        "operationId": "get-user-public-profile",
        "parameters": [
          {
            "description": "User ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users**.",
            "format": "uuid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/publicUserInfo",
              "example": {
                "avatar": "https://pbs.twimg.com/profile_images/874276177757336672/kUuht00m_400x400.jpg",
                "last_login": "2018-10-01T13:15:08+05:00",
                "nickname": "Quana",
                "registered": "2018-10-01T13:15:08+05:00",
                "user_id": "2a6e0079-d7a7-11e8-963b-82010aa80778"
              }
            },
            "x-isnullable": false
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "InvalidToken": {
                "error": {
                  "code": "002-016",
                  "description": "Invalid token."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "404": {
            "description": "Not Found",
            "examples": {
              "UserNotFound": {
                "error": {
                  "code": "003-002",
                  "description": "User not found."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "examples": {
              "AllowableNumberOfRequestsExceeded": {
                "error": {
                  "code": "010-005",
                  "description": "Allowable number of requests exceeded."
                }
              }
            },
            "schema": {
              "$ref": "#/definitions/errorResult"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get user public profile",
        "tags": [
          "user friends"
        ]
      }
    }
  },
  "definitions": {
    "attribute": {
      "properties": {
        "key": {
          "description": "Name of attribute that is used to identify user’s attribute. Must be unique per user.",
          "maxLength": 256,
          "pattern": "[A-Za-z0-9_]+",
          "type": "string",
          "x-nullable": false
        },
        "permission": {
          "description": "Definition of user’s access level to other users’ attributes.",
          "enum": [
            "public",
            "private"
          ],
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "description": "Value of user’s attribute.",
          "maxLength": 256,
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "createInternalOauth20ProjectsClientParamsBodyAccessItems": {
      "properties": {
        "resource": {
          "description": "Value for the specified `resource_name` parameter.",
          "type": "string",
          "x-nullable": false
        },
        "resource_name": {
          "description": "Resource name which client grants access for.",
          "enum": [
            "product"
          ],
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "resource_name",
        "resource"
      ],
      "type": "object",
      "x-go-gen-location": "operations"
    },
    "deviceInfo": {
      "properties": {
        "device": {
          "description": "Manufacturer and model name of the device.",
          "type": "string",
          "x-isnullable": false
        },
        "id": {
          "description": "Device ID generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call.",
          "type": "integer",
          "x-isnullable": false
        },
        "last_used_at": {
          "description": "Date and time of the last user login via the device in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
          "type": "string",
          "x-isnullable": false
        },
        "type": {
          "description": "Type of the device.",
          "enum": [
            "android",
            "ios"
          ],
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "id",
        "type",
        "device",
        "last_used_at"
      ],
      "type": "object"
    },
    "error": {
      "properties": {
        "error_code": {
          "description": "Error code.",
          "type": "string",
          "x-nullable": false
        },
        "error_description": {
          "description": "Error description.",
          "type": "string",
          "x-nullable": false
        }
      },
      "type": "object"
    },
    "errorResult": {
      "description": "Error.",
      "properties": {
        "error": {
          "properties": {
            "code": {
              "description": "Error code.",
              "example": "003-061",
              "type": "string",
              "x-isnullable": false
            },
            "description": {
              "description": "Error description.",
              "example": "Object not found.",
              "type": "string",
              "x-isnullable": false
            },
            "details": {
              "description": "Additional information.",
              "type": "object",
              "x-isnullable": true
            }
          },
          "required": [
            "code",
            "description"
          ],
          "type": "object"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "getAttribute": {
      "properties": {
        "data_type": {
          "description": "Data type of attribute",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ],
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of attribute from JSON Schema.",
          "type": "string",
          "x-nullable": true
        },
        "format": {
          "description": "Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3)",
          "type": "string",
          "x-nullable": true
        },
        "key": {
          "description": "Name of attribute that is used to identify user’s attribute.",
          "maxLength": 256,
          "pattern": "[A-Za-z0-9_]+",
          "type": "string",
          "x-nullable": false
        },
        "permission": {
          "description": "Definition of user’s access level to other users’ attributes.",
          "enum": [
            "public",
            "private"
          ],
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "description": "Value of user’s attribute.",
          "maxLength": 256,
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "getServerAttribute": {
      "properties": {
        "attr_type": {
          "default": "client",
          "description": "Definition of user’s access level to service attributes.",
          "enum": [
            "client",
            "server"
          ],
          "type": "string",
          "x-nullable": false
        },
        "data_type": {
          "description": "Data type of attribute",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ],
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of attribute from JSON Schema.",
          "type": "string",
          "x-nullable": true
        },
        "format": {
          "description": "Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3)",
          "type": "string",
          "x-nullable": true
        },
        "key": {
          "description": "Name of attribute that is used to identify user’s attribute.",
          "maxLength": 256,
          "pattern": "[A-Za-z0-9_]+",
          "type": "string",
          "x-nullable": false
        },
        "permission": {
          "description": "Definition of user’s access level to other users’ attributes.",
          "enum": [
            "public",
            "private"
          ],
          "type": "string",
          "x-nullable": true
        },
        "readonly": {
          "description": "The attribute is read-only",
          "type": "boolean",
          "x-nullable": false
        },
        "value": {
          "description": "Value of user’s attribute.",
          "maxLength": 256,
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "key",
        "value",
        "readonly"
      ],
      "type": "object"
    },
    "httpProblem": {
      "description": "Error.",
      "properties": {
        "customData": {
          "description": "A JSON object of custom data returned to the client. This will only be shown for errors that require custom data to be passed back.",
          "type": "string",
          "x-isnullable": true
        },
        "detail": {
          "description": "Expanded human-readable details. This string should not be shown to players.",
          "example": "The given resource (123) does not exist",
          "type": "string",
          "x-isnullable": false
        },
        "errorCode": {
          "description": "Machine-readable error token string. This field should be used by the game to look up a localized and game-appropriate error to players.",
          "example": "RESOURCE_NOT_FOUND",
          "type": "string",
          "x-isnullable": false
        },
        "httpStatus": {
          "description": "HTTP status code returned",
          "example": 404,
          "type": "integer",
          "x-isnullable": false
        },
        "method": {
          "description": "Method that was called",
          "example": "RestGet",
          "type": "string",
          "x-isnullable": false
        },
        "problemType": {
          "description": "A relative link to the endpoint documentation.",
          "example": "doc/rest/get.md",
          "type": "string",
          "x-isnullable": false
        },
        "title": {
          "description": "Simple human-readable title. This error should not be shown to players.",
          "example": "No such resource",
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "problemType",
        "title",
        "detail",
        "errorCode",
        "httpStatus",
        "method"
      ],
      "type": "object"
    },
    "item": {
      "example": {
        "id": "00000000-0000-0000-0000-00000000",
        "name": "email_customization_complete"
      },
      "properties": {
        "id": {
          "description": "Generated UUID identificator",
          "type": "string",
          "x-isnullable": false
        },
        "name": {
          "description": "Given into request name of a new item",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name"
      ],
      "type": "object"
    },
    "jwk": {
      "properties": {
        "alg": {
          "description": "The specific cryptographic algorithm used with the key.",
          "example": "RS256",
          "type": "string",
          "x-isnullable": false
        },
        "e": {
          "description": "The exponent for the RSA public key. The value is encoded encoded according to the Base64 standard.",
          "example": "AQAB",
          "type": "string",
          "x-isnullable": false
        },
        "kid": {
          "description": "The unique identifier for the key.",
          "example": "e600c72b-125a-4b30-86a5-9697af62f2a1",
          "type": "string",
          "x-isnullable": false
        },
        "kty": {
          "description": "The family of cryptographic algorithms used with the key.",
          "example": "RSA",
          "type": "string",
          "x-isnullable": false
        },
        "n": {
          "description": "The modulus for the RSA public key. The value is encoded encoded according to the Base64 standard.",
          "example": "eWVObHpsdWI5NFlnZXJUMDMwY29kcUV6dGpmVV9TNlg0RGJEQV9pVktrakFXdFlmUEhEenpfc1BDVDFBeHo2aXNaZGYzbEhwcV9nWVg0U3o=",
          "type": "string",
          "x-isnullable": false
        },
        "use": {
          "description": "How the key was meant to be used; `sig` represents the signature, `enc` represents the encryption.",
          "example": "sig",
          "type": "string",
          "x-isnullable": false
        },
        "x5c": {
          "description": "The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate.",
          "items": {
            "type": "string",
            "x-isnullable": false
          },
          "type": "array",
          "x-isnullable": false,
          "x-omitempty": true
        },
        "x5t": {
          "description": "The thumbprint of the x.509 cert (SHA-1 thumbprint).",
          "example": "NjU3NDI5ZTZhODU0YjQzMGFiYzkwNGNkZDkwNmZkMzZmOWEzNWVmMQ",
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "use",
        "kty",
        "kid",
        "alg"
      ],
      "type": "object"
    },
    "jwks": {
      "example": {
        "keys": [
          {
            "alg": "RS256",
            "e": "10001",
            "kid": "NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg",
            "kty": "RSA",
            "n": "yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ",
            "use": "sig"
          }
        ]
      },
      "properties": {
        "keys": {
          "description": "The value of the 'keys' parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.",
          "items": {
            "properties": {
              "alg": {
                "description": "The specific cryptographic algorithm used with the key.",
                "example": "RS256",
                "type": "string",
                "x-isnullable": false
              },
              "e": {
                "description": "The exponent for the RSA public key. The value is encoded encoded according to the Base64 standard.",
                "example": "AQAB",
                "type": "string",
                "x-isnullable": false
              },
              "kid": {
                "description": "The unique identifier for the key.",
                "example": "e600c72b-125a-4b30-86a5-9697af62f2a1",
                "type": "string",
                "x-isnullable": false
              },
              "kty": {
                "description": "The family of cryptographic algorithms used with the key.",
                "example": "RSA",
                "type": "string",
                "x-isnullable": false
              },
              "n": {
                "description": "The modulus for the RSA public key. The value is encoded encoded according to the Base64 standard.",
                "example": "eWVObHpsdWI5NFlnZXJUMDMwY29kcUV6dGpmVV9TNlg0RGJEQV9pVktrakFXdFlmUEhEenpfc1BDVDFBeHo2aXNaZGYzbEhwcV9nWVg0U3o=",
                "type": "string",
                "x-isnullable": false
              },
              "use": {
                "description": "How the key was meant to be used; `sig` represents the signature, `enc` represents the encryption.",
                "example": "sig",
                "type": "string",
                "x-isnullable": false
              },
              "x5c": {
                "description": "The x.509 certificate chain. The first entry in the array is the certificate to use for token verification; the other certificates can be used to verify this first certificate.",
                "items": {
                  "type": "string",
                  "x-isnullable": false
                },
                "type": "array",
                "x-isnullable": false,
                "x-omitempty": true
              },
              "x5t": {
                "description": "The thumbprint of the x.509 cert (SHA-1 thumbprint).",
                "example": "NjU3NDI5ZTZhODU0YjQzMGFiYzkwNGNkZDkwNmZkMzZmOWEzNWVmMQ",
                "type": "string",
                "x-isnullable": false
              }
            },
            "required": [
              "use",
              "kty",
              "kid",
              "alg"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "key": {
      "description": "Cryptographic key. The parameters of the object represent key properties and its value.",
      "properties": {
        "alg": {
          "description": "Specific cryptographic algorithm used with the key.",
          "type": "string",
          "x-isnullable": false
        },
        "e": {
          "description": "Exponent for the RSA public key.",
          "type": "string",
          "x-isnullable": false
        },
        "kid": {
          "description": "Unique key identifier.",
          "type": "string",
          "x-isnullable": false
        },
        "kty": {
          "description": "Family of cryptographic algorithms used with the key.",
          "type": "string",
          "x-isnullable": false
        },
        "n": {
          "description": "Modulus for the RSA public key.",
          "type": "string",
          "x-isnullable": false
        },
        "use": {
          "description": "How the key was meant to be used. The `sig` value represents the signature.",
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "alg",
        "kty",
        "use",
        "n",
        "e",
        "kid"
      ],
      "type": "object"
    },
    "limit": {
      "default": 20,
      "description": "Number of users that is returned when searching by attribute.",
      "maximum": 20,
      "minimum": 0,
      "type": "integer",
      "x-nullable": false
    },
    "mfa": {
      "properties": {
        "change_restricted": {
          "description": "Shows whether the user can change the settings or not.",
          "type": "boolean",
          "x-isnullable": false
        },
        "enabled": {
          "description": "Status of two-factor authentication settings.",
          "type": "boolean",
          "x-isnullable": false
        },
        "mfa_type": {
          "description": "Type of the second factor. Can be: `email` or `sms`. You must enable the specified type for the Login project. Contact your Customer Success Manager to set it up.\n",
          "enum": [
            "email",
            "sms"
          ],
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "mfa_type",
        "enabled",
        "change_restricted"
      ],
      "type": "object"
    },
    "oauth2Access": {
      "properties": {
        "resource": {
          "description": "Value for the specified `resource_name` parameter.",
          "type": "string",
          "x-nullable": false
        },
        "resource_name": {
          "description": "Resource name which client grants access for.",
          "enum": [
            "publisher_id",
            "publisher_project_id"
          ],
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "resource_name",
        "resource"
      ],
      "type": "object"
    },
    "oauth2Client": {
      "properties": {
        "access": {
          "description": "List of client resources which access is granted to.",
          "items": {
            "properties": {
              "resource": {
                "description": "Value for the specified `resource_name` parameter.",
                "type": "string",
                "x-nullable": false
              },
              "resource_name": {
                "description": "Resource name which client grants access for.",
                "enum": [
                  "publisher_id",
                  "publisher_project_id"
                ],
                "type": "string",
                "x-nullable": false
              }
            },
            "required": [
              "resource_name",
              "resource"
            ],
            "type": "object"
          },
          "type": "array",
          "x-nullable": true
        },
        "audience": {
          "description": "List of domains for which token can be applied",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "grant_types": {
          "description": "The type of getting the JWT. Can be:\n* `authorization_code` to exchange the code received in the authentication call to the JWT. The value of the `code` parameter must be specified.\n* `refresh_token` to get the refreshed JWT when the previous value is expired. The value of the `refresh_token` parameter must be specified.\n* `client_credentials` to get the server JWT. The values of the `client_id` and `client_secret` parameters must be specified.\n* `password` to get the JWT by authentication via login and password directly, `is_public` must have the `true` value.\n",
          "items": {
            "enum": [
              "authorization_code",
              "refresh_token",
              "client_credentials",
              "password"
            ],
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "icon_url": {
          "description": "URL for icon which will be display on auth/consent screen",
          "type": "string"
        },
        "id": {
          "description": "Client ID.",
          "type": "integer",
          "x-nullable": false
        },
        "is_public": {
          "default": false,
          "description": "Defines whether the client is public (`true` value) or private (`false` value). If the client is public, you do not need to pass the client’s secret key to the [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call.",
          "type": "boolean",
          "x-nullable": false
        },
        "lifetime": {
          "description": "Lifetime of OAuth2 token in seconds.",
          "type": "integer"
        },
        "name": {
          "description": "Client name.",
          "maxLength": 255,
          "minLength": 1,
          "type": "string",
          "x-nullable": true
        },
        "project_id": {
          "description": "Login ID which the list of clients will be found for.",
          "format": "uuid",
          "type": "string",
          "x-nullable": false
        },
        "publisher_id": {
          "description": "Merchant ID.",
          "type": "integer",
          "x-nullable": true,
          "x-secret": true
        },
        "redirect_uris": {
          "description": "List of URIs which the Xsolla Login server can use to redirect the user after successful authentication.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "response_types": {
          "description": "Defines the response type of the Xsolla Login server. Must have the `code` value.",
          "items": {
            "enum": [
              "code"
            ],
            "type": "string"
          },
          "type": "array",
          "x-nullable": false
        },
        "scopes": {
          "description": "Scope is a mechanism in OAuth 2.0 to limit an application’s access to a user’s account.\n\nCan be:\n* `email` for [Auth via social network](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-social-network) or [Get link for social auth](https://developers.xsolla.com/api/login/operation/oauth-20-get-link-for-social-auth) calls to request an email from the user additionally.\n* `offline` to use `refresh_token` from [Generate JWT](https://developers.xsolla.com/api/login/operation/generate-jwt) call to refresh the JWT when it is expired.\n* `playfab` to write **SessionTicket** to the `session_ticket` claim of the JWT if you store user data at PlayFab.\n\nIf you process your own values of the `scope` parameter, that are not mentioned above, you can set them when using this call. The Xsolla Login server does not process these values, but returns them in the received JWT.\n",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-nullable": true
        },
        "secret": {
          "description": "Client secret key.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "project_id",
        "redirect_uris",
        "scopes",
        "grant_types",
        "is_public",
        "access"
      ],
      "type": "object"
    },
    "publicUserInfo": {
      "properties": {
        "avatar": {
          "description": "URL of the user avatar.",
          "type": "string",
          "x-isnullable": true
        },
        "last_login": {
          "description": "Date of the last user login in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
          "type": "string",
          "x-isnullable": false
        },
        "nickname": {
          "description": "User nickname.",
          "type": "string",
          "x-nullable": true
        },
        "registered": {
          "description": "Date of user registration in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
          "type": "string",
          "x-isnullable": false
        },
        "tag": {
          "description": "User tag without \"#\" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call.",
          "type": "string",
          "x-isnullable": true
        },
        "user_id": {
          "description": "The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**.",
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "user_id",
        "registered",
        "last_login"
      ],
      "type": "object"
    },
    "relationship": {
      "example": {
        "next_after": "bmFtZS0ydXNlci0y",
        "next_url": "https://login.xsolla.com/api/users/by_access_key/access-key-1/relationships?type=friend_requests&sort_by=by_name&limit=2&after=bmFtZS0ydXNlci0y",
        "relationships": [
          {
            "status_incoming": "none",
            "status_outgoing": "friend_requested",
            "updated": 1494499214.3501,
            "user": {
              "id": "user-3",
              "name": "name-3",
              "nickname": "nick-2",
              "picture": "",
              "presence": "offline",
              "tag": "423432"
            }
          },
          {
            "status_incoming": "none",
            "status_outgoing": "friend_requested",
            "updated": 1494499213.4718,
            "user": {
              "id": "user-2",
              "name": "name-2",
              "nickname": "nick-2",
              "picture": "",
              "presence": "offline",
              "tag": "3100"
            }
          }
        ]
      },
      "properties": {
        "status_incoming": {
          "description": "Type of the user. Can be:\n  * `none` if there is no action initiated for the user\n  * `friend` if the user is in the friend list of the requested one\n  * `friend_requested` if the friend request is sent to the user by the requested one\n  * `blocked` if the user is blocked by the requested one\n",
          "type": "string"
        },
        "status_outgoing": {
          "description": "Type of the requested user. Can be:\n  * `none` if there is no action initiated for the user\n  * `friend` if the user is in the friend list of the one with the specified JWT\n  * `friend_requested` if the friend request is sent to the user by the one with the specified JWT\n  * `blocked` if the user is blocked by the one with the specified JWT\n",
          "type": "string"
        },
        "updated": {
          "description": "Time passed since the latest action of adding a friend to the friend list or banning them in seconds.",
          "type": "number"
        },
        "user": {
          "description": "User details.",
          "properties": {
            "id": {
              "description": "User ID.",
              "type": "string",
              "x-nullable": false
            },
            "name": {
              "description": "User name in a social network.",
              "type": "string",
              "x-nullable": true
            },
            "nickname": {
              "description": "User nickname.",
              "type": "string",
              "x-nullable": true
            },
            "picture": {
              "description": "Link to the user profile picture.",
              "type": "string",
              "x-nullable": true
            },
            "presence": {
              "description": "User status. Can be `online` and `offline`.\n",
              "type": "string"
            },
            "tag": {
              "description": "User tag without \"#\" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call.",
              "type": "string",
              "x-nullable": true
            }
          },
          "required": [
            "id",
            "nickname",
            "name",
            "presence",
            "picture",
            "tag"
          ],
          "type": "object"
        }
      },
      "required": [
        "status_outgoing",
        "status_incoming",
        "user"
      ],
      "type": "object"
    },
    "respWebhookSettings": {
      "description": "Webhook information.",
      "example": {
        "id": 2342423,
        "url": "https://example.com/hook/second"
      },
      "properties": {
        "id": {
          "description": "Webhook ID.",
          "type": "integer",
          "x-isnullable": false
        },
        "url": {
          "description": "Valid URL to which the Xsolla Login server sends the webhook.",
          "format": "uri",
          "maxLength": 500,
          "type": "string",
          "x-isnullable": false
        }
      },
      "required": [
        "url",
        "id"
      ],
      "type": "object"
    },
    "restriction": {
      "description": "Request body for create restriction",
      "properties": {
        "age": {
          "maximum": 99,
          "minimum": 1,
          "type": "integer"
        },
        "country_code": {
          "description": "Country code in the [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. Use `XX` to update default restrictions for all countries.",
          "pattern": "^[a-zA-Z]{2}$",
          "type": "string"
        },
        "rating_name": {
          "maxLength": 255,
          "type": "string"
        }
      },
      "required": [
        "age",
        "country_code"
      ],
      "type": "object"
    },
    "searchUserInfo": {
      "properties": {
        "offset": {
          "description": "Number of the elements from which the list is generated.",
          "type": "integer",
          "x-isnullable": false
        },
        "total_count": {
          "description": "Total number of users that you can get.",
          "type": "integer",
          "x-isnullable": false
        },
        "users": {
          "description": "List of users’ data.",
          "items": {
            "properties": {
              "avatar": {
                "description": "URL of the user avatar.",
                "type": "string",
                "x-isnullable": true
              },
              "is_me": {
                "description": "Whether the user initiated a search.",
                "type": "boolean",
                "x-nullable": false
              },
              "last_login": {
                "description": "Date of the last user login in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
                "type": "string",
                "x-isnullable": false
              },
              "nickname": {
                "description": "User nickname.",
                "type": "string",
                "x-nullable": false
              },
              "registered": {
                "description": "Date of user registration in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
                "type": "string",
                "x-isnullable": false
              },
              "tag": {
                "description": "User tag without \"#\" at the beginning. Can have no unique value.",
                "type": "string",
                "x-isnullable": true
              },
              "user_id": {
                "description": "The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**.",
                "type": "string",
                "x-isnullable": false
              }
            },
            "required": [
              "user_id",
              "nickname",
              "is_me",
              "registered",
              "last_login"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "users",
        "offset",
        "total_count"
      ],
      "type": "object"
    },
    "searchUserInfoLite": {
      "description": "List of users’ basic data.",
      "items": {
        "properties": {
          "avatar": {
            "description": "URL of the user avatar.",
            "type": "string",
            "x-isnullable": true
          },
          "name": {
            "description": "User name.",
            "type": "string",
            "x-nullable": true
          },
          "user_id": {
            "description": "The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**.",
            "type": "string",
            "x-isnullable": false
          }
        },
        "required": [
          "user_id",
          "name",
          "avatar"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "serverAttribute": {
      "properties": {
        "attr_type": {
          "default": "client",
          "description": "Definition of user’s access level to service attributes:\n  * `client` - A user-editable attribute. The values for this type of attributes are entered by a user or specified according to the in-game logics on the client side. For example, the name and character stats, game difficulty level, etc.\n  * `server` - A read-only attribute. The values for this type of attributes are entered and edited on the server side of your application. We recommend that you use them for configuration of game character stats or user parameters that shouldn’t change regularly. For example, chance to get a bonus, game character key parameters, user categories, etc.\n",
          "enum": [
            "client",
            "server"
          ],
          "type": "string",
          "x-nullable": false
        },
        "data_type": {
          "description": "Data type of attribute",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ],
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "description": "Description of attribute from JSON Schema.",
          "type": "string",
          "x-nullable": true
        },
        "format": {
          "description": "Format of attribute from JSON Schema. Can be `date-time`, `date`, `time`, `duration`, `email`, `uri`, `uuid` or other from JSON Schema [specification](https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.7.3)",
          "type": "string",
          "x-nullable": true
        },
        "key": {
          "description": "Name of attribute that is used to identify user’s attribute. Must be unique per user.",
          "maxLength": 256,
          "pattern": "[A-Za-z0-9_]+",
          "type": "string",
          "x-nullable": false
        },
        "permission": {
          "description": "Definition of user’s access level to other users’ attributes.",
          "enum": [
            "public",
            "private"
          ],
          "type": "string",
          "x-nullable": true
        },
        "value": {
          "description": "Value of user’s attribute.",
          "maxLength": 256,
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "shippingAddress": {
      "description": "Shipping address.",
      "properties": {
        "address_line1": {
          "description": "Address line 1.",
          "type": "string"
        },
        "address_line2": {
          "description": "Address line 2.",
          "type": "string"
        },
        "administrative_area": {
          "description": "Administrative district.",
          "type": "string"
        },
        "carrier_facility": {
          "type": "string"
        },
        "comment": {
          "description": "Delivery comment.",
          "type": "string"
        },
        "company": {
          "description": "Receiver company.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "country_iso": {
          "description": "ISO coutry code.",
          "type": "string"
        },
        "email": {
          "description": "Receiver email.",
          "type": "string"
        },
        "first_name": {
          "description": "Receiver first name.",
          "type": "string"
        },
        "is_primary": {
          "description": "Whether the address is main. Can be `1` or `0`.\n",
          "type": "integer"
        },
        "last_name": {
          "description": "Receiver last name.",
          "type": "string"
        },
        "locality": {
          "description": "Locality.",
          "type": "string"
        },
        "phone": {
          "description": "Contact phone number in the [national convention](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers) format.",
          "type": "string"
        },
        "room": {
          "description": "Number of the room.",
          "type": "string"
        },
        "zip": {
          "description": "ZIP code.",
          "type": "string"
        }
      },
      "required": [
        "locality",
        "address_line1",
        "zip",
        "country",
        "first_name"
      ],
      "type": "object"
    },
    "socialAuthUrl": {
      "properties": {
        "auth_url": {
          "description": "Link for authentication via the social network.",
          "type": "string"
        },
        "provider": {
          "description": "Name of the social network.",
          "type": "string"
        }
      },
      "required": [
        "provider",
        "auth_url"
      ],
      "type": "object"
    },
    "socialFriendsResponse200": {
      "properties": {
        "data": {
          "description": "List of data from social friends accounts.",
          "items": {
            "properties": {
              "avatar": {
                "description": "Friend’s avatar from a social provider.",
                "type": "string",
                "x-isnullable": true
              },
              "name": {
                "description": "Friend’s name from a social provider.",
                "type": "string",
                "x-isnullable": false
              },
              "platform": {
                "description": "Name of a social provider.",
                "type": "string",
                "x-nullable": false
              },
              "tag": {
                "description": "User tag without \"#\" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call.",
                "type": "string",
                "x-isnullable": true
              },
              "user_id": {
                "description": "User ID from a social provider.",
                "type": "string",
                "x-nullable": false
              },
              "xl_uid": {
                "description": "The Xsolla Login user ID. You can find it in [Publisher Account](https://publisher.xsolla.com/) > your Login project > **Users** > **Username/ID**.",
                "type": "string",
                "x-isnullable": true
              }
            },
            "required": [
              "name",
              "platform",
              "user_id"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "limit": {
          "description": "Maximum number of friends that are returned at a time.",
          "type": "integer",
          "x-isnullable": false
        },
        "offset": {
          "description": "Number of the elements from which the list is generated.",
          "type": "integer",
          "x-isnullable": false
        },
        "platform": {
          "description": "Name of a social provider.",
          "type": "string",
          "x-isnullable": true
        },
        "total_count": {
          "description": "Total number of friends that you can get.",
          "type": "integer",
          "x-isnullable": false
        },
        "with_xl_uid": {
          "description": "Shows whether the social friends are from your game.",
          "type": "boolean",
          "x-isnullable": false
        }
      },
      "required": [
        "limit",
        "offset",
        "total_count"
      ],
      "type": "object"
    },
    "socialProvider": {
      "properties": {
        "full_name": {
          "description": "User name in a social network.",
          "type": "string",
          "x-nullable": true
        },
        "nickname": {
          "description": "User nickname in a social network.",
          "type": "string",
          "x-nullable": true
        },
        "picture": {
          "description": "Link to the user profile picture in a social network.",
          "type": "string",
          "x-nullable": true
        },
        "provider": {
          "description": "Name of a social network connected to Login in Publisher Account.",
          "type": "string",
          "x-nullable": false
        },
        "social_id": {
          "description": "User ID in a social network.",
          "type": "string",
          "x-nullable": false
        }
      },
      "required": [
        "provider",
        "full_name",
        "social_id",
        "picture",
        "nickname"
      ],
      "type": "object"
    },
    "socialProviderCustomSettings": {
      "description": "Settings for thin tune provider",
      "properties": {
        "auth_content_type": {
          "description": "Custom Content-Type for call url_resource_owner_details",
          "type": "string",
          "x-nullable": true
        },
        "auth_header": {
          "default": "Authorization",
          "description": "Authorization header name",
          "type": "string",
          "x-nullable": true
        },
        "auth_param": {
          "default": "access_token",
          "description": "Authorization query-param name (used at url_resource_owner_details). Use it if identity provider wants authorization at query-params",
          "type": "string",
          "x-nullable": true
        },
        "token_type": {
          "default": "Bearer",
          "description": "Type oauth2, eg. OAuth or Bearer",
          "type": "string",
          "x-nullable": true
        },
        "use_pkce": {
          "default": false,
          "description": "Use PKCE",
          "type": "boolean",
          "x-nullable": true
        }
      },
      "type": "object"
    },
    "socialRelationship": {
      "description": "Details about friends from linked social networks.",
      "properties": {
        "avatar": {
          "description": "CDN link with the user avatar.",
          "type": "number"
        },
        "name": {
          "description": "User name.",
          "type": "string"
        },
        "provider": {
          "description": "Name of the social network where the user is added to friends.",
          "type": "string"
        },
        "user_id": {
          "description": "User ID.",
          "format": "uuid",
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "name",
        "avatar",
        "provider"
      ],
      "type": "object"
    },
    "targetAttribute": {
      "description": "Attribute is used to get users’ list.",
      "properties": {
        "key": {
          "description": "Name of attribute that is used to identify user’s attribute. Must be unique per user.",
          "maxLength": 256,
          "pattern": "[A-Za-z0-9_]+",
          "type": "string",
          "x-nullable": false
        },
        "value": {
          "description": "Value of user’s attribute. Needed for getting users with the `key` parameter with this value. If you do not specify it, it returns all users with any value for this key.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "user": {
      "description": "Defenition of user object",
      "properties": {
        "ban": {
          "description": "User ban definition",
          "properties": {
            "date_from": {
              "type": "string"
            },
            "date_to": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "date_from",
            "date_to",
            "reason"
          ],
          "type": "object",
          "x-isnullable": true
        },
        "email": {
          "type": "string",
          "x-isnullable": true
        },
        "external_id": {
          "description": "External user ID",
          "type": "string",
          "x-isnullable": true
        },
        "first_name": {
          "description": "User first name",
          "type": "string",
          "x-isnullable": true
        },
        "groups": {
          "description": "List of groups the user belongs to",
          "items": {
            "description": "User group",
            "properties": {
              "id": {
                "description": "User group ID",
                "type": "integer"
              },
              "is_default": {
                "description": "Flag whether the group is the default group",
                "type": "boolean"
              },
              "is_deletable": {
                "description": "Flag whether the group can be deleted",
                "type": "boolean"
              },
              "name": {
                "description": "User group name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "description": "ID of user",
          "format": "UUID",
          "type": "string"
        },
        "is_anonymous": {
          "description": "???",
          "type": "boolean"
        },
        "is_last_email_confirmed": {
          "description": "Whether a user comfirmed their email address. If `true`, the email address is confirmed.",
          "type": "boolean"
        },
        "is_user_active": {
          "description": "???",
          "type": "boolean"
        },
        "last_login": {
          "type": "string",
          "x-isnullable": true
        },
        "last_name": {
          "description": "User last name",
          "type": "string",
          "x-isnullable": true
        },
        "name": {
          "description": "User name",
          "type": "string",
          "x-isnullable": true
        },
        "nickname": {
          "description": "User nickname",
          "type": "string",
          "x-isnullable": true
        },
        "phone_auth": {
          "x-isnullable": true
        },
        "picture": {
          "x-isnullable": true
        },
        "project_id": {
          "description": "ID of project assigned with user",
          "format": "UUID",
          "type": "string"
        },
        "registered": {
          "description": "Date of registration",
          "type": "string"
        },
        "server_custom_id": {
          "description": "User server_custom_id",
          "type": "string",
          "x-isnullable": true
        },
        "username": {
          "description": "???",
          "type": "string"
        }
      },
      "required": [
        "id",
        "last_login",
        "username",
        "picture",
        "phone_auth",
        "external_id",
        "registered",
        "groups",
        "is_user_active",
        "ban",
        "is_last_email_confirmed",
        "server_custom_id"
      ]
    },
    "userEmail": {
      "description": "Defenition of user_email object",
      "properties": {
        "email": {
          "type": "string",
          "x-isnullable": false
        },
        "is_last_used": {
          "type": "boolean",
          "x-isnullable": false
        },
        "is_primary": {
          "type": "boolean",
          "x-isnullable": false
        }
      },
      "required": [
        "email",
        "is_primary",
        "is_last_used"
      ]
    },
    "userInfo": {
      "description": "User details.",
      "properties": {
        "ban": {
          "description": "Details of the user ban. The value is `null` for the users not from the ban list.",
          "properties": {
            "date_from": {
              "description": "Date when the user was banned in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
              "type": "string"
            },
            "date_to": {
              "description": "Date until the user remains banned in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
              "type": "string"
            },
            "reason": {
              "description": "Reason the user ban.",
              "type": "string"
            }
          },
          "required": [
            "date_from",
            "date_to"
          ],
          "type": "object",
          "x-nullable": true
        },
        "birthday": {
          "description": "User birth date in the `YYYY-MM-DD` format.",
          "type": "string",
          "x-nullable": true
        },
        "connection_information": {
          "description": "User birth date confirmed by [okname](https://www.ok-name.co.kr/). For Korean users only.",
          "type": "string",
          "x-nullable": true
        },
        "country": {
          "description": "User country.",
          "type": "string",
          "x-nullable": true
        },
        "devices": {
          "items": {
            "properties": {
              "device": {
                "description": "Manufacturer and model name of the device.",
                "type": "string",
                "x-isnullable": false
              },
              "id": {
                "description": "Device ID generated by the Xsolla Login server. It **is not** the same as the `device_id` parameter from the Auth via device ID ([JWT](https://developers.xsolla.com/api/login/operation/jwt-auth-via-device-id) and [OAuth 2.0](https://developers.xsolla.com/api/login/operation/oauth-20-auth-via-device-id)) call.",
                "type": "integer",
                "x-isnullable": false
              },
              "last_used_at": {
                "description": "Date and time of the last user login via the device in the [RFC3339 format](https://www.ietf.org/rfc/rfc3339.txt).",
                "type": "string",
                "x-isnullable": false
              },
              "type": {
                "description": "Type of the device.",
                "enum": [
                  "android",
                  "ios"
                ],
                "type": "string",
                "x-isnullable": false
              }
            },
            "required": [
              "id",
              "type",
              "device",
              "last_used_at"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "email": {
          "description": "User email address.",
          "type": "string",
          "x-nullable": true
        },
        "external_id": {
          "description": "ID of the user in your game. To use the ID from your game, link the IDs by the [Link user IDs via external ID](https://developers.xsolla.com/api/login/operation/link-user-ids-via-external-id) call.",
          "type": "string",
          "x-nullable": true
        },
        "first_name": {
          "description": "User first name.",
          "type": "string",
          "x-nullable": true
        },
        "gender": {
          "description": "User gender. Can be:\n* `f` for female\n* `m` for male\n* `other`\n* `prefer not to answer`\n",
          "enum": [
            "f",
            "m",
            "other",
            "prefer not to answer"
          ],
          "type": "string",
          "x-nullable": true
        },
        "groups": {
          "description": "Details about the groups the user was added to.",
          "items": {
            "properties": {
              "id": {
                "description": "Group ID.",
                "type": "integer"
              },
              "is_default": {
                "description": "Shows whether the group is default or not.",
                "type": "boolean"
              },
              "is_deletable": {
                "description": "Shows whether the group can be deleted or not. Default groups can’t be deleted.",
                "type": "boolean"
              },
              "name": {
                "description": "Group name.",
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "is_default",
              "is_deletable"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "id": {
          "description": "User ID.",
          "type": "string",
          "x-nullable": false
        },
        "is_anonymous": {
          "description": "Shows whether the user is anonymous or not. The anonymous user is a user created via device ID or custom ID and doesn’t have an alternative authentication method added (e.g., username/email and password).",
          "type": "boolean"
        },
        "is_last_email_confirmed": {
          "type": "boolean",
          "x-nullable": true
        },
        "is_user_active": {
          "type": "boolean",
          "x-nullable": false
        },
        "last_login": {
          "description": "Date of the last user login in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
          "type": "string",
          "x-nullable": false
        },
        "last_name": {
          "description": "User last name.",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "description": "User name in a social network.",
          "type": "string",
          "x-nullable": true
        },
        "nickname": {
          "description": "User nickname.",
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used only for passing the two-factor authentication.",
          "type": "string",
          "x-nullable": true
        },
        "phone_auth": {
          "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used to authenticate the user.",
          "type": "string",
          "x-nullable": true
        },
        "picture": {
          "description": "Link to the user profile picture.",
          "type": "string",
          "x-nullable": true
        },
        "registered": {
          "description": "Date of user registration in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
          "type": "string",
          "x-nullable": false
        },
        "tag": {
          "description": "User tag without \"#\" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "Username.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "username",
        "nickname",
        "name",
        "tag",
        "picture",
        "birthday",
        "first_name",
        "last_name",
        "gender",
        "email",
        "phone",
        "phone_auth",
        "groups",
        "registered",
        "external_id",
        "last_login",
        "ban",
        "country",
        "connection_information",
        "is_anonymous",
        "devices",
        "is_last_email_confirmed",
        "is_user_active"
      ],
      "type": "object"
    },
    "userResponseItem": {
      "description": "User details.",
      "properties": {
        "birthday": {
          "description": "User birth date in the `YYYY-MM-DD` format.",
          "type": "string",
          "x-nullable": true
        },
        "email": {
          "description": "User email address.",
          "type": "string",
          "x-nullable": true
        },
        "external_id": {
          "description": "ID of the user in your game. To use the ID from your game, link the IDs by the [Link user IDs via external ID](https://developers.xsolla.com/api/login/operation/link-user-ids-via-external-id) call.",
          "type": "string",
          "x-nullable": true
        },
        "first_name": {
          "description": "User first name.",
          "type": "string",
          "x-nullable": true
        },
        "gender": {
          "description": "User gender. Can be:\n* `f` for female\n* `m` for male\n* `other`\n* `prefer not to answer`\n",
          "enum": [
            "f",
            "m",
            "other",
            "prefer not to answer"
          ],
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "User ID.",
          "type": "string",
          "x-nullable": false
        },
        "is_anonymous": {
          "description": "Shows whether the user is anonymous or not. The anonymous user is a user created via device ID or custom ID and doesn’t have an alternative authentication method added (e.g., username/email and password).",
          "type": "boolean"
        },
        "last_login": {
          "description": "Date of the last user login in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
          "type": "string",
          "x-nullable": false
        },
        "last_name": {
          "description": "User last name.",
          "type": "string",
          "x-nullable": true
        },
        "nickname": {
          "description": "User nickname.",
          "type": "string",
          "x-nullable": true
        },
        "phone": {
          "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used only for passing the two-factor authentication. Returned only if the `phone` field is specified.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "phone_auth": {
          "description": "User phone number according to [national conventions](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers). This phone number is used to authenticate the user. Returned only if the `phone_auth` field is specified.",
          "type": "string",
          "x-nullable": true,
          "x-omitempty": true
        },
        "picture": {
          "description": "Link to the user profile picture.",
          "type": "string",
          "x-nullable": true
        },
        "registered": {
          "description": "Date of user registration in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
          "type": "string",
          "x-nullable": false
        },
        "tag": {
          "description": "User tag without \"#\" at the beginning. Can have no unique value and can be used in the [Search users by nickname](https://developers.xsolla.com/api/login/operation/search-users-by-nickname) call.",
          "type": "string",
          "x-nullable": true
        },
        "username": {
          "description": "User username.",
          "type": "string",
          "x-nullable": true
        }
      },
      "required": [
        "id",
        "username",
        "nickname",
        "picture",
        "birthday",
        "first_name",
        "last_name",
        "gender",
        "email",
        "registered",
        "external_id",
        "last_login",
        "tag"
      ],
      "type": "object"
    },
    "whitelist": {
      "properties": {
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "domain": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "number"
        },
        "project_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "whitelistRequestBody": {
      "properties": {
        "domain": {
          "maxLength": 255,
          "minLength": 5,
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "APIKey": {
      "description": "access key from JWT user token",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "AttributesBearer": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "AttributesServer": {
      "description": "[Server token authorization](/api/login/overview/#section/Authentication/Getting-a-server-token).",
      "in": "header",
      "name": "X-SERVER-AUTHORIZATION",
      "type": "apiKey"
    },
    "Bearer": {
      "description": "Bearer authentication. ```Bearer <JWT>```.",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "BearerCallback": {
      "description": "Bearer authentication. ```Bearer <JWT>```.",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "ExternalBearer": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "Server": {
      "description": "[Server token authorization](/api/login/overview/#section/Authentication/Getting-a-server-token).",
      "in": "header",
      "name": "X-SERVER-AUTHORIZATION",
      "type": "apiKey"
    }
  },
  "x-tagGroups": [
    {
      "name": "AUTHENTICATION",
      "tags": [
        "confirmation",
        "jwt",
        "oauth 2.0"
      ]
    },
    {
      "name": "PASSWORDS",
      "tags": [
        "resetting"
      ]
    },
    {
      "name": "EMAILS",
      "tags": [
        "emails - oauth 2.0",
        "emails - jwt",
        "custom email templates"
      ]
    },
    {
      "name": "LINKING ACCOUNTS",
      "tags": [
        "linking"
      ]
    },
    {
      "name": "ATTRIBUTES",
      "tags": [
        "client",
        "server"
      ]
    },
    {
      "name": "USER ACCOUNT",
      "tags": [
        "server side",
        "devices",
        "mfa",
        "user profile",
        "user friends",
        "social networks",
        "age restrictions",
        "user groups"
      ]
    },
    {
      "name": "USER DATABASE",
      "tags": [
        "bulk user management"
      ]
    },
    {
      "name": "PROJECTS",
      "tags": [
        "rsa",
        "webhooks",
        "settings"
      ]
    }
  ]
}