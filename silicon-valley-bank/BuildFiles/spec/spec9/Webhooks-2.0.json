{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0",
    "title": "Webhooks API - Public",
    "contact": {
      "name": "API Support",
      "url": "https://developer.svb.com/contact"
    },
    "description": "The Event object represents a change of state to an api object. Each event type will have a specialized schema to best describe the changes to the object.The Subscriptions object represents information on how to communicate to an api user about useful api events. Allowing the api to contact the api user, bypassing the need of constant polling by the api user."
  },
  "x-tagGroups": [
    {
      "name": "Core Resources",
      "tags": [
        "Events",
        "Event Types",
        "Publishers",
        "Subscriptions"
      ]
    }
  ],
  "tags": [
    {
      "name": "Subscriptions",
      "description": "The Subscription object represents information on how to communicate to an api user about useful api events"
    },
    {
      "name": "Publishers",
      "description": "The publisher object"
    },
    {
      "name": "Events",
      "description": "The events object"
    },
    {
      "name": "Event Types",
      "description": "The event types object"
    }
  ],
  "paths": {
    "/v2/event/event-types": {
      "get": {
        "tags": [
          "Event Types"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "summary": "List all Event Types",
        "description": "Call this endpoint to receive a list of event types.",
        "operationId": "GetEventTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_types"
                },
                "examples": {
                  "event_types_example": {
                    "$ref": "#/components/examples/event_types_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/event-types/{event_type_id}": {
      "get": {
        "tags": [
          "Event Types"
        ],
        "summary": "Retrieve an Event-Type",
        "description": "Call this endpoint to retrieve a particular event type by id.",
        "operationId": "GetEventType",
        "parameters": [
          {
            "description": "Id of event type to be retrieved",
            "in": "path",
            "name": "event_type_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_type_response"
                },
                "examples": {
                  "event_type_example": {
                    "$ref": "#/components/examples/event_type_response_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/events/{event_id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "description": "Call this endpoint to retrieve an event.",
        "summary": "Retrieve an Event",
        "operationId": "GetEvent",
        "parameters": [
          {
            "description": "Id of event to be retrieved",
            "in": "path",
            "name": "event_id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event_response"
                },
                "examples": {
                  "event_response_example": {
                    "$ref": "#/components/examples/event_response_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "description": "Call this endpoint to get a list of all events",
        "summary": "List all Events",
        "operationId": "GetEvents",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                },
                "examples": {
                  "events_example": {
                    "$ref": "#/components/examples/events_example"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/publishers/{publisher_id}": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "description": "Call this endpoint to retrieve a publisher.",
        "summary": "Retrieve a Publisher",
        "operationId": "GetPublisher",
        "parameters": [
          {
            "$ref": "#/components/parameters/publisher_id"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publisher_response"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/publishers": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "description": "Call this endpoint to get a list of all publishers",
        "summary": "List all Publishers",
        "operationId": "GetAllPublishers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publishers_list"
                },
                "examples": {
                  "publishers_list_example": {
                    "$ref": "#/components/examples/publishers_list_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a Subscription",
        "description": "Call this endpoint to create a new subscription. When an event is triggered, then the callback URL will receive a POST of the event if there is an active subscription for that event type. Callback urls must be unique.",
        "operationId": "CreateSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/requestIdHeader"
          },
          {
            "$ref": "#/components/parameters/jwsSecurityHeader"
          }
        ],
        "callbacks": {
          "event": {
            "{$request.body#/callback_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/webhook_callback"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription_base"
              },
              "examples": {
                "createSubscriptionRequest": {
                  "$ref": "#/components/examples/subscription_request_example"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_response"
                },
                "examples": {
                  "subscription": {
                    "$ref": "#/components/examples/subscription_response_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "description": "Call this endpoint to get a list of all created subscriptions. ",
        "summary": "List all Subscriptions",
        "operationId": "GetSubscriptions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriptions_list"
                },
                "examples": {
                  "subscriptions": {
                    "$ref": "#/components/examples/subscription_list_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/subscriptions/{subscription_id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "description": "Call this endpoint to retrieve a specific subscription by its id.",
        "summary": "Retrieve a Subscription",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_response"
                },
                "examples": {
                  "subscription": {
                    "$ref": "#/components/examples/subscription_response_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update a Subscription",
        "description": "Call this endpoint to update a subscription. Fields that are read-only can not be updated.",
        "operationId": "PatchSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patch_request"
              },
              "examples": {
                "patch_status": {
                  "$ref": "#/components/examples/subscription_patch_replace_status_example"
                },
                "patch_callback_url": {
                  "$ref": "#/components/examples/subscription_patch_replace_callback_url_example"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v2/event/subscriptions/{subscription_id}/test": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/subscription_id"
          },
          {
            "$ref": "#/components/parameters/requestIdHeader"
          }
        ],
        "description": "Call this endpoint to manually trigger a subscription for testing purposes. Both active and inactive subscriptions can be tested this way. The event type of the event send will be 0 to indicate testing data.",
        "summary": "Test a Subscription",
        "operationId": "TestSubscription",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_test_response"
                },
                "examples": {
                  "subscription_test_response_example": {
                    "$ref": "#/components/examples/subscription_test_response_example"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "publisher_id": {
        "description": "The unique identifier of the publisher",
        "in": "path",
        "name": "publisher_id",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "subscription_id": {
        "description": "Id of subscription to be tested",
        "in": "path",
        "name": "subscription_id",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "requestIdHeader": {
        "in": "header",
        "name": "x-svb-request-id",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "jwsSecurityHeader": {
        "in": "header",
        "name": "x-jws-signature",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "name": "offset",
        "description": "Non-zero, non-negative page number of elements to return. Offset/limit combinations that exceed available data will return an empty list.",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "limit": {
        "name": "limit",
        "description": "Non-zero, non-negative integer to indicate the number of records to return in one page of results. Defaults to 1000 with maximum 10000.",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10000,
          "default": 1000
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "401": {
        "description": "Authorization information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "500": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      }
    },
    "examples": {
      "subscription_patch_replace_status_example": {
        "summary": "Example to update subscription status",
        "value": [
          {
            "op": "replace",
            "path": "/status",
            "value": "CANCELED"
          }
        ]
      },
      "subscription_patch_replace_callback_url_example": {
        "summary": "Example to update callback url",
        "value": [
          {
            "op": "replace",
            "path": "/status",
            "value": "https://svb.com"
          }
        ]
      },
      "event_types_example": {
        "summary": "Example event types list",
        "value": {
          "items": [
            {
              "event_type_id": "9a12cfc0-0458-11ec-b25c-acde48001122",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            },
            {
              "event_type_id": "7e1dcfa2-1464-22ec-a25c-acde48001122",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/7e1dcfa2-1464-22ec-a25c-acde48001122",
                  "rel": "self"
                }
              ]
            },
            {
              "event_type_id": "db902af6-05de-11ec-ab3d-005056a41807",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/b375470e-05de-11ec-ab3d-005056a41807",
                  "rel": "get"
                }
              ]
            },
            {
              "event_type_id": "b375470e-05de-11ec-ab3d-005056a41807",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/b375470e-05de-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "event_type_id": "30d0ef64-05df-11ec-ab3d-005056a41807",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/30d0ef64-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "event_type_id": "db902af6-05de-11ec-ab3d-005056a41807",
              "name": "vcn.clearing",
              "status": "ACTIVE",
              "schema": {},
              "version": "1.0",
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/event_types/db902af6-05de-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            }
          ],
          "total_items": 10,
          "total_pages": 12,
          "links": [
            {
              "href": "/v1/event_types?limit=50",
              "rel": "first",
              "method": "GET"
            },
            {
              "href": "https://api.svb.com/v1/event/event_types?offset=5&limit=50",
              "rel": "next",
              "method": "GET"
            }
          ]
        }
      },
      "publishers_list_example": {
        "summary": "Example event types list",
        "value": {
          "items": [
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            },
            {
              "publisher_id": "3d3843ce-05df-11ec-ab3d-005056a41807",
              "name": "virtualcard",
              "description": "Microservice to facilitate Mastercard's virtualcard operations",
              "links": [
                {
                  "href": "https://api.svb.com/v1/publishers/3d3843ce-05df-11ec-ab3d-005056a41807",
                  "rel": "self"
                }
              ]
            }
          ],
          "total_items": 10,
          "total_pages": 12,
          "links": [
            {
              "href": "/v1/event_types?limit=50",
              "rel": "first",
              "method": "GET"
            },
            {
              "href": "https://api.svb.com/v1/event/publishers?offset=5&limit=50",
              "rel": "next",
              "method": "GET"
            }
          ]
        }
      },
      "event_response_example": {
        "summary": "An example of an event",
        "value": {
          "event_id": "0e8f9524-05dd-11ec-ab3d-005056a41807",
          "event_type_name": "ach.status",
          "payload": {
            "id": "201",
            "status": "failed"
          },
          "data": {
            "id": "201",
            "status": "failed"
          },
          "status": "PROCESSING",
          "cif": "018295241",
          "links": [
            {
              "href": "https://api.svb.com/v1/event/events/0e8f9524-05dd-11ec-ab3d-005056a41807",
              "rel": "self"
            }
          ],
          "created_at": "2021-03-20T09:12:28Z"
        }
      },
      "events_example": {
        "summary": "An example of a list of events",
        "value": {
          "items": [
            {
              "event_id": "9a12cfc0-0458-11ec-b25c-acde48001122",
              "publisher_name": "ach",
              "event_type": "all",
              "data": {
                "id": "201",
                "status": "failed"
              },
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/events/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            },
            {
              "event_id": "9a12cfc0-0458-11ec-b25c-acde48001122",
              "publisher_name": "ach",
              "event_type": "all",
              "data": {
                "id": "201",
                "status": "failed"
              },
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/events/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            },
            {
              "event_id": "9a12cfc0-0458-11ec-b25c-acde48001122",
              "publisher_name": "vcn",
              "event_type": "all",
              "data": {
                "id": "201",
                "status": "created"
              },
              "links": [
                {
                  "href": "https://api.svb.com/v1/event/events/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            }
          ],
          "total_items": 10,
          "total_pages": 12,
          "links": [
            {
              "href": "https://api.svb.com/v1/event/events?limit=50",
              "rel": "first",
              "method": "GET"
            },
            {
              "href": "https://api.svb.com/v1/event/events?offset=5&limit=50",
              "rel": "next",
              "method": "GET"
            }
          ]
        }
      },
      "subscription_response_example": {
        "value": {
          "subscription_id": "740a4ea2-0458-11ec-ab3d-005056a41807",
          "event_type_names": [
            "ach.status"
          ],
          "status": "ACTIVE",
          "callback_url": "https://www.somewhere.com/svb-subscriptions"
        }
      },
      "subscription_request_example": {
        "value": {
          "callback_url": "https://www.somewhere.com/svb-subscriptions",
          "client_secret_key": "9a12cfc0-0458-11ec-b25c-acde48001124",
          "event_type_names": [
            "vcn.clearings"
          ],
          "status": "ACTIVE"
        }
      },
      "subscription_list_example": {
        "value": {
          "items": [
            {
              "subscription_id": "9a12cfc0-0458-11ec-b25c-acde48001124",
              "event_type_names": [
                "vcn.clearings"
              ],
              "status": "ACTIVE",
              "callback_url": "https://www.somewhere.com/svb-subscriptions",
              "links": [
                {
                  "href": "https://api.svb.com/v1/subscriptions/9a12cfc0-0458-11ec-b25c-acde48001124",
                  "rel": "self"
                }
              ]
            },
            {
              "subscription_id": "9a12cfc0-0458-11ec-b25c-acde48001124",
              "event_type_names": [
                "vcn.clearings"
              ],
              "status": "ACTIVE",
              "callback_url": "https://www.somewhere.com/svb-subscriptions",
              "links": [
                {
                  "href": "https://api.svb.com/v1/subscriptions/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            },
            {
              "subscription_id": "9a12cfc0-0458-11ec-b25c-acde48001124",
              "event_type_names": [
                "vcn.clearings"
              ],
              "status": "ACTIVE",
              "callback_url": "https://www.somewhere.com/svb-subscriptions",
              "links": [
                {
                  "href": "https://api.svb.com/v1/subscriptions/9a12cfc0-0458-11ec-b25c-acde48001122",
                  "rel": "self"
                }
              ]
            }
          ],
          "total_items": 10,
          "total_pages": 12,
          "links": [
            {
              "href": "https://api.svb.com/v1/subscriptions?limit=50",
              "rel": "first",
              "method": "GET"
            },
            {
              "href": "https://api.svb.com/v1/subscriptions?offset=5&limit=50",
              "rel": "next",
              "method": "GET"
            }
          ]
        }
      },
      "subscription_test_response_example": {
        "value": {
          "data": {
            "status": "200"
          }
        }
      },
      "event_type_response_example": {
        "value": {
          "event_type_id": "9a12cfc0-0458-11ec-b25c-acde48001122",
          "name": "vcn.clearing",
          "schema": {},
          "version": "1.0",
          "status": "ACTIVE",
          "links": [
            {
              "href": "https://api.svb.com/v1/event/event-types/9a12cfc0-0458-11ec-b25c-acde48001122",
              "rel": "self"
            }
          ]
        }
      }
    },
    "schemas": {
      "webhook_callback": {
        "allOf": [
          {
            "$ref": "#/components/schemas/cloudevent_spec"
          },
          {
            "$ref": "#/components/schemas/cloudevent_svb_spec"
          },
          {
            "$ref": "#/components/schemas/cloudevent_deadletter_spec"
          }
        ]
      },
      "event_types": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event_type_response"
            }
          },
          "total_items": {
            "type": "integer",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          }
        }
      },
      "event_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/event"
          },
          {
            "$ref": "#/components/schemas/event_base"
          }
        ]
      },
      "events": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "total_items": {
            "type": "integer",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          }
        }
      },
      "event_type_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/event_type_base"
          },
          {
            "$ref": "#/components/schemas/event_type"
          }
        ]
      },
      "publisher_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/publisher_base"
          },
          {
            "$ref": "#/components/schemas/publisher"
          }
        ]
      },
      "publishers_list": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/publisher_response"
            }
          },
          "total_items": {
            "type": "integer",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          }
        }
      },
      "subscription_request": {
        "$ref": "#/components/schemas/subscription_base"
      },
      "subscription_response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/subscription_base"
          },
          {
            "$ref": "#/components/schemas/subscription"
          }
        ]
      },
      "subscriptions_list": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subscription_response"
            }
          },
          "total_items": {
            "type": "integer",
            "description": "Total number of items"
          },
          "total_pages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          }
        }
      },
      "subscription_test_response": {
        "type": "object"
      },
      "event_type_name": {
        "type": "string",
        "description": "The type string for the event. In the form [publisher_name].[distinct_name]",
        "minLength": 10,
        "maxLength": 400,
        "pattern": "^[a-z]+(_[a-z]+)*\\.[a-z]+(_[a-z]+)*$"
      },
      "event_type_base": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "object",
            "description": "JSON Schema of the event type. Will be used to validate the events."
          },
          "name": {
            "$ref": "#/components/schemas/event_type_name"
          },
          "version": {
            "type": "string",
            "description": "Version of the event type",
            "pattern": "^[0-9]+\\.[0-9]+$",
            "minLength": 3,
            "maxLength": 50
          }
        },
        "required": [
          "schema",
          "name",
          "version"
        ]
      },
      "link_description": {
        "title": "Link Description Object (JSON Schema)",
        "type": "object",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",
            "type": "string"
          },
          "rel": {
            "description": "relation to the target resource of the link",
            "type": "string"
          },
          "title": {
            "description": "a title for the link",
            "type": "string"
          },
          "media_type": {
            "description": "media type (as defined by RFC 2046) describing the link target",
            "type": "string"
          },
          "method": {
            "description": "method for requesting the target of the link (e.g. for HTTP this might be \"GET\" or \"DELETE\")",
            "type": "string"
          },
          "enc_type": {
            "description": "The media type in which to submit data along with the request",
            "type": "string",
            "default": "application/json"
          }
        }
      },
      "event_type": {
        "type": "object",
        "properties": {
          "event_type_id": {
            "type": "string",
            "description": "Unique ID for the event type",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Status of the event types.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "default": "ACTIVE"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "created timestamp",
            "readOnly": true
          }
        }
      },
      "error_instance": {
        "type": "object",
        "title": "Error Instance Details",
        "description": "Error instance details.",
        "properties": {
          "keyword_location": {
            "type": "string",
            "description": "Location of keyword entity involved in error. If the keyword is in the body, set this value to the JSON pointer to the property. Required for client-side errors."
          },
          "instance_location": {
            "type": "string",
            "description": "The location of the error instance if qualification is needed beyond the keyword location. Could be used to provide index of entry in array."
          },
          "instance_value": {
            "type": "string",
            "description": "The value of the keyword entity in error, if available."
          },
          "in": {
            "type": "string",
            "description": "The location of the type of object that is in error. Valid values are `body`, `header`, `path`, or `query`. Default is `body`."
          },
          "message": {
            "type": "string",
            "description": "Error message for entity in error. It is recommended that this value is not hardcoded but instead injected from relevant entry in the error catalog. Error catalog could use templatized string."
          },
          "link": {
            "description": "Link providing more information related to this error instance.",
            "$ref": "#/components/schemas/link_description"
          }
        },
        "required": [
          "in",
          "message"
        ]
      },
      "error": {
        "type": "object",
        "title": "Error object to convey error condition for response/message",
        "description": "Error object that could be streamed out in response/message as a solitary object. This object could contain one or more error instances.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human readable, unique name of the error. It is recommended that this value is not hardcoded but instead injected in error response from relevant entry in the error catalog."
          },
          "id": {
            "type": "string",
            "description": "A unique reference for the error instance for correlation purposes. "
          },
          "message": {
            "type": "string",
            "description": "Message describing the error. It is recommended that this value is not hardcoded but instead injected in error response from relevant entry in the error catalog. Error catalog could use templatized string."
          },
          "errors": {
            "type": "array",
            "description": "Additional details for error instances. Mandatory for client side 4xx errors.",
            "items": {
              "$ref": "#/components/schemas/error_instance"
            }
          },
          "time": {
            "description": "Timestamp of when the error occurred. Must adhere to RFC 3339.",
            "type": "string",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "description": "Links providing more information related to errors. These links could point to FAQ or support pages providing help in order to resolve error situation.",
            "items": {
              "$ref": "#/components/schemas/link_description"
            }
          }
        },
        "required": [
          "name",
          "id",
          "message"
        ]
      },
      "event": {
        "type": "object",
        "properties": {
          "event_id": {
            "type": "string",
            "description": "Unique ID for the event.",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Status of the event as it moves through the webhook lifecycle.",
            "enum": [
              "SUCCESSFUL",
              "PROCESSING",
              "RETRYING",
              "FAILURE"
            ],
            "default": "PROCESSING",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The timestamp at which the event was created.",
            "format": "date-time",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          }
        }
      },
      "cif": {
        "title": "Customer Identification File (CIF) number",
        "description": "Unique identifier for an SVB customer (individual or legal entity). See https://svb.collibra.com/asset/c5727daa-d237-44b9-81d7-8a125db05f84.",
        "type": "string",
        "minLength": 9,
        "maxLength": 9,
        "pattern": "^[0-9]{9}$"
      },
      "event_base": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "The contents of the event data, varies by event type"
          },
          "event_type_name": {
            "$ref": "#/components/schemas/event_type_name"
          },
          "cif": {
            "$ref": "#/components/schemas/cif"
          }
        },
        "required": [
          "data",
          "event_type_name",
          "cif"
        ]
      },
      "publisher_base": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name for the event-publisher. Do not provide acronyms as the name will be publicly visible.",
            "minLength": 2,
            "maxLength": 200,
            "pattern": "^[a-z]+(_[a-z]+)*$"
          },
          "description": {
            "type": "string",
            "description": "Full Description for the publisher. This should expand on the name of the publisher and clearly describe what the publisher is for.",
            "minLength": 25,
            "maxLength": 1000
          }
        },
        "required": [
          "name"
        ]
      },
      "publisher": {
        "type": "object",
        "properties": {
          "publisher_id": {
            "type": "string",
            "description": "Unique ID for the publisher",
            "format": "uuid",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "created timestamp",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "updated timestamp",
            "readOnly": true
          }
        }
      },
      "subscription_base": {
        "type": "object",
        "properties": {
          "event_type_names": {
            "type": "array",
            "description": "Names of event types which cause notifications to trigger.",
            "items": {
              "$ref": "#/components/schemas/event_type_name"
            }
          },
          "client_secret_key": {
            "type": "string",
            "description": "Client secret key for encoding callback message.",
            "minLength": 32,
            "maxLength": 200
          },
          "status": {
            "type": "string",
            "description": "The status of a subscription. Only active subscription will be triggered.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "default": "ACTIVE"
          },
          "callback_url": {
            "type": "string",
            "description": "Url to post notifications to. The url must use https.",
            "minLength": 14,
            "maxLength": 2000,
            "format": "uri"
          }
        },
        "required": [
          "event_type_names",
          "callback_url"
        ]
      },
      "subscription": {
        "type": "object",
        "properties": {
          "subscription_id": {
            "type": "string",
            "description": "Unique ID for the subscription.",
            "format": "uuid",
            "readOnly": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link_description"
            },
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "created timestamp",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "updated timestamp",
            "readOnly": true
          }
        }
      },
      "iddef": {
        "type": "string",
        "minLength": 1
      },
      "sourcedef": {
        "type": "string",
        "format": "uri-reference",
        "minLength": 1
      },
      "specversiondef": {
        "type": "string",
        "minLength": 1
      },
      "typedef": {
        "type": "string",
        "minLength": 1
      },
      "datacontenttypedef": {
        "type": "string"
      },
      "dataschemadef": {
        "type": "string",
        "format": "uri",
        "minLength": 1
      },
      "subjectdef": {
        "type": "string",
        "minLength": 1
      },
      "timedef": {
        "format": "date-time",
        "type": "string"
      },
      "datadef": {
        "type": "object"
      },
      "data_base64def": {
        "type": "string"
      },
      "datarefdef": {
        "type": "string",
        "format": "uri-reference",
        "minLength": 1
      },
      "cloudevent_spec": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "description": "CloudEvents Specification JSON Schema.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Identifies the event.",
            "$ref": "#/components/schemas/iddef",
            "examples": [
              "A234-1234-1234"
            ]
          },
          "source": {
            "description": "Identifies the context in which an event happened.",
            "$ref": "#/components/schemas/sourcedef",
            "examples": [
              "https://github.com/cloudevents",
              "mailto:cncf-wg-serverless@lists.cncf.io",
              "urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66",
              "cloudevents/spec/pull/123",
              "/sensors/tn-1234567/alerts",
              "1-555-123-4567"
            ]
          },
          "specversion": {
            "description": "The version of the CloudEvents specification which the event uses.",
            "$ref": "#/components/schemas/specversiondef",
            "examples": [
              "1.x-wip"
            ]
          },
          "type": {
            "description": "Describes the type of event related to the originating occurrence.",
            "$ref": "#/components/schemas/typedef",
            "examples": [
              "com.github.pull_request.opened",
              "com.example.object.deleted.v2"
            ]
          },
          "datacontenttype": {
            "description": "Content type of the data value. Must adhere to RFC 2046 format.",
            "$ref": "#/components/schemas/datacontenttypedef",
            "examples": [
              "text/xml",
              "application/json",
              "image/png",
              "multipart/form-data"
            ]
          },
          "dataschema": {
            "description": "Identifies the schema that data adheres to.",
            "$ref": "#/components/schemas/dataschemadef"
          },
          "subject": {
            "description": "Describes the subject of the event in the context of the event producer (identified by source).",
            "$ref": "#/components/schemas/subjectdef",
            "examples": [
              "mynewfile.jpg"
            ]
          },
          "time": {
            "description": "Timestamp of when the occurrence happened. Must adhere to RFC 3339.",
            "$ref": "#/components/schemas/timedef",
            "examples": [
              "2018-04-05T17:31:00Z"
            ]
          },
          "data": {
            "description": "The event payload.",
            "$ref": "#/components/schemas/datadef",
            "examples": [
              "<much wow=\"xml\"/>"
            ]
          },
          "data_base64": {
            "description": "Base64 encoded event payload. Must adhere to RFC4648.",
            "$ref": "#/components/schemas/data_base64def",
            "examples": [
              "Zm9vYg=="
            ]
          },
          "dataref": {
            "description": "As defined in https://github.com/cloudevents/spec/blob/master/extensions/dataref.md. MAY be used to reference another location where this information is stored. The information, whether accessed via data or dataref MUST be identical.Both data and the dataref attribute MAY exist at the same time. A middleware MAY drop data when the dataref attribute exists, it MAY add the dataref attribute and drop the data attribute, or it MAY add the data attribute by using the dataref attribute.",
            "$ref": "#/components/schemas/datarefdef",
            "examples": []
          }
        },
        "required": [
          "id",
          "source",
          "specversion",
          "type"
        ],
        "definitions": {
          "iddef": {
            "type": "string",
            "minLength": 1
          },
          "sourcedef": {
            "type": "string",
            "format": "uri-reference",
            "minLength": 1
          },
          "specversiondef": {
            "type": "string",
            "minLength": 1
          },
          "typedef": {
            "type": "string",
            "minLength": 1
          },
          "datacontenttypedef": {
            "type": "string"
          },
          "dataschemadef": {
            "type": "string",
            "format": "uri",
            "minLength": 1
          },
          "subjectdef": {
            "type": "string",
            "minLength": 1
          },
          "timedef": {
            "format": "date-time",
            "type": "string"
          },
          "datadef": {
            "type": "object"
          },
          "data_base64def": {
            "type": "string"
          },
          "datarefdef": {
            "type": "string",
            "format": "uri-reference",
            "minLength": 1
          }
        }
      },
      "security_context": {
        "type": "object",
        "description": "Security Context that propagates with every message throughout SVB systems. This context is created by API Gateway.",
        "title": "Security Context",
        "properties": {
          "authn_scheme": {
            "description": "The HTTP authn scheme according to IANA",
            "type": "string",
            "enum": [
              "BASIC",
              "BEARER",
              "MUTUAL",
              "OAUTH"
            ]
          },
          "authz_scheme": {
            "description": "The type of security scheme used for authz.",
            "type": "string",
            "enum": [
              "API_KEY",
              "HTTP",
              "OAUTH2",
              "OIDC"
            ]
          },
          "issued_at": {
            "description": "The date the access token was issued expressed in Unix epoch time in milliseconds.",
            "type": "integer"
          },
          "expires_in": {
            "description": "Token expiration in seconds from issuance time.",
            "type": "integer"
          },
          "client_id": {
            "description": "The authorization server issues the registered client a client identifier - a unique string representing the registration information provided by the client. Services MUST NOT design business logic based on client id to avoid decoupling.",
            "type": "string"
          },
          "access_token": {
            "description": "The access token string as issued by the authorization server. This could be an opaque token or JWT.",
            "type": "string"
          },
          "id_token": {
            "description": "The id token string as issued by the authentication server. Id token would be base64-encoded in the form of JWT.",
            "type": "string",
            "format": "byte"
          },
          "scope": {
            "description": "The scope attribute is a space-delimited list of case-sensitive scope values indicating the required scope of the access token for accessing the requested resource. ",
            "type": "string"
          },
          "signature": {
            "type": "object",
            "properties": {
              "value": {
                "description": "Signature of the auth server that has authenticated client and or authorized access.",
                "type": "string"
              },
              "alg": {
                "description": "Algorithm used for signature",
                "type": "string",
                "enum": [
                  "HMAC"
                ]
              },
              "signed_at": {
                "description": "A UNIX epoch time expressed in Unix epoch time in milliseconds representing issuance of the signature.",
                "type": "integer"
              }
            }
          }
        },
        "required": [
          "authn_scheme",
          "authz_scheme",
          "issued_at",
          "expires_in",
          "client_id",
          "access_token",
          "scopes",
          "signature"
        ]
      },
      "tracestatedef": {
        "type": "string",
        "minLength": 1
      },
      "cloudevent_svb_spec": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "description": "CloudEvents and SVB-specific extensions for CloudEvents Specification JSON Schema. Use with cloudevent_spec.json using allOf.",
        "type": "object",
        "properties": {
          "svbrequestid": {
            "description": "SVB extension. A unique ID identifying the request header for tracking purpose. It is RECOMMENDED to send this header back as a response header if response is synchronous or as request header of a webhook as applicable.",
            "$ref": "#/components/schemas/iddef",
            "examples": [
              "A234-1234-1234-1234"
            ]
          },
          "svbcorrelationid": {
            "description": "SVB extension. Correlation identifier across SVB systems to correlate messages.",
            "$ref": "#/components/schemas/iddef",
            "examples": [
              "A234-1234-1234-1234"
            ]
          },
          "svbsecuritycontext": {
            "description": "SVB extension. Security context including authentication from either external or internal client application/ service. Context would consist of decoded signed token with a signature.",
            "$ref": "#/components/schemas/security_context",
            "examples": []
          },
          "traceparent": {
            "description": "As defined in https://github.com/cloudevents/spec/blob/master/extensions/distributed-tracing.md. Contains a version, trace ID, span ID, and trace options as defined in section 3.2, https://w3c.github.io/trace-context/#traceparent-header",
            "$ref": "#/components/schemas/iddef",
            "examples": [
              "00-0af7651916cd43dd8448eb211c80319c-b9c7c989f97918e1-01"
            ]
          },
          "tracestate": {
            "description": "As defined in https://github.com/cloudevents/spec/blob/master/extensions/distributed-tracing.md. A comma-delimited list of key-value pairs, defined by section 3.3, https://w3c.github.io/trace-context/#tracestate-header",
            "$ref": "#/components/schemas/tracestatedef",
            "examples": [
              "rojo=00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01,congo=lZWRzIHRoNhcm5hbCBwbGVhc3VyZS4"
            ]
          }
        },
        "required": [
          "svbcorrelationid",
          "traceparent",
          "tracestate"
        ],
        "definitions": {
          "iddef": {
            "type": "string",
            "minLength": 1
          },
          "tracestatedef": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "attemptdef": {
        "type": "integer"
      },
      "outcomedef": {
        "type": "string",
        "minLength": 1
      },
      "reasondef": {
        "type": "string",
        "minLength": 1
      },
      "cloudevent_deadletter_spec": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "description": "Extension attributes for CloudEvents Specification JSON Schema for SVB dead letter event. Use this schema to store retry specific context for event at rest. Use with cloudevent_spec.json and cloudevent_svb_spec.json using allOf.",
        "type": "object",
        "properties": {
          "deliveryattempts": {
            "description": "Attempts made to deliver the event",
            "$ref": "#/components/schemas/attemptdef",
            "examples": [
              "3"
            ]
          },
          "lastdeliveryoutcome": {
            "description": "Outcome of last delivery attempt.",
            "$ref": "#/components/schemas/outcomedef",
            "examples": [
              "Unavailable"
            ]
          },
          "lastdeliverytime": {
            "description": "Timestamp of last delivery attempt. Must adhere to RFC 3339.",
            "$ref": "#/components/schemas/timedef",
            "examples": [
              "2018-04-05T17:31:00Z"
            ]
          },
          "publishtime": {
            "description": "Timestamp of when the event was published. Must adhere to RFC 3339.",
            "$ref": "#/components/schemas/timedef",
            "examples": [
              "2018-04-05T17:31:00Z"
            ]
          },
          "deadletterreason": {
            "description": "Reason for deadlettering the event.",
            "$ref": "#/components/schemas/reasondef",
            "examples": [
              "DeliveryAttemptFailed"
            ]
          }
        },
        "required": [
          "lastdeliveryoutcome",
          "lastdeliverytime"
        ],
        "definitions": {
          "attemptdef": {
            "type": "integer"
          },
          "reasondef": {
            "type": "string",
            "minLength": 1
          },
          "outcomedef": {
            "type": "string",
            "minLength": 1
          },
          "timedef": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "patch": {
        "type": "object",
        "title": "JSON patch",
        "description": "A JSON patch object used to apply partial updates to resources.",
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to perform.",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "String. Contains a JSON pointer value to a location within the target document where the operation is performed."
          },
          "value": {
            "description": "New value to apply based on the operation. `type` is one of [`object`, `array`, `string`, `number`, `integer`, `boolean`, `null`]. `op=remove` does not require a value."
          },
          "from": {
            "type": "string",
            "description": "String. Contains a JSON pointer value to the location in the target document from which to move the value. Required for `op=move`."
          }
        },
        "required": [
          "op"
        ]
      },
      "patch_request": {
        "type": "array",
        "title": "JSON patch request",
        "description": "Request object used for a JSON patch.",
        "items": {
          "$ref": "#/components/schemas/patch"
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://uat.api.svb.com",
      "description": "Test"
    },
    {
      "url": "https://api.svb.com",
      "description": "Prod"
    }
  ]
}
