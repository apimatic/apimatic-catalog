# Copyright(c) 2009-2023 Payoneer Germany GmbH
# All Rights Reserved https://www.payoneer.com
#
# This software is the property of Payoneer Germany GmbH. Distribution of this software
# without agreement in writing is strictly prohibited.
#
# This software may not be copied, used or distributed unless agreement has
# been received in full.
swagger: '2.0'

# Description
info:
  version: 1.39.0
  title: Server Payment API
  description: |
      This API is designed for Server-to-Server communication between merchants back-end system and
      Open Payment Gateway (OPG) platform. It provides possibilities to initialize and manage payment
      sessions (`LIST`), trigger payment attempts (`CHARGE`), capture pre-authorized amounts in
      deferred flows (`CLOSING`), initiate refunds (`PAYOUT`), manage stored payment details of
      registered buyers (registered customers and registered accounts) and other payment related
      functionality.

      Calls to this API require authorization: a token with `PAYMENT` role for LIVE transactions, or
      a token with `SANDBOX_PAYMENT` role for test transactions on SANDBOX environment.

      ## Current version
      * API service version: `1.39.0`
      * API model version: `1.101.0`
  contact:
    name: Payoneer Germany GmbH
    email: optilesupport@payoneer.com
    url: https://www.payoneer.com

host: api.sandbox.oscato.com
basePath: /api
schemes:
  - https
consumes:
  - application/json
  - application/vnd.optile.payment.enterprise-v1-extensible+json
produces:
  - application/vnd.optile.payment.enterprise-v1-extensible+json

# Groups and their descriptions
tags:
  - name: list
    description: Create and manage payment sessions
  - name: charge
    description: Perform and manage payments
  - name: payout
    description: Perform and manage payouts
  - name: resume
    description: Perform resume of paused payments
  - name: closing
    description: Perform and manage closings
  - name: preset
    description: Perform account preset
  - name: activation
    description: Perform and manage account activations
  - name: registration
    description: Perform and manage account registrations
  - name: express
    description: Express checkout flow
  - name: customer
    description: Get information about registered customers and their accounts

# Security definitions
securityDefinitions:
  payment_auth:
    description: Basic authentication with merchant code as user name and payment token as password
    type: basic

x-servers:
  - url: //api.sandbox.oscato.com/api
    description: Sandbox server
  - url: //api.live.oscato.com/api
    description: Live server

# URL patterns
paths:
  /lists:
    post:
      tags:
        - list
      summary: Create new payment session
      description: |
          Initializes a payment session by executing `LIST` operation.
      operationId: createPaymentSession
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: transaction
          in: body
          description: Transaction to initialize payment session
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        '200':
          description: List response with possible payment networks
          schema:
            $ref: '#/definitions/NetworkList'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
      x-code-samples:
        - lang: 'Simple'
          source: |
            {
              "transactionId": "tr0001245",
              "country": "DE",
              "customer": {
                "number": "u000635",
                "email": "james.blond@example.de"
              },
              "payment": {
                "reference": "shop.example.com 635/0001245",
                "amount": 25.99,
                "currency": "EUR"
              },
              "callback": {
                "returnUrl": "https://shop.example.com/payment/success.html",
                "cancelUrl": "https://shop.example.com/payment/failure.html",
                "notificationUrl": "https://shop.example.com/payment-status"
              },
              "style": {
                "client": "RESPONSIVE"
              }
            }
  /activations/{activationId}:
    get:
      tags:
        - activation
      summary: Get ACTIVATION details
      description: |
          Retrieves current state of an `ACTIVATION` process.
      operationId: getActivatedPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: activationId
          in: path
          type: string
          description: The `longId` of an `ACTIVATION` to retrieve
          required: true
      responses:
        '200':
          description: |
              `ACTIVATION` information with current state
          schema:
            $ref: '#/definitions/Activation'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}:
    get:
      tags:
        - list
      summary: Get LIST session details
      description: |
          Retrieves current state of a `LIST` session.
      operationId: getPaymentSession
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to retrieve
          required: true
        - $ref: '#/parameters/ListViewOptions'
      responses:
        '200':
          description: |
              List details with its current state
          schema:
            $ref: '#/definitions/NetworkList'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
        - list
      summary: Update LIST session details
      description: |
          Allows to update some parts of transaction information (customer, payment, products, shipping) of initialized `LIST` session.
      operationId: updatePaymentSession
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to update
          required: true
        - name: transaction
          in: body
          description: Transaction to update list session
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        '200':
          description: Updated list response with possible payment networks
          schema:
            $ref: '#/definitions/NetworkList'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
        - list
      summary: Cancel LIST session
      description: |
          Requests cancelation of a `LIST` session.
      operationId: cancelPaymentSession
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to cancel
          required: true
      responses:
        '200':
          description: Cancelation of `LIST` session is accepted
          schema:
            $ref: '#/definitions/NetworkList'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '409':
          description: The `LIST` session is already cancelled
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}:
    get:
      tags:
        - list
      summary: Get payment network of LIST
      description: |
          Retrieves information about payment network in scope of active `LIST` session.
      operationId: getPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session
          required: true
        - name: network
          in: path
          type: string
          description: Network code of network to retrieve
          required: true
      responses:
        '200':
          description: Applicable network resource
          schema:
            $ref: '#/definitions/ApplicableNetwork'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
        - list
      summary: Select payment network of LIST
      description: |
          Pre-selects a payment network in scope of active `LIST` session.
      operationId: selectPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: networkSelection
          in: body
          description: Holds information that network should be selected or unselected
          required: true
          schema:
            $ref: '#/definitions/NetworkSelection'
      responses:
        '200':
          description: Applicable network resource
          schema:
            $ref: '#/definitions/ApplicableNetwork'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/charge:
    post:
      tags:
        - charge
      summary: Pay with preset network or account
      description: |
          Initiates `CHARGE` operation in scope of `LIST` session with preset payment network or registered account.

          Note: This method of payment should be used if `LIST` session was initialized with `operationType` of `PRESET`.
      operationId: payWithSelectedPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `CHARGE` operation
          required: true
        - name: operation
          in: body
          description: Holds information for `CHARGE` operation with preset payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CHARGE` operation execution with interaction information
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/onselect:
    post:
      tags:
        - list
      summary: Event action - select payment network
      description: |
        Action callback which should be executed when customer selects payment network for next payment action.
      operationId: onselectPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete network selection callback
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: operation
          in: body
          description: Holds information required to select payment network and initialize network form to process payment action
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: |
            Result of `onselect` execution with current state. This result will contain `providerResponse` which should be used by network
            form to initailize it to process next payment action.
          schema:
            $ref: '#/definitions/OperationResult'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/charge:
    post:
      tags:
        - charge
      summary: Pay with selected payment network
      description: |
          Initiates `CHARGE` operation in scope of `LIST` session with selected payment network.
      operationId: payWithPaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `CHARGE` operation
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: operation
          in: body
          description: Holds information for `CHARGE` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CHARGE` operation execution with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/activate:
    post:
      tags:
        - activation
      summary: Activate selected payment network
      description: |
          Initiates `ACTIVATION` operation in scope of `LIST` session with selected payment network and collected account-input-data.
      operationId: activatePaymentNetwork
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete an `ACTIVATION` operation
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: operation
          in: body
          description: Holds information for `ACTIVATION` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `ACTIVATION` operation execution with current state
          schema:
            $ref: '#/definitions/Activation'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/payout:
    post:
      tags:
        - payout
      summary: Payout with selected network
      operationId: payoutWithPaymentNetwork
      description: |
          Initiates `PAYOUT` operation in scope of `LIST` session with selected payment network.

          Note: This only works if `LIST` session was initialized for `PAYOUT`.
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `PAYOUT` operation
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: operation
          in: body
          description: Holds information for `PAYOUT` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `PAYOUT` operation execution with current state
          schema:
            $ref: '#/definitions/Payout'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/preset:
    post:
      tags:
        - preset
      summary: Preset payment network of LIST
      operationId: presetPaymentNetwork
      description: |
          Initiates `PRESET` operation in scope of `LIST` session with selected payment network and collected account-input-data.

          Note: This is only available if `LIST` session was initialized with `operationType` of `PRESET`,
          or with deprecated `presetFirst` option set to `true`.
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `PRESET` operation
          required: true
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: operation
          in: body
          description: Holds information for `PRESET` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `PRESET` operation execution with interaction information
          schema:
            $ref: '#/definitions/Preset'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/{network}/register:
    post:
      tags:
        - registration
      summary: Register new account
      operationId: registerPaymentAccount
      description: |
          Register provided account to use it as registered network later.

          Note: This is only available if `LIST` session was initialized with `operationType` of `UPDATE`,
          or with deprecated `updateOnly` option set to `true`.
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete an account registration
          required: true
        - name: network
          in: path
          type: string
          description: The code of payment network to register
          required: true
        - name: operation
          in: body
          description: Holds account information to register selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `REGISTRATION` operation execution with interaction information
          schema:
            $ref: '#/definitions/OperationResult'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}:
    get:
      tags:
        - list
      summary: Get registered account of LIST
      operationId: getPaymentAccount
      description: |
          Gets customer registered account in scope of initialized `LIST` session.
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer
          required: true
      responses:
        '200':
          description: Registered account resource
          schema:
            $ref: '#/definitions/AccountRegistration'
        '404':
          description: Not Found, `LIST` session does not exist
    put:
      tags:
        - list
      summary: Select registered account of LIST
      operationId: selectPaymentAccount
      description: |
          Pre-selects a registered account in scope of active `LIST` session.
      security:
        - payment_auth: []
      parameters:
        - $ref: '#/parameters/ListViewOptions'
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to be selected
          required: true
        - name: networkSelection
          in: body
          description: Holds information that network should be selected or unselected
          required: true
          schema:
            $ref: '#/definitions/NetworkSelection'
      responses:
        '200':
          description: Registered account resource
          schema:
            $ref: '#/definitions/AccountRegistration'
        '404':
          description: Not Found, `LIST` session does not exist
    delete:
      tags:
        - registration
      summary: Delete registered account via LIST
      description: |
          Delete all existing payment service provider registrations of selected registration type.

          Note that by default `LIST` session must been initialized with `operationType` of `UPDATE`,
          or with deprecated `updateOnly` option set to `true` in order to allow this operation.

          If account deletion should be allowed during standard checkout flow (i.e. `operationType` of `CHARGE`)
          the `allowDelete` option should be set to `true` when `LIST` session is created.

          By default a type of registration to delete is detected from `LIST` channel. Optionally de-registration
          instructions can be provided in the body of this request with following logic:
            * If body is present
              * and `deleteRegistration` is set to `true` then account registration is deleted
              * and `deleteRecurrence` is set to `true` then recurring registration is deleted
            * If body is absent
              * and `LIST` channel is set to `RECURRING` then recurring registration is deleted
              * and `LIST` channel is anything but `RECURRING` then account registration is deleted
      operationId: unregisterPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account to delete
          required: true
        - name: deregistrationData
          in: body
          description: Holds de-registration instructions about what types of registrations should be deleted. This information is optional
            and will be auto-detected based on channel if it is not provided.
          required: false
          schema:
            $ref: '#/definitions/DeregistrationData'
      responses:
        '200':
          description: Result of `DELETE` operation execution with interaction information
          schema:
            $ref: '#/definitions/OperationResult'
        '404':
          description: Not Found, `LIST` session does not exist
  /lists/{listId}/accounts/{accountId}/onselect:
    post:
      tags:
        - list
      summary: Event action - select registered account
      description: |
        Action callback which should be executed when customer selects registered account for next payment action.
      operationId: onselectPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete account selection callback
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform account selection callback
          required: true
        - name: operation
          in: body
          description: Holds information required to select registered account and initialize payment form to process payment action
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: |
            Result of `onselect` callback with current state. This result will contain `providerResponse` which should be used by account
            form to initailize it to process next payment action.
          schema:
            $ref: '#/definitions/OperationResult'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}/charge:
    post:
      tags:
        - charge
      summary: Pay with selected registered account
      description: |
          Initiates `CHARGE` operation in scope of `LIST` session with selected registered account.

          Note: This is only available for registered customers.
      operationId: payWithPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `CHARGE` operation
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform a `CHARGE` operation
          required: true
        - name: operation
          in: body
          description: Holds information for `CHARGE` operation with selected registered account
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CHARGE` operation execution with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}/payout:
    post:
      tags:
        - payout
      summary: Payout with selected registered account
      description: |
          Initiates `PAYOUT` operation in scope of `LIST` session with selected registered account.

          Note: This is only available for registered customers and works if `LIST` was initialized for `PAYOUT`.
      operationId: payoutWithPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `PAYOUT` operation
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform a `PAYOUT` operation
          required: true
        - name: operation
          in: body
          description: Holds information for `PAYOUT` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `PAYOUT` operation execution with current state
          schema:
            $ref: '#/definitions/Payout'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}/preset:
    post:
      tags:
        - preset
      summary: Preset registered account of LIST
      description: |
          Initiates `PRESET` operation in scope of `LIST` session with selected registered account.

          Note: This is only available for registered customers and works if `LIST` session was initialized
          with `operationType` of `PRESET`, or with deprecated `presetFirst` option set to `true`.
      operationId: presetPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete a `CHARGE` operation
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform a `PRESET` operation
          required: true
        - name: operation
          in: body
          description: Holds information for `PRESET` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `PRESET` operation execution with interaction information
          schema:
            $ref: '#/definitions/Preset'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}/update:
    post:
      tags:
        - registration
      summary: Update selected registered account
      description: |
          Updates selected registered account.

          Note: This is only available for registered customers and `LIST` sessions that was initialized with `operationType` of `UPDATE`,
          or with deprecated `updateOnly` option set to `true`.
      operationId: updatePaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete an `UPDATE` operation
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform an `UPDATE` operation
          required: true
        - name: operation
          in: body
          description: Holds new account information for `UPDATE` operation with selected payment network
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `UPDATE` operation execution with interaction information
          schema:
            $ref: '#/definitions/OperationResult'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /lists/{listId}/accounts/{accountId}/setpreferred:
    post:
      tags:
        - registration
      summary: Sets registered account as preferred
      description: |
          Sets registered account as preferred for next recurring charges.

          Note: This is only available for registered customers and `LIST` sessions that was initialized with `operationType` of `UPDATE`,
          or with deprecated `updateOnly` option set to `true`.
      operationId: setPaymentAccountAsPreferred
      security:
        - payment_auth: []
      parameters:
        - name: listId
          in: path
          type: string
          description: The `longId` of a `LIST` session to complete an `UPDATE` operation
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of account from registered customer to perform an `UPDATE` operation to set this account as preferred one
          required: true
      responses:
        '200':
          description: Result of `UPDATE` operation execution with interaction information
          schema:
            $ref: '#/definitions/OperationResult'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found, `LIST` session does not exist
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /charges:
    post:
      tags:
        - charge
      summary: Stand-alone payment with selected payment network
      description: |
          Performs stand-alone `CHARGE` with predefined payment network and account without `LIST` session.
      operationId: standalonePayment
      security:
        - payment_auth: []
      parameters:
        - name: transaction
          in: body
          description: Holds transaction information for stand-alone `CHARGE` operation
          required: true
          schema:
            $ref: '#/definitions/StandaloneTransaction'
      responses:
        '200':
          description: |
              `CHARGE` operation information with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /charges/{chargeId}:
    get:
      tags:
        - charge
      summary: Get CHARGE operation details
      description: |
          Retrieves current state of a `CHARGE` operation.
      operationId: getCharge
      security:
        - payment_auth: []
      parameters:
        - name: chargeId
          in: path
          type: string
          description: The `longId` of a `CHARGE` operation to retrieve
          required: true
      responses:
        '200':
          description: |
              `CHARGE` information with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
        - charge
      summary: Cancel deferred CHARGE
      description: |
          Requests cancelation of a deferred `CHARGE` operation.
      operationId: cancelCharge
      security:
        - payment_auth: []
      parameters:
        - name: chargeId
          in: path
          type: string
          description: The `longId` of a deferred `CHARGE` operation to cancel
          required: true
      responses:
        '200':
          description: Cancelation of deferred `CHARGE` operation is accepted
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /charges/{chargeId}/closing:
    post:
      tags:
        - closing
      summary: Close deferred CHARGE
      description: |
          Initiates `CLOSING` operation of deferred `CHARGE`.
      operationId: closeCharge
      security:
        - payment_auth: []
      parameters:
        - name: chargeId
          in: path
          type: string
          description: The `longId` of a deferred `CHARGE` operation to close
          required: true
        - name: operation
          in: body
          description: Holds information for `CLOSING` operation
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CLOSING` operation execution with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /charges/{chargeId}/payout:
    post:
      tags:
        - payout
      summary: Payout of successful CHARGE
      description: |
          Initiates `PAYOUT` operation of successful `CHARGE`.
      operationId: payoutOnCharge
      security:
        - payment_auth: []
      parameters:
        - name: chargeId
          in: path
          type: string
          description: The `longId` of a successful `CHARGE` or `CLOSING` operation to payout (to refund)
          required: true
        - name: operation
          in: body
          description: Holds information for `PAYOUT` operation
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `PAYOUT` operation execution with current state
          schema:
            $ref: '#/definitions/Payout'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /charges/{chargeId}/resume:
    put:
      tags:
        - resume
      summary: Resume paused CHARGE
      description: |
        Initiates `RESUME` operation of paused `CHARGE`.
      operationId: resumeCharge
      security:
        - payment_auth: []
      parameters:
        - name: chargeId
          in: path
          type: string
          description: The `longId` of a `CHARGE` operation to resume
          required: true
        - name: operation
          in: body
          description: Holds information for `RESUME` operation
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CHARGE` operation after it was continued by `resume` action
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /payouts/{payoutId}:
    get:
      tags:
        - payout
      summary: Gets PAYOUT operation details
      description: |
          Retrieves current state of a `PAYOUT` operation.
      operationId: getPayout
      security:
        - payment_auth: []
      parameters:
        - name: payoutId
          in: path
          type: string
          description: The `longId` of a `PAYOUT` operation to retrieve
          required: true
      responses:
        '200':
          description: |
              `PAYOUT` information with current state
          schema:
            $ref: '#/definitions/Payout'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /payouts/{payoutId}/closing:
    post:
      tags:
        - closing
      summary: Close deferred PAYOUT
      description: |
          Initiates `CLOSING` operation of deferred `PAYOUT`.
      operationId: closePayout
      security:
        - payment_auth: []
      parameters:
        - name: payoutId
          in: path
          type: string
          description: The `longId` of a deferred `PAYOUT` operation to close
          required: true
        - name: operation
          in: body
          description: Holds information for `CLOSING` operation
          required: true
          schema:
            $ref: '#/definitions/Operation'
      responses:
        '200':
          description: Result of `CLOSING` operation execution with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /express:
    get:
      tags:
        - express
      summary: Get express checkout networks
      description: |
          Retrieves details about available payment networks that can be offered to a customer during express checkout flow.
      operationId: getExpressList
      security:
        - payment_auth: []
      parameters:
        - name: country
          in: query
          type: string
          required: true
          description: |
              Country code of the payment in ISO 3166-1 (alpha-2) format, e.g "DE", "FR", "US", "GB", etc.
        - name: division
          in: query
          type: string
          required: false
          description: |
              Merchant division of the payment. There is always one default division that will be used if this property is undefined.
              Different divisions can be configured with different setup, contracts, payment routes and network options.
              Division names are case-sensitive (for example: Default needs to start with a capital letter).
        - name: integration
          in: query
          type: string
          required: false
          enum:
            - DISPLAY_NATIVE
            - PURE_NATIVE
          description: |
              Defines integration scenario of the payment, default is `DISPLAY_NATIVE`. Selected scenario has an impact on operation
              URLs within response, they will be adjusted for selected integration scenario.
      responses:
        '200':
          description: Express list response with possible payment networks
          schema:
            $ref: '#/definitions/ExpressList'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorInfo'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /express/{network}/preset:
    post:
      tags:
        - express
      summary: Create express preset session
      description: |
          Initializes an express preset payment session with selected payment network.
      operationId: createExpressPreset
      security:
        - payment_auth: []
      parameters:
        - name: network
          in: path
          type: string
          description: The code of selected payment network
          required: true
        - name: transaction
          in: body
          description: Express preset transaction details
          required: true
          schema:
            $ref: '#/definitions/ExpressTransaction'
      responses:
        '200':
          description: Express preset session with its current state
          schema:
            $ref: '#/definitions/ExpressPreset'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorInfo'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /presets/{presetId}:
    get:
      tags:
        - express
      summary: Get express preset details
      description: |
          Retrieves current state of `EXPRESSPRESET` session.
      operationId: getExpressPreset
      security:
        - payment_auth: []
      parameters:
        - name: presetId
          in: path
          type: string
          description: The `longId` of an `EXPRESSPRESET` session to retrieve
          required: true
      responses:
        '200':
          description: Express preset session with its current state
          schema:
            $ref: '#/definitions/ExpressPreset'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
        - express
      summary: Update express preset session
      description: |
          Performs intermediate update of open `EXPRESSPRESET` session.
      operationId: updateExpressPreset
      security:
        - payment_auth: []
      parameters:
        - name: presetId
          in: path
          type: string
          description: The `longId` of an `EXPRESSPRESET` session to update
          required: true
        - name: presetUpdate
          in: body
          description: Express preset update details
          required: true
          schema:
            $ref: '#/definitions/ExpressPresetUpdate'
      responses:
        '200':
          description: Updated express preset session with its current state
          schema:
            $ref: '#/definitions/ExpressPreset'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorInfo'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /presets/{presetId}/confirm:
    post:
      tags:
        - express
      summary: Confirm express preset session
      description: |
          Performs final update and confirmation of open `EXPRESSPRESET` session. This action is passed to the PSP with final payment
          and transaction details that merchant and customer agreed upon.

          Note: empty content is interpreted as no changes to the current express preset state and customer has accepted and confirmed that.
      operationId: confirmExpressPreset
      security:
        - payment_auth: []
      parameters:
        - name: presetId
          in: path
          type: string
          description: The `longId` of an `EXPRESSPRESET` session to confirm
          required: true
        - name: presetUpdate
          in: body
          description: Express preset update and confirmation details
          required: true
          schema:
            $ref: '#/definitions/ExpressPresetUpdate'
      responses:
        '200':
          description: Updated express preset session with its current state
          schema:
            $ref: '#/definitions/ExpressPreset'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorInfo'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /presets/{presetId}/charge:
    post:
      tags:
        - charge
      summary: Pay with confirmed express preset
      description: |
          Initiates `CHARGE` operation in scope of confirmed `EXPRESSPRESET` session.
      operationId: payWithExpressPreset
      security:
        - payment_auth: []
      parameters:
        - name: presetId
          in: path
          type: string
          description: The `longId` of a confirmed `EXPRESSPRESET` session to pay with
          required: true
        - name: operation
          in: body
          description: Holds information for `CHARGE` operation, empty content for a common use case
          required: true
          schema:
            $ref: '#/definitions/ExpressOperation'
      responses:
        '200':
          description: Result of `CHARGE` operation execution with current state
          schema:
            $ref: '#/definitions/Charge'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorInfo'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorInfo'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /customers/{customerId}:
    get:
      tags:
        - customer
      summary: Get customer details
      description: |
          Gets customer information based on customer registration ID. Customer info includes customer's data like
          names, phones, addresses as well active registered accounts.

          Note: This is only available for customers whose accounts were registered at OPG during account registration process.
      operationId: getCustomerRegistration
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
      responses:
        '200':
          description: Customer information
          schema:
            $ref: '#/definitions/CustomerRegistration'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
        - customer
      summary: Delete customer registration
      description: Deletes customer registration based on customer registration ID.
      operationId: deleteCustomerRegistration
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
      responses:
        '200':
          description: Customer registration record with 'DELETED' state
          schema:
            $ref: '#/definitions/CustomerRegistration'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: If customer is not found or is inactive
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /customers/{customerId}/accounts:
    get:
      tags:
        - customer
      summary: Get customer accounts
      description: |
          Gets customer's registered accounts
      operationId: getCustomerPaymentAccounts
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
      responses:
        '200':
          description: Customer's registered accounts
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountRegistration'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
  /customers/{customerId}/accounts/{accountId}:
    get:
      tags:
        - customer
      summary: Get customer account details
      description: |
        Gets details about customer's registered account
      operationId: getCustomerPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of a registered for this customer account
          required: true
      responses:
        '200':
          description: Customer's registered account
          schema:
            $ref: '#/definitions/AccountRegistration'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    put:
      tags:
        - customer
      summary: Update customer account
      description: |
        Updates customer's registered account
      operationId: updateCustomerPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
        - name: accountId
          in: path
          type: string
          description: The ID of a registered for this customer account
          required: true
        - name: accountRegistrationUpdate
          in: body
          description: Carries information for updating customer account
          required: true
          schema:
            $ref: '#/definitions/AccountRegistrationUpdate'
      responses:
        '200':
          description: Customer's registered account
          schema:
            $ref: '#/definitions/AccountRegistration'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'
    delete:
      tags:
        - customer
      summary: Delete customer account
      description: Delete customer account and all provider tokens by customer and account id
      operationId: deleteCustomerPaymentAccount
      parameters:
        - name: customerId
          in: path
          type: string
          description: Merchant specific ID of customer registration to delete
          required: true
        - name: accountId
          in: path
          type: string
          description: Account registration ID to delete
          required: true
      responses:
        '204':
          description: Customer account is deleted
        '404':
          description: Not found
        '500':
          description: Internal server error; check a message for more details
  /customers/{customerId}/accounts/{accountId}/tokens:
    get:
      tags:
        - customer
      summary: Get customer account tokens by customer and account id
      description: Retrieves customer tokens by customer and account id
      operationId: getAccountTokens
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          type: string
          description: Merchant specific ID of customer registration to retrieve
          required: true
        - name: accountId
          in: path
          type: string
          description: Account registration ID to retrieve
          required: true
      responses:
        '200':
          description: List of provider account tokens
          schema:
            type: array
            items:
              $ref: '#/definitions/ProviderToken'
        '404':
          description: Not found
        '500':
          description: Internal server error; check a message for more details
  /customers/{customerId}/accounts/{accountId}/tokens/{tokenId}:
    get:
      tags:
        - customer
      summary: Get customer account token by token id
      description: Retrieves customer token by token id
      operationId: getAccountToken
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          type: string
          description: Merchant specific ID of customer registration to retrieve
          required: true
        - name: accountId
          in: path
          type: string
          description: Account registration ID to retrieve
          required: true
        - name: tokenId
          in: path
          type: string
          description: PSP registration token ID to delete
          required: true
      responses:
        '200':
          description: The provider account token
          schema:
            $ref: '#/definitions/ProviderToken'
        '404':
          description: Not found
        '500':
          description: Internal server error; check a message for more details
    delete:
      tags:
        - customer
      summary: Delete customer provider token
      description: Delete customer provider token by customer, account and token id
      operationId: deleteAccountTokens
      parameters:
        - name: customerId
          in: path
          type: string
          description: Merchant specific ID of customer registration to delete
          required: true
        - name: accountId
          in: path
          type: string
          description: Account registration ID to delete
          required: true
        - name: tokenId
          in: path
          type: string
          description: PSP registration token ID to delete
          required: true
      responses:
        '204':
          description: Provider account token is deleted
        '404':
          description: Not found
        '500':
          description: Internal server error; check a message for more details
  /customers/{customerId}/charge:
    post:
      tags:
        - charge
      summary: Recurring CHARGE of registered customer
      description: |
          Initiates recurring `CHARGE` operation of customer registered at OPG.
      operationId: payWithCustomerPaymentAccount
      security:
        - payment_auth: []
      parameters:
        - name: customerId
          in: path
          type: string
          description: The ID of a customer registered at optile
          required: true
        - name: transaction
          in: body
          description: Holds transaction information for recurring `CHARGE` operation
          required: true
          schema:
            $ref: '#/definitions/RecurringTransaction'
      responses:
        '200':
          description: |
              `CHARGE` operation information with current state
          schema:
            $ref: '#/definitions/Charge'
        '401':
          description: Request is not authorized, wrong authentication token or missing payment role
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInfo'

# Common parameters
parameters:
  ListViewOptions:
    name: view
    in: query
    type: array
    items:
      type: string
      enum:
        - htmlForms
        - jsonForms
        - routes
        - jsonProperties
        - -htmlForms
        - -jsonForms
        - -routes
        - -jsonProperties
    description: |
        Enables or disables view options to configure response when creating or retrieving `LIST`.

        Following options are supported:
          * `htmlForms` - this option enables generation of links to build HTML forms for applicable networks and registered
            accounts in `LIST` response. **Enabled** by default for any integration.
          * `jsonForms` - this option enables generation of structured (in JSON format) description of forms for applicable
            networks and registered accounts in `LIST` response. **Disabled** by default.
          * `routes` - this option enables routing configuration to be exposed for applicable networks and registered accounts
            in `LIST` response. **Disabled** by default.
          * `jsonProperties` - this option results in the localization URLs having a **.json** extension instead of the **.properties**.
            **Disabled** by default.

        If option is preceded with dash (`-`), it means that option is disabled, otherwise it is enabled.

        Multiple options can be combined in the single value of the `view` query parameter. Use comma (`,`) to separate options.
        Supplying unknown options or conflicting options combination (e.g. `"-jsonForms,jsonForms"`) will cause an error and
        **HTTP 400 Bad Request** response.

        **Note:** if no value supplied for an option the API behaves according to the defaults. Empty `view` parameter is interpreted as:
          * `"htmlForms,-jsonForms,-routes,-jsonProperties"` for any integration type.

# Model
definitions:

  # Request objects
  Transaction:
    type: object
    required:
      - transactionId
      - country
      - callback
      - customer
      - payment
    properties:
      integration:
        $ref: '#/definitions/IntegrationType'
      transactionId:
        type: string
        description: |
            Identifier for this transaction given by the merchant. It is not validated for uniqueness by OPG,
            but may be checked for by some PSPs, thus recommended to be unique.
        example: O-000016565/0176
      country:
        type: string
        description: |
            Country where the payment is originating. This influences the choice of the available payment networks.
            Value format is according to ISO 3166-1 (alpha-2), e.g. "DE", "FR", "US", "GB", etc.
        example: FR
      channel:
        type: string
        enum:
          - WEB_ORDER
          - MOBILE_ORDER
          - CUSTOMER_SELF_SERVICE
          - EMAIL_ORDER
          - CALLCENTER_ORDER
          - MAIL_ORDER
          - TERMINAL_ORDER
          - CUSTOMER_SUPPORT
          - RECURRING
          - DUNNING
          - FULFILLMENT
          - IMPORT
        description: |
            Indicates where the payment request comes from. For example, from a website, from a mobile device, or it is a recurring
            transaction from the merchant's backend.

            By default `WEB_ORDER` for this type of transactions.
      system:
        $ref: '#/definitions/System'
      division:
        type: string
        description: |
            Division name of this transaction.

            Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one
            _default division_ that will be used if this property is undefined. Different divisions can be configured with
            different setup, contracts, payment routes and network options.
        example: main_division
      callback:
        $ref: '#/definitions/Callback'
      customer:
        $ref: '#/definitions/Customer'
      customerScore:
        type: integer
        description: |
            Customer score value in range 0...1000. This value will be used by the system for the decision that some security
            checks should be enforced or disabled (like 3D Security check).
        example: 500
      clientInfo:
        $ref: '#/definitions/ClientInfo'
      payment:
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: Products (shopping cart) information.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information.
        items:
          $ref: '#/definitions/Shipping'
      updateOnly:
        type: boolean
        description: |
            Indicates that this `LIST` transaction is initiated to update existing or register accounts of the
            of customer. No payment will take place in scope of this `LIST` session.

            **Deprecated!** This property is deprecated. Use `operationType` instead.
      allowDelete:
        type: boolean
        description: |
            Indicates that deletion of registered accounts is allowed in scope of this `LIST` session:
              * If set to `true` the deletion of accounts is explicitly permitted by merchant.
              * If set to `false` the deletion of accounts is explicitly disallowed by merchant.
              * If nothing is set the default behavior applies: deletion is only allowed for `LIST`s
                with `operationType` of `UPDATE`, or with deprecated `updateOnly` option set to `true`.
      presetFirst:
        type: boolean
        description: |
            Indicates that this `LIST` transaction is initiated with 'preset' option. When selected by customer network and
            provided account are saved in the system until this `LIST` session will be closed by additional `CHARGE` request.
            Callback must specify 'summaryUrl' for this type of `LIST` transaction.

            **Deprecated!** This property is deprecated. Use `operationType` instead.
      style:
        $ref: '#/definitions/Style'
      preselection:
        $ref: '#/definitions/Preselection'
      level3Data:
        $ref: '#/definitions/Level3Data'
      extraElements:
        $ref: '#/definitions/ExtraElements'
      mandate:
        $ref: '#/definitions/Mandate'
      installment:
        $ref: '#/definitions/Installment'
      checkoutConfigurationName:
        type: string
        description: The name of the pre-selected checkout configuration.
      riskData:
        $ref: '#/definitions/RiskData'
      operationType:
        $ref: '#/definitions/OperationType'
      registerOnce:
        type: boolean
        description: |
            Indicates that this `LIST` transaction is initiated with `registerOnce` option. When option is enabled it's possible to use
            `LIST` only for one account registration or update, after successful operation session will be closed and Customer will be
            redirected.
      ttl:
        type: integer
        description: |
            Time to live (TTL) for LIST session in minutes. By default LIST session is valid for 30 min.
        example: 60
      orderId:
        type: string
        description: |
          The ID of order for this transaction. This ID is used as double-charge protection if it is provided:
          it is not allowed to have more as 1 open payment session with the same ID, at the same time, all `CHARGE`
          will be rejected if the system has any successful `CHARGE` with this ID.
  RecurringTransaction:
    type: object
    required:
      - transactionId
      - country
      - payment
    properties:
      transactionId:
        type: string
        description: |
            Identifier for this payment transaction given by the merchant. It is not validated for uniqueness by OPG,
            but may be checked for by some PSPs, thus recommended to be unique.
        example: SUB-090909/365
      country:
        type: string
        description: |
            Country where the payment is originating. This influences the choice of the available payment networks.
            Value format is according to ISO 3166-1 (alpha-2), e.g. "DE", "FR", "US", "GB", etc.
        example: GB
      channel:
        type: string
        enum:
          - WEB_ORDER
          - MOBILE_ORDER
          - CUSTOMER_SELF_SERVICE
          - EMAIL_ORDER
          - CALLCENTER_ORDER
          - MAIL_ORDER
          - TERMINAL_ORDER
          - CUSTOMER_SUPPORT
          - RECURRING
          - DUNNING
          - FULFILLMENT
          - IMPORT
        description: |
            Indicates where the payment request comes from. For example, from a website, from a mobile device, or it is a recurring
            transaction from the merchant's backend.

            By default `RECURRING` for this type of transactions.
      system:
        $ref: '#/definitions/System'
      division:
        type: string
        description: |
            Division name of this transaction.

            Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one
            _default division_ that will be used if this property is undefined. Different divisions can be configured with
            different setup, contracts, payment routes and network options.
        example: subscriptions
      callback:
        $ref: '#/definitions/RecurringCallback'
      customer:
        $ref: '#/definitions/Customer'
      clientInfo:
        description: |
            Information about customers client (web browser, mobile device, etc.)

            **Deprecated!** This information is not expected during recurring charge and should not be supplied.
        $ref: '#/definitions/ClientInfo'
      payment:
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: Products (shopping cart) information.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information.
        items:
          $ref: '#/definitions/Shipping'
      style:
        description: |
            Default appearance of payment page can be overwritten with these style parameters.

            **Deprecated!** This information is not expected during recurring charge and will be ignored.
        $ref: '#/definitions/Style'
      preselection:
        $ref: '#/definitions/RecurringPreselection'
      mandate:
        $ref: '#/definitions/Mandate'
      installment:
        $ref: '#/definitions/Installment'
      riskData:
        $ref: '#/definitions/RiskData'
  StandaloneTransaction:
    type: object
    required:
      - transactionId
      - country
      - callback
      - customer
      - payment
      - preselection
    properties:
      transactionId:
        type: string
        description: |
            Identifier for this payment transaction given by the merchant. It is not validated for uniqueness by OPG,
            but may be checked for by some PSPs, thus recommended to be unique.
        example: PM-000031541
      country:
        type: string
        description: |
            Country where the payment is originating. This influences the choice of the available payment networks.
            Value format is according to ISO 3166-1 (alpha-2), e.g. "DE", "FR", "US", "GB", etc.
        example: IT
      channel:
        type: string
        enum:
          - WEB_ORDER
          - MOBILE_ORDER
          - CUSTOMER_SELF_SERVICE
          - EMAIL_ORDER
          - CALLCENTER_ORDER
          - MAIL_ORDER
          - TERMINAL_ORDER
          - CUSTOMER_SUPPORT
          - RECURRING
          - DUNNING
          - FULFILLMENT
          - IMPORT
        description: |
            Indicates where the payment request comes from. For example, from a website, from a mobile device, or it is a recurring
            transaction from the merchant's backend.

            By default `WEB_ORDER` for this type of transactions.
      system:
        $ref: '#/definitions/System'
      division:
        type: string
        description: |
            Division name of this transaction.

            Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one
            _default division_ that will be used if this property is undefined. Different divisions can be configured with
            different setup, contracts, payment routes and network options.
        example: myshop.it
      callback:
        $ref: '#/definitions/Callback'
      customer:
        $ref: '#/definitions/Customer'
      customerScore:
        type: integer
        description: |
            Customer score value in range 0...1000. This value will be used by the system for the decision that some security
            checks should be enforced or disabled (like 3D Security check).
        example: 500
      clientInfo:
        $ref: '#/definitions/ClientInfo'
      payment:
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: Products (shopping cart) information.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information.
        items:
          $ref: '#/definitions/Shipping'
      style:
        $ref: '#/definitions/StandaloneStyle'
      preselection:
        $ref: '#/definitions/StandalonePreselection'
      mandate:
        $ref: '#/definitions/Mandate'
      installment:
        $ref: '#/definitions/Installment'
      autoRegistration:
        type: boolean
        description: If set to `true` the account will be registered for further payments.
      allowRecurrence:
        type: boolean
        description: If set to `true` the account will be registered for further recurring payments.
      account:
        $ref: '#/definitions/AccountInputData'
      encryptedAccount:
        type: string
        description: |
            Customer account data encrypted with one of the CSE (Client Side Encryption) keys configured in MCAPI for division of this
            transaction. Account data should be encrypted according to [JOSE standard](https://tools.ietf.org/html/rfc7520)
            "RSA-OAEP" + "A256GCM", see [RFC-7520](https://tools.ietf.org/html/rfc7520#section-5.2).

            Note that supplying both fields `account` and  `encryptedAccount` will cause an error and such operation will be rejected.

            See [Client Side Encryption](https://orchestrationdocs.payoneer.com/docs/integrate-pure-native-with-cse) for further details.
        example: eyJhbGciOiJSU0EtT0FFU ... fZTJb.OMY7XHgpxgBgIVWByouqWw
      checkboxes:
        type: object
        description: |
            Map of selected checkboxes; name reflects the checkbox distinguish name, value reflects its
            state - `true` for selected, `false` for unchecked
        additionalProperties:
          type: boolean
      riskData:
        $ref: '#/definitions/RiskData'
  ExpressTransaction:
    type: object
    required:
      - transactionId
      - country
      - callback
      - payment
    properties:
      integration:
        type: string
        enum:
          - PURE_NATIVE
          - DISPLAY_NATIVE
        description: |
            Defines integration scenario of for this `EXPRESSPRESET` session. Selected scenario has an impact on
            operation URL within response, it is adjusted for selected integration scenario.

            Default: `PURE_NATIVE`
      transactionId:
        type: string
        description: |
            Identifier for this payment transaction given by the merchant. It is not validated for uniqueness by OPG,
            but may be checked for by some PSPs, thus recommended to be unique.
        example: O-001655/1705
      country:
        type: string
        description: |
            Country where the payment is originating. This influences the choice of the available payment networks.
            Value format is according to ISO 3166-1 (alpha-2), e.g. "DE", "FR", "US", "GB", etc.
        example: FR
      system:
        $ref: '#/definitions/System'
      division:
        type: string
        description: |
            Division name of this transaction.

            Merchant can configure multiple divisions via Merchant Configuration API or portal. But there is always one
            _default division_ that will be used if this property is undefined. Different divisions can be configured with
            different setup, contracts, payment routes and network options.
        example: express-shop.fr
      callback:
        description: |
            Callback information about merchants shop system. It is strongly advised to provide this data with
            every transaction.

            Note: for `EXPRESSPRESET` operation the `summaryUrl` is a mandatory parameter.
        $ref: '#/definitions/Callback'
      customer:
        description: |
            Information about customer.

            Note: for `EXPRESSPRESET` operation this information is optional since the details about customer (payer) will be
            collected from PSP.
        $ref: '#/definitions/Customer'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
      payment:
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: Products (shopping cart) information.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information.
        items:
          $ref: '#/definitions/Shipping'
      style:
        $ref: '#/definitions/StandaloneStyle'
      providerRequest:
        description: |
            Provider request parameters to pass from front-end JavaScript library of dedicated provider to the back-end logic (adapter)
            during express checkout initialization.

            Note: this set of parameters is PSP specific, it may vary in content or can also be `null`.
        $ref: '#/definitions/ProviderParameters'
  Operation:
    type: object
    properties:
      transactionId:
        type: string
        description: |
            Merchant transaction ID assigned to this operation (payment step).

            Note: This value is optional and if it is not set the `transactionId` from referred operation (e.g. `LIST`) will be used
            during processing.
      system:
        $ref: '#/definitions/OperationSystem'
      autoRegistration:
        type: boolean
        description: If set to `true` the account will be registered for further payments.
      allowRecurrence:
        type: boolean
        description: If set to `true` the account will be registered for further recurring payments.
      account:
        $ref: '#/definitions/AccountInputData'
      encryptedAccount:
        type: string
        description: |
            Customer account data encrypted with one of the CSE (Client Side Encryption) keys configured in MCAPI for division of this
            transaction. Account data should be encrypted according to [JOSE standard](https://tools.ietf.org/html/rfc7520)
            "RSA-OAEP" + "A256GCM", see [RFC-7520](https://tools.ietf.org/html/rfc7520#section-5.2).

            Note that supplying both fields `account` and  `encryptedAccount` will cause an error and such operation will be rejected.

            See [Client Side Encryption](https://orchestrationdocs.payoneer.com/docs/integrate-pure-native-with-cse) for further details.
        example: eyJhbGciOiJSU0EtT0FFU ... fZTJb.OMY7XHgpxgBgIVWByouqWw
      clientInfo:
        description: |
            Information about customers client (web browser, mobile device, etc.). If defined this will override
            information provided during `LIST` initialization.
        $ref: '#/definitions/ClientInfo'
      payment:
        description: |
            Payment information. If defined this will override information provided during `LIST` initialization.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: Products (shopping cart) information. If defined this will override information provided during `LIST` initialization.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information. If defined this will override information provided during `LIST` initialization.
        items:
          $ref: '#/definitions/Shipping'
      checkboxes:
        type: object
        description: |
            Map of selected checkboxes. Name reflects the checkbox distinguish name, value reflects its
            state - `true` for checked, `false` for unchecked.
        additionalProperties:
          type: boolean
      mandate:
        $ref: '#/definitions/Mandate'
      installment:
        $ref: '#/definitions/Installment'
      routes:
        type: array
        description: |
            List of payment routes for this operation. Reflects the merchant decision to override the routing proposed by system in `LIST`.
            Routes are sorted in the preferred order.

            Note: this list may only contain routes that were available in the referred `LIST` for selected payment network or account.
        items:
          $ref: '#/definitions/Route'
      finalOperation:
        type: boolean
        description: |
            Indicates that this is a final operation of this kind: final capture, update or refund and no future actions are expected.
            This does not cancel any preauthorization or trigger financial return of non-captured payments. To cancel deferred charges,
            use the DELETE request.
      providerRequest:
        description: |
            Provider request parameters that should be passed to the target payment provider adapter to complete the operation.

            **Deprecated!** This property will be removed, please use `providerRequests` instead.
        $ref: '#/definitions/ProviderParameters'
      providerRequests:
        type: array
        description: |
            List of provider request parameters which should be provided to the target payment provider adapter to complete the operation.
        items:
          $ref: '#/definitions/ProviderParameters'
      preselection:
        $ref: '#/definitions/OperationPreselection'
      riskData:
        $ref: '#/definitions/RiskData'
      level3Data:
        $ref: '#/definitions/Level3Data'
      resumeInstructions:
        type: object
        description: Resume instructions to resume (or continue) suspend operation.
        properties:
          confirmed:
            type: boolean
            description: The flag to indicate that suspend action is confirmed and could (or could not) be continued.
  ExpressPresetUpdate:
    type: object
    properties:
      callback:
        description: |
            Updated callback information. If missing, the callback details require no update and original callback information
            passed during `EXPRESSPRESET` initialization stays intact.
        $ref: '#/definitions/Callback'
      customer:
        description: |
            Updated information about customer. If missing, the customer details require no update and original information passed
            during `EXPRESSPRESET` initialization stays intact.
        $ref: '#/definitions/Customer'
      clientInfo:
        description: Updated information about customers client (web browser, mobile device, etc.)
        $ref: '#/definitions/ClientInfo'
      payment:
        description: |
            Updated payment information. If missing, the payment details require no update and original information passed during
            `EXPRESSPRESET` initialization stays intact.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
            Updated products (shopping cart) information. If missing, the product details require no update and original information
            passed during `EXPRESSPRESET` initialization stays intact.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Updated shipping information. If missing, the shipping details require no update and original information
          passed during `EXPRESSPRESET` initialization stays intact.
        items:
          $ref: '#/definitions/Shipping'
      providerRequest:
        description: |
            Provider request parameters to pass from front-end JavaScript library of dedicated provider to the back-end logic (adapter)
            during express checkout update or activation.

            Note: this set of parameters is PSP specific, it may vary in content or can also be `null`.
        $ref: '#/definitions/ProviderParameters'
  ExpressOperation:
    type: object
    properties:
      transactionId:
        type: string
        description: |
            Merchant transaction ID assigned to this express operation during payment step.

            Note: This value is optional and if it is not set the `transactionId` from referred operation (`EXPRESSPRESET`) will be used
            during processing.
      system:
        $ref: '#/definitions/OperationSystem'
      clientInfo:
        description: |
            Information about customers client (web browser, mobile device, etc.). If defined this will override
            information provided during `EXPRESSPRESET` initialization.
        $ref: '#/definitions/ClientInfo'
      payment:
        description: |
            Payment information. If defined this will override information provided during `EXPRESSPRESET` initialization.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
            Products (shopping cart) information. If defined this will override information provided during `EXPRESSPRESET` initialization.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information. If defined this will override information provided during `EXPRESSPRESET` initialization.
        items:
          $ref: '#/definitions/Shipping'
      preselection:
        description: |
            It allows to differentiate between direct and deferred `CHARGE`.
        $ref: '#/definitions/RecurringPreselection'
      checkboxes:
        type: object
        description: |
            Map of selected checkboxes. Name reflects the checkbox distinguish name, value reflects its
            state - `true` for checked, `false` for unchecked.

            Note: this property has no processing implications at the moment.
        additionalProperties:
          type: boolean
      finalOperation:
        type: boolean
        description: |
            Indicates that this is a final operation of this kind: final capture, update or refund and no future actions are expected.
      providerRequest:
        description: |
            Provider request parameters that should be passed to the target payment provider adapter to complete the operation.

            Note: there are no express preset providers at the moment that would expect any provider specific data passed during
            payment operation.
        $ref: '#/definitions/ProviderParameters'
  Callback:
    type: object
    properties:
      returnUrl:
        type: string
        format: uri
        description: |
            URL of landing page in merchants shop system for successful payment. Customer will be redirected to this URL after
            successful payment. This property is mandatory for all integration types.
      summaryUrl:
        type: string
        format: uri
        description: |
            URL of landing page in merchants shop system after customer select payment method. This property is mandatory for
            a `LIST` session with `operationType` of `PRESET`, or with deprecated `presetFirst` option set to `true`.
      cancelUrl:
        type: string
        format: uri
        description: |
            URL of landing page in merchants shop system for cancelled or failed payment. Customer will be redirected to this URL
            after canceled or permanently failed payment. This property is mandatory for all integration types.
      backToShopUrl:
        type: string
        format: uri
        description: |
            URL to lead customer back to shop from stand-alone hosted payment page without cancelling a LIST session.
      notificationUrl:
        type: string
        format: uri
        description: |
            Payment status notification URL. If defined, the OPG system will send asynchronous status notifications about this
            payment to this URL.

            Note: The support team can configure additional notification headers for all transactions on the _division_ level.
            Notification URL in `callback`, however, overrides the division settings.
      notificationHeaders:
        type: array
        description: |
          An array of additional merchant specific headers. These headers will be set and send back with OPG notifications.
        items:
          $ref: '#/definitions/Parameter'
    description: |
        Callback information about merchants shop system. It is strongly advised to provide this data with every transaction.
  RecurringCallback:
    type: object
    properties:
      notificationUrl:
        type: string
        format: uri
        description: |
            Payment status notification URL. If defined, the OPG system will send asynchronous status notifications about this
            payment to this URL.

            Note: merchant can configure a single notification URL for all transactions on the _division_ level via
            Merchant Configuration API. Notification URL in `callback`, however, overrides the division settings.
    description: |
        Callback information about merchants shop system. It is strongly advised to provide this data with every transaction.
  AccountInfo:
    type: object
    properties:
      method:
        type: string
        enum:
          - GUEST_CHECKOUT
          - LOCAL_ACCOUNT
          - FEDERATED_ACCOUNT
          - ISSUER_ACCOUNT
          - THIRD_PARTY_ACCOUNT
          - FIDO_AUTHENTICATOR
        description: Customer login method.
      timestamp:
        type: string
        format: date-time
        description: Date and time (UTC) of the customer login in the merchant’s shop.
        example: 2017-09-22T13:53:46.410+0000
      creationDate:
        type: string
        format: date-time
        description: Date of customer's registration in the merchant's system.
        example: 2017-09-22T13:53:46.410+0000
      updateDate:
        type: string
        format: date-time
        description: |
            Date of customer's account update in the merchant's system (changes to billing and shipping address,
            new payment account, new email address).
        example: 2017-09-22T13:53:46.410+0000
      passwordChangeDate:
        type: string
        format: date-time
        description: Date when customer changed password in the merchants system for the last time.
        example: 2017-09-22T13:53:46.410+0000
    description: Customer account information.
  Customer:
    type: object
    required:
      - number
    properties:
      accountInfo:
        $ref: '#/definitions/AccountInfo'
        description: Customer account information.
      number:
        type: string
        description: Customer identifier given by the merchant. Not validated for uniqueness by OPG.
        example: UN-0010352
      email:
        type: string
        format: email
        description: |
            Customer e-mail address. It is highly recommended to provide it, since it is a mandatory information for some PSP
            and often used by advanced risk management.
        example: james.blond@example.com
      deliveryEmail:
        type: string
        format: email
        description: |
            Customer delivery e-mail address. Represents email for electronic delivery for cases when it's not the same
            as customer's email. If not provided, `customer.email` will be used.
        example: john.doe@example.com
      birthday:
        type: string
        format: date
        description: Customer birthday. Required by some PSPs and important for payments with advanced risk management.
      gender:
        type: string
        enum:
          - MALE
          - FEMALE
          - UNKNOWN
        description: Customer gender. Required by some PSPs.
      name:
        $ref: '#/definitions/Name'
      company:
        $ref: '#/definitions/Company'
        description: |
            Information about company. Required by some PSPs when customer is a business.
      addresses:
        $ref: '#/definitions/CustomerAddresses'
      phones:
        $ref: '#/definitions/Phones'
      registration:
        $ref: '#/definitions/Registration'
        description: |
            Information about customer registration in OPG.
      identities:
        $ref: '#/definitions/Identities'
    description: |
        Information about customer.
  Name:
    type: object
    properties:
      title:
        type: string
        description: |
            Customers title. Unrestricted field for anything to be placed in front of the customer name,
            e.g. "Mrs.", "Prof.", "Dr.", etc.
        example: Mr.
      firstName:
        type: string
        description: Customers first name.
        example: James
      middleName:
        type: string
        description: Customers middle name. Common in some countries.
        example: Junior
      lastName:
        type: string
        description: Customers family name.
        example: Blond
      maidenName:
        type: string
        description: Customers maiden name. Last name given to a person at day of birth if it has change later, e.g. after marriage.
    description: Customers name information in structured form.
  Company:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Company name.
      address:
        description: |
            Company registration address.
        $ref: '#/definitions/Address'
      identities:
        $ref: '#/definitions/CompanyIdentities'
  CustomerAddresses:
    type: object
    properties:
      shipping:
        description: Payment shipping address.
        $ref: '#/definitions/Address'
      billing:
        description: Customer billing (payment) address.
        $ref: '#/definitions/Address'
      residential:
        description: Customer residential address.
        $ref: '#/definitions/Address'
      useBillingAsShippingAddress:
        type: boolean
        description: |
            If set to `true` and no _shipping_ address is provided the _billing_ address will be used in place of _shipping_ address.
            By default `false`.
      additionalAddresses:
        type: array
        description: Collection of additional shipping addresses.
        items:
          $ref: '#/definitions/Address'
    description: |
        Customers addresses.

        Important for PSP and payment methods with advanced risk management or in countries where AVS is commonly used (e.g. USA).
        Often an obligatory information for retail merchants. For example, PayPal requires shipping address to be supplied by
        merchants to qualify for "merchant protection" feature.
  Address:
    type: object
    description: Address details.
    properties:
      street:
        type: string
        description: Street name.
        example: Ganghoferstr.
      houseNumber:
        type: string
        description: House number. May include suffix and prefix, e.g. "16a", "64 app.32".
        example: '39'
      zip:
        type: string
        description: ZIP code / post code.
        example: '80339'
      city:
        type: string
        description: City
        example: Munich
      state:
        type: string
        description: State. Name or code as it is used in the US or other countries with a strong federal structure.
        example: Bayern
      country:
        type: string
        description: Country code. Value format is according to ISO 3166-1 (alpha-2).
        example: DE
      name:
        description: |
            Indicates a recipient name of this address. This can be provided if, for example, the shipping address
            is related to a different name (person) than it is given in the customer object.
        $ref: '#/definitions/Name'
      companyName:
        type: string
        description: Company name. Should be specified for company addresses to complement or instead of recipient name.
        example: optile GmbH
      verified:
        type: boolean
        description: |
            Indicates if this address is verified or confirmed by merchant (or PSP).

            Note: this is optional information and may not be always supplied by merchant or PSP.
        example: true
      id:
        type: string
        description: |
            Address identifier assigned by the merchant. If assigned, products in the shopping cart and shipping may refer
            to this address via `shippingAddressId` and `addressId` fields respectively.
        example: 5afef7fb0bd6e003bfa6e617
      merchantAddress:
        type: boolean
        description: Indicates whether this address is managed by merchant (i.e. shop address) or not (customer address).
      firstTimeUseDate:
        type: string
        format: date-time
        description: Date when address was used first time.
        example: 2017-09-22T13:53:46.410+0000
  CustomerAddressesCollectedDetails:
    type: object
    properties:
      shipping:
        description: Payment shipping address.
        $ref: '#/definitions/AddressCollectedDetails'
      billing:
        description: Customer billing (payment) address.
        $ref: '#/definitions/AddressCollectedDetails'
      residential:
        description: Customer residential address.
        $ref: '#/definitions/AddressCollectedDetails'
      useBillingAsShippingAddress:
        type: boolean
        description: |
          If set to `true` and no _shipping_ address is provided the _billing_ address will be used in place of _shipping_ address.
          By default `false`.
      additionalAddresses:
        type: array
        description: Collection of additional shipping addresses.
        items:
          $ref: '#/definitions/AddressCollectedDetails'
    description: |
      Customers addresses.

      Holds information about the customers shipping, residential and billing addresses collected / supplied by PSP.
      This is an essential part of Express Checkout flow, but can also be supplied by PSP during standard Checkout flow.
  AddressCollectedDetails:
    type: object
    properties:
      id:
        type: string
        description: |
          Address identifier.
        example: 5afef7fb0bd6e003bfa6e617
      street:
        type: string
        description: Street name.
        example: Ganghoferstr.
      addressLines:
        type: array
        items:
          type: string
        description: An additional address data. Can be provided by PSP only during Express Checkout flow.
        example:
          - Ganghoferstr. 39
          - 80339 Munich
          - DE Germany
      houseNumber:
        type: string
        description: House number. May include suffix and prefix, e.g. "16a", "64 app.32".
        example: '39'
      zip:
        type: string
        description: ZIP code / post code.
        example: '80339'
      city:
        type: string
        description: City
        example: Munich
      state:
        type: string
        description: State. Name or code as it is used in the US or other countries with a strong federal structure.
        example: Bayern
      country:
        type: string
        description: Country code. Value format is according to ISO 3166-1 (alpha-2).
        example: DE
      name:
        description: |
          Indicates a recipient name of this address. This can be provided if, for example, the shipping address
          is related to a different name (person) than it is given in the customer object.
        $ref: '#/definitions/Name'
      companyName:
        type: string
        description: Company name. Should be specified for company addresses to complement or instead of recipient name.
        example: optile GmbH
      verified:
        type: boolean
        description: |
          Indicates if this address is verified or confirmed by PSP.

          Note: this is optional information and may not be always supplied by PSP.
        example: true
    description: |
      Holds information about address information collected / supplied by PSP.
      This is an essential part of Express Checkout flow, but can also be supplied by PSP during standard Checkout flow.
  Phones:
    type: object
    properties:
      home:
        description: Where the customer is reachable when he/she is at home.
        $ref: '#/definitions/PhoneNumber'
      work:
        description: Where the customer is reachable when he/she is at work.
        $ref: '#/definitions/PhoneNumber'
      mobile:
        description: Mobile phone of the customer.
        $ref: '#/definitions/PhoneNumber'
      mobileSecondary:
        description: Second mobile phone of the customer (e.g. from his/her work).
        $ref: '#/definitions/PhoneNumber'
      company:
        description: The general phone number of the customer's company. Not to be confused with `work` number.
        $ref: '#/definitions/PhoneNumber'
      fax:
        description: A facsimile number (fax number) that can be used to reach the customer.
        $ref: '#/definitions/PhoneNumber'
      other:
        description: Any customer's number that does not match any type from above, e.g. pager number.
        $ref: '#/definitions/PhoneNumber'
    description: Customers phone numbers. Important for payments with advanced risk management.
  PhoneNumber:
    type: object
    properties:
      countryCode:
        type: string
        description: A country code with numbers only. For example, "49" for Germany, "7" for Russia.
        example: '49'
      areaCode:
        type: string
        description: An area code with numbers only, e.g. "89" for Munich city.
        example: '89'
      subscriberNumber:
        type: string
        description: A subscriber number (without country and area code) with numbers only, e.g. "88008800".
        example: '88008800'
      unstructuredNumber:
        type: string
        description: |
            Use this for a full phone number including country and/or area codes, e.g. "+49 (0)89 880088-00".
            Can be used instead of structured number fields.
        example: +49 (0)89 880088-00
  Registration:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: |
            Registration ID within OPG platform. Generated and supplied to merchant when an entity like a customer
            or account or other gets registered in OPG for the first time in scope of this merchant.
        example: 59e07b240bd6e05fe60f063au
      password:
        type: string
        description: |
            Registration password. Required to access entity details stored at optile.
        example: sfqh52h442j...
      esJwt:
        type: string
        description: |
            Ecosystem customer registration JWT - JWT token, ecrypted by Optile's public key. This JWT should be signed by
            Ecosystem and contain ecosystem customer registration id and password.
            Please refer http://checkoutdocs.payoneer.com for an additional information.
    description: Information about entity registration in OPG. Refers to the registration of a customer or an account in OPG system.
  RegistrationAccountInfo:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: |
            Registration ID within OPG platform. Generated and supplied to merchant when account entity is registered in
            OPG for the first time in scope of this merchant.
        example: 5ea00dd305774a6e7386ff4aa
    description: Information about account registration in OPG. Refers to the registration of account in OPG system.
  Identity:
    type: object
    required:
      - identifier
    properties:
      date:
        type: string
        format: date
        description: Identity date, could be issuing or expiry date (this value depends on identity type).
        example: 2006-10-13
      identifier:
        type: string
        description: Identity value or number.
        example: MR0123A12
  Identities:
    type: object
    properties:
      nationalId:
        description: Customer national ID (or 'ID card', or 'internal passport').
        $ref: '#/definitions/Identity'
      travelPassport:
        description: Information about customer's travel passport.
        $ref: '#/definitions/Identity'
      drivingLicense:
        description: Information about customer's driver license.
        $ref: '#/definitions/Identity'
      socialSecurity:
        description: Customer's social security information.
        $ref: '#/definitions/Identity'
    description: |
        Customers identities. Important for payments with advanced risk management.
  CompanyIdentities:
    type: object
    properties:
      registrationNumber:
        description: Company registration number.
        $ref: '#/definitions/Identity'
      taxNumber:
        $ref: '#/definitions/Identity'
        description: |
             Company tax number.

             It can be `Value Added Tax Identification Number` (`VATIN`) in Europe, `Federal tax ID` in the US,
             `Goods and Services Tax Identification Number` (`GSTIN`) in India, etc.
    description: |
        Company identities.
  ClientInfo:
    type: object
    properties:
      ip:
        type: string
        # format: ipv4
        description: The customer's IP v4 address, e.g. "67.23.211.9". This can be used by advanced risk management.
        example: '67.23.211.9'
      ipv6:
        type: string
        # format: ipv6
        description: |
            The customer's IP v6 address, e.g. "2001:0db8:85a3:08d3:1319:8a2e:0370:7344". This can be used by advanced risk management.
        example: 2001:0db8:85a3:08d3:1319:8a2e:0370:7344
      userAgent:
        type: string
        description: |
            The userAgent header string as provided by the customer's client, e.g. browser. This can be used for payment network selection
            or by hosted payment pages from optile or PSP to improve user experience during checkout.
        example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:55.0) Gecko/20100101 Firefox/55.0'
      acceptHeader:
        type: string
        description: The accept header string as provided by the customer's client, e.g. browser.
        example: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
      deviceId:
        type: string
        description: Unique device identifier or fingerprint. Used mainly by risk engines.
        example: 62c7c7034725345c065
      headers:
        type: array
        description: |
            An array of additional client specific headers like 'Referer'.
        items:
          $ref: '#/definitions/Parameter'
      javaEnabled:
        type: boolean
        description: The ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled() method.
        example: false
      language:
        type: string
        description: |
            Represents the browser language as defined in IETF BCP47. The value is limited to 1-8 characters.
            Value is returned from navigator.language property.
        example: en-US
      colorDepth:
        type: integer
        description: |
            Representing the bit depth of the color palette for displaying images, in bits per pixel. Obtained from cardholder browser
            using the screen.colorDepth property.
        example: 32
      timezone:
        type: string
        description: Browser's timezone from tz database list, ex. `Europe/Berlin`.
        example: America/Detroit
      browserScreenWidth:
        type: integer
        description: |
            Cardholder's browser window width in pixels.
            See [w3schools example](https://www.w3schools.com/jsref/prop_win_innerheight.asp) how to get it.
        example: 800
      browserScreenHeight:
        type: integer
        description: |
            Cardholder's browser window height in pixels.
            See [w3schools example](https://www.w3schools.com/jsref/prop_win_innerheight.asp) how to get it.
        example: 600
    description: Information about customers client (web browser, mobile device, etc.).
  Payment:
    type: object
    required:
      - reference
      - amount
      - currency
    properties:
      reference:
        type: string
        description: |
            Short description of the order given by merchant. This will appear on bank statements or invoices of customer account
            if supported by PSP and selected payment method.
        example: order nr. 04837
      amount:
        type: number
        format: double
        description: |
            The total amount (including taxes, shipping, etc.) of this order in native format using "." as decimal delimiter.
            Customer will be charged for this amount.
        example: 40.42
      netAmount:
        type: number
        format: double
        description: |
          The total net amount of this order in native format using "." as decimal delimiter.
          This value should be equal to sum of products.netAmount (including all products, services like shipping and discounts).
        example: 30.15
      currency:
        type: string
        description: Currency of this payment. Value format is according to ISO-4217 form, e.g. "EUR", "USD".
        example: EUR
      invoiceId:
        type: string
        description: Invoice ID assigned by merchant to this payment. Max 128 characters.
        example: O-21072017/035/0001635
      longReference:
        $ref: '#/definitions/LongReference'
      plannedShippingDate:
        type: string
        format: date-time
        description: Shipping date of pre-ordered items.
        example: 2017-09-22T13:53:46.410+0000
      dueDate:
        type: string
        format: date-time
        description: Payment deadline (time window a customer should complete a payment).
        example: 2017-08-22T14:53:46.410+0000
      taxAmount:
        type: number
        format: double
        description: The total tax amount of this order.
        example: 2.33
      type:
        $ref: '#/definitions/PaymentType'
    description: Payment information.
  LongReference:
    type: object
    required:
      - essential
    properties:
      essential:
        type: string
        description: Essential part of payment's long reference. Max 32 chars.
        example: shop.example.com 0001452
      extended:
        type: string
        description: Extended part of payment's long reference. Max 32 chars.
        example: Questions? +49 89 678321456
      verbose:
        type: string
        description: Verbose part of payment's long reference. Max 32 chars.
        example: Thank you for your purchase!
      city:
        type: string
        description: Bank city (or any other account related city)
        example: Augsburg
    description: A long description of the order given by merchant.
  Product:
    type: object
    required:
      - name
      - amount
    properties:
      code:
        type: string
        description: |
            Identifier for this product given by the merchant. Not validated for uniqueness by OPG. May appear on customer invoice.
        example: PN-001276
      name:
        type: string
        description: Human readable name of this product. May appear on customer invoice.
        example: Juggling Balls (Red/Green/Blue)
      amount:
        type: number
        format: double
        description: |
            Total price of each product record with respect to `quantity` field. For example, if single item of product costs `10.00`
            and `quantity` indicates `2` items in this product record, the value of this field must be `20.00`. You can have multiple
            products, and multiple amounts respectively.

            The sum of all product amounts should match the `amount` field in `payment` object.
        example: 40.42
      netAmount:
        type: number
        format: double
        description: |
            Total net price of each product record with respect to the quantity field excluding tax amount. For example, if a single item
            of product costs `10.00` and quantity indicates `2` items in this product record, the value of this field must be `20.00`.
            You can have multiple products, and multiple amounts respectively.
        example: 36.38
      taxAmount:
        type: number
        format: double
        description: Total tax amount (e.g. VAT amount) of each product record.
        example: 4.04
      taxRatePercentage:
        type: number
        format: double
        description: Tax rate percentage (e.g. VAT tax rate) for this product record.
        example: 10.0
      taxCode:
        type: string
        description: The tax code for this product record.
        example: '123456789'
      currency:
        type: string
        description: |
            Currency of the `amount` field. Value format is according to ISO-4217 form, e.g. "EUR", "USD".
            If undefined the currency will be taken from `payment` object.
        example: EUR
      quantity:
        type: integer
        format: int32
        description: Product quantity.
        example: 2
      plannedShippingDate:
        type: string
        format: date-time
        description: Date (or time stamp) of planned shipment for this product record.
      productDescriptionUrl:
        type: string
        format: uri
        description: |
            URL to product description page. This URL can be used by PSP to build an order-friendly payment page during checkout
            or during future communication with customer about this order or product.
        example: https://shop.example.com/products/PN-001276.html
      productImageUrl:
        type: string
        format: uri
        description: |
            URL to product image. This URL can be used by PSP to build an order-friendly payment page during checkout
            or during future communication with customer about this order or product.
        example: https://shop.example.com/images/products/PN-001276-logo.png
      description:
        type: string
        description: Product description in free form (no markup supported).
      shippingAddressId:
        type: string
        description: |
            Shipping address ID to deliver this product to. If undefined, the product is delivered to the address described
            by `customer.addresses.shipping` property.
      type:
        type: string
        description: |
            Defines a type of the product:
              * `PHYSICAL` - Physical product
              * `DIGITAL` - Digital product
              * `SERVICE` - Service
              * `TAX` - The type which should be used in the case when the tax information about shopping card should be provided
                as a separate order line (common case for USA market)
              * `OTHER` - Other types not listed above
        enum:
          - PHYSICAL
          - DIGITAL
          - SERVICE
          - TAX
          - OTHER
      commodityCode:
        type: string
        description: |
            The commodity code for this product.
            This value is the [United Nations Standard Products and Services Code](https://www.unspsc.org/).
        example: '10121803'
      discountAmount:
        type: number
        format: double
        description: The discount amount for this product.
        example: 4.55
      unitOfMeasure:
        type: string
        description: The item unit of measurement. The maximum length is 3 characters.
        example: m
      unitAmount:
        type: number
        format: double
        description: The unit price of this product.
        example: 2.99
  Shipping:
    type: object
    properties:
      shippingCompany:
        type: string
        description: Shipping company.
        example: Worldwide Cargo Shipping
      method:
        type: string
        description: |
            Shipping method:
              * `PICK_UP_STORE` - Pick up store, a customer has to pick up his goods in a store
              * `HOME` - Delivery to home
              * `BOX_REG` - Registered box, a package that will have registration and tracking id
              * `BOX_UNREG` - Unregistered box, a package that will NOT have registration and tracking ids. Usually used in the case of
                low-amount goods
              * `PICK_UP_POINT` - Pick up point, a pickup point allows the customer to choose a point where he wants to receive his order
              * `OWN` - Delivery managed by the merchant
              * `POSTAL` - Post office
              * `PACK_STATION` - Pack station provides automated booths for a self-service collection of parcels and oversize letters
                as well as the self-service dispatch of parcels 24 hours a day, seven days a week
              * `DIGITAL` - Digital
              * `UNDEFINED` - Undefined
        enum:
          - PICK_UP_STORE
          - HOME
          - BOX_REG
          - BOX_UNREG
          - PICK_UP_POINT
          - OWN
          - POSTAL
          - PACK_STATION
          - DIGITAL
          - UNDEFINED
      addressId:
        type: string
        description: Shipping address id. The address with this id must be provided as a part of customer addresses.
        example: '12345'
      trackingNumber:
        type: string
        description: Tracking number.
        example: '9999 9999 9999'
      trackingUri:
        type: string
        description: Tracking URI.
        example: https://www.ups.com/track?loc=en_US&tracknum=999999999999
      returnShippingCompany:
        type: string
        description: Return shipping company.
        example: Worldwide Cargo Shipping
      returnTrackingNumber:
        type: string
        description: Return tracking number.
        example: '9999 9999 9999'
      returnTrackingUri:
        type: string
        description: Return tracking URI.
        example: https://www.ups.com/track?loc=en_US&tracknum=999999999999
  AccountInputData:
    type: object
    properties:
      holderName:
        type: string
        description: Account holder name.
        example: Maria Mustermann
      number:
        type: string
        description: Account number (bank account number, credit card number, etc.).
        example: '4111111111111111'
      bankCode:
        type: string
        description: Bank code.
        example: '39040013'
      bankName:
        type: string
        description: Bank name.
        example: Commerzbank
      bic:
        type: string
        description: BIC code.
        example: COBADEFFXXX
      branch:
        type: string
        description: Bank branch name.
        example: Commerzbank NRW
      city:
        type: string
        description: Bank city or any other account related city.
        example: Aachen
      expiryMonth:
        type: string
        description: Account expiry month (credit/debit cards).
        example: '7'
      expiryYear:
        type: string
        description: Account expiry year (credit/debit cards).
        example: '2020'
      iban:
        type: string
        description: IBAN number.
        example: DE89370400440532013000
      login:
        type: string
        description: Account login name.
        example: james.blond@mail.com
      optIn:
        type: boolean
        description: Indicates whether customer is agreed to opt-in or not.
      password:
        type: string
        description: Account password.
        example: secret123
      verificationCode:
        type: string
        description: Account verification code (CVC, CVV, CID in case of different credit cards).
        example: '987'
      customerBirthDay:
        type: string
        description: Day of customer birthday.
        example: '21'
      customerBirthMonth:
        type: string
        description: Month of customer birthday.
        example: '12'
      customerBirthYear:
        type: string
        description: Year of customer birthday.
        example: '1984'
      installmentPlanId:
        type: string
        description: ID of chosen installment plan.
        example: p12x2
      accountType:
        type: string
        description: |
            Bank account type.
            Bank account type.
              * `CHECKINGS_ACCOUNT` - A transaction account, also called a checking account or a current account. The checking
                accounts are primarily for accessing your money for daily use. In Japan, a current account (Touza-yokin Kouza)
                is basically only available for corporate use, whereas you cannot pay for shopping purchases by check.
              * `SAVINGS_ACCOUNT` - A savings account is an interest-bearing deposit account held at a bank or other financial institution.
              * `JOINT_CHECKINGS` - A joint account is a checking account that has been opened by two or more individuals or entities.
              * `JOINT_SAVINGS_ACCOUNT` - A joint saving account is a saving account that has been opened by two or more
                individuals or entities.
              * `MASTER_ACCOUNT` - A Master Account allows users to link multiple accounts in order to more efficiently manage
                the ins and outs of their day-to-day operations.
              * `SALARY_ACCOUNT` - A Salary Account is a type of Savings Account with additional benefits, in which the employer
                of the account holder deposits a fixed amount of money as 'salary' every month.
              * `ORDINARY_ACCOUNT` - The most common form of bank account in Japan is a general deposit account known as futsu yokin.
        enum:
          - CHECKINGS_ACCOUNT
          - SAVINGS_ACCOUNT
          - JOINT_CHECKINGS
          - JOINT_SAVINGS_ACCOUNT
          - MASTER_ACCOUNT
          - SALARY_ACCOUNT
          - ORDINARY_ACCOUNT
    description: Customer account data. Presence of account fields depends on a selected payment network.
  Level3Data:
    type: object
    properties:
      dutyAmount:
        type: number
        format: double
        description: The total duty amount applied to the transaction.
        example: 3.44
      freightAmount:
        type: number
        format: double
        description: The total freight/shipping amount applied to the transaction.
        example: 1.22
      shipFromZip:
        type: string
        description: The postal code of an address from where goods will be shipped.
        example: '80995'
      orderNumber:
        type: string
        description: The purchase order identification value.
        example: '8316384413'
    description: Parameters needed to send Level 3 data information.
  Style:
    type: object
    properties:
      language:
        type: string
        description: |
            Preferred language for payment page. If undefined will be decided upon country information from transaction object.

            Format `<language code>[_<COUNTRY CODE>]`, where `<language code>` is a mandatory part that comply with
            [ISO 639-1 (alpha-2)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), and `<COUNTRY CODE>` is an optional
            part that comply with [ISO 3166-1 (alpha-2)](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).

            Examples: `de` - for German, `de_CH` - for Swiss German
        example: de_AT
      theme:
        type: string
        description: |
            The theme code for hosted payment page. For example, "light", "dark", "highcontrast", etc.

            **Deprecated!** This property is not supported in OPG II and will be ignored. Use `cssOverride` to change style and
            appearance of hosted payment page.
      cssOverride:
        type: string
        description: |
            URL of merchant custom CSS for payment page. It can be hosted anywhere but must be accessible through "https" protocol.
      resolution:
        type: string
        enum:
          - 1x
          - 2x
          - 3x
        description: |
            Allows to define resolution of networks logo images. Currently supported values `1x` - for _old_ images where
            the height is 32px, `2x` - for high resolution logos with double height (64px), `3x` - for high resolution logos
            with triple height (96px)
      hostedVersion:
        type: string
        description: |
            Version of hosted payment page that merchant would prefer to render the `LIST` session with when
            using `HOSTED` integration type.

            Currently supported versions: `v2`, `v3`, `v4`

            Warning: not specifying `hostedVersion` field will result in a deprecated version of the hosted payment page.
            3DS2 flow may not be handled properly by this page.
        example: v3
      challengeWindowSize:
        type: string
        description: |
            Challenge Window size the issuer should use to display the challenge. If the input value does not match
            any of the possible values, a default option `250x400` will be used.
            Possible values (enumerated in 3DS2 specification):
              - fullPage
              - 250x400
              - 390x400
              - 500x600
              - 600x400
      displayName:
        type: string
        description: The display name of a merchant shop, used on the new `v4` standalone hosted payment page.
        example: My Coffee Shop
      primaryColor:
        type: string
        description: The primary color to use for styling `v4` standalone hosted payment page.
        example: '#21bb21'
      logoUrl:
        type: string
        format: uri
        description: The URL of a merchant shop logo, displayed on the new `v4` standalone hosted payment page.
      backgroundType:
        type: string
        example: 'BACKGROUND_COLOR'
        description: |
          Explicitly specified preference for the type of background to be used on the checkout page.
        enum:
          - NONE
          - PRIMARY_COLOR
          - BACKGROUND_COLOR
          - BACKGROUND_IMAGE
      backgroundColor:
        type: string
        example: '#2196f3'
        description: |
          The background color to be used on the payment page. It must be specified as a hex number,
          following the the pattern `^#[0-9a-fA-F]{6}$`
      backgroundImageUrl:
        type: string
        example: https://resources.sandbox.oscato.com/standalone/logo_wide_temp@4x.png
        description: |
          The URL to an image to be used as the background on the payment page. It must be a valid URL and the protocol must be `https`.
    description: |
        Allows to change default appearance of payment page. It applies to either hosted payment page (for `HOSTED` integration type),
        or to the page rendered by `op-payment-widget` (see AJAX integration topic).
  StandaloneStyle:
    type: object
    properties:
      language:
        type: string
        description: |
            Preferred language for payment page. If undefined will be decided upon country information from transaction object.

            Format `<language code>[_<COUNTRY CODE>]`, where `<language code>` is a mandatory part that comply with
            [ISO 639-1 (alpha-2)](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes), and `<COUNTRY CODE>` is an optional
            part that comply with [ISO 3166-1 (alpha-2)](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).

            Examples: `de` - for German, `de_CH` - for Swiss German
        example: en_GB
      challengeWindowSize:
        type: string
        description: |
            Challenge Window size the issuer should use to display the challenge. If the input value does not match
            any of the possible values, a default option `250x400` will be used.
            Possible values (enumerated in 3DS2 specification):
              - fullPage
              - 250x400
              - 390x400
              - 500x600
              - 600x400
    description: |
        Allows to pass some style parameters for redirect page during stand-alone operation or express checkout flow, if payments
        ends up with redirect to PSP.

        Note: this may or may not be respected by PSP.
  Preselection:
    type: object
    properties:
      deferral:
        type: string
        enum:
          - ANY
          - DEFERRED
          - NON_DEFERRED
        description: |
            Instructs a deferred behavior of payment networks.
            See [Deferred Payments](https://orchestrationdocs.payoneer.com/docs/work-with-deferred-transactions) for more details.

            **Default** behavior is `NON_DEFERRED`.
      direction:
        type: string
        enum:
          - CHARGE
          - PAYOUT
        description: |
            Defines a direction of initialized `LIST` session: `CHARGE` for payment direction, `PAYOUT` for pay out (credit).
            See [Payout Page](https://orchestrationdocs.payoneer.com/docs/work-with-payouts) for more details.

            **Default** direction is `CHARGE`.

            **Deprecated!** This property is deprecated. Use `operationType` instead.
      networks:
        type: string
        enum:
          - ANY
          - APPLICABLE
          - REGISTERED
        description: |
            Indicates what type of payment networks should appear in `LIST` response for selection.

            **Default** behavior is `ANY`.
      networkCodes:
        type: array
        description: Collection of network codes to be present in the `LIST` session.
        items:
          type: string
          example: MASTERCARD
      challengeIndicator:
        type: string
        enum:
          - NO_PREFERENCE
          - NO_CHALLENGE_REQUESTED
          - CHALLENGE_REQUESTED_MERCHANT
          - CHALLENGE_REQUESTED_MANDATE
        description: Indicates whether a challenge is requested for this transaction.
      splitAuthentication:
        type: boolean
        description: |
          A flag which indicates that operation should be paused after customer authentication step
          (like stop after 3DS authentication before amount-authorization will be triggered).
    description: |
        The preselection group includes parameters to control the list of preselected payment networks and to steer
        payment network specific behavior like deferral.
  StandalonePreselection:
    type: object
    required:
      - networkCodes
    properties:
      deferral:
        type: string
        enum:
          - ANY
          - DEFERRED
          - NON_DEFERRED
        description: |
            Instructs a deferred behavior of payment networks.
            See [Deferred Payments](https://orchestrationdocs.payoneer.com/docs/work-with-deferred-transactions) for more details.

            **Default** behavior is `NON_DEFERRED`.
      networkCodes:
        type: array
        description: Network codes for stand-alone operation. Only one network code is expected for this type of transactions.
        items:
          type: string
          example: VISA
      challengeIndicator:
        type: string
        enum:
          - NO_PREFERENCE
          - NO_CHALLENGE_REQUESTED
          - CHALLENGE_REQUESTED_MERCHANT
          - CHALLENGE_REQUESTED_MANDATE
        description: Indicates whether a challenge is requested for this transaction.
    description: |
        The preselection settings influence the resulted payment network and steer its behavior (like deferral)
        during stand-alone operation.
  RecurringPreselection:
    type: object
    properties:
      deferral:
        type: string
        enum:
          - ANY
          - DEFERRED
          - NON_DEFERRED
        description: |
            Instructs a deferred behavior of payment networks.
            See [Deferred Payments](https://orchestrationdocs.payoneer.com/docs/work-with-deferred-transactions) for more details.

            **Default** behavior is `NON_DEFERRED`.
    description: |
        The preselection group includes parameters to steer payment network specific behavior during recurring payment.
  OperationPreselection:
    type: object
    properties:
      challengeIndicator:
        type: string
        enum:
          - NO_PREFERENCE
          - NO_CHALLENGE_REQUESTED
          - CHALLENGE_REQUESTED_MERCHANT
          - CHALLENGE_REQUESTED_MANDATE
        description: |
            Indicates whether a challenge is requested for this transaction.
            Note: This value is optional and if it is not set the `challengeIndicator` from referred operation (e.g. LIST) will be used
            during processing.
    description: |
        The preselection group includes a parameter to control whether a challenge is requested for this transaction.
  ExtraElements:
    type: object
    properties:
      top:
        type: array
        description: Collection of extra elements (labels and checkboxes) that should be displayed on the top of the checkout page.
        items:
          $ref: '#/definitions/ExtraElement'
      bottom:
        type: array
        description: Collection of extra elements (labels and checkboxes) that should be displayed on the bottom of the checkout page.
        items:
          $ref: '#/definitions/ExtraElement'
    description: |
        Describes extra elements that should be rendered on a checkout page. Designed to add additional labels and checkboxes to
        the payment selection page.
  ExtraElement:
    type: object
    required:
      - name
      - label
    properties:
      name:
        type: string
        example: toc
        description: Distinguishing name of this extra element.
      label:
        type: string
        example: 'I agree to the [Terms and Conditions](https://www.myshop.com/toc.html).'
        description: Localized descriptive text that should be displayed for this extra element.
      checkbox:
        $ref: '#/definitions/Checkbox'
      networkCodes:
        type: array
        items:
          type: string
        example:
          - VISA
          - MASTERCARD
        description: |
          Allows merchant to specify networks for which the ExtraElement should be displayed. If no network is specified, the extra element
          would be displayed for all networks.
      origin:
        type: string
        enum:
          - platform
          - merchant
        description: Distinguishing the origin of the configuration; default is `merchant`.
  Checkbox:
    type: object
    required:
      - mode
    properties:
      mode:
        type: string
        enum:
          - OPTIONAL
          - OPTIONAL_PRESELECTED
          - REQUIRED
          - FORCED_DISPLAYED
        description: Operating and display mode of this checkbox.
      requiredMessage:
        type: string
        description: |
          Localized error message that will be displayed if checkbox is required, but was not checked.
    description: Parameters of a checkbox or `null` (not defined) if this extra element is a label.
  Mandate:
    type: object
    required:
      - reference
    properties:
      reference:
        type: string
        description: |
            The SEPA mandate reference (aka Mandate ID) proposed by the merchant. It has to be unique in the scope
            of his `creditorId`.
        example: 12980_W6456187767
      creditorId:
        type: string
        description: |
            The SEPA creditor ID of the merchant. It can also be configured for some PSP within a contract. In this case the
            parameter is optional. In case when PSP uses its own creditor ID it will be returned in response and via
            status notification.
        example: CH07ZZZ00000012345
      authentication:
        $ref: '#/definitions/MandateAuthentication'
    description: |
        Mandate information required for SEPA payment networks processing. It can be passed with a `CHARGE` request
        in case of native integration scenario, otherwise it should be provided during `LIST` initialization.
  MandateAuthentication:
    type: object
    required:
      - time
    properties:
      time:
        type: string
        format: date-time
        description: The date when the authentication took place, i.e. when customers granted their mandate.
        example: 2017-10-12T13:28:28+0000
      city:
        type: string
        description: |
            The city where the authentication took place, i.e. the city where customers granted their mandate.
            This field is rarely checked or required by PSPs.
        example: Berlin
    description: Required by some PSPs for SEPA transactions.
  Installment:
    type: object
    properties:
      count:
        type: integer
        format: int32
        description: |
            Number of installments the payment should be split into.
            This parameter should be supplied only for simplified installment calculation.
        example: 12
      planId:
        type: string
        description: ID of selected installment plan.
    description: |
        Information or hint about installment schema preferred by customer. It can be passed with a `CHARGE` request
        in case of native integration scenario, otherwise it should be provided during `LIST` initialization.

        Note: Either `count` or `planId` must be provided. Most PSPs require `planId`.
  PaymentRecurring:
    type: object
    properties:
      expireDate:
        type: string
        format: date-time
        description: A date after which no further recurring payments using this card are allowed.
        example: 2017-09-22T13:53:46.410+0000
      frequency:
        type: integer
        description: The minimum number of days between individual payments.
    description: Payment recurring data.
  CustomerAccount:
    type: object
    properties:
      registrationDate:
        type: string
        format: date-time
        description: |
            Date the payment account was added to the customer account.
            For registered customers optile will fill `account.registrationDate` parameter using our internal data.
            This parameter can be passed during `LIST` or `CHARGE`. Usually we would expect this to be passed in `CHARGE` call.
      changedDuringCheckout:
        type: boolean
        description: |
          The changes to billing & shipping address details, new payment account (tokens), or new users(s) added during this transaction.
          `true`  the consumer made changes to their account during this checkout
          `false` the consumer didn't change anything to their account during this checkout
    description: Customer account risk data.
  RiskDataCustomer:
    type: object
    properties:
      paymentAttemptsLastDay:
        type: integer
        description: |
            Number of transactions (successful and abandoned) for this customer account with the merchant across
            all payment accounts in the previous 24 hours.
        example: 12
      paymentAttemptsLastYear:
        type: integer
        description: |
            Number of transactions (successful and abandoned) for this customer account with the merchant across
            all payment accounts in the previous year.
        example: 12
      cardRegistrationAttemptsLastDay:
        type: integer
        description: Number of Add Card attempts in the last 24 hours.
        example: 12
      purchasesLastSixMonths:
        type: integer
        description: Number of purchases with this customer account during the previous six months.
        example: 12
      suspiciousActivity:
        type: boolean
        description: Indicates if the merchant knows of suspicious activities by the consumer (e.g. previous fraud).
      account:
        $ref: '#/definitions/CustomerAccount'
    description: Customer risk data.
  RiskDataShipping:
    type: object
    properties:
      type:
        type: string
        enum: [ELECTRONIC_DELIVERY, SAME_DAY_SHIPPING, OVERNIGHT_SHIPPING, OTHER_SHIPPING]
        description: |
          - `ELECTRONIC_DELIVERY` - For goods that are only delivered electronically
          - `SAME_DAY_SHIPPING` - For goods shipped the same day
          - `OVERNIGHT_SHIPPING` - For goods shipped overnight
          - `OTHER_SHIPPING` - Two-day or more shipping
      itemsAvailable:
        type: boolean
        description: true if customer is ordering items which are currently available, `false` otherwise.
      itemsAvailableDate:
        type: string
        format: date-time
        description: Expected date when a pre-ordered purchase will be available.
        example: 2020-11-24T00:00:00.000+0000
    description: Shipping risk data.
  RiskDataPayment:
    type: object
    properties:
      reorderItems:
        type: boolean
        description: Indicates whether customer reorders items.
      recurring:
        $ref: '#/definitions/PaymentRecurring'
        description: Payment recurring data.
    description: Payment risk data.
  RiskDataGift:
    type: object
    properties:
      amount:
        type: integer
        description: |
            For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s)
            in major units (for example, USD 123.45 is 123).
      currency:
        type: string
        description: Currency of gift card. Value format is according to ISO-4217 form.
        example: EUR
      cardCount:
        type: integer
        description: Total count of individual prepaid gift cards purchased.
    description: Gift risk data.
  RiskData:
    type: object
    properties:
      customer:
        $ref: '#/definitions/RiskDataCustomer'
        description: Customer risk data.
      shipping:
        $ref: '#/definitions/RiskDataShipping'
        description: Shipping risk data.
      payment:
        $ref: '#/definitions/RiskDataPayment'
        description: Payment risk data.
      gift:
        $ref: '#/definitions/RiskDataGift'
        description: Gift risk data.
    description: Risk data. If defined in `CHARGE`, this will override information provided during LIST initialization.
  IntegrationType:
    type: string
    enum:
      - DISPLAY_NATIVE
      - PURE_NATIVE
      - HOSTED
      - SELECTIVE_NATIVE
    description: |
      Defines what integration scenario this payment session is initialized for, default is `DISPLAY_NATIVE`.
      Selected scenario has an impact on operation URLs within response, they will be adjusted for selected integration scenario.

      Possible integration types:
        * `DISPLAY_NATIVE` (legacy name `NATIVE_WITHOUT_PCI`) - integration scenario where payment requests are sent from customer
          browser directly to optile web service, but the logic to do so is implemented and/or rendered by merchant web-site.
          Merchant has to be PCI DSS (**SAQ A-EP**) compliant to process payments with Credit/Debit Cards.
        * `PURE_NATIVE` (legacy name `NATIVE_WITH_PCI`) - full native integration scenario where all requests (including payments)
          are sent from merchant backend server. Merchant has to be PCI DSS (**SAQ D** - highest level of compliance) compliant to
          process payments with Credit/Debit Cards.
        * `HOSTED` - integration scenario where payment requests are sent from page rendered by optile server either direct in
          browser or inside the IFrame of merchants web-site. Merchant has to be PCI DSS (**SAQ A** - lowest level of compliance)
          compliant to process payments with Credit/Debit Cards.
        * `SELECTIVE_NATIVE` - integration scenario where payment requests are sent from customer browser directly to optile web
          service, but the logic to do so is implemented and/or rendered by merchant web-site for all methods except Credit/Debit
          Cards. Credit/Debit Cards payments are rendered within IFrame served from optile server. Merchant has to be PCI DSS
          (**SAQ A** - lowest level of compliance) compliant to process payments with Credit/Debit Cards.

        See [Integration Scenarios](https://orchestrationdocs.payoneer.com/docs/integrations) chapter for detailed comparison of
        different integration types with optile payment service.
  NetworkOperationType:
    type: string
    enum:
      - CHARGE
      - PRESET
      - PAYOUT
      - UPDATE
      - SAVE
      - ACTIVATION
    description: |
        Types of possible operations
  PaymentType:
    type: string
    enum:
      - UNSCHEDULED
      - SCHEDULED
    description: |
      Possible payment types :
       * `UNSCHEDULED` - use for the one-off recurring transaction.
       * `SCHEDULED` - use for the scheduled recurring transaction.
  OperationType:
    type: string
    enum:
      - CHARGE
      - PAYOUT
      - PRESET
      - UPDATE
      - SAVE
    description: |
        Type of operation this `LIST` session is initialized for.

        **Default** type is `CHARGE` unless `operationType` is explicitly set or one of the legacy options is supplied
        during `LIST` initialization: `updateOnly`, `presetFirst`, or `preselection.direction`
  PaymentMethod:
    type: string
    enum:
      - BANK_TRANSFER
      - BILLING_PROVIDER
      - CASH_ON_DELIVERY
      - CHECK_PAYMENT
      - CREDIT_CARD
      - DEBIT_CARD
      - DIRECT_DEBIT
      - ELECTRONIC_INVOICE
      - GIFT_CARD
      - MOBILE_PAYMENT
      - ONLINE_BANK_TRANSFER
      - OPEN_INVOICE
      - PREPAID_CARD
      - TERMINAL
      - WALLET
    example: CREDIT_CARD

  # Response objects
  ErrorInfo:
    type: object
    required:
      - resultInfo
    properties:
      resultInfo:
        type: string
        description: Descriptive information that complements the interaction advice.
      interaction:
        description: Interaction advice for this error response.
        $ref: '#/definitions/Interaction'
  Interaction:
    type: object
    required:
      - code
      - reason
    properties:
      code:
        type: string
        enum:
          - PROCEED
          - ABORT
          - TRY_OTHER_NETWORK
          - TRY_OTHER_ACCOUNT
          - RETRY
          - RELOAD
        description: |
            Interaction code that advices further interaction with this customer or payment.
            See list of [Interaction Codes](https://orchestrationdocs.payoneer.com/docs/work-with-interaction-codes).
      reason:
        type: string
        enum:
          - OK
          - PENDING
          - TRUSTED
          - STRONG_AUTHENTICATION
          - DECLINED
          - EXPIRED
          - EXCEEDS_LIMIT
          - TEMPORARY_FAILURE
          - UNKNOWN
          - NETWORK_FAILURE
          - BLACKLISTED
          - BLOCKED
          - SYSTEM_FAILURE
          - INVALID_ACCOUNT
          - FRAUD
          - ADDITIONAL_NETWORKS
          - INVALID_REQUEST
          - SCHEDULED
          - NO_NETWORKS
          - DUPLICATE_OPERATION
          - CHARGEBACK
          - RISK_DETECTED
          - CUSTOMER_ABORT
          - EXPIRED_SESSION
          - EXPIRED_ACCOUNT
          - ACCOUNT_NOT_ACTIVATED
          - TRUSTED_CUSTOMER
          - UNKNOWN_CUSTOMER
          - ACTIVATED
          - UPDATED
          - TAKE_ACTION
        description: |
            Reason of this interaction, complements interaction code and has more detailed granularity.
            See list of [Interaction Codes](https://orchestrationdocs.payoneer.com/docs/work-with-interaction-codes).
      retryAfter:
        type: string
        format: date-time
        description: If supplied, holds recommended time for next retry. Only applicable for recurring payments.
      customerMessage:
        description: Localized interaction message for customer
        $ref: '#/definitions/InteractionMessage'
  InteractionMessage:
    type: object
    required:
      - title
      - text
    properties:
      title:
        type: string
        description: Title of localized interaction message.
        example: Oops!
      text:
        type: string
        description: Body of localized interaction message.
        example: Something went wrong. Please try again later or use another payment method.
  ReturnCode:
    type: object
    required:
      - name
      - source
    properties:
      name:
        type: string
        description: |
            Unified return code name to indicate success or reason for an error. The code is unified across OPG platform, it
            is independent from underlying PSP or institution service. E.g. "OK", "NON_SUFFICIENT_FUNDS", "INVALID_ACCOUNT_NUMBER", etc.
        example: NON_SUFFICIENT_FUNDS
      source:
        type: string
        description: |
            System that generated this return code. Currently supported values:
              * `GATEWAY` - indicates that return code is generated by OPG platform
              * `PSP` - if return code is a result of mapping from payment service provider code
              * `INSTITUTION` - for those codes that were originally generated by financial institution (issuing or acquiring banks).
        example: INSTITUTION
    description: Complements `resultCode` property with information about unified name and source of the operation result code.
  NetworkList:
    type: object
    required:
      - links
      - timestamp
      - operation
      - resultCode
      - resultInfo
      - status
      - interaction
      - identification
      - integrationType
    properties:
      links:
        $ref: '#/definitions/ListLinks'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `LIST` session.
        example: 2017-09-27T13:18:42.940+0000
      operation:
        type: string
        enum:
          - LIST
        description: Type of this operation
      payment:
        description: |
          Payment details that merchant has supplied when `LIST` was initialized or updated.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
          Products (shopping cart) details that merchant has supplied when `LIST` was initialized or updated.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information that merchant has supplied when `LIST` was initialized or updated.
        items:
          $ref: '#/definitions/Shipping'
      resultCode:
        type: string
        description: |
            Result code of this `LIST` session.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
        example: 00000.11.000
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
        example: 5 applicable and 2 registered networks are found
      returnCode:
        $ref: '#/definitions/ReturnCode'
      status:
        description: |
            Current status of this `LIST` session.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      interaction:
        description: Interaction advice for this `LIST` session according to its current state.
        $ref: '#/definitions/Interaction'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      accounts:
        type: array
        description: Collection of registered accounts (if available) for recurring customer.
        items:
          $ref: '#/definitions/AccountRegistration'
      networks:
        $ref: '#/definitions/Networks'
      extraElements:
        $ref: '#/definitions/ExtraElements'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL. In case of `HOSTED` integration
            scenario this will lead customer to payment page hosted by optile.
        $ref: '#/definitions/Redirect'
      presetAccount:
        $ref: '#/definitions/PresetAccount'
      operationType:
        $ref: '#/definitions/OperationType'
      integrationType:
        $ref: '#/definitions/IntegrationType'
      allowDelete:
        type: boolean
        description: |
            Indicates that deletion of registered accounts is allowed in scope of this `LIST` session:
              * If set to `true` the deletion of accounts is explicitly permitted by merchant.
              * If set to `false` the deletion of accounts is explicitly disallowed by merchant.
              * If nothing is set the default behavior applies: deletion is only allowed for `LIST`s with `operationType` of `UPDATE`,
                or with deprecated `updateOnly` option set to `true`.
      style:
        $ref: '#/definitions/Style'
        description: Allows to change default appearance of payment page.
      clientInfo:
        $ref: '#/definitions/ClientInfo'
      riskProviders:
        type: array
        description: |
          List of risk providers
        items:
          $ref: '#/definitions/RiskProvider'
      processingModel:
        $ref: '#/definitions/ProcessingModel'
        description: Processing model information.
  ExpressList:
    type: object
    required:
      - timestamp
      - resultCode
      - resultInfo
      - returnCode
      - interaction
    properties:
      timestamp:
        type: string
        format: date-time
        description: Date and time this express `LIST` was issued.
        example: 2018-06-21T08:39:01.014+0000
      resultCode:
        type: string
        description: |
            Result code of this express `LIST` execution.
            See see list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
        example: 00000.20.000
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
        example: 2 applicable networks are found
      returnCode:
        $ref: '#/definitions/ReturnCode'
      interaction:
        description: Interaction advice for this express `LIST` result.
        $ref: '#/definitions/Interaction'
      networks:
        $ref: '#/definitions/ExpressNetworks'
  Charge:
    type: object
    required:
      - links
      - timestamp
      - operation
      - network
      - resultCode
      - resultInfo
      - status
      - interaction
      - identification
    properties:
      links:
        $ref: '#/definitions/ChargeLinks'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `CHARGE`.
        example: 2017-09-22T13:53:46.410+0000
      operation:
        type: string
        enum: ['CHARGE', 'CLOSING']
        description: Type of this operation.
      network:
        type: string
        description: Network code of this operation.
        example: AMEX
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      accountInfo:
        description: Derived information (bank name, country of origin, etc.) about the account of this transaction
        $ref: '#/definitions/NetworkAccountInfo'
      providerAccountInfo:
        description: Derived information (bank name, country of origin, etc.) about the account of this transaction, received from provider
        $ref: '#/definitions/NetworkAccountInfo'
      threeDSecure:
        description: Describes 3DS result
        $ref: '#/definitions/ThreeDSecure'
      payment:
        description: |
          Payment details that merchant has supplied when `LIST` was initialized, updated or when `CHARGE` was triggered.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
          Products (shopping cart) details that merchant has supplied when `LIST` was initialized, updated or when `CHARGE` was triggered.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information that merchant has supplied when `LIST` was initialized, updated or when `CHARGE` was triggered.
        items:
          $ref: '#/definitions/Shipping'
      resultCode:
        type: string
        description: |
            Result code of this `CHARGE` that reflects current state.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
        example: 45000.HEIDELPAY.800.100.152
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
        example: 'AUTHORIZATION_VALIDATION: transaction declined by authorization system'
      pspCode:
        type: string
        description: |
            Code of a PSP service that was involved into this operation processing. Every PSP has a unique code assigned by OPG platform.
        example: HEIDELPAY
      institutionCode:
        type: string
        description: |
            Code of a financial institution service that was involved into this operation processing.
            Every financial institution has a unique code assigned by OPG platform.
      returnCode:
        $ref: '#/definitions/ReturnCode'
      status:
        description: |
            Current status of this `CHARGE`.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      interaction:
        description: Interaction advice for this `CHARGE` according to its current state.
        $ref: '#/definitions/Interaction'
      clearing:
        $ref: '#/definitions/Clearing'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL.

            This will lead to either PSP web-site to complete initiated payment, or it will be pointing to one of the
            merchants callback URLs from `LIST` session.
        $ref: '#/definitions/Redirect'
      customer:
        description: |
            Holds customer data of this `CHARGE`. Includes customer registration information, which is essential for recurring payments.
            See [Recurring Charges](https://orchestrationdocs.payoneer.com/docs/work-with-recurring-charges) for further details.
        $ref: '#/definitions/Customer'
      mandate:
        description: |
            Actual mandate information of SEPA payment networks processing. This either duplicates the data from request
            (`Transaction` or `Operation` object), or it is overridden with information generated by PSP.
        $ref: '#/definitions/Mandate'
      providerResponse:
        description: |
            Provider response data given back by the target provider as a result of transaction action. This data should contain
            all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
      customerCollectedDetails:
        description: |
          Collected information about the customer provided by payment service provider.
        $ref: '#/definitions/CustomerCollectedDetails'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
      checks:
        $ref: '#/definitions/RiskChecksResult'
      checkboxes:
        type: object
        description: |
            Map of checkboxes selected by user during preceeding Preset/Charge Operation. Name reflects the checkbox name,
            value reflects its state - `true` for checked, `false` for unchecked.
        additionalProperties:
          type: boolean

      issuer:
        $ref: '#/definitions/Issuer'
  Activation:
    type: object
    required:
      - links
      - timestamp
      - operation
      - resultCode
      - resultInfo
      - returnCode
      - status
      - interaction
      - identification
      - activated
    properties:
      links:
        $ref: '#/definitions/ActivationLinks'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `ACTIVATION`.
      operation:
        type: string
        enum:
          - ACTIVATION
        description: Type of this operation.
      resultCode:
        type: string
        description: |
            Result code of this `ACTIVATION` that reflects current state.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
      returnCode:
        $ref: '#/definitions/ReturnCode'
      status:
        description: |
            Current status of this `ACTIVATION`.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      interaction:
        description: Interaction advice for this `ACTIVATION` according to its current state.
        $ref: '#/definitions/Interaction'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      activated:
        description: Information about applicable network that is activated within this `ACTIVATION` operation.
        $ref: '#/definitions/ApplicableNetwork'
      providerResponse:
        description: |
            Provider response data given back by the target provider as a result of transaction action. This data should contain
            all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
  Payout:
    type: object
    required:
      - links
      - timestamp
      - operation
      - network
      - resultCode
      - resultInfo
      - status
      - interaction
      - identification
    properties:
      links:
        $ref: '#/definitions/PayoutLinks'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `PAYOUT`.
        example: 2017-10-13T13:28:11.433+0000
      operation:
        type: string
        enum:
          - PAYOUT
        description: Type of this operation.
      network:
        type: string
        description: Network code of this operation.
        example: MASTERCARD
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      payment:
        description: |
            Payment details that merchant has supplied when `LIST` was initialized,
            updated, or when `CHARGE` or `PAYOUT` was triggered.
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
            Products (shopping cart) details that merchant has supplied when `LIST` was initialized,
            updated or when `CHARGE` or `PAYOUT` was triggered.
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: |
            Shipping information that merchant has supplied when `LIST` was initialized,
            updated or when `CHARGE` or `PAYOUT` was triggered.
        items:
          $ref: '#/definitions/Shipping'
      resultCode:
        type: string
        description: |
            Result code of this `PAYOUT` that reflects current state.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
        example: 45020.WIRECARD.51
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
        example: Insufficient funds or credit limit exceeded.
      pspCode:
        type: string
        description: |
            Code of a PSP service that was involved into this operation processing. Every PSP has a unique code assigned by OPG platform.
        example: WIRECARD
      institutionCode:
        type: string
        description: |
            Code of a financial institution service that was involved into this operation processing.
            Every financial institution has a unique code assigned by OPG platform.
      returnCode:
        $ref: '#/definitions/ReturnCode'
      status:
        description: |
            Current status of this `PAYOUT`.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      interaction:
        description: Interaction advice for this `PAYOUT` according to its current state.
        $ref: '#/definitions/Interaction'
      clearing:
        $ref: '#/definitions/Clearing'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL.

            This will lead to either PSP web-site to complete initiated `PAYOUT` session, or it will be pointing to one of the
            merchants callback URLs from `LIST` session.
        $ref: '#/definitions/Redirect'
      providerResponse:
        description: |
            Provider response data given back by the target provider as a result of transaction action. This data should contain
            all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
  Preset:
    type: object
    required:
      - links
      - timestamp
      - resultCode
      - resultInfo
      - status
      - network
      - interaction
      - identification
    properties:
      links:
        $ref: '#/definitions/PresetLinks'
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice.
      status:
        description: |
            Current status of this `PRESET`.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL.

            This will lead to either PSP web-site to complete initiated `PRESET`, or it will be pointing to one of the
            merchants callback URLs from `LIST` session.
        $ref: '#/definitions/Redirect'
      network:
        type: string
        description: Network code of preset network or account.
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      accountInfo:
        description: Derived information (bank name, country of origin, etc.) about the account of this transaction
        $ref: '#/definitions/NetworkAccountInfo'
      interaction:
        description: Interaction advice for this `PRESET` according to its current state.
        $ref: '#/definitions/Interaction'
      resultCode:
        type: string
        description: |
            Result code of this `PRESET` that reflects current state.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
      returnCode:
        $ref: '#/definitions/ReturnCode'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `PRESET`.
      providerResponse:
        description: |
            Provider response data given back by the target provider as a result of transaction action. This data should contain
            all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
  ExpressPreset:
    type: object
    required:
      - links
      - timestamp
      - operation
      - resultCode
      - resultInfo
      - returnCode
      - status
      - network
      - interaction
      - identification
      - payment
    properties:
      links:
        $ref: '#/definitions/ExpressPresetLinks'
      timestamp:
        type: string
        format: date-time
        description: Date and time of last update of this `EXPRESSPRESET`.
        example: 2018-06-21T15:02:29.144+0000
      operation:
        type: string
        enum:
          - EXPRESSPRESET
        description: Type of this operation
      resultCode:
        type: string
        description: |
            Result code of this `EXPRESSPRESET` that reflects current state.
            See list of all [Result Codes](https://orchestrationdocs.payoneer.com/docs/view-result-and-return-codes).
        example: 00001.PAYPAL.000
      resultInfo:
        type: string
        description: Descriptive information that complements the result code and interaction advice
        example: Pending, you have to check the status later
      pspCode:
        type: string
        description: |
            Code of a PSP service that was involved into this operation processing.
            Every PSP has a unique code assigned by OPG platform.
        example: PAYPAL
      returnCode:
        $ref: '#/definitions/ReturnCode'
      status:
        description: |
            Current status of this `EXPRESSPRESET`.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
        $ref: '#/definitions/Status'
      interaction:
        description: Interaction advice for this `EXPRESSPRESET` according to its current state.
        $ref: '#/definitions/Interaction'
      identification:
        $ref: '#/definitions/Identification'
      pspReference:
        $ref: '#/definitions/ProviderReference'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL.

            This will lead to either PSP web-site to complete initiated `EXPRESSPRESET` session, or it will be pointing to one
            of the merchants callback URLs from express preset session.
        $ref: '#/definitions/Redirect'
      customer:
        description: |
            Customer details that merchant has supplied when `EXPRESSPRESET` was initialized or updated. Important in cases when express
            preset is initialized from client side (browser).
        $ref: '#/definitions/Customer'
      customerCollectedDetails:
        $ref: '#/definitions/CustomerCollectedDetails'
      network:
        type: string
        description: Network code of this operation
        example: PAYPAL
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      payment:
        description: |
            Payment details that merchant has supplied when `EXPRESSPRESET` was initialized or updated. Important in cases when express
            preset is initialized from client side (browser).
        $ref: '#/definitions/Payment'
      products:
        type: array
        description: |
            Products (shopping cart) details that merchant has supplied when `EXPRESSPRESET` was initialized or updated.
            Important in cases when express preset is initialized from client side (browser).
        items:
          $ref: '#/definitions/Product'
      shipping:
        type: array
        description: Shipping information that merchant has supplied when `EXPRESSPRESET` was initialized or updated. Important in cases
          when express preset is initialized from client side (browser).
        items:
          $ref: '#/definitions/Shipping'
      providerResponse:
        description: |
            Provider response data supplied by provider (adapter) as a result of initialize / update / activate action. This object should
            contain all necessary data to pass into front-end JavaScript logic that complements express checkout flow on the client side.
            It is provider specific and in some cases can be `null`.
        $ref: '#/definitions/ProviderParameters'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
  OperationResult:
    type: object
    required:
      - resultInfo
      - interaction
    properties:
      resultInfo:
        type: string
        description: Descriptive information that complements the interaction advice.
      interaction:
        description: Interaction advice for the operation result.
        $ref: '#/definitions/Interaction'
      redirect:
        description: |
            If present, merchant is advised to redirect customer to corresponding redirect URL.

            This will lead to either PSP web-site to complete initiated payment, or it will be pointing to one of the merchants
            callback URLs from `LIST` session.
        $ref: '#/definitions/Redirect'
      providerResponse:
        description: |
            Provider response data given back by the target provider as a result of transaction action. This data should contain
            all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
      links:
        $ref: '#/definitions/OperationResultLinks'
  Status:
    type: object
    required:
      - code
      - reason
    properties:
      code:
        type: string
        enum:
          - pending
          - failed
          - declined
          - aborted
          - expired
          - canceled
          - listed
          - preauthorized
          - charged
          - paid_out
          - approval_requested
          - charged_back
          - information_requested
          - dispute_closed
          - depleated
          - registered
          - deregistered
          - subscribed
          - unsubscribed
          - used
          - rejected
          - activated
          - functioning
          - ended
          - preset
        description: |
            Status code describes operation current state.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
      reason:
        type: string
        enum:
          - charge_requested
          - processing_scheduled
          - processing_paused
          - debit_requested
          - debited
          - debited_partial
          - debit_failed
          - debit_declined
          - debit_aborted
          - debit_canceled
          - debit_rejected
          - threed_secure_authorization_requested
          - information_requested
          - charged_back
          - dispute_closed
          - chargeback_canceled
          - notification_of_chargeback
          - information2_requested
          - charged_back2
          - dispute2_closed
          - chargeback2_canceled
          - notification_of_chargeback2
          - cancelation_requested
          - cancelation_failed
          - cancelation_declined
          - cancelation_canceled
          - cancelation_rejected
          - preauthorization_requested
          - preauthorized
          - preauthorization_failed
          - preauthorization_declined
          - preauthorization_aborted
          - preauthorization_expired
          - preauthorization_depleted
          - preauthorization_canceled
          - preauthorization_rejected
          - closed
          - closed_partial
          - payment_demand_requested
          - payment_demanded
          - payment_demand_failed
          - payment_demand_declined
          - payment_demand_aborted
          - payment_demand_canceled
          - payment_demand_rejected
          - preorder_requested
          - preorder_aborted
          - preorder_expired
          - preorder_issued
          - preorder_failed
          - preorder_declined
          - preorder_canceled
          - preorder_rejected
          - payment_received
          - receipt_canceled
          - request_expired
          - retry_scheduled
          - payout_requested
          - paid_out
          - paid_out_partial
          - credit_requested
          - credited
          - credited_partial
          - credit_failed
          - credit_declined
          - credit_canceled
          - credit_rejected
          - credit_approval_requested
          - credit_approval_declined
          - credit_approval_failed
          - credit_approval_canceled
          - credit_approval_rejected
          - refund_requested
          - refund_credited
          - refund_credited_partial
          - refund_failed
          - refund_declined
          - refund_canceled
          - refund_rejected
          - refund_approval_requested
          - refund_approval_declined
          - refund_approval_failed
          - refund_approval_canceled
          - refund_approval_rejected
          - refund_required
          - registered
          - registration_requested
          - registration_failed
          - registration_declined
          - registration_aborted
          - registration_expired
          - registration_canceled
          - registration_rejected
          - deregistration_requested
          - deregistered
          - listed
          - list_expired
          - list_failed
          - list_aborted
          - list_canceled
          - list_rejected
          - list_used
          - subscription_created
          - subscription_updated
          - subscription_canceled
          - subscription_creation_failed
          - subscription_update_failed
          - subscription_cancelation_failed
          - entitlement_created
          - entitlement_creation_failed
          - entitlement_updated
          - entitlement_update_failed
          - entitlement_canceled
          - entitlement_cancelation_failed
          - activation_failed
          - calculation_requested
          - calculated
          - calculation_used
          - calculation_rejected
          - calculation_failed
          - calculation_declined
          - calculation_canceled
          - calculation_expired
          - preset_requested
          - preset
          - preset_used
          - preset_failed
          - preset_aborted
          - preset_declined
          - preset_canceled
          - preset_expired
          - started
          - functioning
          - ended
          - confirmation_requested
          - fraud_suspected
        description: |
            Reason of this status, complements status code and has more detailed granularity.
            See list of all [Status Codes](https://orchestrationdocs.payoneer.com/docs/view-transaction-statuses).
  Identification:
    type: object
    required:
      - longId
      - shortId
      - transactionId
    properties:
      longId:
        type: string
        description: Globally unique operation identifier assigned by OPG platform.
        example: 59e48b51018709cc7cc
      shortId:
        type: string
        description: |
            Short identifier assigned by OPG platform to operation. Unlike `longId` this identifier is not guaranteed to be unique.
        example: 03059-69977
      transactionId:
        type: string
        description: Original transaction ID provided by merchant during `LIST` session initialization, or during recurring `CHARGE`.
        example: order-00008312
      pspId:
        type: string
        description: ID assigned by PSP if successful communication with PSP took place in scope of this operation.
        example: 31HA07BC8138E78D0391337D8AFED8AA
      institutionId:
        type: string
        description: |
            ID assigned by financial institution if successful communication with institution took place in scope of this operation.
      systemId:
        type: string
        description: Transaction ID assigned by external system
    description: Collection of different parameters to identify this operation supplied by merchant, optile and PSP.
  System:
    type: object
    properties:
      id:
        type: string
        description: Transaction ID assigned by external system
        example: 123def343ed4ba1cb
      type:
        type: string
        description: Identifies the type of external system. For example 'MARKETPLACE', 'SHOP' and others.
        example: MARKETPLACE
      code:
        type: string
        description: Identifies the code of external system. For example 'SHOPSYSTEM', 'SHOPLAZZA' and others.
        example: SHOPSYSTEM
      version:
        type: string
        description: Identifies the version of external system. For example 'ShopSystemV1.0'.
        example: ShopSystemV1.0
    description: |
        Collection of different information about performing transaction external system - it can be used in case of initial operation
  OperationSystem:
    type: object
    properties:
      id:
        type: string
        description: Transaction ID assigned by external system
        example: 123def343ed4ba1cb
      type:
        type: string
        description: |
            Identifies the type of external system. For example 'MARKETPLACE', 'SHOP' and others.

            **Deprecated!** This property is not used anymore. The operation will use the one that was filled during the initial
            transaction
        example: MARKETPLACE
    description: |
        Collection of different information about performing transaction external system - it can be used in case of referred operation
  AccountRegistrationUpdate:
    type: object
    required:
      - state
    properties:
      state:
        type: string
        description: |
          Indicates the state of this account. Possible values:
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - BLOCKED
            - BLACKLISTED
        example: BLOCKED
  AccountRegistration:
    type: object
    required:
      - links
      - code
      - label
      - maskedAccount
      - operationType
    properties:
      links:
        $ref: '#/definitions/AccountLinks'
      id:
        type: string
        description: The ID of this registered account.
      code:
        type: string
        description: Payment network code of the registration.
        example: AMEX
      label:
        type: string
        description: Display label of the payment network for this registration.
        example: American Express
      method:
        $ref: '#/definitions/PaymentMethod'
        description: Indicates payment method this registered account network belongs to.
      button:
        type: string
        description: Code of button-label when this registered account is selected.
        example: button.charge.label
      operationType:
        $ref: '#/definitions/NetworkOperationType'
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      registration:
        type: boolean
        description: Indicates that this account has at least one active one-click payment service provider registration.
      recurrence:
        type: boolean
        description: Indicates that this account has at least one active registration payment service provider registration.
      lastSuccessfulChargeAt:
        type: string
        format: date-time
        description: Time stamp of last successful `CHARGE` operation performed with this account.
      selected:
        type: boolean
        description: Indicates that this account registration is initially selected.
      iFrameHeight:
        type: integer
        format: int32
        description: IFrame height for selective native, only supplied if "iFrame" link is present.
        example: 35
      preferredAt:
        type: string
        format: date-time
        description: Timestamp when this account was marked as preferred.
      createdAt:
        type: string
        format: date-time
        description: Timestamp when this account was created.
        example: 2017-10-13T13:01:33.734+0000
      emptyForm:
        type: boolean
        description: Indicates that form for this account is empty, without any text and input elements.
      localizedInputElements:
        type: array
        description: |
            Collection of localized form input elements. This information is only exposed if merchant indicated `jsonForms` option
            in the `view` query parameter of any integration type.
        items:
          $ref: '#/definitions/LocalizedInputElement'
      inputElements:
        type: array
        description: |
           Collection of form input elements. Can be optionally enabled and exposed if merchant indicated `jsonForms` option
           in the `view` query parameter.
        items:
          $ref: '#/definitions/InputElement'
      routing:
        $ref: '#/definitions/Routing'
      state:
        type: string
        description: |
          Indicates the state of this account. Possible values:
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - BLOCKED
            - BLACKLISTED
        example: BLOCKED
      stateReason:
        type: string
        description: |
          Indicates the reason of the state. Possible values:
            - SUSPENDED
            - DELETED
            - RETRIES_EXHAUSTED
            - CHARGEBACK
            - DISPUTE
            - BLOCKING_RULE
            - MANUAL
            - VELOCITY_CHECK
            - LOW_SCORE
            - UNKNOWN
            - PUBLIC_ACCOUNT
            - FRAUD
        example: BLOCKING_RULE
      stateModificationDate:
        type: string
        format: date-time
        description: Timestamp when account state was changed.
        example: 2018-11-26T18:02:34.734+0000
      contractData:
        type: object
        description: |
            Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`)
            from the first possible route.
        additionalProperties:
          type: string
      providerResponse:
        description: |
          Provider response data given back by the target provider as a result of some previous transaction action like selection.
          This data should contain all needed information to continue customer's journey on the payment page in the scope of used network.
        $ref: '#/definitions/ProviderParameters'
      deferral:
        $ref: '#/definitions/Deferral'
      providers:
        type: array
        description: |
          List of payment provider codes. It contains only the codes of those payment providers, which are capable of handling
          `GooglePay` or `ApplePay` payments. The list is only present for GooglePay and ApplePay payment networks.
          The payment provider codes will be sorted in the `OPG-routing` order. For example, if `ApplePay` payments can be routed via
          two payment providers, `PSP-A` and `PSP-B`, and `OPG` selected to use `PSP-B` provider, then this property will have the
          following content: `[ "PSP-B", "PSP-A" ]`.
        items:
          type: string
        example:
          - PSP-A
  PresetAccount:
    type: object
    required:
      - links
      - code
      - label
      - emptyForm
      - redirect
      - operationType
      - method
    properties:
      links:
        $ref: '#/definitions/PresetLinks'
      code:
        type: string
        description: The code of preset payment network.
        example: MASTERCARD
      maskedAccount:
        $ref: '#/definitions/AccountMask'
      emptyForm:
        type: boolean
        description: Indicates that form for this account is empty, without any text and input elements.
      button:
        type: string
        description: Code of button-label for this preset account.
        example: button.charge.label
      redirect:
        description: Describes redirect to summary page of merchants web-site.
        $ref: '#/definitions/Redirect'
      operationType:
        type: string
        description: Type of operation.
        enum:
          - CHARGE
      method:
        $ref: '#/definitions/PaymentMethod'
        description: Indicates payment method this preset account belongs to.
      label:
        type: string
        description: Display label of the payment network.
        example: PayPal
      deferral:
        $ref: '#/definitions/Deferral'
      contractData:
        type: object
        description: |
            Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`)
            from the first possible route.
        additionalProperties:
          type: string
      registered:
        type: boolean
        description: Indicates whether this preset account is based on already registered network or not
      autoRegistration:
        type: boolean
        description: Indicates the end-customer choice for storing his payment method
      allowRecurrence:
        type: boolean
        description: Indicates the end-customer choice for storing his payment method for recurring charges
      accountInfo:
        description: Derived information (bank name, country of origin, etc.) about the account of this transaction
        $ref: '#/definitions/NetworkAccountInfo'
      providers:
        type: array
        description: |
          List of payment provider codes. It contains only the codes of those payment providers, which are capable of handling
          `GooglePay` or `ApplePay` payments. The list is only present for GooglePay and ApplePay payment networks.
          The payment provider codes will be sorted in the `OPG-routing` order. For example, if `ApplePay` payments can be routed via
          two payment providers, `PSP-A` and `PSP-B`, and `OPG` selected to use `PSP-B` provider, then this property will have the
          following content: `[ "PSP-B", "PSP-A" ]`.
        items:
          type: string
        example:
          - PSP-B
    description: |
        Information about preset network or account in scope of this `LIST` session. This property is only present in `LIST` sessions
        created with `operationType` of `PRESET`, or with deprecated `presetFirst` option set to `true`.
  AccountMask:
    type: object
    properties:
      registration:
        description: |
          Registration information for this account in OPG. It will contain account's registration ID of
          the account registered and/or used during this payment request.
        $ref: '#/definitions/RegistrationAccountInfo'
      displayLabel:
        type: string
        description: Display label of account registration. Usually combined from several account fields.
        example: 37 *** 0002    05 | 2021
      holderName:
        type: string
        description: Account holder name.
        example: Max Mustermann
      number:
        type: string
        description: Account number (bank account number, credit card number, etc.), usually truncated.
        example: 37 *** 0002
      bankCode:
        type: string
        description: Bank code.
        example: '69450065'
      bankName:
        type: string
        description: Bank name.
        example: Sparkasse
      bic:
        type: string
        description: BIC code.
        example: SOLADES1VSS
      branch:
        type: string
        description: Bank branch name.
        example: Sparkasse Schwarzwald-Baar
      city:
        type: string
        description: Bank city or any other account related city.
        example: Villingen
      expiryMonth:
        type: integer
        format: int32
        description: Account expiry month (credit/debit cards).
        example: 5
      expiryYear:
        type: integer
        format: int32
        description: Account expiry year (credit/debit cards).
        example: 2021
      iban:
        type: string
        description: IBAN number, usually truncated.
      login:
        type: string
        description: Account login name.
    description: |
        Masked account data of this payment operation or involved account. Sensitive fields of the account are removed,
        truncated, or replaced with mask characters.
  NetworkAccountInfo:
    type: object
    properties:
      bankName:
        type: string
        example: BANK OF IRELAND (UK) PLC
        description: Name of the bank providing the account
      brandName:
        type: string
        example: VISA ELECTRON
        description: Brand name of the account
      country:
        type: string
        example: GB
        description: Country of origin of the account
      type:
        type: string
        example: DEBIT
        description: Type of payment account; possible values `CREDIT`, `DEBIT`
      ownerType:
        type: string
        example: CONSUMER
        description: Type of the owner of the payment account; possible values `CONSUMER`, `CORPORATE`
      prepaid:
        type: boolean
        description: Indicates if the account is known to be prepaid (`true`) or non-prepaid (`false`)
      bin:
        type: string
        example: '434322'
        description: Bank identification number (the first six digits of a bank card number)
      typeExtended:
        type: string
        example: CREDIT
        description: |
          Extended card types; possible values:
            * `CREDIT` - The card type is a credit card
            * `DEBIT` - The card type is a debit card
            * `CHARGE_CARD` - The card type is a charge card, a kind of credit card without interest charges but requires
              full payment monthly
            * `PREPAID` - The card type is a prepaid, a kind of debit card with preloaded/reloadable amount and not linked
              to checking account
            * `DEFERRED_DEBIT` - The card type is a deferred debit, a kind of debit card where money is not debited
              immediately but at later date
      cardCurrency:
        type: string
        example: GBP
        description: ISO currency code of the account
      dccEnabled:
        type: boolean
        description: Indicates if the DCC is permitted (`true`) or not (`false`) on BIN range
      octEnabled:
        type: boolean
        description: Indicates if the issuer BIN range accepts OCT payments (`true`) or not (`false`)
      prepaidAnonymityStatus:
        type: string
        example: ANONYMOUS_PREPAID_AND_AMLD5_COMPLIANT
        description: |
          Type of the anonymous prepaid card marker to indicate whether the issuer BIN range is known to be ALMD5 compliant or not.

          Possible values:
            * `ANONYMOUS_PREPAID_AND_NOT_AMLD5_COMPLIANT` - Anonymous prepaid program and not AMLD5 compliant
            * `ANONYMOUS_PREPAID_AND_AMLD5_COMPLIANT` - Anonymous prepaid program and AMLD5 compliant
            * `NON_ANONYMOUS_PREPAID` - Not prepaid or non-anonymous prepaid program/default
            * `UNKNOWN` - Unknown anonymous prepaid card marker
    description: Derived information (bank name, country of origin, etc.) about a payment account.
  ThreeDSecure:
    type: object
    description: Describes 3DS details.
    properties:
      version:
        type: string
        example: 3DS
        description: 3D Secure version
      majorVersion:
        type: string
        enum:
          - UNKNOWN
          - VER_1
          - VER_2
        description: |
          3D Secure major versions:
            * `UNKNOWN` - Unknown version
            * `VER_1` - Version 1
            * `VER_2` - Version 2
        example: VER_2
      eci:
        type: string
        example: '02'
        description: |
            E-Commerce Indicator security level associated with the transaction (up to 2 chars and should be present for enrolled cards)
      authenticationStatus:
        type: string
        enum:
          - Y
          - N
          - A
          - U
          - R
          - C
        description: |
          Customer authentication status on the card issuer's ACS:
            * `Y` - Customer authenticated
            * `N` - Customer not authenticated or failed
            * `A` - An authentication attempt occurred but could not be completed
            * `U` - Unable to perform authentication
            * `R` - Authentication/Account Verification Rejected
            * `C` - Challenge Required
        example: Y
      enrollmentStatus:
        type: string
        enum:
          - Y
          - N
          - U
        description: |
          Card enrollment status:
            * `Y` - Card is enrolled
            * `N` - Card is not enrolled
            * `U` - Unable to determine if card is enrolled
        example: Y
      cavv:
        type: string
        example: VGhpcyBpcyBhIHRlc3QgYmFzZTY=
        description: |
            The unique Cardholder Authentication Verification Value (CAVV) associated with the transaction, provided by the card issuer.
            (up to 32 chars and should be present for enrolled and authenticated cards)
      xid:
        type: string
        example: ba9f3911-9e68-4e20-9441-96ca4916af30
        description: |
            The unique identifier for the transaction, assigned by the MPI (up to 255 chars and should be present for enrolled and
            authenticated cards)
      directoryServerTransactionId:
        type: string
        example: 13451f2b-6c1b-4588-ae3a-986c2a31a640
        description: Universally unique transaction identifier assigned by the DS to identify a single transaction (up to 36 characters)
      transactionChallenged:
        type: boolean
        example: true
        description: Indicates if challenge was executed
  Issuer:
    type: object
    description: Collection of different parameters received from the issuer.
    properties:
      authorizationCode:
        type: string
        example: '067251'
        description: Authorization code received from the issuer.
  Networks:
    type: object
    required:
      - applicable
    properties:
      applicable:
        type: array
        description: |
            Collection of applicable payment networks that could be used by a customer to complete the payment in scope of
            this `LIST` session.
        items:
          $ref: '#/definitions/ApplicableNetwork'
      resourcesLastUpdate:
        type: string
        format: date-time
        description: |
            **Deprecated!** This field is not returned by OPG. It should have indicated the timestamp of last update for hosted payment
            page resources that appear in the `LIST` response.
    description: Payment networks applicable for this `LIST` session.
  ExpressNetworks:
    type: object
    required:
      - applicable
    properties:
      applicable:
        type: array
        description: |
            Collection of applicable payment networks that could be used by a customer to complete the payment in scope of
            `EXPRESSPRESET` flow.
        items:
          $ref: '#/definitions/ApplicableExpressNetwork'
    description: Payment networks applicable for express checkout flow (`EXPRESSPRESET`).
  ApplicableNetwork:
    allOf:
      - $ref: '#/definitions/ApplicableNetworkDesc'
      - type: object
        required:
          - links
        properties:
          formData:
            $ref: '#/definitions/FormData'
          iFrameHeight:
            type: integer
            format: int32
            description: IFrame height for selective native, only supplied if "iFrame" link is present.
            example: 160
          emptyForm:
            type: boolean
            description: Indicates that form for this network is empty, without any text and input elements.
          localizedInputElements:
            type: array
            description: |
                Collection of localized form input elements. This information is only exposed if merchant indicated `jsonForms` option
                in the `view` query parameter and for any integration type.
            items:
              $ref: '#/definitions/LocalizedInputElement'
          inputElements:
            type: array
            description: |
               Collection of form input elements. Can be optionally enabled and exposed if merchant indicated `jsonForms` option
               in the `view` query parameter.
            items:
              $ref: '#/definitions/InputElement'
          routing:
            $ref: '#/definitions/Routing'
          providerResponse:
            description: |
              Provider response data given back by the target provider as a result of some previous transaction action like selection.
              This data should contain all needed information to continue customer's journey on the payment page in the scope of used
              network.
            $ref: '#/definitions/ProviderParameters'
          links:
            $ref: '#/definitions/NetworkLinks'
          deferral:
            $ref: '#/definitions/Deferral'
  ApplicableExpressNetwork:
    allOf:
      - $ref: '#/definitions/ApplicableNetworkDesc'
      - type: object
        required:
          - links
        properties:
          links:
            $ref: '#/definitions/ExpressNetworkLinks'
  ApplicableNetworkDesc:
    type: object
    required:
      - code
      - label
      - method
      - grouping
      - registration
      - recurrence
      - redirect
      - operationType
    properties:
      code:
        type: string
        description: Payment network code.
        example: VISA
      label:
        type: string
        description: Display label of the payment network.
        example: Visa
      method:
        $ref: '#/definitions/PaymentMethod'
        description: Indicates payment method this network belongs to.
      grouping:
        type: string
        description: |
            Grouping code. Helps to group several payment networks together while displaying them on payment page (e.g. credit cards).
        example: CREDIT_CARD
      registration:
        type: string
        enum:
          - NONE
          - OPTIONAL
          - FORCED
          - OPTIONAL_PRESELECTED
          - FORCED_DISPLAYED
        description: Indicates whether this payment network supports registration and how this should be presented on payment page.
      recurrence:
        type: string
        enum:
          - NONE
          - OPTIONAL
          - FORCED
          - OPTIONAL_PRESELECTED
          - FORCED_DISPLAYED
        description: |
            Indicates whether this payment network supports recurring registration and how this should be presented on payment page.
      redirect:
        type: boolean
        description: |
            If `true` the payment via this network will result in redirect to the PSP web-site (e.g. PayPal, Sofortüberweisung, etc.).
      operationType:
        $ref: '#/definitions/NetworkOperationType'
      button:
        type: string
        description: Code of button-label when this network is selected.
        example: button.charge.label
      selected:
        type: boolean
        description: If `true` this network should been initially pre-selected.
      contractData:
        type: object
        description: |
            Map of public contract attributes (settings that are designed to be exposed, e.g. `button_color`)
            from the first possible route.
        additionalProperties:
          type: string
      providers:
        type: array
        description: |
          List of payment provider codes. It contains only the codes of those payment providers, which are capable of handling
          `GooglePay` or `ApplePay` payments. The list is only present for GooglePay and ApplePay payment networks.
          The payment provider codes will be sorted in the `OPG-routing` order. For example, if `ApplePay` payments can be routed via
          two payment providers, `PSP-A` and `PSP-B`, and `OPG` selected to use `PSP-B` provider, then this property will have the
          following content: `[ "PSP-B", "PSP-A" ]`.
        items:
          type: string
        example:
          - PSP-A
  FormData:
    type: object
    properties:
      account:
        $ref: '#/definitions/AccountFormData'
      customer:
        $ref: '#/definitions/CustomerFormData'
      installments:
        $ref: '#/definitions/Installments'
      dataPrivacyConsentUrl:
        type: string
        format: uri
        description: URL to data privacy consent document.
    description: |
        `LIST` session dependent data supplied by OPG for this payment network.

        It helps to render complex forms properly (e.g. detailed description of installment plans) or allows dynamically pre-fill
        some input fields (e.g. `holderName` based on the known customer name).
  AccountFormData:
    type: object
    properties:
      holderName:
        type: string
        description: Account holder name.
        example: James Blond
    description: Payment account related data to pre-fill a form.
  CustomerFormData:
    type: object
    properties:
      birthday:
        type: string
        format: date
        description: Customer birthday.
    description: Customer related data to pre-fill a form.
  CustomerRegistration:
    type: object
    required:
      - links
      - customer
    properties:
      links:
        $ref: '#/definitions/CustomerLinks'
      customer:
        $ref: '#/definitions/Customer'
      accounts:
        type: array
        description: Collection of registered accounts of this customer.
        items:
          $ref: '#/definitions/AccountRegistration'
      state:
        type: string
        description: |
           Indicates state of customer account registration. Possible values:
             - ACTIVE
             - INACTIVE
             - DELETED
      stateModificationDate:
        type: string
        format: date-time
        description: Indicates last modification date of customer account registration.
      scheduledDeletionDate:
        type: string
        format: date-time
        description: Indicates scheduled hard deletion date of customer account registration.
  Installments:
    type: object
    properties:
      originalPayment:
        description: Information about original payment.
        $ref: '#/definitions/PaymentAmount'
      plans:
        type: array
        description: Collection of calculated installments plans what should be present to customer.
        items:
          $ref: '#/definitions/InstallmentsPlan'
    description: Describes available installments plans that can be offered to customer in scope of this payment method.
  PaymentAmount:
    type: object
    required:
      - amount
      - currency
    properties:
      amount:
        type: number
        format: double
        description: Payment amount in major units.
        example: 27.95
      currency:
        type: string
        description: 3-letter currency code (ISO 4217).
        example: GBP
  InstallmentsPlan:
    type: object
    properties:
      id:
        type: string
        description: ID of this installments plan.
      description:
        type: string
        description: Description of the installments plan.
      numberOfInstallments:
        type: integer
        description: Number of installments in the installments plan.
      schedule:
        type: array
        description: Collection of particular installment with payment date and amount.
        items:
          $ref: '#/definitions/InstallmentItem'
      dueDays:
        type: array
        description: Collection of possible payment days like 1, 15, 28, etc.
        items:
          type: integer
      currency:
        type: string
        description: 3-letter currency code (ISO 4217) of all payment amounts within current installments plan.
      interestAmount:
        type: number
        format: double
        description: The interest amount in major units.
      installmentSetupFee:
        type: number
        format: double
        description: The fee for setting up the installment plan in major units.
      installmentPeriodicFee:
        type: number
        format: double
        description: |
            The constant periodic fee for each installment in major units. Should be supplied only when it is the same
            for every installment.
      installmentFee:
        type: number
        format: double
        description: |
            The total fee for the installment payment (or service-charge-amount) in major units.
            It should match the sum of all installment periodic fees and the installment set-up fee.
      totalAmount:
        type: number
        format: double
        description: The total transaction amount in major units (including original amount, all fees and the interest).
      nominalInterestRate:
        type: number
        format: double
        description: The interest rate per year in percentages (Nominalzins or Sollzins).
      effectiveInterestRate:
        type: number
        format: double
        description: The effective interest rate per year in percentages (Effektivzins).
      creditInformationUrl:
        type: string
        description: URL to the Credit Information document.
      termsAndConditionsUrl:
        type: string
        description: URL to terms and conditions information document.
      dataPrivacyConsentUrl:
        type: string
        description: URL to the data privacy consent document.
      logoUrl:
        type: string
        description: URL to the installment plan logo.
      scheduleUnit:
        type: string
        description: |
          Indicates the scheduling unit for installment. Possible values:
            - NANOS
            - MICROS
            - MILLIS
            - SECONDS
            - MINUTES
            - HOURS
            - HALF_DAYS
            - DAYS
            - WEEKS
            - MONTHS
            - YEARS
            - DECADES
            - CENTURIES
            - MILLENNIA
            - ERAS
            - FOREVER
          example: MONTHS
  InstallmentItem:
    type: object
    properties:
      amount:
        type: number
        format: double
        description: Amount of this installment in major units.
      date:
        type: string
        format: date
        description: Installment (or payment) date.
  Redirect:
    type: object
    required:
      - url
      - method
    properties:
      url:
        type: string
        format: uri
        description: URL to redirect customer's browser (or any other client) to.
      method:
        type: string
        enum:
          - GET
          - POST
        description: Advised HTTP method to use for the redirection.
      parameters:
        type: array
        description: Collection of additional parameters to pass with this redirection.
        items:
          $ref: '#/definitions/Parameter'
      suppressIFrame:
        type: boolean
        description: |
            If `true` redirect logic should ensure that IFrame is suppressed during redirection, if payment page
            or web-site resides inside one.
      displayInPopup:
        type: boolean
        description: If `true` this redirect has to be displayed in a pop-up window as a requirement from PSP.
      containsAccountPlaceholders:
        type: boolean
        description: |
            `true` indicates that this redirect object contains parameters with placeholders that should be replaced
            by values from the customer payment account.
      challengeWindowSize:
        type: string
        description: |
            Challenge Window size submitted to the PSP to display the challenge.
            Possible values (enumerated in 3DS2 specification):
              - fullPage
              - 250x400
              - 390x400
              - 500x600
              - 600x400
      type:
        type: string
        description: |
            Describes the type of this redirect.

            Possible values are:
              * `SUMMARY` - redirect points to the session's `summaryUrl` from transaction `callback`.
              * `RETURN` - redirect points to the session's `returnUrl` from transaction `callback`.
              * `CANCEL` - redirect points to the session's `cancelUrl` from transaction `callback`.
              * `PROVIDER` - redirect to the external page of a provider (redirect method such as PayPal, Sofort, iDeal, etc.)
                or 3D Secure pages in case of credit/debit card processing.
              * `3DS2-HANDLER` - redirect to the special handler page of 3DS v2 flow. This handler should be able to execute
                DDC request or challenge procedure.

            Note: new types of redirect may appear in the future for new payment use cases.
        example: RETURN
  Parameter:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Parameter name. Can't contain any special characters.
      value:
        type: string
        description: Parameter value.
  Clearing:
    type: object
    properties:
      amount:
        type: number
        format: double
        description: |
            Cleared amount of this operation, confirmed by PSP or financial institution. Amount is provided in
            native format using "." as decimal delimiter, e.g. `12.99`.
        example: 12.99
      currency:
        type: string
        description: Currency of the cleared amount. Value format is according to ISO-4217 form, e.g. "EUR", "USD".
        example: USD
      reference:
        type: string
        description: |
            Reference to this payment operation provided by PSP or financial institution that should appear on the customer's bill.
        example: 'Order #1652'
    description: Clearing object provides information on the transaction as it had been processed by PSP.
  DeregistrationData:
    type: object
    properties:
      deleteRegistration:
        type: boolean
        description: |
            If set to `true` the account registrations (one-click) will be deleted if present, if set to `false` the registration remains.
      deleteRecurrence:
        type: boolean
        description: If set to `true` the recurring registrations will be deleted if present, if set to `false` the registration remains.
  NetworkSelection:
    type: object
    properties:
      selected:
        type: boolean
        description: Indicator of network selection.
  SelectOption:
    type: object
    required:
      - value
    properties:
      value:
        type: string
        description: The value for this option.
      label:
        type: string
        description: Localized label that should be displayed to a customer.
      selected:
        type: boolean
        description: If set to `true` this option should be pre-selected, otherwise no specific behavior should be applied for this option.
  LocalizedInputElement:
    type: object
    required:
      - name
      - type
      - label
    properties:
      name:
        type: string
        description: The name of the parameter represented by this input element.
      type:
        $ref: '#/definitions/InputElementType'
      label:
        type: string
        description: Localized, human readable label that should be displayed for this input field.
      options:
        type: array
        description: Array of possible options for element of the `select` type.
        items:
          $ref: '#/definitions/SelectOption'
  InputElement:
    type: object
    required:
      - name
      - type
    properties:
      name:
        type: string
        description: The name of the parameter represented by this input element.
      type:
        $ref: '#/definitions/InputElementType'
  InputElementType:
    type: string
    enum:
      - string
      - numeric
      - integer
      - select
      - checkbox
    description: |
        Input type / restrictions that can and should be enforced by the client for this input element:
          * `string` - one line of text without special restrictions
          * `numeric` - numbers 0-9 and the delimiters space and dash ('-') are allowed
          * `integer` - numbers 0-9 only
          * `select` - a list of possible values given in an additional options attribute
          * `checkbox` - checkbox type, what allows `true` for set and `null` (or `false`) for non-set values
  Routing:
    type: object
    required:
      - routes
    properties:
      routes:
        type: array
        description: List of available payment routes.
        items:
          $ref: '#/definitions/Route'
      strategy:
        type: string
        description: |
            Name (code) of routing strategy used to sort available routes. Currently supported strategies:
              * `LEAST_COST` - Use the route with lower transaction costs (based on contract pricing configuration).
              * `FIXED` - Fixed-order strategy. Use the route that has the lowest `order` number.
              * `ACTIVE` - Active-active strategy. Routes are chosen randomly based on their `weight`.

            See Merchant Configuration API for further details.
        example: LEAST_COST
    description: |
        Routing configuration of payment network or registered account from `LIST`. This information is only exposed if
        merchant indicated `routes` option in the `view` query parameter.
  Route:
    type: object
    required:
      - contract
    properties:
      contract:
        $ref: '#/definitions/Contract'
      costs:
        $ref: '#/definitions/RouteCosts'
      accountTokenized:
        type: boolean
        description: This flag defines whether the account is tokenized for the route.
      verificationCodeOptions:
        $ref: '#/definitions/VerificationCodeOptions'
    description: Single payment route details for processing through payment network or registered account from `LIST`.
  Contract:
    type: object
    required:
      - id
      - providerCode
    properties:
      id:
        type: string
        description: Payment provider contract ID. The same ID is used to identify contract in Merchant Configuration API (MCAPI).
        example: 594405cfcf64921005fb1196
      providerCode:
        type: string
        description: Payment provider code. This code uniquely identifies payment or institution provider across all services at optile.
        example: ADYEN
      adapterCode:
        type: string
        description: |
            Adapter code that is configured to be used with this contract (and provider).

            Note: usually adapter code is identical to provider code, but in some cases there might be multiple adapters available for
            the same payment provider.
        example: ADYEN-JSON
    description: Short description of provider or institution contract for this payment route.
  VerificationCodeOptions:
    type: object
    properties:
      requiredForRegistration:
        type: boolean
        example: true
        description: |
            `true` value of the flag means that CVC/CVV is mandatory for registration.
      requiredForOneClickPayment:
        type: boolean
        example: false
        description: |
            `true` value of the flag means that CVC/CVV is mandatory for one-click transactions.
      requiredForFirstPayment:
        type: boolean
        example: true
        description: |
            `true` value of the flag means that CVC/CVV is mandatory for non-registered account payments.
    description: |
      Information for the use of CVV/CVC while performing any operation.

      For example, if `requiredForRegistration` is set to `true` and the user/merchant does not pass the CVV/CVC then OPG will try
      the registration only on those routes where CVC/CVV is not required
  RouteCosts:
    type: object
    required:
      - normalized
    properties:
      normalized:
        type: number
        format: double
        description: Normalized route costs. All normalized costs are expressed in the same currency `EUR`.
        example: 0.09
      original:
        description: Original estimation of route costs without normalization.
        $ref: '#/definitions/PaymentAmount'
    description: Estimated costs of this payment route.
  CustomerCollectedDetails:
    type: object
    properties:
      number:
        type: string
        description: |
            Customer number supplied by payment provider, this is the number this customer is identified by PSP and not by the merchant.
        example: V59NSS56H39BX
      email:
        type: string
        format: email
        description: Customer email.
        example: paypal_test_customer@optile.net
      verified:
        type: boolean
        description: |
            Indicates whether this customer information is verified by payment provider or not. In most of the cases it is
            relevant to customer email only. PSP does not explicitly indicates the validity of collected information if this
            property is not provided or set to `null`.

            Note: customer addresses have separate indicator to indicate that.
        example: true
      name:
        $ref: '#/definitions/Name'
      addresses:
        description: Customers addresses supplied by payment provider.
        $ref: '#/definitions/CustomerAddressesCollectedDetails'
      phones:
        description: Customers phone numbers supplied by payment provider.
        $ref: '#/definitions/Phones'
      messageToMerchant:
        type: string
        description: |
            Textual message to merchant entered by the customer on PSP side during checkout process. E.g. fields `NOTE`,
            `PAYMENTREQUEST_n_NOTETEXT` in PayPal API.

            Note: PayPal has deprecated the possibility to supply a note during checkout process, but it might still be
            supported by other PSPs.
        example: I prefer the goods to be packed in red box, if possible.
    description: Customer details supplied by PSP and collected by OPG during payment.
  ProviderParameters:
    type: object
    required:
      - providerCode
      - parameters
    properties:
      providerCode:
        type: string
        description: The code of payment provider.
      parameters:
        type: array
        description: Array of provider specific parameters.
        items:
          $ref: '#/definitions/Parameter'
      providerType:
        $ref: '#/definitions/ProviderType'
        description: The type of provider
  ProviderType:
    type: string
    enum:
      - PAYMENT_SERVICE_PROVIDER
      - RISK_DECISION_PROVIDER
      - RISK_DATA_PROVIDER
    description: |
      Provider type:
        * `PAYMENT_SERVICE_PROVIDER` - Provider type for PSP
        * `RISK_DECISION_PROVIDER` - Provider type for risk decision provider(Notolytix, Riskified, etc.)
        * `RISK_DATA_PROVIDER` - Provider type for risk data provider(Iovation, Maxmind, etc.)
  ProviderToken:
    type: object
    properties:
      token:
        description: Holds the token value and other data provided by PSP.
        $ref: '#/definitions/ProviderReference'
      registration:
        type: boolean
        description: Indicates if the token can be to used for one click payments.
      recurrence:
        type: boolean
        description: Indicates if this token can be used for recurrent payments.
      contract:
        description: Holds the provider contract for this token.
        $ref: '#/definitions/Contract'
  RiskProvider:
    type: object
    required:
      - providerCode
      - providerType
    properties:
      providerCode:
        type: string
        description: The code of risk provider
      parameters:
        type: array
        description: An array of parameters
        items:
          $ref: '#/definitions/Parameter'
      providerType:
        $ref: '#/definitions/RiskProviderType'
        description: The type of provider
      links:
        $ref: '#/definitions/RiskProviderLinks'
  RiskProviderType:
    type: string
    enum:
      - RISK_DECISION_PROVIDER
      - RISK_DATA_PROVIDER
    description: |
      Provider type:
        * `RISK_DECISION_PROVIDER` - Provider type for risk decision provider(Notolytix, Riskified, etc.)
        * `RISK_DATA_PROVIDER` - Provider type for risk data provider(Iovation, Maxmind, etc.)
  RiskProviderLinks:
    type: object
    required:
      - iframe
    properties:
      iframe:
        type: string
        format: uri
        description: Link to a risk provider handler page.
        example: https://resources.sandbox.oscato.com/risk/providerCode.

  # Link collections
  ListLinks:
    type: object
    required:
      - self
    properties:
      self:
        type: string
        format: uri
        description: Link to `LIST` session itself.
        example: https://api.sandbox.oscato.com/api/lists/59e0b954148b5p4t1n6ds5mfjss451khui
      customer:
        type: string
        format: uri
        description: |
            Link to the registered customer of this `LIST` session. Appears only if it was initialized with appropriate information.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u
      binlookup:
        type: string
        format: uri
        description: Link to lookup debit or credit card details for a given BIN number
        example: https://api.sandbox.oscato.com/bininfo/lists/59e0b954148b5p4t1n6ds5mfjss451khui
      lang:
        type: string
        format: uri
        description: |
          URL of language file that contains labels and messages for payment page localization;
          a language file is provided in the Java properties format; see http://en.wikipedia.org/wiki/.properties or JSON format (if
          viewOption **jsonProperties** is enabled).
        example: https://resources.sandbox.oscato.com/resource/lang/MYSHOP/de/checkout.json
      hostedInputs:
        type: string
        format: uri
        description: |
          Link to the location of the hosted inputs which should be load in iframes.
          This link will present if the `LIST` has at least one `CARD network (like `VISA` or `MAESTRO`).
        example: https://hostedinputs.sandbox.oscato.com
    description: Collection of links related to this `LIST` session.
  ActivationLinks:
    type: object
    required:
      - self
    properties:
      self:
        type: string
        format: uri
        description: Link to `ACTIVATION` session itself.
    description: Collection of links related to this `ACTIVATION` operation.
  ChargeLinks:
    type: object
    required:
      - self
    properties:
      self:
        type: string
        format: uri
        description: Link to `CHARGE` operation itself.
        example: https://api.sandbox.oscato.com/api/charges/59c117dfcb4396be3263efc
      customer:
        type: string
        format: uri
        description: |
            Link to the registered customer. Appears only if `CHARGE` was initiated with registered customer information,
            or if a new customer was registered during this `CHARGE`.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u
      account:
        type: string
        format: uri
        description: Link to the registered account registred and/or used for this `CHARGE`.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u/accounts/5c9de3fb90509510bf6a6a79a
      payout:
        type: string
        format: uri
        description: |
            Link to `PAYOUT` operation. Appears only if current state of this `CHARGE` allows pay outs.

            Note: In case of deferred `CHARGE` the `PAYOUT` operation is interpreted as full or partial cancellation
            (depending on provided amount) of preauthorization. In case of standard (non-deferred) `CHARGE` the `PAYOUT`
            operation will trigger a refund.
        example: https://api.sandbox.oscato.com/api/charges/59c117dfcb4396be3263efc/payout
      closing:
        type: string
        format: uri
        description: |
            Link to `CLOSING` operation. Appears only in scope of deferred `CHARGE` and if current state of the `CHARGE` allows closings.
        example: https://api.sandbox.oscato.com/api/charges/59c117dfcb4396be3263efc/closing
      resume:
        type: string
        format: uri
        description: |
          Link to `RESUME` operation. Appears only if the `CHARGE` has been stuck with
          `TAKE_ACTION` interaction reason and merchant needs to resume it after clarification or checks on merchant
          side.
        example: https://api.sandbox.oscato.com/api/charges/59c117dfcb4396be3263efc/resume
      redirect:
        $ref: '#/definitions/RedirectLink'
    description: Collection of links related to this `CHARGE` operation.
  PayoutLinks:
    type: object
    required:
      - self
    properties:
      self:
        type: string
        format: uri
        description: Link to `PAYOUT` operation itself.
        example: https://api.sandbox.oscato.com/api/charges/59c51cb42ca6b49e1f081o
      customer:
        type: string
        format: uri
        description: Link to the registered customer. Appears only if `PAYOUT` refers a `CHARGE` with registered customer information.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u
      account:
        type: string
        format: uri
        description: Link to the registered account used for this `PAYOUT`.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u/accounts/5c9de3fb90509510bf6a6a79a
      redirect:
        $ref: '#/definitions/RedirectLink'
    description: Collection of links related to this `PAYOUT` operation.
  AccountLinks:
    type: object
    description: |
        Collection of links to build the account form for this registered account and perform different actions with entered data.
    required:
      - self
      - logo
      - lang
    properties:
      self:
        type: string
        format: uri
        description: URL to retrieve details about this registered account in context of initialized `LIST`.
        example: https://api.sandbox.oscato.com/api/lists/59e0b954148bp4t1n6ds5mfjss451khui/accounts/59e0b92d80ce9a8cd7a
      operation:
        type: string
        format: uri
        description: URL where operation data should be submitted (POSTed), if customer has decided to pay with this account registration.
        example: https://api.sandbox.oscato.com/api/lists/59e0b954148bp4t1n6ds5mfjss451khui/accounts/59e0b92d80ce9a8cd7a/charge
      validation:
        type: string
        format: uri
        description: URL to submit partial account data for in-page validation of registered account if supported.
        example: https://api.sandbox.oscato.com/pci/v1/59e0b954148bp4t1n6ds5mfjss451khui/MYSHOP/de_DE/AMEX/registered/validate
      logo:
        type: string
        format: uri
        description: URL of payment network logo (image) for this account registration.
        example: https://resources.sandbox.oscato.com/resource/network/MYSHOP/de_DE/AMEX/logo2x.png
      form:
        type: string
        format: uri
        description: |
            URL to retrieve a registered version of account form template. HTML snippet with account elements and message placeholders.
        example: https://resources.sandbox.oscato.com/resource/form/AMEX/registered.html
      localizedForm:
        type: string
        format: uri
        description: |
            URL to retrieve localized representation of registered account form. Text placeholders are replaced by text
            in corresponding language, language is defined by `LIST` session.
        example: https://resources.sandbox.oscato.com/resource/form/MYSHOP/DE/de_DE/AMEX/registered.html
      preloadForm:
        type: string
        format: uri
        description: |
            If present, this URL points to the form for this payment account that has to be preloaded and initialised prior the
            rendering of this `LIST` session on the client side. Main goal is to accelerate rendering of the main form for this
            account.
        example: https://resources.sandbox.oscato.com/resource/form/PAYPAL/preload_standard_js.html
      lang:
        type: string
        format: uri
        description: |
            URL of language file that contains labels and messages to localize account forms and display errors for this payment network.
            Language file is provided in [Java properties](http://en.wikipedia.org/wiki/.properties) format.
        example: https://resources.sandbox.oscato.com/resource/lang/MYSHOP/de_DE/AMEX.properties
      iFrame:
        type: string
        format: uri
        description: |
            URL of iFrame what should been shown to the customer to collect account data.
            Present only in the case when `LIST` session was initialized with `SELECTIVE_NATIVE` integration type.
        example: |-
          https://resources.sandbox.oscato.com/paymentpage/iframe.html?listId=59e0b954148bp4t1n6ds5mfjss451khui&accountId=59e0b92d80ce9a8cd7a
      onSelect:
        type: string
        format: uri
        description: |
          URL where operation data should be submitted (POSTed), if customer selects this account. This action is required to prepare
          selected network account and form for next payment operation.
          Present only in the case when account requires such action, POSTed data usualy contains only `providerRequest` data.
        example: https://api.sandbox.oscato.com/api/lists/59e0b954148bp4t1n6ds5mfjss451khui/accounts/59e0b92d80ce9a8cd7a/onselect
  NetworkLinks:
    type: object
    description: |
        Collection of links to build the account form for this payment network and perform different actions with entered account.
    required:
      - self
      - logo
      - lang
    properties:
      self:
        type: string
        format: uri
        description: URL to retrieve details about this payment network in context of initialized `LIST`.
        example: https://api.sandbox.oscato.com/api/lists/59e0b7b82d264cgpi06c88r4dl/VISA
      operation:
        type: string
        format: uri
        description: URL where operation data should be submitted (POSTed), if customer has decided to pay with this payment network.
        example: https://api.sandbox.oscato.com/api/lists/59e0b7b82d264cgpi06c88r4dl/VISA/charge
      validation:
        type: string
        format: uri
        description: URL to submit account for in-page validation if supported.
        example: https://api.sandbox.oscato.com/pci/v1/59e0b7b82d264cgpi06c88r4dl/MYSHOP/de_DE/VISA/standard/validate
      logo:
        type: string
        format: uri
        description: URL of this payment network logo (image).
        example: https://resources.sandbox.oscato.com/resource/network/MYSHOP/de_DE/VISA/logo.png
      form:
        type: string
        format: uri
        description: URL to retrieve an account form template. template is an HTML snippet with account elements and message placeholders.
        example: https://resources.sandbox.oscato.com/resource/form/VISA/standard.html
      localizedForm:
        type: string
        format: uri
        description: |
            URL to retrieve localized representation of account form. Text placeholders are replaced by text in corresponding language,
            language is defined by `LIST` session.
        example: https://resources.sandbox.oscato.com/resource/form/MYSHOP/DE/de_DE/VISA/standard.html
      preloadForm:
        type: string
        format: uri
        description: |
            If present, this URL points to the form for this payment network that has to be preloaded and initialised prior the
            rendering of this `LIST` session on the client side. Main goal is to accelerate rendering of the main form for this
            payment network.
        example: https://resources.sandbox.oscato.com/resource/form/PAYPAL/preload_standard_js.html
      lang:
        type: string
        format: uri
        description: |
            URL of language file that contains labels and messages to localize account forms and display errors for this payment network.
            Language file is provided in [Java properties](http://en.wikipedia.org/wiki/.properties) format.
        example: https://resources.sandbox.oscato.com/resource/lang/MYSHOP/de_DE/VISA.properties
      iFrame:
        type: string
        format: uri
        description: |
            URL of iFrame what should been shown to the customer to collect account data.
            Present only in the case when `LIST` session was initialized with `SELECTIVE_NATIVE` integration type.
        example: https://resources.sandbox.oscato.com/paymentpage/iframe.html?listId=59e0b7b82d264cgpi06c88r4dl&network=VISA
      onSelect:
        type: string
        format: uri
        description: |
          URL where operation data should be submitted (POSTed), if customer selects this network. This action is required to prepare
          selected network and network form for next payment operation.
          Present only in the case when network requires such action, POSTed data usualy contains only `providerRequest` data.
        example: https://api.sandbox.oscato.com/api/lists/59e0b7b82d264cgpi06c88r4dl/VISA/onselect
  ExpressNetworkLinks:
    type: object
    description: |
        Collection of links of this payment network for express checkout flow (`EXPRESSPRESET`).
    required:
      - operation
    properties:
      operation:
        type: string
        format: uri
        description: URL where operation data should be submitted (POSTed), if customer has decided to pay with this payment network.
        example: https://api.sandbox.oscato.com/api/express/PAYPAL/preset
  PresetLinks:
    type: object
    required:
      - operation
      - logo
    properties:
      operation:
        type: string
        format: uri
        description: URL where operation data should be submitted (POSTed) to continue with initialized payment request.
      logo:
        type: string
        format: uri
        description: URL of network logo (image) for preset account.
        example: https://resources.sandbox.oscato.com/resource/network/MYSHOP/de_DE/VISA/logo.png
      form:
        type: string
        format: uri
        description: |
            URL to retrieve form template for preset account. Template is an HTML snippet with account elements and message placeholders.
        example: https://resources.sandbox.oscato.com/resource/form/VISA/standard.html
      localizedForm:
        type: string
        format: uri
        description: |
            URL to retrieve localized representation of account form. Text placeholders are replaced by text in corresponding language,
            language is defined by `LIST` session.
        example: https://resources.sandbox.oscato.com/resource/form/MYSHOP/DE/de_DE/VISA/standard.html
      lang:
        type: string
        format: uri
        description: |
            URL of language file that contains labels and messages to localize account forms and display errors for this payment network.
            Language file is provided in [Java properties](http://en.wikipedia.org/wiki/.properties) format.
        example: https://resources.sandbox.oscato.com/resource/lang/MYSHOP/de_DE/VISA.properties
      redirect:
        $ref: '#/definitions/RedirectLink'
    description: Collection of links related to this `PRESET` operation or object.
  ExpressPresetLinks:
    type: object
    required:
      - self
    properties:
      self:
        type: string
        format: uri
        description: Link to `EXPRESSPRESET` session itself.
        example: https://api.sandbox.oscato.com/api/presets/5b2bbe0...nq8lck3a53vfher
      confirm:
        type: string
        format: uri
        description: |
            Link to confirm this `EXPRESSPRESET` session. Presence of this link indicates that this express preset session is ready for
            confirmation on the summary page. Merchant now can display the transaction and customer collected details to customers, and
            ask for their confirmation.
        example: https://api.sandbox.oscato.com/api/presets/5b2bbe0...nq8lck3a53vfher/confirm
      charge:
        type: string
        format: uri
        description: |
            Link to charge customer in scope of this `EXPRESSPRESET` session. Presence of this link indicates that express preset flow is
            successfully completed and merchant can make an attempt to charge the customer from the back-end.
        example: https://api.sandbox.oscato.com/api/presets/5b2bbe0...nq8lck3a53vfher/charge
    description: Collection of links related to this `EXPRESSPRESET` operation.
  CustomerLinks:
    type: object
    required:
      - self
      - charge
    properties:
      self:
        type: string
        format: uri
        description: Link to this customer resource.
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u
      charge:
        type: string
        format: uri
        description: URL where recurring `CHARGE` data be submitted (POSTed).
        example: https://api.sandbox.oscato.com/api/customers/59e0b92c268ce9a8cd6u/charge
    description: Collection of links related to this customer resource.
  OperationResultLinks:
    type: object
    properties:
      redirect:
        $ref: '#/definitions/RedirectLink'
  ProviderReference:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: ID assigned by PSP if successful communication with PSP took place in scope of this operation.
      data:
        type: array
        description: Array of Parameters (key/value pair) holds any additional data provided by PSP and required for further use.
        items:
          $ref: '#/definitions/Parameter'
    description: Holds the information provided by PSP and is required to identify the operation at the PSP side or at the merchant side.
  RiskChecksResult:
    type: object
    description: Holds the checks results done by the PSP related for example to AVS, CVV, 3DS
    properties:
      addressVerification:
        $ref: '#/definitions/AddressRiskCheck'
      cardVerification:
        $ref: '#/definitions/CardRiskCheck'
      threeDSecure:
        $ref: '#/definitions/ThreeDSecureRiskCheck'
  AddressRiskCheck:
    type: object
    description: Holds the address risk check result done by the PSP related to AVS (Address Verification System)
    properties:
      rawResult:
        type: string
        description: raw result provided by the PSP for the AVS
      address:
        $ref: '#/definitions/RiskCheckResultType'
      postCode:
        $ref: '#/definitions/RiskCheckResultType'
      name:
        $ref: '#/definitions/RiskCheckResultType'
  CardRiskCheck:
    type: object
    description: Holds the credit card risk check result done by the PSP
    properties:
      rawResult:
        type: string
        description: raw result provided by the PSP for the Security Code (CVC/CVV/AAV)
      result:
        $ref: '#/definitions/RiskCheckResultType'
  ThreeDSecureRiskCheck:
    type: object
    description: Holds the 3DS risk check result done by the PSP
    properties:
      rawResult:
        type: string
        description: raw result provided by the PSP for three DSecure
      threeDSecureResult:
        $ref: '#/definitions/RiskCheckResultType'
  RiskCheckResultType:
    type: string
    enum:
      - MATCHED
      - NOT_MATCHED
      - PARTIAL_MATCHED
      - NOT_CHECKED
      - NOT_SUPPORTED
      - NOT_PROVIDED
      - NOT_PROVIDED_BUT_REQUIRED
      - NOT_AVAILABLE
      - UNKNOWN
    description: |
      Contains all the applicable result types that can be provided by the PSP

      Following options are supported:
        * `MATCHED` - The data provided by the customer matched the stored data at the issuer.
        * `NOT_MATCHED` - The data provided by the customer is not matched the stored data at the issuer.
        * `PARTIAL_MATCHED` - The data provided by the customer is partially matched the stored data at the issue.
        * `NOT_CHECKED` - The data provided by the customer was not checked at the issuer.
        * `NOT_SUPPORTED` - This check is not supported by the issuer.
        * `NOT_PROVIDED` - The data was not provided to be checked.
        * `NOT_PROVIDED_BUT_REQUIRED` - The data was not provided to be checked, however it is required to be checked.
        * `NOT_AVAILABLE` - The payment provider or issuer are not able to provide a value for the check - i.e. in 3DS,
          the authentication ECI code 06 (VISA): 3DS was attempted but was not or could not be completed. possible reasons
          being either the card or its Issuing Bank has yet to participate in 3DS.
        * `UNKNOWN` - Checkout or issuer responds with some kind of UNKNOWN result or it failed or could fail to perform
          the check due to any reason for example technical or configuration ones - i.e. n 3DS, the authentication
          ECI code 07 (VISA): 3DS authentication is either failed or could not be attempted. possible reasons being both
          card and Issuing Bank are not secured by 3DS, technical errors, or improper configuration.
  RedirectLink:
    type: string
    format: uri
    description: |
      The link to the URL for redirecting customer's browser. Present only if redirect object is returned.

      If redirect method type is `POST`, `GET` request to this URL returns a simple HTML page with an auto-submit form containing the POST
      redirect parameters and URL of the redirect object. If redirect method type is `GET`, a customer will be forwarded to the URL in the
      redirect object.
    example: https://api.sandbox.oscato.com/redirect/6414a1e641f95e208d374f86l6npa17vfsfmotr8s1f5s6k1hh/63f61fc5bef2dd360c16392dc
  Deferral:
    type: string
    enum:
      - DEFERRED
      - NON_DEFERRED
    description: |
      The deferred behavior of the payment network.
      See [Deferred Payments](https://orchestrationdocs.payoneer.com/docs/work-with-deferred-transactions) for more details.
  ProcessingModel:
    type: object
    required:
      - code
    properties:
      code:
        type: string
        example: PAYFAC-HK
        description: Processing model unique identifier.
      type:
        type: string
        enum:
          - MOR
          - PF
        description: |
          Type of processing model. `MOR` - Merchant of record entity, `PF` - Payment Facilitator.
