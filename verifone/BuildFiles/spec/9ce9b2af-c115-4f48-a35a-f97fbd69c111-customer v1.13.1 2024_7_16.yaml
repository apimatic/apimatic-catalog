openapi: 3.0.1
info:
  title: Customer API
  description:
    Customer service provides a set of APIs used for storing and managing
    shoppers' personal details and contact information in a single place. Each stored
    customer is represented by an `id` which can be attached to the request of other
    Verifone services, where customer details can be provided (e.g. Checkout or 3DS
    services).
  version: 1.12.0
servers:
  - url: https://emea.gsc.verifone.cloud/oidc/customer-service
    description: EMEA
  - url: https://us.gsc.verifone.cloud/oidc/customer-service
    description: Americas
  - url: https://nz.gsc.verifone.cloud/oidc/customer-service
    description: New Zealand and Australia
  - url: https://cst.test-gsc.vfims.com/oidc/customer-service
    description: Global Sandbox
  - url: https://uscst-gb.gsc.vficloud.net/oidc/customer-service
    description: US Sandbox
tags:
  - name: FAQs
    description:
      "**Frequently Asked Questions**\r\n\r\n**Q : What is a Customer and why\
      \ do I need it?**\r\n\r\nA: The customer service takes care of storing shopper's\
      \ personal, shipping and billing details which are used for processing payments\
      \ for them. A customer is not always necessary to be created, as there are payment\
      \ scenarios where this data is not required, however it is often the case that\
      \ at least some details need to be provided for them.\r\n\r\n**Q : Where do you apply a\
      \ customer UUID obtained using Customer API?**\r\n\r\nA: Customer UUID via can be used\
      \ in Checkout or Ecom API when PayPal and other APMs are being offered, as well as\
      \  when 3DS is used.\r\n\r\n**Q: How does customer information impact fraud score?**\
      \ \r\n\r\nA: In order to perform a fraud score calculation as accurate as possible.\
      \ Without the customer record, we are limited on what we can do from a fraud\
      \ screening perspective.\r\n\r\n**Q: How does customer information impact blocking\
      \ rulesets?**\r\n\r\nA: Without passing in a customer record specific blocking\
      \ rulesets will not be available because we won't have the customer data to\
      \ block.\r\n\r\n**Q: How does the customer information impact reporting?**\r\n\r\nA: \
      \ Without passing in the customer data, the Merchant will not have any customer detail available via\
      \ reports in <a href='https://verifone.cloud/docs/portal/transaction-reports' target='_blank'>Verifone Central</a>."
paths:
  /v2/customer:
    get:
      tags:
        - Customer
      summary: List Customers
      security:
        - BasicAuth: []
      operationId: getV2Customer
      parameters:
        - name: search
          in: query
          description: |-
            <div style='font-weight: 400;line-height: 1.5em; width: 100%;'>
            <p><a href='https://aboullaite.me/rsql/' target='_blank' title='Read more about RSQL'>RSQl Query</a> is composed of one or more expressions, combined to each other with following logical operators: </p>
            <p>A filter query in RSQL format to retrieve customers. The returned customers are limited to those that can be retrieved by the user. </p>
            <table>
                <thead>
                    <tr>
                        <th>Criteria</th>
                        <th>Description</th>
                        <th>Operator Used</th>
                    </tr>
                </thead>
                <tbody>
                   <tr>
                                <td>billing.address_1</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.address_2</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.address_3</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.city</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.country_code</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.first_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.middle_name</td>
                              <td>string</td>
                              <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.last_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.phone</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.postal_code</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>billing.state</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>company_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>company_registration_number</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>email_address</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>entity_id</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>id</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>phone_number</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.address_1</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.address_2</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.address_3</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.city</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.country_code</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.first_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.middle_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.last_name</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.phone</td>
                                <td>number</td>
                                <td>==, !=, =in=, =out=, =gt=, =ge=, =lt=, =le=</td></tr><tr>
                                <td>shipping.postal_code</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>shipping.state</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>title</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>work_phone</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>tax.identifier</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                                <td>created_at</td>
                                <td>date</td>
                                <td>==, !=, =in=, =out=, =gt=, =ge=, =lt=, =le=</td></tr><tr>
                                <td>updated_at</td>
                                <td>date</td>
                                <td>==, !=, =in=, =out=, =gt=, =ge=, =lt=, =le=</td></tr>
                                <td>language</td>
                                <td>string</td>
                                <td>==, !=, =in=, =out=, =regex=</td></tr><tr>
                </tbody>
            </table>
            <p> Note: </p>
            <table>
                <thead>
                    <tr>
                        <th>Operator</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>==</td>
                        <td>equal</td>
                    </tr>
                    <tr>
                        <td>!=</td>
                        <td>not equal</td>
                    </tr>
                    <tr>
                        <td>=lt=</td>
                        <td>less than</td>
                    </tr>
                    <tr>
                        <td>=le=</td>
                        <td>less than and equal to</td>
                    </tr>
                    <tr>
                        <td>=gt=</td>
                        <td>greater than</td>
                    </tr>
                    <tr>
                        <td>=ge=</td>
                        <td>greater than and equal to</td>
                    </tr>
                    <tr>
                        <td>=regex=</td>
                        <td>pattern matching</td>
                    </tr>
                    <tr>
                        <td>=in=</td>
                        <td>multiple arguments search</td>
                    </tr>
                    <tr>
                        <td>=out=</td>
                        <td>exclude</td>
                    </tr>
                    <tr>
                        <td><b>;</b></td>
                        <td>Logical AND</td>
                    </tr>
                    <tr>
                        <td><b>,</b></td>
                        <td>Logical OR</td>
                    </tr>
                </tbody>
            </table>
            <p><b>Note:</b> Logical AND ( ; ) has higher precedence than Logical OR ( , ), whereas a parenthesis () can be used to override the precedence of an operator.</p>
            <p>
                Example:
                <ul>
                    <li>
                        <p>/v2/customer?<b>search=<br>
                        id==123&amp;<br>
                        order_by=ASC&amp;<br>
                        order_criteria=email_address&amp;<br>
                        page_size=1&amp;<br>
                        page_number=2</b></p>
                    </li>
                    </br>
                    <li>
                        <p>/v2/customer?<b>search=<br>
                        id==123435&amp;<br>
                        order_by=DESC&amp;<br>
                        order_criteria=billing.address_1&amp;<br>
                        page_size=10&amp;<br>
                        page_number=1</b></p>
                    </li>
                    </br>
                    <li>
                        <p>/v2/customer?<b>search=<br>
                        id==dg373&amp;<br>
                        order_by=ASC&amp;<br>
                        order_criteria=company_name&amp;<br>
                        page_size=1&amp;<br>
                        page_number=2</b></p>
                    </li>
                </ul>
            </p>
            </div>
          required: true
          schema:
            type: string
        - name: order_criteria
          in: query
          description:
            "The ordering sequence of the selected customers\n        If\
            \ not selected then a default order is based on Created Date Time.',\n \
            \       'The value of orderCriteria can be one of the following: \n    <ul><li>billing.address_1</li><li>billing.address_2</li><li>billing.address_3</li><li>billing.city</li><li>billing.country_code</li><li>billing.first_name</li><li>billing.middle_name</li><li>billing.last_name</li><li>billing.phone</li><li>billing.postal_code</li><li>billing.state</li><li>company_name</li><li>company_registration_number</li><li>email_address</li><li>entity_id</li><li>id</li><li>phone_number</li><li>shipping.address_1</li><li>shipping.address_2</li><li>shipping.address_3</li><li>shipping.city</li><li>shipping.country_code</li><li>shipping.first_name</li><li>shipping.last_name</li><li>shipping.phone</li><li>shipping.postal_code</li><li>shipping.state</li><li>title</li><li>work_phone</li><li>tax.identifier</li><li>created_at</li></ul>\n"
          schema:
            type: string
        - name: order_by
          in: query
          description:
            The ordering sequence of the selected customers If not selected
            then Descending order is the default order.
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: page_number
          in: query
          description:
            A filter query in RSQL format to retrieve customers based on
            page number. If not selected then a default pageNumber is 1.
          schema:
            minimum: 1
            type: number
        - name: page_size
          in: query
          description:
            A filter query in RSQL format to retrieve customers based on
            page size. If not selected then a default pageSize is 50
          schema:
            minimum: 0
            type: number
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model2"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
    post:
      summary: Create Customer
      tags:
        - Customer
      security:
        - BasicAuth: []
      operationId: postV2Customer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Model4"
        required: false
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model1"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
      x-codegen-request-body-name: body
  /v2/customer/{customerId}:
    get:
      tags:
        - Customer
      summary: Get Customer
      security:
        - BasicAuth: []
      operationId: getV2CustomerCustomerid
      parameters:
        - name: customerId
          in: path
          description: Customers ID
          required: true
          schema:
            type: string
            x-format:
              guid: true
          x-format:
            guid: true
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model1"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
    post:
      tags:
        - Customer
      summary: Update Customer
      security:
        - BasicAuth: []
      operationId: postV2CustomerCustomerid
      parameters:
        - name: customerId
          in: path
          description: Customers ID
          required: true
          schema:
            type: string
            x-format:
              guid: true
          x-format:
            guid: true
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Model4"
        required: false
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model1"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
      x-codegen-request-body-name: body
    delete:
      tags:
        - Customer
      summary: Delete Customer
      security:
        - BasicAuth: []
      operationId: deleteV2CustomerCustomerid
      parameters:
        - name: customerId
          in: path
          description: Customers ID
          required: true
          schema:
            type: string
            x-format:
              guid: true
          x-format:
            guid: true
      responses:
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model3"
components:
  schemas:
    billing:
      type: object
      properties:
        address_1:
          maxLength: 40
          type: string
          description: Customer's primary billing address information.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
        address_2:
          maxLength: 40
          type: string
          description: Customer's secondary billing address information.
        address_3:
          maxLength: 40
          type: string
          description: Customer's third billing address information.
        city:
          maxLength: 28
          type: string
          description: Customer's city on their billing address.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
        country_code:
          type: string
          description:
            Customer's alpha 2 digit ISO 3166 country code. (e.g. United
            States = US)
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
        first_name:
          maxLength: 22
          type: string
          description:
            Customer's first name. **Required** in case that companyName
            is not provided.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
        middle_name:
          maxLength: 22
          type: string
          description: Customer's middle name. <br />
        last_name:
          maxLength: 22
          type: string
          description:
            Customer's last name. **Required** in case that companyName
            is not provided.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
        phone:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          description: Customer's phone number for billing address.
        postal_code:
          maxLength: 10
          type: string
          description: Customer's postal code of their billing address.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
            Required unless market or regional mandate restricts sending this information.
        state:
          maxLength: 35
          type: string
          description:
            Customer's state or province of their billing address. (e,g.
            Ohio = OH, Texas = TX)
    shipping:
      type: object
      properties:
        address_1:
          maxLength: 40
          type: string
          description: Consumer's primary shipping address information.
        address_2:
          maxLength: 40
          type: string
          description: Consumer's secondary shipping address information.
        address_3:
          maxLength: 40
          type: string
          description: Consumer's third shipping address information.
        city:
          maxLength: 28
          type: string
          description: Consumer's city on their shipping address.
        first_name:
          maxLength: 22
          type: string
          description: Consumer's first name.
        middle_name:
          maxLength: 22
          type: string
          description: Consumer's middle name.
        last_name:
          maxLength: 22
          type: string
          description: Consumer's last name.
        phone:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          x-alternatives:
            - type: string
              maxLength: 25
              pattern: ^[0-9-\s\-+().-]+$
            - type: integer
        country_code:
          type: string
          description:
            Consumer's alpha 2 digit ISO 3166 country code. (e.g. United
            States = US)
        postal_code:
          maxLength: 10
          type: string
          description: Consumer's postal code of their shipping address.
        state:
          maxLength: 35
          type: string
          description:
            Consumer's state or province of their shipping address. (e,g.
            Ohio = OH, Texas = TX)
    tax:
      type: object
      properties:
        identifier:
          pattern: ^[0-9]+$
          type: string
          description:
            An optional identifier of the document recipient:<br> Personal
            ID (for individuals) <br>Tax identification number (for business)
          x-constraint:
            length: 9
    Model1:
      required:
        - created_at
        - entity_id
        - id
        - updated_at
      type: object
      properties:
        id:
          type: string
          description: Customers ID
          x-format:
            guid: true
        billing:
          $ref: "#/components/schemas/billing"
        company_name:
          maxLength: 100
          type: string
          description: Company of the customer. . **Required** in case that billing.firstName & billing.lastName are not provided.
        company_registration_number:
          maxLength: 24
          type: string
          description: |-
            Unique identifier of the company, recognised by the government.
                                    Known as CoC (Chamber of Commerce) number in some countries
        email_address:
          maxLength: 255
          type: string
          description: Consumer's email address.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
          x-format:
            email:
              minDomainSegments: 2
        entity_id:
          type: string
          description: Entity id on which the customer is created. Entity Id can be located on the organization level as Organization ID (Administration > Organizations > [Organization] > Organisation ID value)
        phone_number:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          description: Cardholder's  phone number
        shipping:
          $ref: "#/components/schemas/shipping"
        title:
          pattern: ^[a-zA-Z-\s.]+$
          maxLength: 120
          type: string
          description: Title
        work_phone:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          description: Consumer's work phone number.
        tax:
          $ref: "#/components/schemas/tax"
        language:
          type: string
          description: Customer language preferences for the Invoice document. Read <a target="_blank" href="https://verifone.cloud/docs/online-payments/localisation">Localisation</a> for details.
        created_at:
          type: string
          description: Time at which this customer has been created
          format: date
        updated_at:
          type: string
          description: Time at which this customer has been updated for last time
          format: date
    Model2:
      type: array
      items:
        $ref: "#/components/schemas/Model1"
    details:
      type: object
    Model3:
      type: object
      properties:
        code:
          type: number
          description: A 3-digit code which uniquely identify an error.
        details:
          $ref: "#/components/schemas/details"
        message:
          type: string
          description: A description of the error.
        timestamp:
          type: integer
          description: Error timestamp
    Model4:
      required:
        - entity_id
      type: object
      properties:
        billing:
          $ref: "#/components/schemas/billing"
        company_name:
          maxLength: 100
          type: string
          description: Company of the customer. . **Required** in case that billing.firstName & billing.lastName are not provided.
        company_registration_number:
          maxLength: 24
          type: string
          description: |-
            Unique identifier of the company, recognised by the government.
                                    Known as CoC (Chamber of Commerce) number in some countries
        email_address:
          maxLength: 255
          type: string
          description: Consumer's email address.
            <br /> Note:Required for 3DS. Please refer to the 3D Secure API specification for the format requirements.
          x-format:
            email:
              minDomainSegments: 2
        entity_id:
          type: string
          description: Entity id on which the customer is created. Entity Id can be located on the organization level as Organization ID (Administration > Organizations > [Organization] > Organisation ID value)
        phone_number:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          description: Cardholder's  phone number
        shipping:
          $ref: "#/components/schemas/shipping"
        title:
          pattern: ^[a-zA-Z-\s.]+$
          maxLength: 120
          type: string
          description: Title
        work_phone:
          maxLength: 25
          pattern: ^[0-9-\s\-+().-]+$
          type: string
          description: Consumer's work phone number.
        tax:
          $ref: "#/components/schemas/tax"
        language:
          type: string
          description: Customer language preferences for the Invoice document. Read <a target="_blank" href="https://verifone.cloud/docs/online-payments/localisation">Localisation</a> for details.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
