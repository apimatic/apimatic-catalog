{
  "openapi": "3.0.1",
  "info": {
    "title": "dbapi-investments-securityTransactions",
    "description": "Gives you an overview of securities transactions details.",
    "termsOfService": "https://developer.db.com/termsandconditions",
    "contact": {
      "url": "https://developer.db.com/contact",
      "email": "bank.api@db.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://simulator-api.db.com:443/gw/dbapi/investments/securityTransactions/v1"
    }
  ],
  "tags": [
    {
      "name": "Security Transactions",
      "description": "Gives you an overview of securities transactions details of a given account for a given date range."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Security Transactions"
        ],
        "summary": "Security transactions of a security account/portfolio.",
        "description": "Reads the security transaction (buy, sell, in & out) of a security account or portfolio for a given date range.",
        "operationId": "getSecurityTransactionsV1",
        "parameters": [
          {
            "name": "portfolioId",
            "in": "query",
            "description": "The portfolio id; Default portfolio (ends with 'ST') includes all security and available cash accounts; Either portfolioId or securityAccountID to be provided!",
            "schema": {
              "pattern": "[0-9]{10}[A-Z0-9]{2}",
              "type": "string"
            }
          },
          {
            "name": "securityAccountId",
            "in": "query",
            "description": "The security account id; Either portfolioId or securityAccountID to be provided!",
            "schema": {
              "pattern": "[0-9]{12}",
              "type": "string"
            }
          },
          {
            "name": "bookingDateFrom",
            "in": "query",
            "description": "Defines the start booking date of the time span. Date in ISO 8601 format YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "bookingDateTo",
            "in": "query",
            "description": "Defines the latter booking date of the time span. Date in ISO 8601 format YYYY-MM-DD. bookingDateTo must be greater than or equal to bookingDateFrom request parameter.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 101,
                    "message": "Invalid value for parameter portfolioId or securityAccountId."
                  },
                  {
                    "code": 103,
                    "message": "Not authorized to access PortfolioId or securityAccountId."
                  },
                  {
                    "code": 104,
                    "message": "No valid PortfolioId or securityAccountId."
                  },
                  {
                    "code": 105,
                    "message": "startDate is greater than or equal to endDate."
                  },
                  {
                    "code": 109,
                    "message": "Max number of records exceeded. Please change request parameter."
                  },
                  {
                    "code": 110,
                    "message": "clientID not authorized."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_client_credential": [
              "read_security_transactions"
            ]
          },
          {
            "api_auth_code": [
              "read_security_transactions"
            ]
          },
          {
            "api_implicit": [
              "read_security_transactions"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "SecurityTransaction": {
        "required": [
          "accruedInterestsInBaseSecurity",
          "accruedInterestsInTradeSecurity",
          "bookingDate",
          "cashAccount",
          "compensationTax",
          "fxRate",
          "grossAmountInAccountCurrency",
          "grossAmountInBaseCurrency",
          "grossAmountInTradeCurrency",
          "netAmountInBaseCurrency",
          "netAmountInTradeCurrency",
          "ownExpenses",
          "procurationFee",
          "quantity",
          "security",
          "securityAccount",
          "sellingCommission",
          "thirdPartyCharges",
          "transactionType",
          "valueDate"
        ],
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "string",
            "description": "Transaction type"
          },
          "cashAccount": {
            "$ref": "#/components/schemas/CashAccount"
          },
          "securityAccount": {
            "$ref": "#/components/schemas/SecurityAccount"
          },
          "bookingDate": {
            "type": "string",
            "description": "Booking date of the transaction. Date in ISO 8601 format YYYY-MM-DD",
            "format": "date"
          },
          "valueDate": {
            "type": "string",
            "description": "Value date of the transaction. Date in ISO 8601 format YYYY-MM-DD",
            "format": "date"
          },
          "orderId": {
            "type": "string",
            "description": "order Id"
          },
          "security": {
            "$ref": "#/components/schemas/Security"
          },
          "quantity": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "grossAmountInBaseCurrency": {
            "$ref": "#/components/schemas/Amount"
          },
          "grossAmountInTradeCurrency": {
            "$ref": "#/components/schemas/Amount"
          },
          "grossAmountInAccountCurrency": {
            "$ref": "#/components/schemas/Amount"
          },
          "netAmountInBaseCurrency": {
            "$ref": "#/components/schemas/Amount"
          },
          "netAmountInTradeCurrency": {
            "$ref": "#/components/schemas/Amount"
          },
          "fxRate": {
            "$ref": "#/components/schemas/ForeignExchangeRate"
          },
          "accruedInterestsInTradeSecurity": {
            "$ref": "#/components/schemas/AccruedInterest"
          },
          "accruedInterestsInBaseSecurity": {
            "$ref": "#/components/schemas/AccruedInterest"
          },
          "compensationTax": {
            "$ref": "#/components/schemas/Amount"
          },
          "sellingCommission": {
            "$ref": "#/components/schemas/Amount"
          },
          "procurationFee": {
            "$ref": "#/components/schemas/Amount"
          },
          "ownExpenses": {
            "$ref": "#/components/schemas/Amount"
          },
          "thirdPartyCharges": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "SecurityTransactionsResponse": {
        "required": [
          "baseCurrency",
          "securityTransactions"
        ],
        "type": "object",
        "properties": {
          "baseCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "securityTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityTransaction"
            }
          }
        }
      },
      "ErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "Description of the belonging error code."
          },
          "messageId": {
            "type": "string",
            "description": "dbAPI internal message-id (unique identifier) that allow reference to each of your API calls."
          }
        },
        "description": "Default error response message"
      },
      "CashAccount": {
        "required": [
          "currency",
          "id"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "id": {
            "pattern": "[0-9]{12}",
            "type": "string"
          }
        },
        "description": "The account used for settling an order transaction execution. <br/>The default account will be used if not specified in the order placement request"
      },
      "CurrencyCode": {
        "pattern": "[A-Z]{3}",
        "type": "string",
        "description": "ISO 4217 Alpha 3 currency code.",
        "example": "EUR"
      },
      "SecurityAccount": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "[0-9]{12}",
            "type": "string",
            "description": "Security account identifier",
            "example": "100100849100"
          }
        }
      },
      "Security": {
        "required": [
          "isin",
          "name",
          "securityRate"
        ],
        "type": "object",
        "properties": {
          "isin": {
            "$ref": "#/components/schemas/ISIN"
          },
          "wkn": {
            "$ref": "#/components/schemas/WKN"
          },
          "name": {
            "type": "string",
            "description": "Name of the security",
            "example": "Some Name AG"
          },
          "securityRate": {
            "$ref": "#/components/schemas/SecurityRate"
          }
        },
        "description": "The related security including basic information"
      },
      "ISIN": {
        "pattern": "[A-Z]{2}[0-9A-Z]{9}[0-9]",
        "type": "string",
        "description": "International Securities Identification Number",
        "example": "DE0007100000"
      },
      "WKN": {
        "pattern": "[A-Z0-9]{6}",
        "type": "string",
        "description": "German securities identification code (Wertpapierkennnumer)",
        "example": "710000"
      },
      "SecurityRate": {
        "required": [
          "rate",
          "tradeCurrency",
          "unitPer"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "number",
            "format": "double"
          },
          "tradeCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "unitPer": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Amount": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "example": 58.13
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        }
      },
      "ForeignExchangeRate": {
        "required": [
          "rate",
          "sourceCurrency",
          "targetCurrency"
        ],
        "type": "object",
        "properties": {
          "rate": {
            "type": "number",
            "description": "Value of source currency stated in terms of target currency. E.g. if 1 EUR (source) = 0.8 USD (target) would have this property set to 0.8",
            "format": "double",
            "example": 0.8
          },
          "sourceCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "targetCurrency": {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        }
      },
      "AccruedInterest": {
        "required": [
          "amount",
          "currency",
          "days"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "days": {
            "type": "integer",
            "description": "Number of days since last bond interest payment",
            "format": "int32"
          }
        },
        "description": "Amount of bond interest that has accumulated since the last time a bond interest payment was made"
      }
    },
    "securitySchemes": {
      "api_client_credential": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_security_transactions": "Grants read access to all security transactions for the given customer."
            }
          }
        }
      },
      "api_auth_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_security_transactions": "Grants read access to all security transactions for the given customer.",
              "openid": "Request access to OpenId Connect functionality",
              "offline_access": "Request an OAuth2 Refresh Token"
            }
          }
        }
      },
      "api_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "scopes": {
              "read_security_transactions": "Grants read access to all security transactions for the given customer.",
              "openid": "Request access to OpenId Connect functionality"
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}