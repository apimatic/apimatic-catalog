{
  "openapi": "3.0.1",
  "info": {
    "title": "dbapi-customerSolvency",
    "description": "Allows your application to verify given personal information against basic personal information from the customer's bank account.",
    "termsOfService": "https://developer.db.com/termsandconditions",
    "contact": {
      "url": "https://developer.db.com/contact",
      "email": "bank.api@db.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://simulator-api.db.com:443/gw/dbapi/banking/customerSolvency/v1"
    }
  ],
  "tags": [
    {
      "name": "Customer Solvency",
      "description": "This API allows your application to verify given personal information against basic personal information from the customer's bank account."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Customer Solvency"
        ],
        "summary": "Checks the solvency for the current customer for a given account.",
        "description": "CustomerSolvency does the background check of a customer's creditworthiness based on past transactions and account data. A score of solvency is returned, providing you with more security that your customer is likely to pay their bill. Please note: This endpoint is currently only available in our APIs simulator stack and ready for you to test it. Don't hesitate to submit us your feedback and stay tuned on our future product development.",
        "operationId": "getSolvency",
        "parameters": [
          {
            "name": "iban",
            "in": "query",
            "description": "The signed in user can have many accounts attached to it, IBAN is required to identify the specific current account which shall be checked",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 5,
              "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolvencyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "read_transactions"
            ]
          },
          {
            "api_implicit": [
              "read_transactions"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "SolvencyResponse": {
        "type": "object",
        "properties": {
          "score": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Number between 0 and 100. The higher the score the better the solvency.",
            "format": "int32"
          },
          "message": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "Message": {
        "required": [
          "code",
          "text"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The response code"
          },
          "text": {
            "type": "string",
            "description": "The reason message text"
          },
          "category": {
            "type": "string",
            "description": "Reason category"
          }
        },
        "description": "Backend response when the solvency can't be determined'"
      },
      "ErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "Description of the belonging error code."
          },
          "messageId": {
            "type": "string",
            "description": "dbAPI internal message-id (unique identifier) that allow reference to each of your API calls."
          }
        },
        "description": "Default error response message"
      }
    },
    "securitySchemes": {
      "api_auth_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_transactions": "Grants read access to all cash account transactions for all cash accounts for the given customer. The API provides up to 90 days of transaction history.",
              "openid": "Request access to OpenId Connect functionality",
              "offline_access": "Request an OAuth2 Refresh Token"
            }
          }
        }
      },
      "api_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "scopes": {
              "read_transactions": "Grants read access to all cash account transactions for all cash accounts for the given customer. The API provides up to 90 days of transaction history.",
              "openid": "Request access to OpenId Connect functionality"
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}