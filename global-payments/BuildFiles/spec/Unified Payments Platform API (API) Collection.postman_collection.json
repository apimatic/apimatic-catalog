{
	"info": {
		"_postman_id": "e17131f2-ddaa-4340-8382-36f264a48435",
		"name": "Unified Payments Platform API (API) Collection",
		"description": "The Unified Payments Platform API (API) Collection contains REST API requests and practical use cases an integrator can implement using Unified Payments Platform API.\n\n## Get Started\n\n### New Unified Payment API Users\n\nIf you are new to Global Payments and want to use Unified Payments REST API please start by going through our [developer portal](https://developer.globalpay.com/docs/Unified-Payments-Apps).\n\n### Existing Unified Payment API User\n\nIf you are an existing Unified Payments REST API user, please fork this collection and use your credentials obtained via our developer portal or from our team. Replace the credentials in the environment file of this collection and start using the API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24904778",
		"_collection_link": "https://winter-resonance-903671.postman.co/workspace/d16403ba-5895-499b-8957-e434a8907684/collection/24904778-e17131f2-ddaa-4340-8382-36f264a48435?action=share&source=collection_link&creator=24904778"
	},
	"item": [
		{
			"name": "Standalone Merchant",
			"item": [
				{
					"name": "Customer Not Present",
					"item": [
						{
							"name": "Use Cases",
							"item": [
								{
									"name": "3D Secure",
									"item": [
										{
											"name": "3DS Authorization Frictionless",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4263970000005262\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Availability",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"channel\": \"CNP\",\n    \"amount\":\"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"id\":\"{{pmt_id}}\"\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n   \"three_ds\": {\n      \"source\": \"BROWSER\",\n      \"preference\": \"NO_PREFERENCE\"\n   },\n   \"message_category\": \"PAYMENT\",\n   \"account_name\": \"{{acc_name}}\",\n   \"channel\": \"CNP\",\n   \"amount\": \"1999\",\n   \"currency\": \"GBP\",\n   \"country\": \"GB\",\n   \"payment_method\": {\n      \"id\": \"{{pmt_id}}\"\n   },\n   \"order\": {\n      \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n      \"amount\": \"1999\",\n      \"currency\": \"GBP\",\n      \"reference\": \"{{reference}}\",\n      \"address_match_indicator\": \"false\",\n      \"shipping_address\": {\n         \"line1\": \"Apartment 852\",\n         \"line2\": \"Complex 741\",\n         \"line3\": \"House 963\",\n         \"city\": \"Chicago\",\n         \"postal_code\": \"50001\",\n         \"state\": \"IL\",\n         \"country\": \"840\"\n      }\n   },\n   \"payer\": {\n      \"mobile_phone\": {\n         \"country_code\": \"44\",\n         \"subscriber_number\": \"123456789\"\n      },\n      \"billing_address\": {\n         \"line1\": \"Flat 456\",\n         \"line2\": \"House 456\",\n         \"line3\": \"Unit 4\",\n         \"city\": \"Halifax\",\n         \"postal_code\": \"W5 9HR\",\n         \"country\": \"826\"\n      }\n   },\n   \"browser_data\": {\n      \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"color_depth\": \"TWENTY_FOUR_BITS\",\n      \"ip\": \"123.123.123.123\",\n      \"java_enabled\": \"true\",\n      \"javascript_enabled\": \"true\",\n      \"language\": \"en-US\",\n      \"screen_height\": \"1080\",\n      \"screen_width\": \"1920\",\n      \"challenge_window_size\": \"FULL_SCREEN\",\n      \"timezone\": \"0\",\n      \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n   },\n   \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "Obtain Result",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"aut_value\");\r",
																	"pm.environment.unset(\"server_trans_ref\");\r",
																	"pm.environment.unset(\"eci\");\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"aut_value\", jsonData.payment_method.three_ds.value);\r",
																	"postman.setEnvironmentVariable(\"server_trans_ref\",  jsonData.payment_method.three_ds.server_trans_ref);\r",
																	"postman.setEnvironmentVariable(\"eci\", jsonData.payment_method.three_ds.eci);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "x-gp-version",
																"value": "{{version}}"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}"
															]
														},
														"description": "This request is the final step before processing the authorization. It is to obtain the necessary authentication data from the Global Payments 3DS solution. \r\n\r\nThis is the data the ACS passed to Global Payments when the customer completed the challenge.\r\n\r\nThe most important information needed for the authorization is the authentication id that is returned in this request. This contains eci value which is needed for a 3DS auth.\r\n\r\nFor more information on Obtaining Result, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Get%20Result/get3DSResult"
													},
													"response": []
												},
												{
													"name": "3DS Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a 3DS Auth when it is determined by the issuing bank that no challenge is required. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single use tokenization. For more information on access token please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n5. Initiate authentication by entering the AUT_id from the previous step in the URL along with the PMT_id and account_name in the body of the request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n6. Obtain results to see the status. This is not a mandetory for a frictionless transaction flow. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n7. Authorize with 3DS2 data by including the acccount_name, PMT_id and aut_id in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [3D Secure &amp; SCA](https://developer.globalpay.com/docs/3DS-overview) for a step-by-step guide."
										},
										{
											"name": "3DS Auth Challenge",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4012001038488884\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Availability",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"channel\": \"CNP\",\n    \"amount\":\"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"id\":\"{{pmt_id}}\"\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n   \"three_ds\": {\n      \"source\": \"BROWSER\",\n      \"preference\": \"NO_PREFERENCE\"\n   },\n   \"message_category\": \"PAYMENT\",\n   \"account_name\": \"{{acc_name}}\",\n   \"channel\": \"CNP\",\n   \"amount\": \"1999\",\n   \"currency\": \"GBP\",\n   \"country\": \"GB\",\n   \"payment_method\": {\n      \"id\": \"{{pmt_id}}\"\n   },\n   \"order\": {\n      \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n      \"amount\": \"1999\",\n      \"currency\": \"GBP\",\n      \"reference\": \"{{reference}}\",\n      \"address_match_indicator\": \"false\",\n      \"shipping_address\": {\n         \"line1\": \"Apartment 852\",\n         \"line2\": \"Complex 741\",\n         \"line3\": \"House 963\",\n         \"city\": \"Chicago\",\n         \"postal_code\": \"50001\",\n         \"state\": \"IL\",\n         \"country\": \"840\"\n      }\n   },\n   \"payer\": {\n      \"mobile_phone\": {\n         \"country_code\": \"44\",\n         \"subscriber_number\": \"123456789\"\n      },\n      \"billing_address\": {\n         \"line1\": \"Flat 456\",\n         \"line2\": \"House 456\",\n         \"line3\": \"Unit 4\",\n         \"city\": \"Halifax\",\n         \"postal_code\": \"W5 9HR\",\n         \"country\": \"826\"\n      }\n   },\n   \"browser_data\": {\n      \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"color_depth\": \"TWENTY_FOUR_BITS\",\n      \"ip\": \"123.123.123.123\",\n      \"java_enabled\": \"true\",\n      \"javascript_enabled\": \"true\",\n      \"language\": \"en-US\",\n      \"screen_height\": \"1080\",\n      \"screen_width\": \"1920\",\n      \"challenge_window_size\": \"FULL_SCREEN\",\n      \"timezone\": \"0\",\n      \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n   },\n   \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "Obtain Result",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"aut_value\");\r",
																	"pm.environment.unset(\"server_trans_ref\");\r",
																	"pm.environment.unset(\"eci\");\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"aut_value\", jsonData.payment_method.three_ds.value);\r",
																	"postman.setEnvironmentVariable(\"server_trans_ref\",  jsonData.payment_method.three_ds.server_trans_ref);\r",
																	"postman.setEnvironmentVariable(\"eci\", jsonData.payment_method.three_ds.eci);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "x-gp-version",
																"value": "{{version}}"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}"
															]
														},
														"description": "This request is the final step before processing the authorization. It is to obtain the necessary authentication data from the Global Payments 3DS solution. \r\n\r\nThis is the data the ACS passed to Global Payments when the customer completed the challenge.\r\n\r\nThe most important information needed for the authorization is the authentication id that is returned in this request. This contains eci value which is needed for a 3DS auth.\r\n\r\nFor more information on Obtaining Result, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Get%20Result/get3DSResult"
													},
													"response": []
												},
												{
													"name": "3DS Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a 3DS Auth when it is determined that a challenge is required. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n5. Initiate authentication by entering the AUT_id from the previous step in the URL along with the PMT_id and account_name in the body of the request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n6. When necessary, a challenge request will be presented to the user and the result can be obtained by entering the AUT_id into the URL of the Obtain Result request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n7. Authorize with 3DS2 data by including the acccount_name, PMT_id, and aut_id in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs."
										},
										{
											"name": "3DS Preauth & Capture Challenge",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4012001038488884\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Availability",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"channel\": \"CNP\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"id\": \"{{pmt_id}}\"\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n   \"three_ds\": {\n      \"source\": \"BROWSER\",\n      \"preference\": \"NO_PREFERENCE\"\n   },\n   \"message_category\": \"PAYMENT\",\n   \"account_name\": \"{{acc_name}}\",\n   \"channel\": \"CNP\",\n   \"amount\": \"1999\",\n   \"currency\": \"GBP\",\n   \"country\": \"GB\",\n   \"payment_method\": {\n      \"id\": \"{{pmt_id}}\"\n   },\n   \"order\": {\n      \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n      \"amount\": \"1999\",\n      \"currency\": \"GBP\",\n      \"reference\": \"{{reference}}\",\n      \"address_match_indicator\": \"false\",\n      \"shipping_address\": {\n         \"line1\": \"Apartment 852\",\n         \"line2\": \"Complex 741\",\n         \"line3\": \"House 963\",\n         \"city\": \"Chicago\",\n         \"postal_code\": \"50001\",\n         \"state\": \"IL\",\n         \"country\": \"840\"\n      }\n   },\n   \"payer\": {\n      \"mobile_phone\": {\n         \"country_code\": \"44\",\n         \"subscriber_number\": \"123456789\"\n      },\n      \"billing_address\": {\n         \"line1\": \"Flat 456\",\n         \"line2\": \"House 456\",\n         \"line3\": \"Unit 4\",\n         \"city\": \"Halifax\",\n         \"postal_code\": \"W5 9HR\",\n         \"country\": \"826\"\n      }\n   },\n   \"browser_data\": {\n      \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"color_depth\": \"TWENTY_FOUR_BITS\",\n      \"ip\": \"123.123.123.123\",\n      \"java_enabled\": \"true\",\n      \"javascript_enabled\": \"true\",\n      \"language\": \"en-US\",\n      \"screen_height\": \"1080\",\n      \"screen_width\": \"1920\",\n      \"challenge_window_size\": \"FULL_SCREEN\",\n      \"timezone\": \"0\",\n      \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n   },\n   \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "Obtain Result",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"aut_value\");\r",
																	"pm.environment.unset(\"server_trans_ref\");\r",
																	"pm.environment.unset(\"eci\");\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"aut_value\", jsonData.payment_method.three_ds.value);\r",
																	"postman.setEnvironmentVariable(\"server_trans_ref\",  jsonData.payment_method.three_ds.server_trans_ref);\r",
																	"postman.setEnvironmentVariable(\"eci\", jsonData.payment_method.three_ds.eci);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "x-gp-version",
																"value": "{{version}}"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}"
															]
														},
														"description": "This request is the final step before processing the authorization. It is to obtain the necessary authentication data from the Global Payments 3DS solution. \r\n\r\nThis is the data the ACS passed to Global Payments when the customer completed the challenge.\r\n\r\nThe most important information needed for the authorization is the authentication id that is returned in this request. This contains eci value which is needed for a 3DS auth.\r\n\r\nFor more information on Obtaining Result, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Get%20Result/get3DSResult"
													},
													"response": []
												},
												{
													"name": "3DS Preauth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"LATER\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												},
												{
													"name": "Complete Capture",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														},
														"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
													},
													"response": []
												}
											],
											"description": "In this flow, we are covering how to do a pre-auth, 3DS, and a sale transaction. This process flow is commonly used for merchants who want to process a 3DS Auth when it is determined that a challenge is required. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment.\n2. Create a single-use payment token by entering the card data into the body and performing Tokenize Single Use.\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization\n4. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned.\n5. Initiate authentication by entering the AUT_id from the previous step in the URL along with the PMT_id and account_name in the body of the request.\n6. When necessary, a challenge request will be presented to the user and the result can be obtained by entering the AUT_id into the URL of the Obtain Result request.\n7. Preauthorize with 3DS2 data by including the account_name, PMT_id, and AUT_id in the body of the request.\n8. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request.\n    \n\nFor more information see [3D Secure &amp; SCA](https://null) for a step-by-step guide."
										},
										{
											"name": "3DS Auth Decline",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4012001038488884\",\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"27\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}\n"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Version",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"channel\": \"CNP\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"id\": \"{{pmt_id}}\"\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n   \"three_ds\": {\n      \"source\": \"BROWSER\",\n      \"preference\": \"NO_PREFERENCE\"\n   },\n   \"message_category\": \"PAYMENT\",\n   \"account_name\": \"{{acc_name}}\",\n   \"channel\": \"CNP\",\n   \"amount\": \"1999\",\n   \"currency\": \"GBP\",\n   \"country\": \"GB\",\n   \"payment_method\": {\n      \"id\": \"{{pmt_id}}\"\n   },\n   \"order\": {\n      \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n      \"amount\": \"1999\",\n      \"currency\": \"GBP\",\n      \"reference\": \"{{reference}}\",\n      \"address_match_indicator\": \"false\",\n      \"shipping_address\": {\n         \"line1\": \"Apartment 852\",\n         \"line2\": \"Complex 741\",\n         \"line3\": \"House 963\",\n         \"city\": \"Chicago\",\n         \"postal_code\": \"50001\",\n         \"state\": \"IL\",\n         \"country\": \"840\"\n      }\n   },\n   \"payer\": {\n      \"mobile_phone\": {\n         \"country_code\": \"44\",\n         \"subscriber_number\": \"123456789\"\n      },\n      \"billing_address\": {\n         \"line1\": \"Flat 456\",\n         \"line2\": \"House 456\",\n         \"line3\": \"Unit 4\",\n         \"city\": \"Halifax\",\n         \"postal_code\": \"W5 9HR\",\n         \"country\": \"826\"\n      }\n   },\n   \"browser_data\": {\n      \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"color_depth\": \"TWENTY_FOUR_BITS\",\n      \"ip\": \"123.123.123.123\",\n      \"java_enabled\": \"true\",\n      \"javascript_enabled\": \"true\",\n      \"language\": \"en-US\",\n      \"screen_height\": \"1080\",\n      \"screen_width\": \"1920\",\n      \"challenge_window_size\": \"FULL_SCREEN\",\n      \"timezone\": \"0\",\n      \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n   },\n   \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "Obtain Result",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"aut_value\");\r",
																	"pm.environment.unset(\"server_trans_ref\");\r",
																	"pm.environment.unset(\"eci\");\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"aut_value\", jsonData.payment_method.three_ds.value);\r",
																	"postman.setEnvironmentVariable(\"server_trans_ref\",  jsonData.payment_method.three_ds.server_trans_ref);\r",
																	"postman.setEnvironmentVariable(\"eci\", jsonData.payment_method.three_ds.eci);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "x-gp-version",
																"value": "{{version}}"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}"
															]
														},
														"description": "This request is the final step before processing the authorization. It is to obtain the necessary authentication data from the Global Payments 3DS solution. \r\n\r\nThis is the data the ACS passed to Global Payments when the customer completed the challenge.\r\n\r\nThe most important information needed for the authorization is the authentication id that is returned in this request. This contains eci value which is needed for a 3DS auth.\r\n\r\nFor more information on Obtaining Result, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Get%20Result/get3DSResult"
													},
													"response": []
												},
												{
													"name": "3DS Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a 3DS Auth when it is determined that a challenge is required and the card declines. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n    \n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n4. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n    \n5. Initiate authentication by entering the AUT_id from the previous step in the URL along with the PMT_id and account_name in the body of the request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n    \n6. When necessary, a challenge request will be presented to the user and the result can be obtained by entering the AUT_id into the URL of the Obtain Result request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n    \n7. Authorize with 3DS2 data by including the acccount_name, PMT_id, and aut_id in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs."
										},
										{
											"name": "3DS Auth PAN",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Availability",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"channel\": \"CNP\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"card\": {\n            \"number\": \"4263970000005262\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\"\n        }\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"three_ds\": {\n        \"source\": \"BROWSER\",\n        \"preference\": \"NO_PREFERENCE\"\n    },\n    \"message_category\": \"PAYMENT\",\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"card\": {\n            \"number\": \"4263970000005262\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\"\n        }\n    },\n    \"order\": {\n        \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n        \"amount\": \"1999\",\n        \"currency\": \"GBP\",\n        \"reference\": \"{{reference}}\",\n        \"address_match_indicator\": \"false\",\n        \"shipping_address\": {\n            \"line1\": \"Apartment 852\",\n            \"line2\": \"Complex 741\",\n            \"line3\": \"House 963\",\n            \"city\": \"Chicago\",\n            \"postal_code\": \"50001\",\n            \"state\": \"IL\",\n            \"country\": \"840\"\n        }\n    },\n    \"payer\": {\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"123456789\"\n        },\n        \"billing_address\": {\n            \"line1\": \"Flat 456\",\n            \"line2\": \"House 456\",\n            \"line3\": \"Unit 4\",\n            \"city\": \"Halifax\",\n            \"postal_code\": \"W5 9HR\",\n            \"country\": \"826\"\n        }\n    },\n    \"browser_data\": {\n        \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        \"color_depth\": \"TWENTY_FOUR_BITS\",\n        \"ip\": \"123.123.123.123\",\n        \"java_enabled\": \"true\",\n        \"javascript_enabled\": \"true\",\n        \"language\": \"en-US\",\n        \"screen_height\": \"1080\",\n        \"screen_width\": \"1920\",\n        \"challenge_window_size\": \"FULL_SCREEN\",\n        \"timezone\": \"0\",\n        \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n    },\n    \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "3DS Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4263970000005262\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\"\n        },\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a 3DS Auth when it is determined by the issuing bank that no challenge is required, however, the raw card details are used. In this flow, we will complete the following steps in sequential order:\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n3. Initiate authentication by entering the aut_id from the previous step in the URL along with the PMT_id and account_name in the body of the request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n4. Authorize 3DS2 data by including the acccount_name, raw card details, and aut_id in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [3D Secure &amp; SCA](https://developer.globalpay.com/docs/3DS-overview) for a step-by-step guide."
										},
										{
											"name": "3DS 3rd Party",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4263970000005262\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "3DS Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1999\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"three_ds\": {\n                \"message_version\": \"\",\n                \"eci\": \"\",\n                \"value\": \"\",\n                \"ds_trans_ref\": \"\"\n            }\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commanly used for merchants who want to process a 3DS Auth where a 3rd party system does the 3D Secure steps and Global Payments completes the transaction with the raw 3DS Details. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n    \n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Authorize 3DS2 data by including the acccount_name, raw card details, and the raw 3DS information in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [3D Secure &amp; SCA](https://developer.globalpay.com/docs/3DS-overview) for a step-by-step guide."
										}
									],
									"description": "3D Secure is the authentication protocol used by card brands, such as Visa and Mastercard, to enable merchants to gain protection from fraud in a Card Not Present (CNP) environment and to comply with European Strong Customer Authentication (SCA) regulations set in Payment Services Directive 2 (PSD2).\n\nWhen 3D Secure v2 is used with an Authorization request requiring the customer to authenticate the card used in a transaction, the financial liability can shift from the merchant to the Issuer in the event of a fraud-related chargeback.\n\nFor more information see [3DS ](https://developer.globalpay.com/docs/3DS-overview) for an overview."
								},
								{
									"name": "Recurring Payments",
									"item": [
										{
											"name": "Recurring Auth Tokenized Card",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															},
															{
																"key": "payment_method.storage_model",
																"value": "ALWAYS",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															],
															"query": [
																{
																	"key": "",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "This request tokenizes as part of a transaction. The field \"storage_model\" stores the card if the field is present and the merchant has a TKA account. This can be checked by seeing if TKA account is in access token response.\r\n\r\n- \"storage_model\" can be ALWAYS | ON_SUCCESS\r\n- ALWAYS= Always create a token even if card declines\r\n- ON_SUCCESS - Only tokenize card if authorized \r\n\r\nIf tokenized, a new field in \"payment_method\" called id is returned  that contains the token \r\n\r\nFor more details on tokenization, please visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Convert Token to Multi Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"MULTIPLE\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												},
												{
													"name": "Recurring Payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"reason\": \"INCREMENTAL\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"card\": {\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process recurring auth transactions with a tokenized card. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Initiate authorization by entering the account_name and PMT_ID into the body of the request. Storing the brand reference for later use in the recurring authorization. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n5. Payment token can be converted to a multiple-use token by performing the Convert Token to Multi-Use call. It can also be done by setting the usage mode to multiple instead of single when the token is first created. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) for API Spec on Stored Payment Methods.\n6. A recurring payment can be set up by entering account_name and PMT_id into the body of the request along with the brand reference field return from the original authorization. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) & [Credentials On File](https://developer.globalpay.com/docs/COF)."
										},
										{
											"name": "Verification & Recurring Auth",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"23\",\n        \"cvv\":\"123\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Verification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"id\":\"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/verifications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"verifications"
															]
														},
														"description": "This request verifys a card. As you can see in the body of the request, Jane Doe's card details to be verified are present. On success, the status of the transaction in the response will be \"verified\".\r\n\r\nFor more details on verifying a card, visit: https://developer.globalpay.com/api/verifications#/Verify/post_verifications"
													},
													"response": []
												},
												{
													"name": "Covert Token to Multi Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"MULTIPLE\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												},
												{
													"name": "Recurring Payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"reason\": \"INCREMENTAL\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"card\": {\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process recurring auth transactions with a tokenized card that has been verified. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Initiate verification by entering the account_name and PMT_ID into the body of the request. Storing the brand reference for later use in the recurring authorization. Please [click here](https://developer.globalpay.com/api/verifications) to refer to the verification API specs.\n5. Payment token can be converted to a multiple-use token by performing the Convert Token to Multi-Use call. It can also be done by setting the usage mode to multiple instead of single when the token is first created. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) for API Spec on Stored Payment Methods.\n6. A recurring payment can be set up by entering account_name and PMT_id into the body of the request along with the brand reference field return from the original authorization. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) & [Credentials On File](https://developer.globalpay.com/docs/COF)."
										},
										{
											"name": "3DS Verify & Recurring Auth",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4263970000005262\",\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"26\",\n        \"cvv\":\"123\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token Full",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Check Version",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"//Json Parse",
																	"pm.environment.unset(\"aut_id\");",
																	"",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"",
																	"var pareq = jsonData.three_ds.challenge_value; ",
																	"var redirect_url = jsonData.three_ds.acs_redirect_url; ",
																	"",
																	"postman.setEnvironmentVariable(\"aut_id\", jsonData.id);",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);",
																	"",
																	"",
																	"console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"hidden\" name=\"challenge_value\" value= '+pareq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	"//https://test.portal.gpwebpay.com/pay-sim-gpi/sim/acs",
																	"//https://apis-dev.globalpay.com/testing/acs"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"reference\": \"abcdendfjknbkjfdns\",\n    \"channel\": \"CNP\",\n    \"amount\":\"5\",\n    \"currency\": \"EUR\",\n    \"country\": \"US\",\n    \"source\": \"BROWSER\",\n    \"payment_method\": {\n        \"id\":\"{{pmt_id}}\"\n    },\n    \"notifications\": {\n        \"challenge_return_url\": \"https://www.example.com/ChallengeNotification\",\n        \"three_ds_method_return_url\": \"https://www.example.com/MethodNotification\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications"
															]
														},
														"description": "This request must be sent in order to verify what version of 3DS the payer is set up with i.e 3DS1 or 3DS2. \r\n\r\nFor 3DS1, you can see in the response that the redirect url is included. This is the address of the Issuer's Access Control Server.\r\n\r\nFor 3DS2, you can see in the response that the method URL is included. The URL to facilitate the ACS gathering device data. If the ACS does not support this functionality, this field will not be returned.\r\n\r\nFor more info on Checking Version of 3DS, visit: https://developer.globalpay.com/api/authentications#/Check%20Availability/check3DSAvailability"
													},
													"response": []
												},
												{
													"name": "Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"//Json Parse",
																	"",
																	"var jsonData = JSON.parse(responseBody);",
																	"var creq = jsonData.three_ds.challenge_value; ",
																	"var acs_challenge_request_url = jsonData.three_ds.acs_challenge_request_url; ",
																	"",
																	"//console.log(pareq);",
																	"pm.test(\"set  html\",function(){",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+acs_challenge_request_url+' method=\"POST\">  <input type=\"hidden\" name=\"creq\" value= '+creq+' /> <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     ",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\"three_ds\": {\n      \"source\": \"BROWSER\",\n      \"preference\": \"CHALLENGE_MANDATED\"\n   },\n   \"message_category\": \"PAYMENT\",\n   \"account_name\": \"transaction_processing\",\n   \"channel\": \"CNP\",\n   \"amount\": \"1999\",\n   \"currency\": \"EUR\",\n   \"country\": \"IE\",\n   \"payment_method\": {\n      \"id\": \"{{pmt_id}}\"\n   },\n   \"order\": {\n      \"time_created_reference\": \"2019-04-26T10:19:32.552327Z\",\n      \"amount\": \"1000\",\n      \"currency\": \"EUR\",\n      \"reference\": \"3400dd37-101d-4940-be15-3c963b6109b3\",\n      \"address_match_indicator\": \"false\",\n      \"shipping_address\": {\n         \"line1\": \"Apartment 852\",\n         \"line2\": \"Complex 741\",\n         \"line3\": \"House 963\",\n         \"city\": \"Chicago\",\n         \"postal_code\": \"50001\",\n         \"state\": \"IL\",\n         \"country\": \"840\"\n      }\n   },\n   \"payer\": {\n      \"mobile_phone\": {\n         \"country_code\": \"44\",\n         \"subscriber_number\": \"123456789\"\n      },\n      \"billing_address\": {\n         \"line1\": \"Flat 456\",\n         \"line2\": \"House 456\",\n         \"line3\": \"Unit 4\",\n         \"city\": \"Halifax\",\n         \"postal_code\": \"W5 9HR\",\n         \"country\": \"826\"\n      }\n   },\n   \"browser_data\": {\n      \"accept_header\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n      \"color_depth\": \"TWENTY_FOUR_BITS\",\n      \"ip\": \"123.123.123.123\",\n      \"java_enabled\": \"true\",\n      \"javascript_enabled\": \"true\",\n      \"language\": \"en-US\",\n      \"screen_height\": \"1080\",\n      \"screen_width\": \"1920\",\n      \"challenge_window_size\": \"FULL_SCREEN\",\n      \"timezone\": \"0\",\n      \"user_agent\": \"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36\"\n   },\n   \"merchant_contact_url\": \"https://example.com/about\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}/initiate",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}",
																"initiate"
															]
														},
														"description": "This request follows the 'Check Version' request in the 3DS2 flow. The merchant must submit data including the billing and shipping details of the payer, at least one phone number, the device data, transaction details, outcome from the ACS Method URL if it took place and a link to the merchant's About or Contact page.\r\n\r\nFor more information on the 3DS2 Initate step, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Initiate/initiate3DS"
													},
													"response": []
												},
												{
													"name": "Obtain Result",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"aut_value\");\r",
																	"pm.environment.unset(\"server_trans_ref\");\r",
																	"pm.environment.unset(\"eci\");\r",
																	"\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"aut_value\", jsonData.payment_method.three_ds.value);\r",
																	"postman.setEnvironmentVariable(\"server_trans_ref\",  jsonData.payment_method.three_ds.server_trans_ref);\r",
																	"postman.setEnvironmentVariable(\"eci\", jsonData.payment_method.three_ds.eci);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "accessToken",
																	"value": "{{token}}",
																	"type": "string"
																},
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "x-gp-version",
																"value": "{{version}}"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/authentications/{{aut_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"authentications",
																"{{aut_id}}"
															]
														},
														"description": "This request is the final step before processing the authorization. It is to obtain the necessary authentication data from the Global Payments 3DS solution. \r\n\r\nThis is the data the ACS passed to Global Payments when the customer completed the challenge.\r\n\r\nThe most important information needed for the authorization is the authentication id that is returned in this request. This contains eci value which is needed for a 3DS auth.\r\n\r\nFor more information on Obtaining Result, please visit: https://developer.globalpay.com/api/3d-secure-two and https://developer.globalpay.com/api/authentications#/Get%20Result/get3DSResult"
													},
													"response": []
												},
												{
													"name": "3DS Verify",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"currency\": \"USD\",\n    \"reference\": \"My Own Reference\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"authentication\": {\n            \"id\": \"{{aut_id}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/verifications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"verifications"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												},
												{
													"name": "Covert Token to Multi Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"MULTIPLE\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												},
												{
													"name": "Recurring Payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"reason\": \"INCREMENTAL\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"card\": {\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process recurring auth transactions with a tokenized card that has been verified trough 3D Secure. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Check version and enrollment by running a request with PMT_id and account_name entered correctly into the body of the request. Check that the exact version of 3DS is returned. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n5. Initiate authentication by entering the AUT_id from the previous step in the URL along with the PMT_id and account_name in the body of the request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n    \n6. When necessary, a challenge request will be presented to the user and the result can be obtained by entering the AUT_id into the URL of the Obtain Result request. Please [click here](https://developer.globalpay.com/api/authentications) to refer to the API specs.\n    \n7. Initiate verification by entering the account_name and PMT_ID into the body of the request. Storing the brand reference for later use in the recurring authorization. Please [click here](https://developer.globalpay.com/api/verifications) to refer to the verification API specs.\n8. Payment token can be converted to a multiple-use token by performing the Convert Token to Multi-Use call. It can also be done by setting the usage mode to multiple instead of single when the token is first created. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) for API Spec on Stored Payment Methods.\n9. A recurring payment can be set up by entering account_name and PMT_id into the body of the request along with the brand reference field return from the original authorization. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) & [Credentials On File](https://developer.globalpay.com/docs/COF)."
										},
										{
											"name": "Lodging No Show",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Verification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"id\":\"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/verifications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"verifications"
															]
														},
														"description": "This request verifys a card. As you can see in the body of the request, Jane Doe's card details to be verified are present. On success, the status of the transaction in the response will be \"verified\".\r\n\r\nFor more details on verifying a card, visit: https://developer.globalpay.com/api/verifications#/Verify/post_verifications"
													},
													"response": []
												},
												{
													"name": "Convert Token to Multi Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"MULTIPLE\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												},
												{
													"name": "Recurring Payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "\n{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"card\": {\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    },\n    \"lodging\": {\n        \"booking_reference\": \"797ebe05bf34dd4b6a8ec4fa\",\n        \"charge_items\": [\n            {\n                \"types\": [\n                    \"NO_SHOW\"\n                ]\n            }\n        ]\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process Recurring Payments for “No Show’s”. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use payment token by entering the card data into the body and performing single-use tokenization. For more information on access tokens please [click here](https://developer.globalpay.com/access-tokens).\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Initiate verification by entering the account_name and PMT_ID into the body of the request. Storing the brand reference for later use in the recurring authorization. Please [click here](https://developer.globalpay.com/api/verifications) to refer to the verification API specs.\n5. Payment token can be converted to a multiple-use token by performing the Convert Token to Multi-Use call. It can also be done by setting the usage mode to multiple instead of single when the token is first created. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) for API Spec on Stored Payment Methods.\n6. A recurring payment can be set up by entering account_name and PMT_id into the body of the request. No brand_refernece is needed if the lodging object is present. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) & [Credentials On File](https://developer.globalpay.com/docs/COF)."
										},
										{
											"name": "Digital Wallet Recurring",
											"item": [
												{
													"name": "Apple Pay recurring",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[0].name);\r",
																			"\r",
																			"if (jsonData.scope.accounts[1].name == 'tokenization' || jsonData.scope.accounts[1].name == 'Tokenization') {\r",
																			"postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[1].name);\r",
																			"}\r",
																			"\r",
																			"\r",
																			"if (jsonData.scope.accounts[2].name == 'dispute_management' || jsonData.scope.accounts[2].name == 'Dispute Management') {\r",
																			"postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[2].name);\r",
																			"}\r",
																			"\r",
																			"if (jsonData.scope.accounts[3].name == 'settlement_reporting' || jsonData.scope.accounts[3].name == 'Settlement Reporting') {\r",
																			"postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[3].name);\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Apple Pay Decrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.digital_wallet.brand_reference);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"5\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"order_reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"PAYER\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"sequence\": \"FIRST\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"APPLEPAY\",\n            \"eci\": \"\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Apple Pay Transaction. You provide us with the Apple Pay token and we encrypt it for you and process  transaction.\r\n\r\nFor more info on Apple Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#apple-pay"
															},
															"response": []
														},
														{
															"name": "Apple Pay Decrypted Recurring Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"5\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"order_reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"APPLEPAY\",\n            \"eci\": \"5\",\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Apple Pay Transaction. You provide us with the Apple Pay token and we encrypt it for you and process  transaction.\r\n\r\nFor more info on Apple Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#apple-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process recurring Apple Pay transactions. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Create decrypted Apple Pay transaction by entering account_name, and proper card information, provider must be set to APPLEPAY. Storing the brand reference for latter use in the recurring auth. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Recurring Authorization can be set up by entering account_name, brand reference from the original authorization and proper card information, the provider must be set to APPLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Decrypted Digital Wallets](https://developer.globalpay.com/docs/decrypted-wallets)."
												},
												{
													"name": "Google Pay Recurring",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Google Pay Decrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.digital_wallet.brand_reference);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"1999\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"PAYER\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"sequence\": \"FIRST\"\n    },\n    \"payment_method\": {\n        \"name\": \"James Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"PAY_BY_GOOGLE\",\n            \"eci\": \"5\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Google Pay Transaction. You provide us with the Google Pay token and we encrypt it for you and process transaction.\r\n\r\nFor more info on Google Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#google-pay"
															},
															"response": []
														},
														{
															"name": "Google Pay Decrypted Recurring Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"1999\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"James Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"PAY_BY_GOOGLE\",\n            \"eci\": \"5\",\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Google Pay Transaction. You provide us with the Google Pay token and we encrypt it for you and process transaction.\r\n\r\nFor more info on Google Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#google-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process recurring Google Pay transactions. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a decrypted Apple Pay transaction by entering account_name, and proper card information, the provider must be set to APPLEPAY. Storing the brand reference for later use in the recurring auth. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Recurring Authorization can be set up by entering account_name, brand reference from the original authorization, and proper card information, the provider must be set to APPLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Decrypted Digital Wallets](https://developer.globalpay.com/docs/decrypted-wallets)."
												}
											],
											"description": "Digital Wallets can also be used for recurring payments. This will involve using the decrypted Digital Wallet payment and storing the brand reference from the initial transaction."
										}
									],
									"description": "Transactions using stored card details are either customer-initiated (payer) (CIT) or merchant-initiated (MIT).\n\nCredential on File (COF) is a way of identifying stored card transactions. The location of the stored card details doesn't matter—the details could be held with Global Payments card storage or stored securely by the merchant or by a third party for merchant use.\n\nThe purpose of the COF mandate from the card schemes, such as Visa or Mastercard, is to help reduce fraud by requiring merchants to include certain fields in the authorization message when using a customer’s stored credentials for payments. These COF fields indicate to Issuers and Acquirers that the merchant has a prior arrangement with the customer to store their card details and potentially make subsequent payments on their behalf. This benefits the merchant and cardholder.\n\nFor more information see [Recurring Payments &amp; COF](https://developer.globalpay.com/docs/COF) for an overview."
								},
								{
									"name": "Pay by Link",
									"item": [
										{
											"name": "Create Link",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();\r",
																	"\r",
																	"\r",
																	"nonceDate = date.toISOString(); \r",
																	"pm.environment.set(\"nonce\", nonceDate);\r",
																	"\r",
																	"var nonce = pm.environment.get(\"nonce\");\r",
																	"\r",
																	"\r",
																	"var app_key = pm.environment.get(\"app_key\");\r",
																	"var s512Txt = nonce +''+app_key;\r",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);\r",
																	"\r",
																	"//var secret = SHA512(s512Txt);\r",
																	"pm.environment.set(\"secret\", secret);\r",
																	"\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"\r",
																	"NOT USE as replace this function with CryptoJS.SHA512\r",
																	"\r",
																	"* Secure Hash Algorithm (SHA512)\r",
																	"* http://www.happycode.info/\r",
																	"*/\r",
																	"\r",
																	"function SHA512(str) {\r",
																	" function int64(msint_32, lsint_32) {\r",
																	" this.highOrder = msint_32;\r",
																	" this.lowOrder = lsint_32;\r",
																	" }\r",
																	"\r",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),\r",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),\r",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),\r",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];\r",
																	"\r",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),\r",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),\r",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),\r",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),\r",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),\r",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),\r",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),\r",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),\r",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),\r",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),\r",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),\r",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),\r",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),\r",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),\r",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),\r",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),\r",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),\r",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),\r",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),\r",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),\r",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),\r",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),\r",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),\r",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),\r",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),\r",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),\r",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),\r",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),\r",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),\r",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),\r",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),\r",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),\r",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),\r",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),\r",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];\r",
																	"\r",
																	" var W = new Array(64);\r",
																	" var a, b, c, d, e, f, g, h, i, j;\r",
																	" var T1, T2;\r",
																	" var charsize = 8;\r",
																	"\r",
																	" function utf8_encode(str) {\r",
																	" return unescape(encodeURIComponent(str));\r",
																	" }\r",
																	"\r",
																	" function str2binb(str) {\r",
																	" var bin = [];\r",
																	" var mask = (1 << charsize) - 1;\r",
																	" var len = str.length * charsize;\r",
																	"\r",
																	" for (var i = 0; i < len; i += charsize) {\r",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));\r",
																	" }\r",
																	"\r",
																	" return bin;\r",
																	" }\r",
																	"\r",
																	" function binb2hex(binarray) {\r",
																	" var hex_tab = '0123456789abcdef';\r",
																	" var str = '';\r",
																	" var length = binarray.length * 4;\r",
																	" var srcByte;\r",
																	"\r",
																	" for (var i = 0; i < length; i += 1) {\r",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);\r",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);\r",
																	" }\r",
																	"\r",
																	" return str;\r",
																	" }\r",
																	"\r",
																	" function safe_add_2(x, y) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\r",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_4(a, b, c, d) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_5(a, b, c, d, e) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function maj(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function ch(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function rotr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" function sigma0(x) {\r",
																	" var rotr28 = rotr(x, 28);\r",
																	" var rotr34 = rotr(x, 34);\r",
																	" var rotr39 = rotr(x, 39);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\r",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function sigma1(x) {\r",
																	" var rotr14 = rotr(x, 14);\r",
																	" var rotr18 = rotr(x, 18);\r",
																	" var rotr41 = rotr(x, 41);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\r",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma0(x) {\r",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\r",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma1(x) {\r",
																	" var rotr19 = rotr(x, 19);\r",
																	" var rotr61 = rotr(x, 61);\r",
																	" var shr6 = shr(x, 6);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\r",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function shr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" x.highOrder >>> n,\r",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" 0,\r",
																	" x.highOrder << (32 - n)\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" str = utf8_encode(str);\r",
																	" strlen = str.length*charsize;\r",
																	" str = str2binb(str);\r",
																	"\r",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);\r",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;\r",
																	"\r",
																	" for (var i = 0; i < str.length; i += 32) {\r",
																	" a = H[0];\r",
																	" b = H[1];\r",
																	" c = H[2];\r",
																	" d = H[3];\r",
																	" e = H[4];\r",
																	" f = H[5];\r",
																	" g = H[6];\r",
																	" h = H[7];\r",
																	"\r",
																	" for (var j = 0; j < 80; j++) {\r",
																	" if (j < 16) {\r",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);\r",
																	" } else {\r",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);\r",
																	" }\r",
																	"\r",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);\r",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));\r",
																	" h = g;\r",
																	" g = f;\r",
																	" f = e;\r",
																	" e = safe_add_2(d, T1);\r",
																	" d = c;\r",
																	" c = b;\r",
																	" b = a;\r",
																	" a = safe_add_2(T1, T2);\r",
																	" }\r",
																	"\r",
																	" H[0] = safe_add_2(a, H[0]);\r",
																	" H[1] = safe_add_2(b, H[1]);\r",
																	" H[2] = safe_add_2(c, H[2]);\r",
																	" H[3] = safe_add_2(d, H[3]);\r",
																	" H[4] = safe_add_2(e, H[4]);\r",
																	" H[5] = safe_add_2(f, H[5]);\r",
																	" H[6] = safe_add_2(g, H[6]);\r",
																	" H[7] = safe_add_2(h, H[7]);\r",
																	" }\r",
																	"\r",
																	" var binarray = [];\r",
																	" for (var i = 0; i < H.length; i++) {\r",
																	" binarray.push(H[i].highOrder);\r",
																	" binarray.push(H[i].lowOrder);\r",
																	" }\r",
																	" return binb2hex(binarray);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"link\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"transaction_processing\",\n    \"type\": \"payment\",\n    \"usage_mode\": \"SINGLE\",\n    \"usage_limit\": \"1\",\n    \"reference\": \"iphone 14 abc\",\n    \"name\": \"iphone 14\",\n    \"description\": \"iPhone 14 Max\",\n    \"status\": \"ACTIVE\",\n    \"shippable\": \"NO\",\n    \"expiration_date\": \"2023-12-20T00:35:28Z\",\n    \"transactions\": {\n        \"allowed_payment_methods\": [\n            \"CARD\"\n        ],\n        \"amount\": \"1000\",\n        \"channel\": \"CNP\",\n        \"country\": \"GB\",\n        \"currency\": \"GBP\"\n    },\n    \"images\": [\n        {\n            \"b64_content\": \"/9j/4AAQSkZJRgABAQEAYABgAAD//gA7Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gOTAK/9sAQwADAgIDAgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0LDRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8AAEQgAZABkAwERAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8Aw/xr+zT+IAoAKAD8aACgA/GgAoAKAD8aACgA70AGDQAAUAGKAuGKAuGKAGtIidXUH0Jr57FcRZRg5OFfFQi105lf7tz77LeAeLM3gquByytOD2l7OSi/STST+8YbmIfxr+deb/rlw+v+YuP4/wCR9EvCHjx6rKqn3L/MPtUP99aX+ufD/wD0Fx/H/Ir/AIhBx5/0Kqn/AJL/AJh9ph/vin/rnw//ANBcfx/yD/iEHHn/AEKqn/kv+Yfaov8AnoKP9c+H/wDoLj+P+Qv+IQcef9Cqp/5L/mKJ4j/y0X860hxfkE3ZYyHzdvzOer4T8dUVeWU1vlG/4K48EMMggj1FfSYbGYbGQ9phqkZx7xaa/A/O8xyrMMoq+wzHDzoz7TjKL+6STFxXWeVcMUAGKACkIAaLjM+7u2ZiiHCjgkd6/lXjXjXEZniJ4HAzcaEXZtbzfVt/y9l13fS3+oPg54N4Dh3AUc8zyiqmNqJSSkrqinqkk9Oe2spPWL92NrNupivx8/rYAKAD8KYBQAY9qQBQA6OVom3KSD/OvSwGY4vK66xGDqOE11X5NbNeT0Pnc94eyribBSy/N6EatKXSS284veL7NNNdzUt5xPHu6HoRX9hcJcSQ4kwPtpK1WGk15915Pp810P8AJDxV8PK3h3nn1ODc8NVTlSk93G+sX05ovR901KyvZS5FfbH4wGR70XAKYxkjbInOeik/pXz3EOJlg8oxVeDs4wlb1s7fife8A5bTzfivLMDVV4TrU1Jd48ycl80mY9fwqf7dBTAvaJo9z4g1a102zEZurmQRxiaVYkyfVmIUD3JqoRc5KMd2ceLxVLA0J4mu7Qiruyb09Fdv5Hf6h+zl460u60q2uNPshcapIkVnEmqWztMWDFSoEh+UhW+bpx1rseCrqya380fFQ48yCpGco1naOr9yelv+3d/Lc43TvB2qapoOp6zbRRSabpt5DYXU/noBHPLJ5caYJycvxkcDvWCoVGm0tj36vEGW0Z0ac6tnVTlHR6qKu+mno7M2fH3wi8R/DGyFz4jisbFDOtt5aalbyyCRgSFKI5YdD1H8xV1MLVpLmmvxRwZbxblGb1lQwlRuTV1eMkvvaS/E4zNcp9iFIC3pzfvWX1Ga/ZfC3EypZvUodJwf3pq34Nn8gfSby2GJ4Uw2Ot79Gslf+7OMk182o/cX6/qY/wAxxKAFoAiuc/Z5PpXxnGT/AOMfxf8Ah/VH6/4RJPjzKf8Ar6vyZlV/E5/suFACMgkQqwDKRggjgimDV1ZnpOp/FLwdpv7TPwD1c6xBBo3hnwtY6fqc5jcLaSxpcBoyNuTjenTI5r34VYuVOV9kj+bcbk+LhhM0w6pNSnVm4LvFtWa8miuf2kPD3iv4U/EHR76z8MeGbuXxHplzp8OhaYbRr+GO8DyzSEZDMqqDk4PJqvbRlCSdlqjm/sPE0MZhqkJTnFQmnzSvytxsku13+SK37ZHizwh8Qhq+seHdf8B6gZtSjuYv7K0ieHWpl2lT51wyhWUZyR3wvpSxE4Tu4tfqa8MYTGYNwpYinVjaLXvSTguukVqv+HPE/BXjE3SpYX7/AL8cRTMfv+x9/fv9evjVIW1R+65dj3NKjW36Pv8A8E7Wuc+hLNgf3/4V+p+G3/JQQ/wy/I/mP6RavwHV/wCvtP8ANmj6V/XB/lKAFIApgRXJ/wBHf6V8Zxl/yT+L/wAP6o/YPCH/AJLzKv8Ar5+jPqnSf2CrLU9Ns7oeOHRriFJfLGnKcblBx/reetfyNHLE0nz/AIf8E/0Nr+LNWjVnT+pJ8ra+Ps/8Bbb/AIJ+WaHDeOpFPvpi/wDx2n/Za/n/AA/4Jh/xF2r/ANAK/wDA/wD7Q83+CX7Ltn8Y4PGEi+J5dNPh7xDd6Cw+wiTzTDt/eZ8wY3Bgcc49awpZf7TmvLZ22PfzfxLeW/V+TC83tKcZv3rWbvp8Lvtvp6HW+Iv+Ca+j+Iol8zx48U6fdmXTFJA9D++5Fdccu5dp/h/wT5DF+KEsWtcCk115/wD7Q+Rvhf8Asua18W/jN4l8DaFexJa+H764t73V7lMJHFHM0YfYCcs+3hAfXkAE1yww8qlRwXTqfV43iLDZdltPHV4+9NK0Vvdq+/ZdX+B9QH/gmj4KkL6TB8S7g+I0j3tEYYWxx1MAfeB/wKu76jDbm1PgV4gYyLVWWEXs/V/+lWt+Bwnwq/YEsfHepeL7C58f2kdx4d1P+znl0y1+0xSN5aufmZ02sN+1l5wQRniuengudyTlsfQ5jxysFChUpYVtVI83vOzWrXRO60un1R7TZ/8ABPSC1tESXx/LPtGPMbS1BI7Z/fU3laevP+H/AASKfi3WhHllg0/+33/8ieL/AB8+DFt8B/E/hvTI9afW21i3uZhIbcQiLyjGMYDtnO/9K/QuAMJ9Wz+m1K94z/I/LfFzjF8T8C4qM6Hs+SpS+1zXu35Lsefelf1Qf54B+NAAPpQBFc/8e7/SvjOMv+Sfxf8Ah/VH7B4Q/wDJeZV/18/RnR/sq+EI0/aq8DavanysTXRni7Nm0mG4e+TzX8d4Gd60Yv8ArQ/088QcuhHJMRiaenw3X/b0dSx/wVLLD4+eHsEgf8I1B0P/AE9XVd+N/iL0PzjgON8tqf43/wCkxPdf+CXMHn/ATxbEW2+Z4gmXce2bW3Ga6sF/DfqfK8d+7mVJ/wBxf+lSOH/4dbaSP+atj/wVJ/8AJFZfUl/Mep/r3V/6BP8AyZ//ACJw/wCwD8ZvC/wM+I/jLw14o1GLTrPWHiht9WuPlhWWB5QFkb+AOJCdxOAV5PNZ4WpGlJxl1PY4vyrE5rhKOJw0eZwveK3tJLbva3qeu/F39gOXxv4t1L4j/C/x+bfVtRupNTjWeYlPOdixMN1EcqMk44OOmcVvUwvM3UpyPnMt4uWEoRy/MsPeMUo7a2WmsXv56r0Pz48X+D9a8CeKNT0HXrSaw1ixmMVzbynJD9c5HDAgggjgggjg15Mk4Nxlufs+FrUcZRhXw7vCS0Z+k3xoB/4doaWM8/8ACOaDz/20tK9iq/8AZPkv0PxDKlfjCS/6eVfymfnp8L0YeK4iST+6fr9K+x8O3/wvQ/wy/Iy8dYW4Lq/9fKf5nsnpxX9Wn+bAfhQAn40AR3P/AB7vz2r4zjL/AJJ/F/4f1R+weEP/ACXmU/8AXz9Gejfsnf8AJwfhH/rpcf8ApNLX8bYH/eI/10P9VfED/kmsX6R/9LiZX/BUWPf8evD3H/Mtwf8ApVc16mO/iL0PyXgBXyyp/jf/AKTE90/4JhW3nfAbxXDnb5niCZc+mbW3FdOB1pv1Pk+PvczOi/7i/wDSpHAj/glHdj/mpUH/AIJT/wDH6z+ov+b8D2P+Ihw/6BX/AOB//anB/Bb9ibw/44+Jnj/wjrvjeKG68PTSWNpBaKsd1cyAcXBiYn90vdVJJPBK8E4UsNGc5QlLY9vNeKsRg8FhsZQw91USbb1il/LddX5r5Pp9Lfstfsj+Iv2afGGsa3q3jq3u/Dr2jxmxtw8ULnKkTShztUqFPTP3j82M57aGHlQk5OWh8JxDxLhs+w8KFHDtVLrV2b9FbV3/AKR8U/tf+NtK+Kn7QPiTW9CkW40oeTaRXSdLjyo1RpAe4LA4PcAGvIxVRTqtx2P2XhTK6+AymlRxCtLVtdru9vu38z7M+MEG/wD4JwaXEe3h7Qx+UlrXqVf9zXov0PyjJ4X41lH/AKeVfymfn/8AD+yEHiBGA/5ZtX1/hy75/D/DL8jTx8pcnBFV/wDTyn+Z6dX9Yn+YwfjQAfjQBHcDMEn+6a+Q4vg55BjEv5G/u1P1fwoqxo8c5TKX/P6K+/T9TJyQDhmQkEbkYqeR2I5FfxIm07o/2bq0oVoOnUV0+jPNfF3h++gvRNNcz3sB+VJZnLso67ST+NdUanNufIV8tWFf7pe6yjp8+o6fGY7W9ubWMncUhlZAT64Bq+ZrY43g4VHecU/VGjHqus/9Ba+/8CX/AMaXPLuXHL6H/PtfciONZ0vBdieUXQbf5+8793ru6596nmd7nasLDl5OVW7dDe1Pxh4l16yFnqfiHVtStBjEF3fSyxj/AICzEU3VlJWbMqOV4OhLnpUYxfdRSf4IyFtfRazuemqZoG9v5rQWr3lw9sAFELSsUwOg25xgYp88rWuKOFpKXOoK/e2v3mt4MtturFv7sR/mK/UvDWLlnyfaEn+S/U/mz6RE40uCXF/aq01/6U/0O49K/rA/y+DP0oEJ+FAwIBBGOvFcmMw0MZhqmGqfDOLi/Rqx6uVZjVyjMMPmND46M4zXrGSkvxRkSRmJyp6iv4RzHAV8rxdTB4hWnB2f6NeTWq8j/cDh7PcFxNlWHzfL5c1KrFSXl3i/OLumujTIpoUuI2jkUOjDBUivOPoJRUlZnIapoLWEu5Bugb7rensa1Urnk1MP7N6bFRbU+lO5moEq2oFItQJVtvRaVy1EmS1PpRctQZMtkTSuWqZ0vhrTjbLJOwwXG1fp3r+ifC7J6lONbNaqspLkj5q95P0ukvkz+APpL8V4evVwvDGGlzSpv2tS3STVoR9eVybXZx7m5X78fwuJQAUgFFAiKe3ScfNwR0I618RxJwlgOJIJ1vcqraa39Guq8t+zR+0eHnirnnh3WcMHarhpu8qUr8rfeL3jK2l1dPS6dlao2nP/AAspHvkV+IYnwuzelL9xUhNerT+6zX4n9pZb9JrhPEwX17D1qM+toxnH5NSTf/gKGSaY8qMjBWU8EE153/ENuIF9iP8A4Ej6H/iYrgKS1q1P/BbMeTwpMsh2bSnbLc0/+Ib8QfyR/wDAkc7+kJwFfStU/wDBchy+Gbgdk/76o/4hvxB/JH/wJFf8TC8BL/l9U/8ABciVfDsy9l/Oj/iG/EH8kf8AwJF/8TDcBf8AP6p/4KkTpoEg6sg/E/4VpHw1z+Ts1Besv8kzGr9IzgWnG8ZVpelP/OSRat9EjQgytvx2HAr7TJ/C6NKoqua1lJL7ML2frJ2dvRL1Pxvi76TVTE4eWG4XwjpSlp7SrZyXnGCvG/ZuTX91mkoCgADAHYV+80aNOhTjSpR5YxVklokl0P4cxWKr46vPFYqbnUm25Sbu23q2292xa1OQKAD8KYwoAPwoAKAD8KACgA/CgA/CgANAB+FAB+FABQAUAIOtACigQetABQMO1AAetAAKADFAB3NABQAd6AD0oABQB//Z\"\n        }\n    ],\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to Create Links. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a PayLink by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/links) to refer to Links API specs.\n    \n\nFor more information see [Pay by Link](https://null)."
										},
										{
											"name": "Edit Link",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();\r",
																	"\r",
																	"\r",
																	"nonceDate = date.toISOString(); \r",
																	"pm.environment.set(\"nonce\", nonceDate);\r",
																	"\r",
																	"var nonce = pm.environment.get(\"nonce\");\r",
																	"\r",
																	"\r",
																	"var app_key = pm.environment.get(\"app_key\");\r",
																	"var s512Txt = nonce +''+app_key;\r",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);\r",
																	"\r",
																	"//var secret = SHA512(s512Txt);\r",
																	"pm.environment.set(\"secret\", secret);\r",
																	"\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"\r",
																	"NOT USE as replace this function with CryptoJS.SHA512\r",
																	"\r",
																	"* Secure Hash Algorithm (SHA512)\r",
																	"* http://www.happycode.info/\r",
																	"*/\r",
																	"\r",
																	"function SHA512(str) {\r",
																	" function int64(msint_32, lsint_32) {\r",
																	" this.highOrder = msint_32;\r",
																	" this.lowOrder = lsint_32;\r",
																	" }\r",
																	"\r",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),\r",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),\r",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),\r",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];\r",
																	"\r",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),\r",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),\r",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),\r",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),\r",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),\r",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),\r",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),\r",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),\r",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),\r",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),\r",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),\r",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),\r",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),\r",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),\r",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),\r",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),\r",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),\r",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),\r",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),\r",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),\r",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),\r",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),\r",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),\r",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),\r",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),\r",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),\r",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),\r",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),\r",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),\r",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),\r",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),\r",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),\r",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),\r",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),\r",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];\r",
																	"\r",
																	" var W = new Array(64);\r",
																	" var a, b, c, d, e, f, g, h, i, j;\r",
																	" var T1, T2;\r",
																	" var charsize = 8;\r",
																	"\r",
																	" function utf8_encode(str) {\r",
																	" return unescape(encodeURIComponent(str));\r",
																	" }\r",
																	"\r",
																	" function str2binb(str) {\r",
																	" var bin = [];\r",
																	" var mask = (1 << charsize) - 1;\r",
																	" var len = str.length * charsize;\r",
																	"\r",
																	" for (var i = 0; i < len; i += charsize) {\r",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));\r",
																	" }\r",
																	"\r",
																	" return bin;\r",
																	" }\r",
																	"\r",
																	" function binb2hex(binarray) {\r",
																	" var hex_tab = '0123456789abcdef';\r",
																	" var str = '';\r",
																	" var length = binarray.length * 4;\r",
																	" var srcByte;\r",
																	"\r",
																	" for (var i = 0; i < length; i += 1) {\r",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);\r",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);\r",
																	" }\r",
																	"\r",
																	" return str;\r",
																	" }\r",
																	"\r",
																	" function safe_add_2(x, y) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\r",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_4(a, b, c, d) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_5(a, b, c, d, e) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function maj(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function ch(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function rotr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" function sigma0(x) {\r",
																	" var rotr28 = rotr(x, 28);\r",
																	" var rotr34 = rotr(x, 34);\r",
																	" var rotr39 = rotr(x, 39);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\r",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function sigma1(x) {\r",
																	" var rotr14 = rotr(x, 14);\r",
																	" var rotr18 = rotr(x, 18);\r",
																	" var rotr41 = rotr(x, 41);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\r",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma0(x) {\r",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\r",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma1(x) {\r",
																	" var rotr19 = rotr(x, 19);\r",
																	" var rotr61 = rotr(x, 61);\r",
																	" var shr6 = shr(x, 6);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\r",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function shr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" x.highOrder >>> n,\r",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" 0,\r",
																	" x.highOrder << (32 - n)\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" str = utf8_encode(str);\r",
																	" strlen = str.length*charsize;\r",
																	" str = str2binb(str);\r",
																	"\r",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);\r",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;\r",
																	"\r",
																	" for (var i = 0; i < str.length; i += 32) {\r",
																	" a = H[0];\r",
																	" b = H[1];\r",
																	" c = H[2];\r",
																	" d = H[3];\r",
																	" e = H[4];\r",
																	" f = H[5];\r",
																	" g = H[6];\r",
																	" h = H[7];\r",
																	"\r",
																	" for (var j = 0; j < 80; j++) {\r",
																	" if (j < 16) {\r",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);\r",
																	" } else {\r",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);\r",
																	" }\r",
																	"\r",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);\r",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));\r",
																	" h = g;\r",
																	" g = f;\r",
																	" f = e;\r",
																	" e = safe_add_2(d, T1);\r",
																	" d = c;\r",
																	" c = b;\r",
																	" b = a;\r",
																	" a = safe_add_2(T1, T2);\r",
																	" }\r",
																	"\r",
																	" H[0] = safe_add_2(a, H[0]);\r",
																	" H[1] = safe_add_2(b, H[1]);\r",
																	" H[2] = safe_add_2(c, H[2]);\r",
																	" H[3] = safe_add_2(d, H[3]);\r",
																	" H[4] = safe_add_2(e, H[4]);\r",
																	" H[5] = safe_add_2(f, H[5]);\r",
																	" H[6] = safe_add_2(g, H[6]);\r",
																	" H[7] = safe_add_2(h, H[7]);\r",
																	" }\r",
																	"\r",
																	" var binarray = [];\r",
																	" for (var i = 0; i < H.length; i++) {\r",
																	" binarray.push(H[i].highOrder);\r",
																	" binarray.push(H[i].lowOrder);\r",
																	" }\r",
																	" return binb2hex(binarray);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"link\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"transaction_processing\",\n    \"type\": \"payment\",\n    \"usage_mode\": \"SINGLE\",\n    \"usage_limit\": \"1\",\n    \"reference\": \"iphone 14 abc\",\n    \"name\": \"iphone 14\",\n    \"description\": \"iPhone 14 Max\",\n    \"status\": \"ACTIVE\",\n    \"shippable\": \"NO\",\n    \"expiration_date\": \"2023-12-20T00:35:28Z\",\n    \"transactions\": {\n        \"allowed_payment_methods\": [\n            \"CARD\"\n        ],\n        \"amount\": \"1000\",\n        \"channel\": \"CNP\",\n        \"country\": \"GB\",\n        \"currency\": \"GBP\"\n    },\n    \"images\": [\n        {\n            \"b64_content\": \"/9j/4AAQSkZJRgABAQEAYABgAAD//gA7Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2ODApLCBxdWFsaXR5ID0gOTAK/9sAQwADAgIDAgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwKDAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0LDRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8AAEQgAZABkAwERAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8Aw/xr+zT+IAoAKAD8aACgA/GgAoAKAD8aACgA70AGDQAAUAGKAuGKAuGKAGtIidXUH0Jr57FcRZRg5OFfFQi105lf7tz77LeAeLM3gquByytOD2l7OSi/STST+8YbmIfxr+deb/rlw+v+YuP4/wCR9EvCHjx6rKqn3L/MPtUP99aX+ufD/wD0Fx/H/Ir/AIhBx5/0Kqn/AJL/AJh9ph/vin/rnw//ANBcfx/yD/iEHHn/AEKqn/kv+Yfaov8AnoKP9c+H/wDoLj+P+Qv+IQcef9Cqp/5L/mKJ4j/y0X860hxfkE3ZYyHzdvzOer4T8dUVeWU1vlG/4K48EMMggj1FfSYbGYbGQ9phqkZx7xaa/A/O8xyrMMoq+wzHDzoz7TjKL+6STFxXWeVcMUAGKACkIAaLjM+7u2ZiiHCjgkd6/lXjXjXEZniJ4HAzcaEXZtbzfVt/y9l13fS3+oPg54N4Dh3AUc8zyiqmNqJSSkrqinqkk9Oe2spPWL92NrNupivx8/rYAKAD8KYBQAY9qQBQA6OVom3KSD/OvSwGY4vK66xGDqOE11X5NbNeT0Pnc94eyribBSy/N6EatKXSS284veL7NNNdzUt5xPHu6HoRX9hcJcSQ4kwPtpK1WGk15915Pp810P8AJDxV8PK3h3nn1ODc8NVTlSk93G+sX05ovR901KyvZS5FfbH4wGR70XAKYxkjbInOeik/pXz3EOJlg8oxVeDs4wlb1s7fife8A5bTzfivLMDVV4TrU1Jd48ycl80mY9fwqf7dBTAvaJo9z4g1a102zEZurmQRxiaVYkyfVmIUD3JqoRc5KMd2ceLxVLA0J4mu7Qiruyb09Fdv5Hf6h+zl460u60q2uNPshcapIkVnEmqWztMWDFSoEh+UhW+bpx1rseCrqya380fFQ48yCpGco1naOr9yelv+3d/Lc43TvB2qapoOp6zbRRSabpt5DYXU/noBHPLJ5caYJycvxkcDvWCoVGm0tj36vEGW0Z0ac6tnVTlHR6qKu+mno7M2fH3wi8R/DGyFz4jisbFDOtt5aalbyyCRgSFKI5YdD1H8xV1MLVpLmmvxRwZbxblGb1lQwlRuTV1eMkvvaS/E4zNcp9iFIC3pzfvWX1Ga/ZfC3EypZvUodJwf3pq34Nn8gfSby2GJ4Uw2Ot79Gslf+7OMk182o/cX6/qY/wAxxKAFoAiuc/Z5PpXxnGT/AOMfxf8Ah/VH6/4RJPjzKf8Ar6vyZlV/E5/suFACMgkQqwDKRggjgimDV1ZnpOp/FLwdpv7TPwD1c6xBBo3hnwtY6fqc5jcLaSxpcBoyNuTjenTI5r34VYuVOV9kj+bcbk+LhhM0w6pNSnVm4LvFtWa8miuf2kPD3iv4U/EHR76z8MeGbuXxHplzp8OhaYbRr+GO8DyzSEZDMqqDk4PJqvbRlCSdlqjm/sPE0MZhqkJTnFQmnzSvytxsku13+SK37ZHizwh8Qhq+seHdf8B6gZtSjuYv7K0ieHWpl2lT51wyhWUZyR3wvpSxE4Tu4tfqa8MYTGYNwpYinVjaLXvSTguukVqv+HPE/BXjE3SpYX7/AL8cRTMfv+x9/fv9evjVIW1R+65dj3NKjW36Pv8A8E7Wuc+hLNgf3/4V+p+G3/JQQ/wy/I/mP6RavwHV/wCvtP8ANmj6V/XB/lKAFIApgRXJ/wBHf6V8Zxl/yT+L/wAP6o/YPCH/AJLzKv8Ar5+jPqnSf2CrLU9Ns7oeOHRriFJfLGnKcblBx/reetfyNHLE0nz/AIf8E/0Nr+LNWjVnT+pJ8ra+Ps/8Bbb/AIJ+WaHDeOpFPvpi/wDx2n/Za/n/AA/4Jh/xF2r/ANAK/wDA/wD7Q83+CX7Ltn8Y4PGEi+J5dNPh7xDd6Cw+wiTzTDt/eZ8wY3Bgcc49awpZf7TmvLZ22PfzfxLeW/V+TC83tKcZv3rWbvp8Lvtvp6HW+Iv+Ca+j+Iol8zx48U6fdmXTFJA9D++5Fdccu5dp/h/wT5DF+KEsWtcCk115/wD7Q+Rvhf8Asua18W/jN4l8DaFexJa+H764t73V7lMJHFHM0YfYCcs+3hAfXkAE1yww8qlRwXTqfV43iLDZdltPHV4+9NK0Vvdq+/ZdX+B9QH/gmj4KkL6TB8S7g+I0j3tEYYWxx1MAfeB/wKu76jDbm1PgV4gYyLVWWEXs/V/+lWt+Bwnwq/YEsfHepeL7C58f2kdx4d1P+znl0y1+0xSN5aufmZ02sN+1l5wQRniuengudyTlsfQ5jxysFChUpYVtVI83vOzWrXRO60un1R7TZ/8ABPSC1tESXx/LPtGPMbS1BI7Z/fU3laevP+H/AASKfi3WhHllg0/+33/8ieL/AB8+DFt8B/E/hvTI9afW21i3uZhIbcQiLyjGMYDtnO/9K/QuAMJ9Wz+m1K94z/I/LfFzjF8T8C4qM6Hs+SpS+1zXu35Lsefelf1Qf54B+NAAPpQBFc/8e7/SvjOMv+Sfxf8Ah/VH7B4Q/wDJeZV/18/RnR/sq+EI0/aq8DavanysTXRni7Nm0mG4e+TzX8d4Gd60Yv8ArQ/088QcuhHJMRiaenw3X/b0dSx/wVLLD4+eHsEgf8I1B0P/AE9XVd+N/iL0PzjgON8tqf43/wCkxPdf+CXMHn/ATxbEW2+Z4gmXce2bW3Ga6sF/DfqfK8d+7mVJ/wBxf+lSOH/4dbaSP+atj/wVJ/8AJFZfUl/Mep/r3V/6BP8AyZ//ACJw/wCwD8ZvC/wM+I/jLw14o1GLTrPWHiht9WuPlhWWB5QFkb+AOJCdxOAV5PNZ4WpGlJxl1PY4vyrE5rhKOJw0eZwveK3tJLbva3qeu/F39gOXxv4t1L4j/C/x+bfVtRupNTjWeYlPOdixMN1EcqMk44OOmcVvUwvM3UpyPnMt4uWEoRy/MsPeMUo7a2WmsXv56r0Pz48X+D9a8CeKNT0HXrSaw1ixmMVzbynJD9c5HDAgggjgggjg15Mk4Nxlufs+FrUcZRhXw7vCS0Z+k3xoB/4doaWM8/8ACOaDz/20tK9iq/8AZPkv0PxDKlfjCS/6eVfymfnp8L0YeK4iST+6fr9K+x8O3/wvQ/wy/Iy8dYW4Lq/9fKf5nsnpxX9Wn+bAfhQAn40AR3P/AB7vz2r4zjL/AJJ/F/4f1R+weEP/ACXmU/8AXz9Gejfsnf8AJwfhH/rpcf8ApNLX8bYH/eI/10P9VfED/kmsX6R/9LiZX/BUWPf8evD3H/Mtwf8ApVc16mO/iL0PyXgBXyyp/jf/AKTE90/4JhW3nfAbxXDnb5niCZc+mbW3FdOB1pv1Pk+PvczOi/7i/wDSpHAj/glHdj/mpUH/AIJT/wDH6z+ov+b8D2P+Ihw/6BX/AOB//anB/Bb9ibw/44+Jnj/wjrvjeKG68PTSWNpBaKsd1cyAcXBiYn90vdVJJPBK8E4UsNGc5QlLY9vNeKsRg8FhsZQw91USbb1il/LddX5r5Pp9Lfstfsj+Iv2afGGsa3q3jq3u/Dr2jxmxtw8ULnKkTShztUqFPTP3j82M57aGHlQk5OWh8JxDxLhs+w8KFHDtVLrV2b9FbV3/AKR8U/tf+NtK+Kn7QPiTW9CkW40oeTaRXSdLjyo1RpAe4LA4PcAGvIxVRTqtx2P2XhTK6+AymlRxCtLVtdru9vu38z7M+MEG/wD4JwaXEe3h7Qx+UlrXqVf9zXov0PyjJ4X41lH/AKeVfymfn/8AD+yEHiBGA/5ZtX1/hy75/D/DL8jTx8pcnBFV/wDTyn+Z6dX9Yn+YwfjQAfjQBHcDMEn+6a+Q4vg55BjEv5G/u1P1fwoqxo8c5TKX/P6K+/T9TJyQDhmQkEbkYqeR2I5FfxIm07o/2bq0oVoOnUV0+jPNfF3h++gvRNNcz3sB+VJZnLso67ST+NdUanNufIV8tWFf7pe6yjp8+o6fGY7W9ubWMncUhlZAT64Bq+ZrY43g4VHecU/VGjHqus/9Ba+/8CX/AMaXPLuXHL6H/PtfciONZ0vBdieUXQbf5+8793ru6596nmd7nasLDl5OVW7dDe1Pxh4l16yFnqfiHVtStBjEF3fSyxj/AICzEU3VlJWbMqOV4OhLnpUYxfdRSf4IyFtfRazuemqZoG9v5rQWr3lw9sAFELSsUwOg25xgYp88rWuKOFpKXOoK/e2v3mt4MtturFv7sR/mK/UvDWLlnyfaEn+S/U/mz6RE40uCXF/aq01/6U/0O49K/rA/y+DP0oEJ+FAwIBBGOvFcmMw0MZhqmGqfDOLi/Rqx6uVZjVyjMMPmND46M4zXrGSkvxRkSRmJyp6iv4RzHAV8rxdTB4hWnB2f6NeTWq8j/cDh7PcFxNlWHzfL5c1KrFSXl3i/OLumujTIpoUuI2jkUOjDBUivOPoJRUlZnIapoLWEu5Bugb7rensa1Urnk1MP7N6bFRbU+lO5moEq2oFItQJVtvRaVy1EmS1PpRctQZMtkTSuWqZ0vhrTjbLJOwwXG1fp3r+ifC7J6lONbNaqspLkj5q95P0ukvkz+APpL8V4evVwvDGGlzSpv2tS3STVoR9eVybXZx7m5X78fwuJQAUgFFAiKe3ScfNwR0I618RxJwlgOJIJ1vcqraa39Guq8t+zR+0eHnirnnh3WcMHarhpu8qUr8rfeL3jK2l1dPS6dlao2nP/AAspHvkV+IYnwuzelL9xUhNerT+6zX4n9pZb9JrhPEwX17D1qM+toxnH5NSTf/gKGSaY8qMjBWU8EE153/ENuIF9iP8A4Ej6H/iYrgKS1q1P/BbMeTwpMsh2bSnbLc0/+Ib8QfyR/wDAkc7+kJwFfStU/wDBchy+Gbgdk/76o/4hvxB/JH/wJFf8TC8BL/l9U/8ABciVfDsy9l/Oj/iG/EH8kf8AwJF/8TDcBf8AP6p/4KkTpoEg6sg/E/4VpHw1z+Ts1Besv8kzGr9IzgWnG8ZVpelP/OSRat9EjQgytvx2HAr7TJ/C6NKoqua1lJL7ML2frJ2dvRL1Pxvi76TVTE4eWG4XwjpSlp7SrZyXnGCvG/ZuTX91mkoCgADAHYV+80aNOhTjSpR5YxVklokl0P4cxWKr46vPFYqbnUm25Sbu23q2292xa1OQKAD8KYwoAPwoAKAD8KACgA/CgA/CgANAB+FAB+FABQAUAIOtACigQetABQMO1AAetAAKADFAB3NABQAd6AD0oABQB//Z\"\n        }\n    ],\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														}
													},
													"response": []
												},
												{
													"name": "Patch (Edit)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"transactions\": {\n        \"allowed_payment_methods\": [\n            \"CARD\"\n        ],\n        \"amount\": \"1234\",\n        \"channel\": \"CNP\",\n        \"country\": \"GB\",\n        \"currency\": \"GBP\"\n    }\n}"
														},
														"url": {
															"raw": "https://apis.sandbox.globalpay.com/ucp/links/{{link}}",
															"protocol": "https",
															"host": [
																"apis",
																"sandbox",
																"globalpay",
																"com"
															],
															"path": [
																"ucp",
																"links",
																"{{link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Patch (Set Inactive)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"transactions\": {\n        \"allowed_payment_methods\": [\n            \"CARD\"\n        ],\n        \"status\":\"INACTIVE\"\n    }\n}"
														},
														"url": {
															"raw": "https://apis.sandbox.globalpay.com/ucp/links/{{link}}",
															"protocol": "https",
															"host": [
																"apis",
																"sandbox",
																"globalpay",
																"com"
															],
															"path": [
																"ucp",
																"links",
																"{{link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Patch (Set active)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"transactions\": {\n        \"allowed_payment_methods\": [\n            \"CARD\"\n        ],\n        \"status\":\"ACTIVE\"\n    }\n}"
														},
														"url": {
															"raw": "https://apis.sandbox.globalpay.com/ucp/links/{{link}}",
															"protocol": "https",
															"host": [
																"apis",
																"sandbox",
																"globalpay",
																"com"
															],
															"path": [
																"ucp",
																"links",
																"{{link}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to edit a link. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment.\n2. Create a PayLink by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/links) to refer to Links API specs.\n    \n3. The next two APIs demonstrate the status’ ability to be changed to INACTIVE and ACTIVE. Various Pay Link edit values can be edited in the body of the request. The link must be present in the URL of the request. Please [click here](https://developer.globalpay.com/api/links) to refer to the Links API Spec.\n    \n\nFor more information see [Pay by Link](https://)."
										},
										{
											"name": "Get Links",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();\r",
																	"\r",
																	"\r",
																	"nonceDate = date.toISOString(); \r",
																	"pm.environment.set(\"nonce\", nonceDate);\r",
																	"\r",
																	"var nonce = pm.environment.get(\"nonce\");\r",
																	"\r",
																	"\r",
																	"var app_key = pm.environment.get(\"app_key\");\r",
																	"var s512Txt = nonce +''+app_key;\r",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);\r",
																	"\r",
																	"//var secret = SHA512(s512Txt);\r",
																	"pm.environment.set(\"secret\", secret);\r",
																	"\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"\r",
																	"NOT USE as replace this function with CryptoJS.SHA512\r",
																	"\r",
																	"* Secure Hash Algorithm (SHA512)\r",
																	"* http://www.happycode.info/\r",
																	"*/\r",
																	"\r",
																	"function SHA512(str) {\r",
																	" function int64(msint_32, lsint_32) {\r",
																	" this.highOrder = msint_32;\r",
																	" this.lowOrder = lsint_32;\r",
																	" }\r",
																	"\r",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),\r",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),\r",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),\r",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];\r",
																	"\r",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),\r",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),\r",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),\r",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),\r",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),\r",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),\r",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),\r",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),\r",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),\r",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),\r",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),\r",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),\r",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),\r",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),\r",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),\r",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),\r",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),\r",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),\r",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),\r",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),\r",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),\r",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),\r",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),\r",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),\r",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),\r",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),\r",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),\r",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),\r",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),\r",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),\r",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),\r",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),\r",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),\r",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),\r",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];\r",
																	"\r",
																	" var W = new Array(64);\r",
																	" var a, b, c, d, e, f, g, h, i, j;\r",
																	" var T1, T2;\r",
																	" var charsize = 8;\r",
																	"\r",
																	" function utf8_encode(str) {\r",
																	" return unescape(encodeURIComponent(str));\r",
																	" }\r",
																	"\r",
																	" function str2binb(str) {\r",
																	" var bin = [];\r",
																	" var mask = (1 << charsize) - 1;\r",
																	" var len = str.length * charsize;\r",
																	"\r",
																	" for (var i = 0; i < len; i += charsize) {\r",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));\r",
																	" }\r",
																	"\r",
																	" return bin;\r",
																	" }\r",
																	"\r",
																	" function binb2hex(binarray) {\r",
																	" var hex_tab = '0123456789abcdef';\r",
																	" var str = '';\r",
																	" var length = binarray.length * 4;\r",
																	" var srcByte;\r",
																	"\r",
																	" for (var i = 0; i < length; i += 1) {\r",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);\r",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);\r",
																	" }\r",
																	"\r",
																	" return str;\r",
																	" }\r",
																	"\r",
																	" function safe_add_2(x, y) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\r",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_4(a, b, c, d) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_5(a, b, c, d, e) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function maj(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function ch(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function rotr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" function sigma0(x) {\r",
																	" var rotr28 = rotr(x, 28);\r",
																	" var rotr34 = rotr(x, 34);\r",
																	" var rotr39 = rotr(x, 39);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\r",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function sigma1(x) {\r",
																	" var rotr14 = rotr(x, 14);\r",
																	" var rotr18 = rotr(x, 18);\r",
																	" var rotr41 = rotr(x, 41);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\r",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma0(x) {\r",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\r",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma1(x) {\r",
																	" var rotr19 = rotr(x, 19);\r",
																	" var rotr61 = rotr(x, 61);\r",
																	" var shr6 = shr(x, 6);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\r",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function shr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" x.highOrder >>> n,\r",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" 0,\r",
																	" x.highOrder << (32 - n)\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" str = utf8_encode(str);\r",
																	" strlen = str.length*charsize;\r",
																	" str = str2binb(str);\r",
																	"\r",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);\r",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;\r",
																	"\r",
																	" for (var i = 0; i < str.length; i += 32) {\r",
																	" a = H[0];\r",
																	" b = H[1];\r",
																	" c = H[2];\r",
																	" d = H[3];\r",
																	" e = H[4];\r",
																	" f = H[5];\r",
																	" g = H[6];\r",
																	" h = H[7];\r",
																	"\r",
																	" for (var j = 0; j < 80; j++) {\r",
																	" if (j < 16) {\r",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);\r",
																	" } else {\r",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);\r",
																	" }\r",
																	"\r",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);\r",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));\r",
																	" h = g;\r",
																	" g = f;\r",
																	" f = e;\r",
																	" e = safe_add_2(d, T1);\r",
																	" d = c;\r",
																	" c = b;\r",
																	" b = a;\r",
																	" a = safe_add_2(T1, T2);\r",
																	" }\r",
																	"\r",
																	" H[0] = safe_add_2(a, H[0]);\r",
																	" H[1] = safe_add_2(b, H[1]);\r",
																	" H[2] = safe_add_2(c, H[2]);\r",
																	" H[3] = safe_add_2(d, H[3]);\r",
																	" H[4] = safe_add_2(e, H[4]);\r",
																	" H[5] = safe_add_2(f, H[5]);\r",
																	" H[6] = safe_add_2(g, H[6]);\r",
																	" H[7] = safe_add_2(h, H[7]);\r",
																	" }\r",
																	"\r",
																	" var binarray = [];\r",
																	" for (var i = 0; i < H.length; i++) {\r",
																	" binarray.push(H[i].highOrder);\r",
																	" binarray.push(H[i].lowOrder);\r",
																	" }\r",
																	" return binb2hex(binarray);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Details of a Link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/links/{{link}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links",
																"{{link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get List of Links",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer"
														},
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/links?order=DESC&page_size=1000&from_time_created={{from_time_created}}&trom_time_created={{to_time_created}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															],
															"query": [
																{
																	"key": "order",
																	"value": "DESC"
																},
																{
																	"key": "page_size",
																	"value": "1000"
																},
																{
																	"key": "from_time_created",
																	"value": "{{from_time_created}}"
																},
																{
																	"key": "trom_time_created",
																	"value": "{{to_time_created}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to get details or a list of links. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment.\n    \n2. Enter the link into the URL of the request to Get Details of a Link. Please [click here](https://developer.globalpay.com/api/links) to refer to the Links API Spec.\n    \n3. Enter Query parameters into the URL of the request to Get a List of Links. Please [click here](https://developer.globalpay.com/api/links) to refer to the Links API Spec.\n    \n\nFor more information see and [Links](https://)."
										}
									],
									"description": "Pay by Link gives merchants the ability to automatically generate a unique payment link for their customers without needing a website. When a customer uses the link, they are redirected to a payment page to enter their payment details. This unique link can be set for single use or multiple use, depending on the business case.\n\nYou can provide the link to your customers in several ways. For example, the link can be embedded in a QR code for customers to scan with their phone or it can be included in a promotional post on a social media platform such as Facebook or Instagram. You can also send the link directly to a customer via an email or text message (SMS)—for example, if you want to remind them to pay their bill.\n\nWith Pay by Link, you can also:\n\n- Align your Customer Relationship Management (CRM) system to enhance your payment capabilities\n- Automate the payment of a Pay by Link into your fulfillment systems\n- Track each individual payment link and see if it leads to a payment\n    \n\nFor more information see [Pay by Link](https://developer.globalpay.com/docs/paybylink) for an overview."
								},
								{
									"name": "BNPL",
									"item": [
										{
											"name": "Capture",
											"item": [
												{
													"name": "Single",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Initiate BNPL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\":\"{{acc_name}}\",\n    \"capture_mode\": \"LATER\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"56700\",\n    \"net_amount\": \"56700\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"entry_mode\": \"ECOM\",\n        \"first_name\": \"ertyui\",\n        \"last_name\": \"wer\",\n        \"bnpl\": {\n            \"provider\": \"KLARNA\"\n        }\n    },\n    \"order\": {\n        \"reference\": \"{{reference}}\",\n        \"shipping_method\": \"DELIVERY\",\n        \"items\": [\n            {\n                \"reference\": \"fsdf\",\n                \"label\": \"afa\",\n                \"description\": \"abc\",\n                \"quantity\": \"1\",\n                \"unit_amount\": \"56700\",\n                \"total_amount\": \"0\",\n                \"tax_amount\": \"0\",\n                \"discount_amount\": \"0\",\n                \"tax_percentage\": \"0\",\n                \"net_unit_amount\": \"56700\",\n                \"gift_card_currency\": \"CAD\",\n                \"type\": \"daf\",\n                \"url\": \"http://www.string.com\",\n                \"image_url\": \"http://www.string.com\"\n            }\n        ],\n        \"shipping_address\": {\n            \"first_name\": \"  Hello\",\n            \"last_name\": \"Anderson\",\n            \"line_1\": \"38 Piccadilly\",\n            \"line_2\": \"Complex 741\",\n            \"city\": \"Bradford\",\n            \"postal_code\": \"BD1 3LY\",\n            \"state\": \"WY\",\n            \"country\": \"GB\",\n            \"address_type\": \"home\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        }\n    },\n    \"payer\": {\n        \"reference\": \"{{reference}}\",\n        \"email\": \"test5@mailtest.com\",\n        \"date_of_birth\": \"1993-08-24\",\n        \"billing_address\": {\n            \"line_1\": \"Apartment 852\",\n            \"line_2\": \"Complex 741\",\n            \"first_name\": \"Hello\",\n            \"last_name\": \"Anderson\",\n            \"city\": \"Birmingham\",\n            \"postal_code\": \"B9 4AA\",\n            \"state\": \"NY\",\n            \"country\": \"GB\"\n        },\n        \"contact_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        },\n        \"documents\": [\n            {\n                \"type\": \"SSN\",\n                \"reference\": \"353637898\",\n                \"issuer\": \"abc\"\n            }\n        ]\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get Initiate BNPL",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{token}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Capture",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}",
																		"capture"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process of Single Capture refers to capturing the full amount in one API request. In this flow, we will complete the following steps in sequential order:\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with one of the BNPL providers which will return a link that will be brought to that provider's Login & Payment page. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the BNPL transaction. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Buy Now Pay Later](https://developer.globalpay.com/docs/bnpl-guide#api) for a step-by-step guide."
												},
												{
													"name": "Multi-Capture",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Initiate BNPL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\":\"{{acc_name}}\",\n    \"capture_mode\": \"MULTIPLE\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1000\",\n    \"net_amount\": \"1000\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"entry_mode\": \"ECOM\",\n        \"first_name\": \"ertyui\",\n        \"last_name\": \"wer\",\n        \"bnpl\": {\n            \"provider\": \"KLARNA\"\n        }\n    },\n    \"order\": {\n        \"reference\": \"{{reference}}\",\n        \"shipping_method\": \"DELIVERY\",\n        \"items\": [\n            {\n                \"reference\": \"fsdf\",\n                \"label\": \"afa\",\n                \"description\": \"abc\",\n                \"quantity\": \"1\",\n                \"unit_amount\": \"1000\",\n                \"total_amount\": \"0\",\n                \"tax_amount\": \"0\",\n                \"discount_amount\": \"0\",\n                \"tax_percentage\": \"0\",\n                \"net_unit_amount\": \"1000\",\n                \"gift_card_currency\": \"CAD\",\n                \"type\": \"daf\",\n                \"url\": \"http://www.string.com\",\n                \"image_url\": \"http://www.string.com\"\n            }\n        ],\n        \"shipping_address\": {\n            \"first_name\": \"  Hello\",\n            \"last_name\": \"Anderson\",\n            \"line_1\": \"38 Piccadilly\",\n            \"line_2\": \"Complex 741\",\n            \"city\": \"Bradford\",\n            \"postal_code\": \"BD1 3LY\",\n            \"state\": \"WY\",\n            \"country\": \"GB\",\n            \"address_type\": \"home\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        }\n    },\n    \"payer\": {\n        \"reference\": \"{{reference}}\",\n        \"email\": \"test5@mailtest.com\",\n        \"date_of_birth\": \"1993-08-24\",\n        \"billing_address\": {\n            \"line_1\": \"Apartment 852\",\n            \"line_2\": \"Complex 741\",\n            \"first_name\": \"Hello\",\n            \"last_name\": \"Anderson\",\n            \"city\": \"Birmingham\",\n            \"postal_code\": \"B9 4AA\",\n            \"state\": \"NY\",\n            \"country\": \"GB\"\n        },\n        \"contact_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        },\n        \"documents\": [\n            {\n                \"type\": \"SSN\",\n                \"reference\": \"353637898\",\n                \"issuer\": \"abc\"\n            }\n        ]\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get initiate BNPL",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": ""
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Capture Partial",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"amount\":\"500\"\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}",
																		"capture"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Capture Remaining",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"amount\":\"500\"\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}",
																		"capture"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process of Multiple Capture refers to capturing the full amount in multiple API requests. In this flow, we will complete the following steps in sequential order:\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with one of the BNPL providers which will return a link that will be brought to that provider's Login & Payment page. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the BNPL transaction. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Capture an amount of the customer's transaction. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n5. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n    \n\nFor more information see [Buy Now Pay Later](https://developer.globalpay.com/docs/bnpl-guide#api) for a step-by-step guide."
												}
											],
											"description": "Any transaction that is successfully PREAUTHORIZED can be captured. Depending on if the capture mode is LATER or MULTIPLE, the transaction can be captured once or multiple times, respectively."
										},
										{
											"name": "Refund",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Initiate BNPL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"capture_mode\": \"MULTIPLE\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"56700\",\n    \"net_amount\": \"56700\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"entry_mode\": \"ECOM\",\n        \"first_name\": \"ertyui\",\n        \"last_name\": \"wer\",\n        \"bnpl\": {\n            \"provider\": \"KLARNA\"\n        }\n    },\n    \"order\": {\n        \"reference\": \"abcdefg\",\n        \"shipping_method\": \"DELIVERY\",\n        \"items\": [\n            {\n                \"reference\": \"fsdf\",\n                \"label\": \"afa\",\n                \"description\": \"abc\",\n                \"quantity\": \"1\",\n                \"unit_amount\": \"56700\",\n                \"total_amount\": \"0\",\n                \"tax_amount\": \"0\",\n                \"discount_amount\": \"0\",\n                \"tax_percentage\": \"0\",\n                \"net_unit_amount\": \"56700\",\n                \"gift_card_currency\": \"CAD\",\n                \"type\": \"daf\",\n                \"url\": \"http://www.string.com\",\n                \"image_url\": \"http://www.string.com\"\n            }\n        ],\n        \"shipping_address\": {\n            \"first_name\": \"  Hello\",\n            \"last_name\": \"Anderson\",\n            \"line_1\": \"38 Piccadilly\",\n            \"line_2\": \"Complex 741\",\n            \"city\": \"Bradford\",\n            \"postal_code\": \"BD1 3LY\",\n            \"state\": \"WY\",\n            \"country\": \"GB\",\n            \"address_type\": \"home\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        }\n    },\n    \"payer\": {\n        \"reference\": \"12345678\",\n        \"email\": \"test5@mailtest.com\",\n        \"date_of_birth\": \"1993-08-24\",\n        \"billing_address\": {\n            \"line_1\": \"Apartment 852\",\n            \"line_2\": \"Complex 741\",\n            \"first_name\": \"Hello\",\n            \"last_name\": \"Anderson\",\n            \"city\": \"Birmingham\",\n            \"postal_code\": \"B9 4AA\",\n            \"state\": \"NY\",\n            \"country\": \"GB\"\n        },\n        \"contact_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        },\n        \"documents\": [\n            {\n                \"type\": \"SSN\",\n                \"reference\": \"353637898\",\n                \"issuer\": \"abc\"\n            }\n        ]\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Initiate BNPL",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "2021-03-22"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Capture",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														}
													},
													"response": []
												},
												{
													"name": "Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/refund",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"refund"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to refund a previous authorization for BNPL transactions. In this flow, we will complete the following steps in sequential order:\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with one of the BNPL providers which will return a link that will be brought to that provider's Login & Payment page. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the BNPL transaction. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n5. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to the Transaction API Spec.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										},
										{
											"name": "Reversal",
											"item": [
												{
													"name": "Access token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();\r",
																	"\r",
																	"\r",
																	"nonceDate = date.toISOString(); \r",
																	"pm.environment.set(\"nonce\", nonceDate);\r",
																	"\r",
																	"var nonce = pm.environment.get(\"nonce\");\r",
																	"\r",
																	"\r",
																	"var app_key = pm.environment.get(\"app_key\");\r",
																	"var s512Txt = nonce +''+app_key;\r",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);\r",
																	"\r",
																	"//var secret = SHA512(s512Txt);\r",
																	"pm.environment.set(\"secret\", secret);\r",
																	"\r",
																	"\r",
																	"\r",
																	"/*\r",
																	"\r",
																	"NOT USE as replace this function with CryptoJS.SHA512\r",
																	"\r",
																	"* Secure Hash Algorithm (SHA512)\r",
																	"* http://www.happycode.info/\r",
																	"*/\r",
																	"\r",
																	"function SHA512(str) {\r",
																	" function int64(msint_32, lsint_32) {\r",
																	" this.highOrder = msint_32;\r",
																	" this.lowOrder = lsint_32;\r",
																	" }\r",
																	"\r",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),\r",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),\r",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),\r",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];\r",
																	"\r",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),\r",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),\r",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),\r",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),\r",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),\r",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),\r",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),\r",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),\r",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),\r",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),\r",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),\r",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),\r",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),\r",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),\r",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),\r",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),\r",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),\r",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),\r",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),\r",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),\r",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),\r",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),\r",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),\r",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),\r",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),\r",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),\r",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),\r",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),\r",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),\r",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),\r",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),\r",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),\r",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),\r",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),\r",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];\r",
																	"\r",
																	" var W = new Array(64);\r",
																	" var a, b, c, d, e, f, g, h, i, j;\r",
																	" var T1, T2;\r",
																	" var charsize = 8;\r",
																	"\r",
																	" function utf8_encode(str) {\r",
																	" return unescape(encodeURIComponent(str));\r",
																	" }\r",
																	"\r",
																	" function str2binb(str) {\r",
																	" var bin = [];\r",
																	" var mask = (1 << charsize) - 1;\r",
																	" var len = str.length * charsize;\r",
																	"\r",
																	" for (var i = 0; i < len; i += charsize) {\r",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));\r",
																	" }\r",
																	"\r",
																	" return bin;\r",
																	" }\r",
																	"\r",
																	" function binb2hex(binarray) {\r",
																	" var hex_tab = '0123456789abcdef';\r",
																	" var str = '';\r",
																	" var length = binarray.length * 4;\r",
																	" var srcByte;\r",
																	"\r",
																	" for (var i = 0; i < length; i += 1) {\r",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);\r",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);\r",
																	" }\r",
																	"\r",
																	" return str;\r",
																	" }\r",
																	"\r",
																	" function safe_add_2(x, y) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\r",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_4(a, b, c, d) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function safe_add_5(a, b, c, d, e) {\r",
																	" var lsw, msw, lowOrder, highOrder;\r",
																	"\r",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);\r",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\r",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);\r",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\r",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
																	"\r",
																	" return new int64(highOrder, lowOrder);\r",
																	" }\r",
																	"\r",
																	" function maj(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function ch(x, y, z) {\r",
																	" return new int64(\r",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\r",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function rotr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),\r",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" function sigma0(x) {\r",
																	" var rotr28 = rotr(x, 28);\r",
																	" var rotr34 = rotr(x, 34);\r",
																	" var rotr39 = rotr(x, 39);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\r",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function sigma1(x) {\r",
																	" var rotr14 = rotr(x, 14);\r",
																	" var rotr18 = rotr(x, 18);\r",
																	" var rotr41 = rotr(x, 41);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\r",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma0(x) {\r",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\r",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function gamma1(x) {\r",
																	" var rotr19 = rotr(x, 19);\r",
																	" var rotr61 = rotr(x, 61);\r",
																	" var shr6 = shr(x, 6);\r",
																	"\r",
																	" return new int64(\r",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\r",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\r",
																	" );\r",
																	" }\r",
																	"\r",
																	" function shr(x, n) {\r",
																	" if (n <= 32) {\r",
																	" return new int64(\r",
																	" x.highOrder >>> n,\r",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))\r",
																	" );\r",
																	" } else {\r",
																	" return new int64(\r",
																	" 0,\r",
																	" x.highOrder << (32 - n)\r",
																	" );\r",
																	" }\r",
																	" }\r",
																	"\r",
																	" str = utf8_encode(str);\r",
																	" strlen = str.length*charsize;\r",
																	" str = str2binb(str);\r",
																	"\r",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);\r",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;\r",
																	"\r",
																	" for (var i = 0; i < str.length; i += 32) {\r",
																	" a = H[0];\r",
																	" b = H[1];\r",
																	" c = H[2];\r",
																	" d = H[3];\r",
																	" e = H[4];\r",
																	" f = H[5];\r",
																	" g = H[6];\r",
																	" h = H[7];\r",
																	"\r",
																	" for (var j = 0; j < 80; j++) {\r",
																	" if (j < 16) {\r",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);\r",
																	" } else {\r",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);\r",
																	" }\r",
																	"\r",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);\r",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));\r",
																	" h = g;\r",
																	" g = f;\r",
																	" f = e;\r",
																	" e = safe_add_2(d, T1);\r",
																	" d = c;\r",
																	" c = b;\r",
																	" b = a;\r",
																	" a = safe_add_2(T1, T2);\r",
																	" }\r",
																	"\r",
																	" H[0] = safe_add_2(a, H[0]);\r",
																	" H[1] = safe_add_2(b, H[1]);\r",
																	" H[2] = safe_add_2(c, H[2]);\r",
																	" H[3] = safe_add_2(d, H[3]);\r",
																	" H[4] = safe_add_2(e, H[4]);\r",
																	" H[5] = safe_add_2(f, H[5]);\r",
																	" H[6] = safe_add_2(g, H[6]);\r",
																	" H[7] = safe_add_2(h, H[7]);\r",
																	" }\r",
																	"\r",
																	" var binarray = [];\r",
																	" for (var i = 0; i < H.length; i++) {\r",
																	" binarray.push(H[i].highOrder);\r",
																	" binarray.push(H[i].lowOrder);\r",
																	" }\r",
																	" return binb2hex(binarray);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiate BNPL",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"capture_mode\": \"MULTIPLE\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"56700\",\n    \"net_amount\": \"56700\",\n    \"currency\": \"GBP\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"entry_mode\": \"ECOM\",\n        \"first_name\": \"ertyui\",\n        \"last_name\": \"wer\",\n        \"bnpl\": {\n            \"provider\": \"KLARNA\"\n        }\n    },\n    \"order\": {\n        \"reference\": \"abcdefg\",\n        \"shipping_method\": \"DELIVERY\",\n        \"items\": [\n            {\n                \"reference\": \"fsdf\",\n                \"label\": \"afa\",\n                \"description\": \"abc\",\n                \"quantity\": \"1\",\n                \"unit_amount\": \"56700\",\n                \"total_amount\": \"0\",\n                \"tax_amount\": \"0\",\n                \"discount_amount\": \"0\",\n                \"tax_percentage\": \"0\",\n                \"net_unit_amount\": \"56700\",\n                \"gift_card_currency\": \"CAD\",\n                \"type\": \"daf\",\n                \"url\": \"http://www.string.com\",\n                \"image_url\": \"http://www.string.com\"\n            }\n        ],\n        \"shipping_address\": {\n            \"first_name\": \"  Hello\",\n            \"last_name\": \"Anderson\",\n            \"line_1\": \"38 Piccadilly\",\n            \"line_2\": \"Complex 741\",\n            \"city\": \"Bradford\",\n            \"postal_code\": \"BD1 3LY\",\n            \"state\": \"WY\",\n            \"country\": \"GB\",\n            \"address_type\": \"home\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        }\n    },\n    \"payer\": {\n        \"reference\": \"12345678\",\n        \"email\": \"test5@mailtest.com\",\n        \"date_of_birth\": \"1993-08-24\",\n        \"billing_address\": {\n            \"line_1\": \"Apartment 852\",\n            \"line_2\": \"Complex 741\",\n            \"first_name\": \"Hello\",\n            \"last_name\": \"Anderson\",\n            \"city\": \"Birmingham\",\n            \"postal_code\": \"B9 4AA\",\n            \"state\": \"NY\",\n            \"country\": \"GB\"\n        },\n        \"contact_phone\": {\n            \"country_code\": \"44\",\n            \"subscriber_number\": \"55558877\"\n        },\n        \"documents\": [\n            {\n                \"type\": \"SSN\",\n                \"reference\": \"353637898\",\n                \"issuer\": \"abc\"\n            }\n        ]\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\",\n        \"cancel_url\": \"https://example.com/Cancel\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Initiate BNPL",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https:/{{url}}rl/ucp/transactions/{{trn_id}}",
															"host": [
																"https"
															],
															"port": "",
															"path": [
																"{{url}}rl",
																"ucp",
																"transactions",
																"{{trn_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reversal",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "oauth2",
															"oauth2": [
																{
																	"key": "addTokenTo",
																	"value": "header",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/reversal",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"reversal"
															]
														}
													},
													"response": []
												}
											],
											"description": "Before a transaction is captured, it is possible to Void an Authorization, Capture, Refund, or Credit request. If the transaction was already placed in the next settlement file (or batch), this will remove it. If using Delayed Capture, this will cancel the initial authorization. If the transaction was settled or batched, then it cannot be voided. This request requires the ID from the original transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with one of the BNPL providers which will return a link that will be brought to that provider's Login & Payment page. Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the BNPL transaction. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Process a reversal by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to the Transaction API Spec.\n    \n\nFor more information see [Reversal](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										}
									],
									"description": "The Buy Now Pay Later (BNPL) payment method allows customers to repay the cost of their purchase over time instead of all at once. This payment flexibility typically leads to better conversion rates as well as higher cart values.\n\nUsing our API, you can offer your customers a range of BNPL payment options using a single integration. We support several BNPL providers in multiple markets, such as Klarna, Affirm, Sezzle, and ZIP. With our flexible API, your integration will automatically support any new BNPL providers that we add over time. You just need to pass the new provider name in the request.\n\nFor more information see [Buy Now Pay Later](https://developer.globalpay.com/docs/bnpl-overview) for a overview."
								},
								{
									"name": "File Processing",
									"item": [
										{
											"name": "Access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.unset(\"token\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
															"\r",
															"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
															"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
															"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
															"\r",
															"var date = new Date();\r",
															"var year = date.getUTCFullYear()\r",
															"var month = date.getUTCMonth()+1\r",
															"var date = date.getUTCDate()\r",
															"\r",
															"var full_date = year+\"-\"+month+\"-\"+date\r",
															"\r",
															"if(month < 10){\r",
															"    full_date = year+\"-0\"+month+\"-\"+date\r",
															"}else if(month > 9){\r",
															"    full_date = year+\"-\"+month+\"-\"+date\r",
															"}\r",
															"\r",
															"var length = jsonData.scope.accounts.length\r",
															"\r",
															"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
															"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
															"\r",
															"//Add new accounts in this loop\r",
															"for(var x = 0; x < length; x++){\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
															"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
															"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
															"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"    \r",
															"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
															"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'file_processing') {\r",
															"        postman.setEnvironmentVariable(\"file_processing_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();\r",
															"\r",
															"\r",
															"nonceDate = date.toISOString(); \r",
															"pm.environment.set(\"nonce\", nonceDate);\r",
															"\r",
															"var nonce = pm.environment.get(\"nonce\");\r",
															"\r",
															"\r",
															"var app_key = pm.environment.get(\"app_key\");\r",
															"var s512Txt = nonce +''+app_key;\r",
															"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);\r",
															"\r",
															"//var secret = SHA512(s512Txt);\r",
															"pm.environment.set(\"secret\", secret);\r",
															"\r",
															"\r",
															"\r",
															"/*\r",
															"\r",
															"NOT USE as replace this function with CryptoJS.SHA512\r",
															"\r",
															"* Secure Hash Algorithm (SHA512)\r",
															"* http://www.happycode.info/\r",
															"*/\r",
															"\r",
															"function SHA512(str) {\r",
															" function int64(msint_32, lsint_32) {\r",
															" this.highOrder = msint_32;\r",
															" this.lowOrder = lsint_32;\r",
															" }\r",
															"\r",
															" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),\r",
															" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),\r",
															" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),\r",
															" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];\r",
															"\r",
															" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),\r",
															" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),\r",
															" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),\r",
															" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),\r",
															" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),\r",
															" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),\r",
															" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),\r",
															" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),\r",
															" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),\r",
															" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),\r",
															" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),\r",
															" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),\r",
															" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),\r",
															" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),\r",
															" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),\r",
															" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),\r",
															" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),\r",
															" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),\r",
															" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),\r",
															" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),\r",
															" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),\r",
															" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),\r",
															" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),\r",
															" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),\r",
															" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),\r",
															" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),\r",
															" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),\r",
															" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),\r",
															" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),\r",
															" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),\r",
															" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),\r",
															" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),\r",
															" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),\r",
															" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),\r",
															" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),\r",
															" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),\r",
															" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),\r",
															" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),\r",
															" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),\r",
															" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];\r",
															"\r",
															" var W = new Array(64);\r",
															" var a, b, c, d, e, f, g, h, i, j;\r",
															" var T1, T2;\r",
															" var charsize = 8;\r",
															"\r",
															" function utf8_encode(str) {\r",
															" return unescape(encodeURIComponent(str));\r",
															" }\r",
															"\r",
															" function str2binb(str) {\r",
															" var bin = [];\r",
															" var mask = (1 << charsize) - 1;\r",
															" var len = str.length * charsize;\r",
															"\r",
															" for (var i = 0; i < len; i += charsize) {\r",
															" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));\r",
															" }\r",
															"\r",
															" return bin;\r",
															" }\r",
															"\r",
															" function binb2hex(binarray) {\r",
															" var hex_tab = '0123456789abcdef';\r",
															" var str = '';\r",
															" var length = binarray.length * 4;\r",
															" var srcByte;\r",
															"\r",
															" for (var i = 0; i < length; i += 1) {\r",
															" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);\r",
															" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);\r",
															" }\r",
															"\r",
															" return str;\r",
															" }\r",
															"\r",
															" function safe_add_2(x, y) {\r",
															" var lsw, msw, lowOrder, highOrder;\r",
															"\r",
															" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);\r",
															" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\r",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);\r",
															" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\r",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" return new int64(highOrder, lowOrder);\r",
															" }\r",
															"\r",
															" function safe_add_4(a, b, c, d) {\r",
															" var lsw, msw, lowOrder, highOrder;\r",
															"\r",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);\r",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\r",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);\r",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\r",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" return new int64(highOrder, lowOrder);\r",
															" }\r",
															"\r",
															" function safe_add_5(a, b, c, d, e) {\r",
															" var lsw, msw, lowOrder, highOrder;\r",
															"\r",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);\r",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\r",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);\r",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\r",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);\r",
															"\r",
															" return new int64(highOrder, lowOrder);\r",
															" }\r",
															"\r",
															" function maj(x, y, z) {\r",
															" return new int64(\r",
															" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\r",
															" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\r",
															" );\r",
															" }\r",
															"\r",
															" function ch(x, y, z) {\r",
															" return new int64(\r",
															" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\r",
															" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\r",
															" );\r",
															" }\r",
															"\r",
															" function rotr(x, n) {\r",
															" if (n <= 32) {\r",
															" return new int64(\r",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),\r",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n))\r",
															" );\r",
															" } else {\r",
															" return new int64(\r",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),\r",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n))\r",
															" );\r",
															" }\r",
															" }\r",
															"\r",
															" function sigma0(x) {\r",
															" var rotr28 = rotr(x, 28);\r",
															" var rotr34 = rotr(x, 34);\r",
															" var rotr39 = rotr(x, 39);\r",
															"\r",
															" return new int64(\r",
															" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\r",
															" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\r",
															" );\r",
															" }\r",
															"\r",
															" function sigma1(x) {\r",
															" var rotr14 = rotr(x, 14);\r",
															" var rotr18 = rotr(x, 18);\r",
															" var rotr41 = rotr(x, 41);\r",
															"\r",
															" return new int64(\r",
															" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\r",
															" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\r",
															" );\r",
															" }\r",
															"\r",
															" function gamma0(x) {\r",
															" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);\r",
															"\r",
															" return new int64(\r",
															" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\r",
															" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\r",
															" );\r",
															" }\r",
															"\r",
															" function gamma1(x) {\r",
															" var rotr19 = rotr(x, 19);\r",
															" var rotr61 = rotr(x, 61);\r",
															" var shr6 = shr(x, 6);\r",
															"\r",
															" return new int64(\r",
															" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\r",
															" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\r",
															" );\r",
															" }\r",
															"\r",
															" function shr(x, n) {\r",
															" if (n <= 32) {\r",
															" return new int64(\r",
															" x.highOrder >>> n,\r",
															" x.lowOrder >>> n | (x.highOrder << (32 - n))\r",
															" );\r",
															" } else {\r",
															" return new int64(\r",
															" 0,\r",
															" x.highOrder << (32 - n)\r",
															" );\r",
															" }\r",
															" }\r",
															"\r",
															" str = utf8_encode(str);\r",
															" strlen = str.length*charsize;\r",
															" str = str2binb(str);\r",
															"\r",
															" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);\r",
															" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;\r",
															"\r",
															" for (var i = 0; i < str.length; i += 32) {\r",
															" a = H[0];\r",
															" b = H[1];\r",
															" c = H[2];\r",
															" d = H[3];\r",
															" e = H[4];\r",
															" f = H[5];\r",
															" g = H[6];\r",
															" h = H[7];\r",
															"\r",
															" for (var j = 0; j < 80; j++) {\r",
															" if (j < 16) {\r",
															" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);\r",
															" } else {\r",
															" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);\r",
															" }\r",
															"\r",
															" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);\r",
															" T2 = safe_add_2(sigma0(a), maj(a, b, c));\r",
															" h = g;\r",
															" g = f;\r",
															" f = e;\r",
															" e = safe_add_2(d, T1);\r",
															" d = c;\r",
															" c = b;\r",
															" b = a;\r",
															" a = safe_add_2(T1, T2);\r",
															" }\r",
															"\r",
															" H[0] = safe_add_2(a, H[0]);\r",
															" H[1] = safe_add_2(b, H[1]);\r",
															" H[2] = safe_add_2(c, H[2]);\r",
															" H[3] = safe_add_2(d, H[3]);\r",
															" H[4] = safe_add_2(e, H[4]);\r",
															" H[5] = safe_add_2(f, H[5]);\r",
															" H[6] = safe_add_2(g, H[6]);\r",
															" H[7] = safe_add_2(h, H[7]);\r",
															" }\r",
															"\r",
															" var binarray = [];\r",
															" for (var i = 0; i < H.length; i++) {\r",
															" binarray.push(H[i].highOrder);\r",
															" binarray.push(H[i].lowOrder);\r",
															" }\r",
															" return binb2hex(binarray);\r",
															"}\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-GP-Version",
														"value": "{{version}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/accesstoken",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"accesstoken"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"var upload_url = jsonData.url;\r",
															"console.log(upload_url)\r",
															"pm.collectionVariables.set('upload_url',upload_url)\r",
															"var fpr_id = jsonData.id;\r",
															"pm.collectionVariables.set('fpr_id',fpr_id)\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept-Encoding",
														"value": "gzip",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"account_name\": \"{{file_processing_acc_name}}\",\r\n    \"notifications\": {\r\n        \"status_url\": \"https://eo9faqlbl8wkwmx.m.pipedream.net/\"\r\n    }\r\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/files",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"files"
													]
												}
											},
											"response": []
										},
										{
											"name": "File upload",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/csv"
													}
												],
												"body": {
													"mode": "file",
													"file": {}
												},
												"url": {
													"raw": "{{upload_url}}",
													"host": [
														"{{upload_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get File Single",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-type",
														"value": "application/json"
													},
													{
														"key": "Accept-Encoding",
														"value": "gzip"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/files/{{fpr_id}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"files",
														"{{fpr_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Files List",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept-Encoding",
														"value": "gzip",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/files",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"files"
													]
												}
											},
											"response": []
										}
									],
									"description": "File Processing solution allows merchants or partners to upload bulk files with high volumes of requests, such as transactions, in one file. You can generate this file automatically using your Customer Relationship Management (CRM) system or export it manually from a spreadsheet. All of our APIs are accessible using the dynamic file format.\n\nFor more information see [File Processing](https://developer.globalpay.com/docs/file-processing) for an overview.\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. You need to send a request to create the URL that you’ll send the file to. We then provide a signed URL in the response that is valid for 24 hours. You’ll also receive a unique File Processing Resource ID (FPR_ID), which can be used to check the details of the file.\n    \n3. Now it’s time to send the encrypted file to us. This is achieved via a PUT request to the URL returned in Step 2 above. The maximum file size that can be uploaded is **10 MB**. We then decrypt and process the file and send you a webhook when the file is finished processing.\n    \n4. Complete the flow by processing a GET transaction request by entering the TRN_id into the URL. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [File Processing](https://developer.globalpay.com/docs/file-processing-guide) for a step-by-step guide."
								},
								{
									"name": "Open Banking",
									"item": [
										{
											"name": "Direct Settlement",
											"item": [
												{
													"name": "Initiate Sepa",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "x-gp-version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Initiate Sepa OB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-gp-version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\":\"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"EUR\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"IE\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"IE\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"account_number\": \"\",\r\n            \"iban\": \"GB33BUKB20201555555555\",\r\n            \"bank\": {\r\n                \"code\": \"\",\r\n                \"name\": \"Minal\"\r\n            },\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Get Sepa OB Transaction",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-gp-version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This is initiating a Spea Open banking Transaction. The Sepa payments can be taken in the EU region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
												},
												{
													"name": "Initiate Faster Payment",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Initiate Fasterpayment OB",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-gp-version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"GBP\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"GB\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"GB\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"account_number\": \"99999999\",\r\n            \"bank\": {\r\n                \"code\": \"407777\",\r\n                \"name\": \"Minal\"\r\n            },\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "GET Faster Payments OB Transaction",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-gp-version",
																		"value": "2021-03-22",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This is initiating a Faster Payment Open banking Transaction. The Sepa payments can be taken in the UK region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
												}
											],
											"description": "For Direct Settlement, you can either store the bank account details in your account or pass them through in the payment request. You may want to use different accounts for receiving funds in different currencies—for example, one for British pounds (GBP) and another for euro (EUR) transactions. If you have the bank account details stored with us, you can choose to supersede this on a transaction-by-transaction basis by supplying the details in the request."
										},
										{
											"name": "Managed Settlement",
											"item": [
												{
													"name": "Initiate",
													"item": [
														{
															"name": "Initiate Sepa",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Initiate Sepa OB",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "2021-03-22",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\":\"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"EUR\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"IE\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"IE\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Get Sepa OB Transaction",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This is initiating a Spea Open banking Transaction. The Sepa payments can be taken in the EU region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
														},
														{
															"name": "Initiate Faster Payment",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Initiate Fasterpayment OB",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"GBP\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"GB\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"GB\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "GET Faster Payments OB Transaction",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This is initiating a Faster Payment Open banking Transaction. The Sepa payments can be taken in the UK region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n    \n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
														}
													],
													"description": "we submit a mandatory request to initiate an Open Banking transaction. It needs to include the transaction’s core parameters so that we have enough information to create the payment with our technology partner and the customer’s bank. A successful transaction request will return a unique transaction identifier (TRN_ID) and a redirect URL, which you’ll use to facilitate the customer's confirmation of the transaction.\n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for an Overview."
												},
												{
													"name": "Refund",
													"item": [
														{
															"name": "Refund Sepa",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Initiate Sepa OB",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript",
																				"packages": {}
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\":\"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"EUR\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"IE\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"IE\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Get Sepa OB Transaction",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund Sepa",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-gp-version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"refund"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This is initiating a Spea Open banking Transaction. The Sepa payments can be taken in the EU region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
														},
														{
															"name": "Refund Faster Payments",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Initiate Fasterpayment OB",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"1999\",\r\n    \"type\": \"SALE\",\r\n    \"currency\": \"GBP\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"country\": \"GB\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"apm\": {\r\n            \"provider\": \"OPEN_BANKING\",\r\n            \"countries\": [\r\n                \"GB\"\r\n            ]\r\n        },\r\n        \"bank_transfer\": {\r\n            \"remittance_reference\": {\r\n                \"type\": \"TEXT\",\r\n                \"value\": \"Nike Bounce Shoes\"\r\n            }\r\n        }\r\n    },\r\n    \"notifications\": {\r\n        \"return_url\": \"https://example.com/Return\",\r\n        \"status_url\": \"https://example.com/Status\"\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "GET Faster Payments OB Transaction",
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund Faster Payments",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"refund"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This is initiating a Faster Payment Open banking Transaction. The Sepa payments can be taken in the UK region. Where the payment.scheme is SEPA, the available payment.destination fields will be:\n\npayment_method.bank_transfer.iban  \nname\n\n1. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please click here for API specs. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n2. Initiate the payment with Open Banking SEPA why is redirected back to your app or website based on transaction success/failure using the Return URL specified in the Initiate request Please click here to refer to the API specs. Please [click here](https://developer.globalpay.com/docs/open-banking-guide#api) to refer to the API specs.\n3. Send a GET request to see the status of the Open Banking transaction details and receive the webhook notification. Please [click here](https://developer.globalpay.com/docs/bnpl-guide#api) to refer to the API specs.\n4. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to the API specs.\n    \n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking-guide#api) for a step-by-step guide."
														}
													],
													"description": "Once a transaction is captured and the funds deducted from the customer's account, it is possible to refund the full or partial amount back to them without the need to obtain their card details again.\n\nMerchants can process a refund for any amount up to 115% of the original transaction value. The amount and currency must be specified in this request.\n\nFor more information see [Refunds ](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
												}
											],
											"description": "Receiving bank account information (that is, beneficiary account) is not required in the payment request. We will append our own beneficiary account details to the transaction request before it’s sent to the bank for the customer to authenticate and confirm the payment."
										}
									],
									"description": "Open Banking solution, merchants can allow customers to pay for goods and services directly from their bank account.\n\nOpen Banking is the process through which banks allow third-party financial service companies to access a customer's financial data via APIs (with the customer’s permission).\n\nTo facilitate Open Banking purchases on merchant ecommerce sites, we built a service called **Bank Payment** in collaboration with our technology partner, Token.io (Token). Token serves as an intermediary and has an API integration with participating banks. This API is called when a customer using Bank Payment is redirected to their bank for authentication.\n\nFor more information see [Open Banking](https://developer.globalpay.com/docs/open-banking) for an Overview."
								},
								{
									"name": "Card Storage",
									"item": [
										{
											"name": "Create Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n        \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to create a multi-use tokenized payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
										},
										{
											"name": "Single Use Payment Token",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\": \"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n        \"number\": \"4263970000005262\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\": \"123\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to create a single-use tokenized payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use tokenized payment method by entering the account_name and card information into the Tokenize Single Use request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for a step-by-step guide."
										},
										{
											"name": "Covert Single to Multi Use Payment Token",
											"item": [
												{
													"name": "Access Token With Single Permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\",\n    \"interval_to_expire\": \"10_MINUTES\",\n    \"permissions\": [\n             \"PMT_POST_Create_Single\"\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize Single Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"SINGLE\",\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\",\n        \"cvv\":\"{{cvv}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Covert Token to Multi Use",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"usage_mode\":\"MULTIPLE\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to convert a single-use tokenized payment into a multi-use tokenized payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a single-use tokenized payment method by entering the account_name and card information into the Tokenize Single-use request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n3. Create a Full access token to continue the flow of transactions. This will provide all necessary permissions to complete both 3DS and Authorization. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n4. Payment token can be converted to a multiple-use token by performing the Convert Token to Multi-Use call. It can also be done by setting the usage mode to multiple instead of single when the token is first created. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://) for a step-by-step guide."
										},
										{
											"name": "Patch Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n        \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Update Expiary Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "234234234",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"card\": {\n        \"expiry_month\": \"01\",\n        \"expiry_year\": \"29\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows a user to change info about a stored card such as update the card expiry date or the funding type of card or the bank identifier of the account number.\r\nTo alter the card expiry date, go to body of request and input new date. User must enter token received from tokenization of card in query string.\r\nIn the response you should see new expiry date associated with token user entered in query string.\r\n\r\nFor more info on editing a card, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Edit/patch_payment_methods__id_"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to edit a payment token’s card info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Edit a card’s expiry month and year by entering the proper values into the body and the PMT_id into the URL of the request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for a step-by-step guide."
										},
										{
											"name": "Get Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Get Payment Method",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															],
															"query": [
																{
																	"key": "account_name",
																	"value": "{{token_acc_name}}",
																	"disabled": true
																}
															]
														},
														"description": "This request returns a stored card in the global payments system. User must input token they received from tokenization into query string in order to return the stored card. In response, the only card details that will be returned will be the expiry month, year and masked card number.\r\n\r\nFor more info on getting a payment method, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Read/get_payment_methods__id_"
													},
													"response": []
												},
												{
													"name": "Get Payment Method List",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods?account_name={{token_acc_name}}&order=DESC&from_time_created={{from_time_created}}&to_time_created={{to_time_created}}&page=1&page_size=1000",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															],
															"query": [
																{
																	"key": "account_name",
																	"value": "{{token_acc_name}}"
																},
																{
																	"key": "order",
																	"value": "DESC"
																},
																{
																	"key": "from_time_created",
																	"value": "{{from_time_created}}"
																},
																{
																	"key": "to_time_created",
																	"value": "{{to_time_created}}"
																},
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "page_size",
																	"value": "1000"
																}
															]
														},
														"description": "This request returns stored cards in the global payments system.  In response, the only card details that will be returned will be the expiry month, year and masked card number.\r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_time_created variable in the Params tab to change the date of how far back in time the report goes to. It is recommended to go at least 10 days back in time.\r\n- Status returns what status each stored card is in ie. Active, Inactive or Deleted\r\n\r\nFor more info on getting payment methods, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Read/get_payment_methods"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to Get payment token card info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer to the API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Get a single payment token in response of the request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Get a list of payment tokens in response of the request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs\n    \n\nFor more information see [Card Storage](https://) for a step-by-step guide."
										},
										{
											"name": "Delete Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Delete",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods/{{pmt_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods",
																"{{pmt_id}}"
															]
														},
														"description": "This request allows user to delete a card stored in global payments system. User must enter token of card they wish to delete in query string.\r\n\r\n\r\nFor more info on deleting a stored payment, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Delete/post_payment_methods__id__delete"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to delete a payment token. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n3. Delete the Payment token by entering PMT_id into the URL of the request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for a step-by-step guide."
										},
										{
											"name": "Verify Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Verification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"currency\": \"USD\",\n    \"reference\": \"My Own Reference\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/verifications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"verifications"
															]
														},
														"description": "This request verifys a card. As you can see in the body of the request, Jane Doe's card details to be verified are present. On success, the status of the transaction in the response will be \"verified\".\r\n\r\nFor more details on verifying a card, visit: https://developer.globalpay.com/api/verifications#/Verify/post_verifications"
													},
													"response": []
												}
											],
											"description": "### Verify Payment Token\n\nThis process flow is commonly used for merchants who want to edit a payment token’s card info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize Single-use request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Verify payment method by entering the account_name and payment method info into the body of the request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for a step-by-step guide."
										},
										{
											"name": "Storage Model",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenized Storage Model",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															},
															{
																"key": "payment_method.storage_model",
																"value": "ALWAYS",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        },\n        \"storage_mode\": \"ALWAYS\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request tokenizes as part of a transaction. The field \"storage_model\" stores the card if the field is present and the merchant has a TKA account. This can be checked by seeing if TKA account is in access token response.\r\n\r\n- \"storage_model\" can be ALWAYS | ON_SUCCESS\r\n- ALWAYS= Always create a token even if card declines\r\n- ON_SUCCESS - Only tokenize card if authorized \r\n\r\nIf tokenized, a new field in \"payment_method\" called id is returned  that contains the token \r\n\r\nFor more details on tokenization, please visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to store the card as part of a transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize Single use request, additionally, choose to store the card by setting the storage mode to ALWAYS. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://) for a step-by-step guide."
										},
										{
											"name": "Fingerprint",
											"item": [
												{
													"name": "Always Check",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Tokenize Fingerprint",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pmt_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12345",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"fingerprint_mode\":\"ALWAYS\",\n    \"card\": {\n        \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payment-methods",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payment-methods"
																	]
																},
																"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to create a multi-use tokenized payment token where the Fingerprint is Returned. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Adding the \"fingerprint_mode\" and setting it to \"ALWAYS\". Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
												},
												{
													"name": "Check on Success",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Tokenize Fingerprint",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pmt_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12345",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"fingerprint_mode\": \"ON_SUCCESS\",\n    \"card\": {\n        \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payment-methods",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payment-methods"
																	]
																},
																"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to create a multi-use tokenized payment token where the Fingerprint is Returned. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Adding the \"fingerprint_mode\" and setting it to \"ON_SUCCESS\". Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
												}
											],
											"description": "The Payment Method Alias solution enables your business to seamlessly identify customers using their method of payment across any channel by creating a link between payment-processing channels. Combined with tokenization, this enables merchants to track and store the customer’s payment details on file to connect a customer’s behavior with their payment interactions, whether they occur in-store, in-app, or online—without exposing sensitive information.\n\nUsing our Payment Method Alias solution, merchants can:\n\n- Identify a customer by their card only\n    \n- Match transactions through a card to a known customer\n    \n- Link the data to existing customer profiles on the merchant’s Customer Relationship Management (CRM) system\n    \n- Provide an endless range of new commerce opportunities, including simplified refunds, loyalty incentives, verifications, and much more\n    \n\nFor more information see our [Payment Alis](https://developer.globalpay.com/docs/pm-alias) for an Overview."
										}
									],
									"description": "With our API, you can securely store card data with Global Payments and receive a token representation of the card. This token can be stored with no increased PCI Compliance requirements.\n\nTokens can be used for recurring billing or to enable one-click checkout. You can add, delete, and update stored cards.\n\nIn this guide, you'll learn how to store cards (Payment Methods) and how to charge them.\n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
								},
								{
									"name": "Payers",
									"item": [
										{
											"name": "Create Payer",
											"item": [
												{
													"name": "Payer",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Create Payer",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pyr_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pyr_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pyr_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pyr_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Mason\",\n    \"reference\": \"{{reference}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payers",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payers"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to Create a Payer. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a Payer by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to Links API specs.\n    \n\nFor more information see [Payers](https://developer.globalpay.com/docs/payers-guide#create-a-token-first)."
												},
												{
													"name": "Payer with PMT",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Tokenize",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pmt_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payment-methods",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payment-methods"
																	]
																},
																"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
															},
															"response": []
														},
														{
															"name": "Create Payer",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pyr_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pyr_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pyr_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pyr_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "2021-03-22"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Mason\",\n    \"reference\": \"{{reference}}\",\n    \"payment_methods\": [\n        {\n            \"id\": \"{{pmt_id}}\",\n            \"default\": \"YES\"\n        }\n    ]\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payers",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payers"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to Create a Payer and asign an stored card. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Create a Payer by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to Links API specs.\n    \n\nFor more information see [Payers](https://developer.globalpay.com/docs/payers-guide#create-a-token-first)."
												}
											],
											"description": "A Payer or multiple Payers can be created on our API. This can be done with or without a stored card."
										},
										{
											"name": "Edit Payer",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n        \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Create Payer",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pyr_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pyr_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pyr_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pyr_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Mason\",\n    \"reference\": \"{{reference}}\",\n    \"payment_methods\": [\n        {\n            \"id\": \"{{pmt_id}}\",\n            \"default\": \"YES\"\n        }\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payers",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Tokenize Another Card",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4263970000005262\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Edit Payer Make New Default",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"payment_methods\": [\n        {\n            \"id\": \"{{pmt_id}}\",\n            \"default\": \"YES\"\n        }\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payers/{{pyr_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payers",
																"{{pyr_id}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to edit a Payers info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Create a Payer by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to Links API specs.\n    \n4. Create a second multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n5. Edit the Payers Default card by entering the PMT_ID and setting the default to YES in the body. In the URL of the request you will need the PYR_ID of the Payer. Please [click here](https://developer.globalpay.com/api/payers) to refer to the API specs.\n    \n\nFor more information see [Payers](https://developer.globalpay.com/docs/payers-guide#create-a-token-first)."
										},
										{
											"name": "Get Payer",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Payer Single",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "idempotency-key",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/payers/{{pyr_id}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payers",
																"{{pyr_id}}"
															]
														},
														"description": "This request is for getting a realtime report of transactions. It is recomended to wait approx 5 secs after completing a transaction to run a realtime report. \r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- The Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_time_created variable in the Params tab to change the date of how far back in time the report goes to. \r\n\r\nFor more info on getting list of realtime transactions, visit: https://developer.globalpay.com/api/transactions#/Transactions/get_transactions"
													},
													"response": []
												},
												{
													"name": "Payers List",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"packages": {},
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "idempotency-key",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "https://{{url}}/ucp/payers?from_time_created={{from_time_created}}&to_time_created={{to_time_created}}",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payers"
															],
															"query": [
																{
																	"key": "from_time_created",
																	"value": "{{from_time_created}}"
																},
																{
																	"key": "to_time_created",
																	"value": "{{to_time_created}}"
																}
															]
														},
														"description": "This request is for getting a realtime report of transactions. It is recomended to wait approx 5 secs after completing a transaction to run a realtime report. \r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- The Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_time_created variable in the Params tab to change the date of how far back in time the report goes to. \r\n\r\nFor more info on getting list of realtime transactions, visit: https://developer.globalpay.com/api/transactions#/Transactions/get_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to a Payers Card info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer to the API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Get a single payer in response of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to the API specs.\n    \n3. Get a list of payers in response of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to the API specs"
										},
										{
											"name": "Token & Auth With Payer",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"{{expiry_month}}\",\n        \"expiry_year\": \"{{expiry_year}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Create Payer",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pyr_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pyr_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pyr_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pyr_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Mason\",\n    \"reference\": \"{{reference}}\",\n    \"payment_methods\": [\n        {\n            \"id\": \"{{pmt_id}}\",\n            \"default\": \"YES\"\n        }\n    ]\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payers",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Auth With PYR_ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
																	"\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payer\":{\n        \"id\":\"{{pyr_id}}\"\n    },\n    \"payment_method\": {\n        \"entry_mode\": \"ECOM\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to Create a Payer and asign an stored card. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Create a Payer by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to Links API specs.\n    \n4. Perform authorization by entering the account_name along with the necessary PYR_ID into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Payers](https://developer.globalpay.com/docs/payers-guide#create-a-token-first)."
										}
									],
									"description": "With our Payers solution, you can store customer details such as name, billing address, shipping address, and payment methods. This information can then be used for subsequent actions like transaction processing. We handle the storage of all personal identifiable information (PII) on our system, so you don’t need to worry about keeping payer data secure.\n\nWith Payers, you can:\n\n- Store multiple payment tokens for a single payer\n    \n- Charge a payer for one-time and recurring transactions\n    \n- Specify which stored card the customer wants to use as the default\n    \n\nFor more information see [Payers ](https://developer.globalpay.com/docs/payers) for an Overview."
								},
								{
									"name": "Transactions",
									"item": [
										{
											"name": "Auth",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\n\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\n    \n\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\n\nFor more info on retrieving an access token, visit: [https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken](https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken)"
													},
													"response": []
												},
												{
													"name": "Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"IE\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Moto",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Moto Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"MOTO\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP MOTO transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a Moto authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "PreAuth and Capture",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "PreAuth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"LATER\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Complete Capture",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														},
														"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a pre-authorization and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform pre-authorization by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										},
										{
											"name": "Multi Capture",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "PreAuth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"MULTIPLE\",\n    \"type\": \"SALE\",\n    \"amount\": \"1000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Capture Partial",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"amount\":\"500\"\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														},
														"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
													},
													"response": []
												},
												{
													"name": "Capture Remaining",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"amount\":\"500\"\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"capture"
															]
														},
														"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process a multiple capture scenario. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform pre-authorization by entering the account_name and the capture_mode seet to Multiple along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Capture a partial amount of the transaction by entering the TRN_id into the URL and the amount you wish to Capture in the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Capture the remaining amount of the transaction by entering the TRN_id into the URL and the final amount to Capture in the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										},
										{
											"name": "Auth With Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n    \"card\": {\n       \"number\": \"4242424242424242\",\n        \"expiry_month\": \"12\",\n        \"expiry_year\": \"23\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"12\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to create a payment token and authorize the payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize Single-use request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Perform authorization by entering the account_name along with the necessary PMT_id into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) and [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for a step-by-step guide."
										}
									],
									"description": "Our API gives you full control over your transactions allowing you to capture, refund, or void them quickly and easily from your application. This guide goes through the potential lifecycle of a transaction and provides a sample code for each request type.\n\nFor more information see [Transactions ](https://developer.globalpay.com/docs/transaction-management#api) for an Overview."
								},
								{
									"name": "HPP",
									"item": [
										{
											"name": "Transaction",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																	"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "HPP Transaction",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"connection": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Connection",
																"value": "keep-alive"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": " Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"IE\"\n        },\n        \"address_match_indicator\": \"YES\"\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"EUR\",\n        \"reference\": \"{{reference}}\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"GB\",\n            \"capture_mode\": \"AUTO\",\n            \"curreny_conversion_mode\": \"ON\",\n            \"allowed_payment_methods\": [\n                \"CARD\",\n                \"testpay\"\n            ]\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            }\n        },\n        \"shipping_address\": {\n            \"line_1\": \"Flat 123\",\n            \"line_2\": \"House 456\",\n            \"line_3\": \"Btower\",\n            \"city\": \"Chicago\",\n            \"postal_code\": \"50001\",\n            \"state\": \"IL\",\n            \"country\": \"US\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"99\",\n            \"subscriber_number\": \"1801555999\"\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														},
														"description": "sd"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization via HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
										},
										{
											"name": "3D Secure",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																	"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "HPP 3DS2",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"connection": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Connection",
																"value": "keep-alive"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": " Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"IE\"\n        }\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"EUR\",\n        \"reference\": \"{{reference}}\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"GB\",\n            \"capture_mode\": \"AUTO\"\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            }\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														},
														"description": "sd"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization via HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization with 3DS2 data by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
										},
										{
											"name": "Card Storage",
											"item": [
												{
													"name": "Create Payer",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																			"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Create Payer",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"pyr_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"pyr_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"pyr_reference\", jsonData.reference);\r",
																			"\r",
																			"tests[\"ID \" + pm.environment.get(\"pyr_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Mason\",\n    \"reference\": \"{{reference}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/payers",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"payers"
																	]
																}
															},
															"response": []
														},
														{
															"name": "HPP Auth With Payer",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																}
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"status\": \"NEW\",\n        \"id\": \"PYR_a488356f29ac4e4c9a89977652a3215e\",\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"US\"\n        },\n        \"address_match_indicator\": \"YES\"\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"USD\",\n        \"reference\": \"{{reference}}\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"US\",\n            \"capture_mode\": \"auto\",\n            \"curreny_conversion_mode\": \"OFF\",\n            \"allowed_payment_methods\": [\n                \"CARD\"\n            ]\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            },\n            \"apm\": {\n                \"shipping_address_enabled\": \"YES\",\n                \"address_override\": \"YES\"\n            },\n            \"storage_mode\": \"PROMPT\"\n        },\n        \"shipping_address\": {\n            \"line_1\": \"Flat 123\",\n            \"line_2\": \"House 456\",\n            \"line_3\": \"Btower\",\n            \"city\": \"Chicago\",\n            \"postal_code\": \"50001\",\n            \"state\": \"IL\",\n            \"country\": \"US\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"99\",\n            \"subsriber_number\": \"1801555999\"\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/links",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"links"
																	]
																},
																"description": "sd"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to Create a Payer and process a payment via HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. Please [click here](https://developer.globalpay.com/api/access-token) for API specs.\n    \n2. Create a Payer by entering b64 content along with other essential indicators into the body of the request. Please [click here](https://developer.globalpay.com/api/payers) to refer to Links API specs.\n    \n3. Perform authorization by entering the account_name and pyr_id along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
												},
												{
													"name": "Display Payer",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																			"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "HPP Auth Display Payer",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																}
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"status\": \"ACTIVE\",\n        \"id\": \"{{pyr_id}}\",\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"US\"\n        },\n        \"address_match_indicator\": \"YES\"\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"USD\",\n        \"reference\": \"{{reference}}\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"US\",\n            \"capture_mode\": \"auto\",\n            \"curreny_conversion_mode\": \"OFF\",\n            \"allowed_payment_methods\": [\n                \"CARD\"\n            ]\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            },\n            \"apm\": {\n                \"shipping_address_enabled\": \"YES\",\n                \"address_override\": \"YES\"\n            },\n            \"storage_mode\": \"PROMPT\"\n        },\n        \"shipping_address\": {\n            \"line_1\": \"Flat 123\",\n            \"line_2\": \"House 456\",\n            \"line_3\": \"Btower\",\n            \"city\": \"Chicago\",\n            \"postal_code\": \"50001\",\n            \"state\": \"IL\",\n            \"country\": \"US\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"99\",\n            \"subsriber_number\": \"1801555999\"\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/links",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"links"
																	]
																},
																"description": "sd"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an authorization via HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name along with the necessary card data into the body of the request while displaying the stored cards for the payer. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
												}
											],
											"description": "With our API, you can securely store card data with Global Payments and receive a token representation of the card. This token can be stored with no increased PCI Compliance requirements.\n\nTokens can be used for recurring billing or to enable one-click checkout. You can add, delete, and update stored cards.\n\nIn this guide, you'll learn how to store cards (Payment Methods) and how to charge them.\n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
										},
										{
											"name": "DCC",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																	"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "HPP DCC",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"connection": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Connection",
																"value": "keep-alive"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}"
															},
															{
																"key": "Authorization",
																"value": " Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"GB\"\n        },\n        \"address_match_indicator\": \"YES\"\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"EUR\",\n        \"reference\": \"123456789\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"GB\",\n            \"capture_mode\": \"AUTO\",\n            \"curreny_conversion_mode\": \"ON\"\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            }\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														},
														"description": "sd"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization via HPP with DCC. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and the curreny_conversion_mode set to on, along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
										},
										{
											"name": "APM",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"        if (jsonData.scope.accounts[x].name == 'transaction_processing_hpp') {\r",
																	"        postman.setEnvironmentVariable(\"hpp\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "HPP APM",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"connection": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Connection",
																"value": "keep-alive"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "x-gp-version",
																"value": "2021-03-22"
															},
															{
																"key": "Authorization",
																"value": " Bearer {{token}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{hpp}}\",\n    \"type\": \"HOSTED_PAYMENT_PAGE\",\n    \"name\": \"Mobile Bill Payment\",\n    \"description\": \"Test Description\",\n    \"reference\": \"{{reference}}\",\n    \"payer\": {\n        \"name\": \"James Mason\",\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"language\": \"en\",\n        \"email\": \"jamesmason@example.com\",\n        \"mobile_phone\": {\n            \"country_code\": \"44\",\n            \"subsriber_number\": \"1801555888\"\n        },\n        \"billing_address\": {\n            \"line_1\": \"bill_street1\",\n            \"line_2\": \"bill_street2\",\n            \"line_3\": \"bill_street3\",\n            \"city\": \"Bill_city\",\n            \"postal_code\": \"44\",\n            \"country\": \"IE\"\n        },\n        \"address_match_indicator\": \"YES\"\n    },\n    \"order\": {\n        \"amount\": \"1000\",\n        \"currency\": \"EUR\",\n        \"reference\": \"{{reference}}\",\n        \"transaction_configuration\": {\n            \"channel\": \"CNP\",\n            \"country\": \"GB\",\n            \"capture_mode\": \"AUTO\",\n            \"curreny_conversion_mode\": \"ON\",\n            \"allowed_payment_methods\": [\n                \"CARD\",\n                \"testpay\"\n            ]\n        },\n        \"payment_method_configuration\": {\n            \"authentications\": {\n                \"preference\": \"CHALLENGE_PREFERRED\"\n            }\n        },\n        \"shipping_address\": {\n            \"line_1\": \"Flat 123\",\n            \"line_2\": \"House 456\",\n            \"line_3\": \"Btower\",\n            \"city\": \"Chicago\",\n            \"postal_code\": \"50001\",\n            \"state\": \"IL\",\n            \"country\": \"US\"\n        },\n        \"shipping_phone\": {\n            \"country_code\": \"99\",\n            \"subsriber_number\": \"1801555999\"\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/links",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"links"
															]
														},
														"description": "sd"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization via HPP with an APM. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and the allowed_payment_methods containing the apm you wish to proccess, along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for a step-by-step guide."
										},
										{
											"name": "Get HPP Details",
											"item": [
												{
													"name": "HPP Links",
													"item": [
														{
															"name": "GET Link",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//Existing PYR_ID: PYR_969480b423654ee693444c4ff65922ae\r",
																			"\r",
																			"var amount = \"1234\";\r",
																			"var currency =\"USD\";\r",
																			"var expmonth = \"12\";\r",
																			"var expiryyear = \"23\";\r",
																			"var merchantid = \"jasonbajariastest\";\r",
																			"var sharedsecret = \"secret\";\r",
																			"var account = \"apm\";\r",
																			"var orderid = \"GP-\"+Math.round((Math.random() * (+99999 - +1) + 1));\r",
																			"var moment = require('moment');\r",
																			"var timestamp = moment().format(\"YYYYMMDDhhmmss\");\r",
																			"\r",
																			"pm.environment.set(\"expmonth\", expmonth);\r",
																			"pm.environment.set(\"expiryyear\", expiryyear);\r",
																			"pm.environment.set(\"timestamp\", timestamp);\r",
																			"pm.environment.set(\"merchantid\", merchantid);\r",
																			"pm.environment.set(\"account\", account);\r",
																			"pm.environment.set(\"amount\", amount);\r",
																			"pm.environment.set(\"currency\", currency);\r",
																			"pm.environment.set(\"orderid\", orderid);\r",
																			"pm.environment.set(\"sharedsecret\", sharedsecret);\r",
																			"\r",
																			"var sha1hash = timestamp+\".\"+merchantid+\".\"+orderid+\".\"+amount+\".\"+currency;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"sha1hash = sha1hash+\".\"+sharedsecret;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"\r",
																			"pm.environment.set(\"sha1hash\", sha1hash);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																},
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/links/{{link}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"links",
																		"{{link}}"
																	]
																},
																"description": "sd"
															},
															"response": []
														},
														{
															"name": "GET Links",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//Existing PYR_ID: PYR_969480b423654ee693444c4ff65922ae\r",
																			"\r",
																			"var amount = \"1234\";\r",
																			"var currency =\"USD\";\r",
																			"var expmonth = \"12\";\r",
																			"var expiryyear = \"23\";\r",
																			"var merchantid = \"jasonbajariastest\";\r",
																			"var sharedsecret = \"secret\";\r",
																			"var account = \"apm\";\r",
																			"var orderid = \"GP-\"+Math.round((Math.random() * (+99999 - +1) + 1));\r",
																			"var moment = require('moment');\r",
																			"var timestamp = moment().format(\"YYYYMMDDhhmmss\");\r",
																			"\r",
																			"pm.environment.set(\"expmonth\", expmonth);\r",
																			"pm.environment.set(\"expiryyear\", expiryyear);\r",
																			"pm.environment.set(\"timestamp\", timestamp);\r",
																			"pm.environment.set(\"merchantid\", merchantid);\r",
																			"pm.environment.set(\"account\", account);\r",
																			"pm.environment.set(\"amount\", amount);\r",
																			"pm.environment.set(\"currency\", currency);\r",
																			"pm.environment.set(\"orderid\", orderid);\r",
																			"pm.environment.set(\"sharedsecret\", sharedsecret);\r",
																			"\r",
																			"var sha1hash = timestamp+\".\"+merchantid+\".\"+orderid+\".\"+amount+\".\"+currency;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"sha1hash = sha1hash+\".\"+sharedsecret;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"\r",
																			"pm.environment.set(\"sha1hash\", sha1hash);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																},
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/links?order=DESC&page_size=1000&from_time_created={{from_time_created}}&trom_time_created={{to_time_created}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"links"
																	],
																	"query": [
																		{
																			"key": "order",
																			"value": "DESC"
																		},
																		{
																			"key": "page_size",
																			"value": "1000"
																		},
																		{
																			"key": "from_time_created",
																			"value": "{{from_time_created}}"
																		},
																		{
																			"key": "trom_time_created",
																			"value": "{{to_time_created}}"
																		}
																	]
																},
																"description": "sd"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to get details or a list of links to create the HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment.\n    \n2. Enter the link into the URL of the request to Get Details of a Link. Please [click here](https://developer.globalpay.com/api/links) to refer to the Links API Spec.\n    \n3. Enter Query parameters into the URL of the request to Get a List of Links. Please [click here](https://developer.globalpay.com/api/links) to refer to the Links API Spec.\n    \n\nFor more information see and [Links](https://)."
												},
												{
													"name": "HPP Transactions",
													"item": [
														{
															"name": "GET Transaction",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//Existing PYR_ID: PYR_969480b423654ee693444c4ff65922ae\r",
																			"\r",
																			"var amount = \"1234\";\r",
																			"var currency =\"USD\";\r",
																			"var expmonth = \"12\";\r",
																			"var expiryyear = \"23\";\r",
																			"var merchantid = \"jasonbajariastest\";\r",
																			"var sharedsecret = \"secret\";\r",
																			"var account = \"apm\";\r",
																			"var orderid = \"GP-\"+Math.round((Math.random() * (+99999 - +1) + 1));\r",
																			"var moment = require('moment');\r",
																			"var timestamp = moment().format(\"YYYYMMDDhhmmss\");\r",
																			"\r",
																			"pm.environment.set(\"expmonth\", expmonth);\r",
																			"pm.environment.set(\"expiryyear\", expiryyear);\r",
																			"pm.environment.set(\"timestamp\", timestamp);\r",
																			"pm.environment.set(\"merchantid\", merchantid);\r",
																			"pm.environment.set(\"account\", account);\r",
																			"pm.environment.set(\"amount\", amount);\r",
																			"pm.environment.set(\"currency\", currency);\r",
																			"pm.environment.set(\"orderid\", orderid);\r",
																			"pm.environment.set(\"sharedsecret\", sharedsecret);\r",
																			"\r",
																			"var sha1hash = timestamp+\".\"+merchantid+\".\"+orderid+\".\"+amount+\".\"+currency;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"sha1hash = sha1hash+\".\"+sharedsecret;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"\r",
																			"pm.environment.set(\"sha1hash\", sha1hash);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																},
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "x-gp-version",
																		"value": "2021-03-22",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": " Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{sale_trn_id}}"
																	]
																},
																"description": "sd"
															},
															"response": []
														},
														{
															"name": "GET Transactions",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//Existing PYR_ID: PYR_969480b423654ee693444c4ff65922ae\r",
																			"\r",
																			"var amount = \"1234\";\r",
																			"var currency =\"USD\";\r",
																			"var expmonth = \"12\";\r",
																			"var expiryyear = \"23\";\r",
																			"var merchantid = \"jasonbajariastest\";\r",
																			"var sharedsecret = \"secret\";\r",
																			"var account = \"apm\";\r",
																			"var orderid = \"GP-\"+Math.round((Math.random() * (+99999 - +1) + 1));\r",
																			"var moment = require('moment');\r",
																			"var timestamp = moment().format(\"YYYYMMDDhhmmss\");\r",
																			"\r",
																			"pm.environment.set(\"expmonth\", expmonth);\r",
																			"pm.environment.set(\"expiryyear\", expiryyear);\r",
																			"pm.environment.set(\"timestamp\", timestamp);\r",
																			"pm.environment.set(\"merchantid\", merchantid);\r",
																			"pm.environment.set(\"account\", account);\r",
																			"pm.environment.set(\"amount\", amount);\r",
																			"pm.environment.set(\"currency\", currency);\r",
																			"pm.environment.set(\"orderid\", orderid);\r",
																			"pm.environment.set(\"sharedsecret\", sharedsecret);\r",
																			"\r",
																			"var sha1hash = timestamp+\".\"+merchantid+\".\"+orderid+\".\"+amount+\".\"+currency;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"sha1hash = sha1hash+\".\"+sharedsecret;\r",
																			"sha1hash = CryptoJS.SHA1(sha1hash);\r",
																			"sha1hash = sha1hash.toString();\r",
																			"\r",
																			"pm.environment.set(\"sha1hash\", sha1hash);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"connection": true
																},
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "Connection",
																		"value": "keep-alive",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "x-gp-version",
																		"value": "2021-03-22",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": " Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions?order=DESC&page_size=1000&from_time_created={{from_time_created}}&trom_time_created={{to_time_created}}",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	],
																	"query": [
																		{
																			"key": "order",
																			"value": "DESC"
																		},
																		{
																			"key": "page_size",
																			"value": "1000"
																		},
																		{
																			"key": "from_time_created",
																			"value": "{{from_time_created}}"
																		},
																		{
																			"key": "trom_time_created",
																			"value": "{{to_time_created}}"
																		}
																	]
																},
																"description": "sd"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to see the Real-Time transaction data info via the HPP. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Get a transaction in response of the request by providing the TRN_ID. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Get a list of transactions in response of the request by providing a Date Range. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Real-Time Reporting](https://developer.globalpay.com/docs/real-time-report) for a step-by-step guide."
												}
											]
										}
									],
									"description": "The Hosted Payment Page (HPP) is our PCI DSS compliant hosted solution, allowing merchants to capture addresses for customer billing and shipping, contact information, and card details all through one simple redirect or embedded integration.\n\nUsing the HPP along with our SDKs and libraries means that you can set up a secure payment form in your application or website in minutes. The library handles the opening, display, and response of the HPP on a desktop, tablet, mobile device (both iOS and Android apps), or in-app, with minimal configuration required.\n\nThe Hosted Payment Page offers:\n\n- Prebuilt payment pages for your checkout flow\n    \n- Simplest level of PCI DSS compliance: SAQ A\n    \n- Secure address forms to collect other customer details\n    \n- Built-in input validation of payment fields\n    \n- Seamless integration with desktop, table, mobile, or in-app\n    \n- Cross-channel secure payment acceptance and customer identification\n    \n\nFor more information see [HPP](https://developer.globalpay.com/docs/hpp-guide) for an Overview."
								},
								{
									"name": "Refunds",
									"item": [
										{
											"name": "Refund for Previous Auth",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Transaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Linked refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"refund"
															]
														},
														"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
													},
													"response": []
												}
											],
											"description": "This process flow is a common use for merchants who want to refund a previous authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Standalone Refund",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Standalone Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"stdaloneref_trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"REFUND\",\n    \"amount\": \"20045\",\n    \"currency\": \"GBP\",\n    \"country\": \"GB\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"MANUAL\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request refunds funds to a different card that is not associated with original sale transaction. As you can see in the body of request, card details for Jane Doe have been manually entered in order to send request back to this specific card."
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to refund a standalone transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction/refund by entering the account_name, card information, and type=REFUND into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										}
									],
									"description": "Once a transaction is captured and the funds deducted from the customer's account, it is possible to refund the full or partial amount back to them without the need to obtain their card details again.\n\nMerchants can process a refund for any amount up to 115% of the original transaction value. The amount and currency must be specified in this request.\n\nFor more information see [Refunds](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
								},
								{
									"name": "Reversal",
									"item": [
										{
											"name": "Reversal for Previous Transaction",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Transaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Reversal For Previous Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/reversal",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"reversal"
															]
														},
														"description": "This request reverses a previous sale transaction. On success, you will receive a \"REVERSED\" status.\r\n   \r\n For more info on a reversed sale transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to reverse or cancel a previous transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a reversal by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Reversal for Previous Refund",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Transaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\":\"{{cvv}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Linked refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"refund"
															]
														},
														"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
													},
													"response": []
												},
												{
													"name": "Reversal For Previous Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{refund_trn_id}}/reversal",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{refund_trn_id}}",
																"reversal"
															]
														},
														"description": "This request reverses a previous refund transaction. On success of reversal of refund, status will be \"REVERSED\"\r\n\r\n For more info on a reversed transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to reverse a previous refund. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Process a reversal for a previous refund by entering the TRN_id into the URL of the Reversal For Previous Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										}
									],
									"description": "Before a transaction is captured, it is possible to Void an Authorization request. If the transaction was already placed in the next settlement file (or batch), this will remove it. If using Delayed Capture, this will cancel the initial authorization. If the transaction was settled or batched, then it cannot be voided. This request requires the ID from the original transaction.\n\nFor more information see [Reversals ](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
								},
								{
									"name": "Digital Wallets",
									"item": [
										{
											"name": "Apple Pay",
											"item": [
												{
													"name": "Apple Pay Encrypted",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Apple Pay Encrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"4300\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"order_reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"James Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"provider\": \"APPLEPAY\",\n            \"payment_token\": {\n                \"version\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                \"data\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                \"header\": {\n                    \"ephemeralPublicKey\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                    \"transactionId\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                    \"publicKeyHash\": \"ENTER PAYMENT TOKEN INFO HERE\"\n                }\n            }\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "For this Encrypted Apple Pay request, you must get your own payment token first and then insert the corresponding details below in body of request.\r\n\r\n\r\nFor more details on Apple Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#apple-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an encrypted Apple Pay transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create an encrypted Apple Pay transaction by entering account_name, and proper payment token information, the provider must be set to APPLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Apple Pay](https://) for a step-by-step guide."
												},
												{
													"name": "Apple Pay Decrpyted",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Apple Pay Decrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"5\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"order_reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"APPLEPAY\",\n            \"eci\": \"\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Apple Pay Transaction. You provide us with the Apple Pay token and we encrypt it for you and process  transaction.\r\n\r\nFor more info on Apple Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#apple-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a decrypted Apple Pay transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a decrypted Apple Pay transaction by entering account_name, and proper payment token information, the provider must be set to APPLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Apple Pay](https://developer.globalpay.com/docs/applepay#drop-in-ui) for a step-by-step guide."
												}
											],
											"description": "Apple Pay provides a highly secure instant payment experience. It allows users to securely store their card details on a Secure Element built into their Apple product and to use those card details to make payments. It can be used in-app or on the web to provide payment for real-world goods and services.\n\nFor more information see [Apple Pay](https://developer.globalpay.com/docs/applepay#drop-in-ui) for a step-by-step guide"
										},
										{
											"name": "Google Pay",
											"item": [
												{
													"name": "Google Pay Encrypted",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Google Pay Encrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"1000\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"order_reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"James Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"provider\": \"PAY_BY_GOOGLE\",\n            \"payment_token\": {\n                \"signature\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                \"protocolVersion\": \"ENTER PAYMENT TOKEN INFO HERE\",\n                \"signedMessage\": \"ENTER PAYMENT TOKEN INFO HERE\"\n            }\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "For this Encrypted Google Pay request, you must get your own payment token first and then insert the corresponding details below in body of request.\r\n\r\n\r\nFor more details on Google Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#google-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an encrypted Google Pay transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create an encrypted Apple Pay transaction by entering account_name, and proper payment token information, the provider must be set to GOOGLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Google Pay](https://developer.globalpay.com/docs/googlepay#drop-in-ui) for a step-by-step guide."
												},
												{
													"name": "Google Pay Decrpyted",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Google Pay Decrypted Auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Idempotency",
																		"value": "12348",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"1999\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"James Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"digital_wallet\": {\n            \"token\": \"5167300431085507\",\n            \"token_format\": \"CARD_NUMBER\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cryptogram\": \"234234234\",\n            \"provider\": \"PAY_BY_GOOGLE\",\n            \"eci\": \"5\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows you to do a Decrypted Google Pay Transaction. You provide us with the Google Pay token and we encrypt it for you and process transaction.\r\n\r\nFor more info on Google Pay, please visit: https://developer.globalpay.com/ecommerce/digital-wallets#google-pay"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an dencrypted Google Pay transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a decrypted Apple Pay transaction by entering account_name, and proper payment token information, the provider must be set to GOOGLEPAY. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Google Pay](https://developer.globalpay.com/docs/googlepay#drop-in-ui) for a step-by-step guide."
												}
											],
											"description": "Google Pay enables customers to use the cards they have stored with Google to make quick, easy purchases on merchant websites or in-app. Customers can use the details they store on other Google applications such as Play Store, YouTube, and Chrome web browser.\n\nFor more information see [Google Pay](https://developer.globalpay.com/docs/googlepay#drop-in-ui) for a step-by-step guide."
										}
									],
									"description": "Digital wallets can store a customer’s payment and personal information on an app or browser for quick payments in-person, online, or on a mobile device. Customers pay securely with just a scan, tap, or click. Global Payments offers merchants several ways to integrate digital wallets into their applications or website to make the checkout experience secure, fast, and convenient.\n\nFor more information see [Digital Wallets](https://developer.globalpay.com/docs/digital-wallets) for an Overview."
								},
								{
									"name": "APM",
									"item": [
										{
											"name": "PayPal",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Paypal Initiate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"var redirect_url = jsonData.payment_method.apm.redirect_url; \r",
																	"\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"set  html\",function(){\r",
																	"    var template='<!DOCTYPE html> <html> <head> <title>Sample 3DSecure Page</title> </head> <body><form action='+redirect_url+' method=\"POST\">  <input type=\"submit\" value=\"Submit\"> </form> </body> </html>'     // save your html in the template and then     \r",
																	"    pm.visualizer.set(template);     // set that template to pm.visualizer\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "idempotency-key",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"20045\",\n    \"currency\": \"EUR\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"GB\",\n    \"payment_method\": {\n        \"name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"apm\": {\n            \"provider\": \"paypal\"\n        }\n    },\n    \"notifications\": {\n        \"return_url\": \"https://example.com/Return\",\n        \"status_url\": \"https://example.com/Status\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request initiates a paypal payment for a transaction. It will return the url that the merchant will need to redirect the customer to in order to log in to paypal and complete the purchase.\r\n\r\nFor more information on this request, please visit the following Dev Portal link: https://developer.globalpay.com/ecommerce/paypal#api"
													},
													"response": []
												},
												{
													"name": "PayPal Confirm",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "idempotency-key",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"payment_method\": {\n        \"apm\": {\n            \"provider\": \"paypal\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/confirmation",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{trn_id}}",
																"confirmation"
															]
														},
														"description": "Once the merchant receives a notification from Paypal indicating the customer has finished on PayPal Website, merchant must send in a confirm request to complete the transaction.\r\n\r\nFor more information on this request, please visit the following Dev Portal link: https://developer.globalpay.com/ecommerce/paypal#api"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to initiate a PayPal transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).  \n    Initiate the transaction by entering the acc_name in the body of the PayPal initiate request along with the account_name. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n2. Confirm the PayPal transaction by entering the TRN_id into the URL of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Paypal](https://developer.globalpay.com/docs/paypal#api) for a step-by-step guide."
										}
									],
									"description": "With our API, you can accept transactions from a number of worldwide payment methods. This not only widens your customer base to more shoppers across the globe, but also provides the added benefit of managing all your payments through our Reporting tool.\n\nFor more information see [APMs](https://developer.globalpay.com/docs/payment-methods#api) for an overview."
								},
								{
									"name": "DCC",
									"item": [
										{
											"name": "DCC Opt In",
											"item": [
												{
													"name": "Authorization",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Rate Lookup",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/currency-conversions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"currency-conversions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "ECOM Sale",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
												},
												{
													"name": "Refund",
													"item": [
														{
															"name": "Linked Refund",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{123}}\"\n        }\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"disabled": true
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{sale_trn_id}}",
																				"refund"
																			]
																		},
																		"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up for CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Standalone Refund",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund standalone",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"REFUND\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{123}}\"\n        }\n    },\n    \"currency_conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to refund a standalone transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Create a transaction/refund by entering the account_name, card information, and type=REFUND into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) & [Transaction Management](https://) for a step-by-step guide."
														}
													],
													"description": "Once a DCC transaction is captured and the funds deducted from the customer's account, it is possible to refund the full or partial amount back to them without the need to obtain their card details again.\n\nMerchants can process a refund for any amount up to 115% of the original transaction value. The amount and currency must be specified in this request.\n\nFor more information see [Refunds ](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
												},
												{
													"name": "Capture",
													"item": [
														{
															"name": "Same Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request without changing the amount. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Decreased Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"100\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"amount\":\"50\"\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request, decreasing the amount of the capture. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Increase Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"100\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup (Increase)",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"amount\":\"50\"\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request, increasing the amount of the capture. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a pre-authorization and complete the capture. In the subfolders below we will show the flows when a merchant Same Amount, Decreased Amount, and Increased amounts.\n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
												}
											],
											"description": "This process flow is commonly used for merchants who want to create auths, refunds, and captures when opting into DCC transactions.\n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										},
										{
											"name": "DCC Opt-Out",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Rate Lookup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4006097467207025\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/currency-conversions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"currency-conversions"
															]
														}
													},
													"response": []
												},
												{
													"name": "ECOM Sale",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"30\",\n            \"cvv\": \"996\"\n        }\n    },\n    // In an Opt-Out scenario, simply pass the payer_currency with the same value as base transaction currency\n   \"currency_conversion\": {\n        \"payer_currency\": \"EUR\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform authorization by entering the account_name & not passing the CCS_ID from the Rate Look Up. In an Opt-Out scenario, simply pass the payer_currency with the same value as the base transaction currency along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										},
										{
											"name": "DCC Not Available",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Rate Lookup Not Available",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CNP\",\r\n    \"amount\": \"10000\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"ECOM\",\r\n        \"card\": {\r\n            \"number\": \"4263970000005262\",\r\n            \"expiry_month\": \"{{expiry_month}}\",\r\n            \"expiry_year\": \"{{expiry_year}}\",\r\n            \"cvv\": \"{{cvv}}\"\r\n        }\r\n    }\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/currency-conversions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"currency-conversions"
															]
														}
													},
													"response": []
												},
												{
													"name": "ECOM Sale with no DCC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CNP\",\n    \"amount\": \"10000\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"number\": \"4006097467207025\",\n            \"expiry_month\": \"{{expiry_month}}\",\n            \"expiry_year\": \"{{expiry_year}}\",\n            \"cvv\": \"{{cvv}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "For this request, if you want to do a sale with no DCC chosen, currency_conversion.exchange_rate field must be set to 1, currency_conversion.payer_amount must match 'amount' and currency_conversion.payer_currency must match 'currency'."
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform authorization by entering the account_name & not passing the CCS_ID from the Rate Look Up as it is not available along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										}
									],
									"description": "Dynamic Currency Conversion (DCC) enables merchants to provide customers purchasing internationally a final payment amount in the currency of their card. Either the merchant or a third-party Currency Conversion Processor (CCP) provides the interbank exchange rate available at the time of transaction and displays it to the customer. This way, the customer knows the exchange rate before they complete the payment. They can then choose whether to continue with the conversion or pay in the merchant’s base currency.\n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) for an overview."
								}
							],
							"description": "Below you will find a folder of the most common use cases you will find for Customer Not Present Scenarios. We show the full flow of transactions as they would be in production."
						}
					],
					"description": "This folder is intended to be used by integrators / merchants who want to do Ecommerce transactions. The folder contains use cases which an integrator/merchant can replicate in their integration."
				},
				{
					"name": "Customer Present",
					"item": [
						{
							"name": "Use Cases",
							"item": [
								{
									"name": "Transactions",
									"item": [
										{
											"name": "Entry Mode",
											"item": [
												{
													"name": "Chip",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP Chip",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Chip authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and entry_mode set to CHIP along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Contactless Chip",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP CONTACTLESS CHIP",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\":\"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"capture_mode\": \"LATER\",\n    \"type\": \"SALE\",\n    \"amount\": \"12000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n   }\n}\n"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Contactless Chip authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and entry_mode set to CONTACTLESS_CHIP along with the necessary card data into the body of the request. StartFragment Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Swipe",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP SWIPE",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"SWIPE\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Swipe transaction (Customer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Swipe authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and entry_mode set to SWIPE along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Manual",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP MANUAL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"MANUAL\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"09\",\n            \"expiry_year\": \"22\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Manual transaction (Customer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Manual. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and entry_mode set to MANUAL along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "EMV Tech Fall Back",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP SWIPE",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"SWIPE\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"chip_condition\":\"PREV_FAILED\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Swipe transaction (Customer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Swipe authorization where the CHIP card is not readable. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name and entry_mode set to SWIPE along with the necessary card data including the chip condition field into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												}
											],
											"description": "This folder will show examples of different types of entry modes that can be used in Authorization."
										},
										{
											"name": "AVS & CVD",
											"item": [
												{
													"name": "Chip",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP Chip",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Chip authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name, entry_mode set to CHIP and the AVS information of the customer along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Swipe",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP SWIPE",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"SWIPE\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"avs_address\": \"RD.asd'-' 17's Bogong\",\n            \"avs_postal_code\": \"3699\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Swipe transaction (Customer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a Swipe authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name, entry_mode set to SWIPE and the AVS information of the customer along with the necessary card data into the body of the request. StartFragment Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												}
											],
											"description": "This folder will show examples of The Address Verification Service (AVS). This verifies the cardholder's address by checking the information provided at the time of sale against the Issuer's records. If a transaction fails the AVS check, it will not automatically be declined. Instead, AVS acts as an advisory service and requires that the details of non-matched transactions be checked by your application."
										},
										{
											"name": "Gratuity",
											"item": [
												{
													"name": "In-line",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP Gratuity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"gratuity_amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"MANUAL\",\n        \"card\": {\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"09\",\n            \"expiry_year\": \"22\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request allows the merchant to specify what part of the original transaction amount is gratuity e.g For a $50 transaction, $5 of this transaction amount is gratuity. Insert gratuity amount in the gratuity_amount field in the body of the request."
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an authorization with a tip/gratuity amount included in the body of the request. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and gratuity_amount along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Adjust",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "CP Chip",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																			"",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																},
																"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
															},
															"response": []
														},
														{
															"name": "CP Adjust Amount/Tip",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"amount\": \"200000\"\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/adjustment",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{trn_id}}",
																		"adjustment"
																	]
																},
																"description": "This request allows the merchant to adjust the original amount of transaction typically to add gratuity. Adjusting does not change the status of the transaction. If a transaction needs to still be captured, please do so."
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an authorization and add a subsequent adjustment to that authorization to include a tip/gratuity amount. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Process an adjustment by entering the TRN_id into the URL of the adjustment request and including the tip/gratuity amount in the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												}
											],
											"description": "This folder will show examples of adding a tip/gratuity amount in a Customer Present authorization. We will show 2 examples where the tip/gratuity is included in the initial authorization or adjusting a previous authorization with a new tip/gratuity amount."
										},
										{
											"name": "EBT (US Only)",
											"item": [
												{
													"name": "Food Stamps Auth",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "EBT CP Manual",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": " {\r\n  \"account_name\": \"{{acc_name}}\",\r\n  \"type\": \"SALE\",\r\n  \"channel\": \"CP\",\r\n  \"amount\": \"156\",\r\n  \"currency\": \"CAD\",\r\n  \"country\": \"CA\",\r\n  \"capture_mode\": \"AUTO\",\r\n  \"reference\": \"{{reference}}\",\r\n  \"payment_method\": {\r\n    \"name\": \"Jane Doe\",\r\n    \"entry_mode\": \"MANUAL\",\r\n    \"card\": {\r\n      \"funding\": \"FOOD_STAMP\",\r\n      \"pin_block\": \"57E7B46D0E374C333D010000144000C2\",\r\n      \"number\": \"4003000123456781\",\r\n      \"expiry_month\": \"12\",\r\n      \"expiry_year\": \"20\"\r\n    }\r\n  }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an EBT authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and with the funding field set to FOOD_STAMP with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Cash Benefits Auth",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "EBT CP Swipe",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"154\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"SWIPE\",\r\n        \"card\": {\r\n            \"funding\": \"FOOD_STAMP\",\r\n            \"pin_block\": \"F26B23D6705EA6153D010000144000B8\",\r\n            \"track\": \";4003000123456781=25121011803939600000?\"\r\n        }\r\n    }\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an EBT authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and with the funding field set to CASH_BENEFITS with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs. For more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Refunds",
													"item": [
														{
															"name": "Previous Sale",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "EBT CP Swipe",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"154\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"SWIPE\",\r\n        \"card\": {\r\n            \"funding\": \"FOOD_STAMP\",\r\n            \"pin_block\": \"F26B23D6705EA6153D010000144000B8\",\r\n            \"track\": \";4003000123456781=25121011803939600000?\"\r\n        }\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "EBT Refund",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"refund"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process an EBT authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name and with the funding field set to FOOD_STAMP with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
														},
														{
															"name": "Standalone",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "EBT Standalone Refund",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"stdaloneref_trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																					"",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "idempotency",
																				"value": "12345",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"merchant_id\": \"{{mer_id}}\",\n    \"account_id\": \"{{tra_id}}\",\n    \"channel\": \"CP\",\n    \"type\": \"REFUND\",\n    \"amount\": \"20045\",\n    \"currency\": \"CAD\",\n    \"country\": \"CA\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"MANUAL\",\n        \"card\": {\n            \"funding\": \"FOOD_STAMP\",\n            \"number\": \"4242424242424242\",\n            \"expiry_month\": \"12\",\n            \"expiry_year\": \"20\"\n        }\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		},
																		"description": "This request refunds funds to a different card that is not associated with original sale transaction. As you can see in the body of request, card details for Jane Doe have been manually entered in order to send request back to this specific card."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to refund a standalone transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a transaction/refund by entering the account_name, card information, type=REFUND, and the funding filed set to FOOD_STAMP in the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
														}
													],
													"description": "This folder will show examples of processing refunds for EBT authorizations. We will show examples of both Linked Refunds and Standalone Refunds."
												},
												{
													"name": "Reversals",
													"item": [
														{
															"name": "Previous Auth",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "EBT CP Swipe",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"154\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"SWIPE\",\r\n        \"card\": {\r\n            \"funding\": \"FOOD_STAMP\",\r\n            \"pin_block\": \"F26B23D6705EA6153D010000144000B8\",\r\n            \"track\": \";4003000123456781=25121011803939600000?\"\r\n        }\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Reversal for prev sale auth",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"disabled": true
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/reversal",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{sale_trn_id}}",
																				"reversal"
																			]
																		},
																		"description": "This request reverses a previous sale transaction. On success, you will receive a \"REVERSED\" status.\r\n   \r\n For more info on a reversed sale transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process an EBT authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name and with the funding field set to FOOD_STAMP with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a reversal by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
														},
														{
															"name": "Previous Refund",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "EBT CP Swipe",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"154\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"SWIPE\",\r\n        \"card\": {\r\n            \"funding\": \"FOOD_STAMP\",\r\n            \"pin_block\": \"F26B23D6705EA6153D010000144000B8\",\r\n            \"track\": \";4003000123456781=25121011803939600000?\"\r\n        }\r\n    }\r\n}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "EBT Refund",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																					"\r",
																					"pm.environment.set(\"reference\",str);"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"refund"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "EBT Reversal for prev refund",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"disabled": true
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{refund_trn_id}}/reversal",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{refund_trn_id}}",
																				"reversal"
																			]
																		},
																		"description": "This request reverses a previous sale transaction. On success, you will receive a \"REVERSED\" status.\r\n   \r\n For more info on a reversed sale transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process an EBT authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and with the funding field set to FOOD_STAMP with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n4. Process a Reversal for a previous refund by entering the TRN_id into the URL of the Reversal For the Previous Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
														}
													],
													"description": "This folder will show examples of processing reversals for EBT authorizations. We will show examples of both reversals or previous authorizations and reversals of previous refunds."
												}
											],
											"description": "This folder will show examples of Electronic Benefits Transfer (EBT). EBT allows merchants to accept the Supplemental Nutrition Assistance Program (SNAP) cards to pay for food in a retail environment."
										},
										{
											"name": "Surcharge",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Chip Surcharge",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"12000\",\n    \"surcharge_amount\":\"2000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization that includes an additional merchant fee or surcharge amount. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and the surcharge amount set in the body of the request along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										},
										{
											"name": "Verify Card",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Verification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"currency\": \"USD\",\n    \"reference\": \"My Own Reference\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/verifications",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"verifications"
															]
														},
														"description": "This request verifys a card. As you can see in the body of the request, Jane Doe's card details to be verified are present. On success, the status of the transaction in the response will be \"verified\".\r\n\r\nFor more details on verifying a card, visit: https://developer.globalpay.com/api/verifications#/Verify/post_verifications"
													},
													"response": []
												}
											],
											"description": "### Verify Payment Token\n\nThis process flow is commonly used for merchants who want to verify a card card before processing an authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Verify payment method by entering the account_name and payment method info into the body of the request. Please [click here](https://developer.globalpay.com/api/verifications) to refer to Verifications API specs.EndFragment\n    \n\nFor more information see [Verification](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Interac (CA Only)",
											"item": [
												{
													"name": "Auth",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Interac Sale",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Accept-Encoding",
																		"value": "gzip",
																		"type": "text"
																	},
																	{
																		"key": "A",
																		"value": "B",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"103\",\r\n    \"cashback_amount\":\"100\",\r\n    \"surcharge_amount\":\"100\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"language\": \"fr-CA\",\r\n    \"device\": {\r\n        \"sequence_number\": \"000010011081\",\r\n        \"time\": \"2024-09-27T12:47:58.000Z\"\r\n    },\r\n    \"payment_method\": {\r\n        \"first_name\": \"Jane\",\r\n        \"last_name\": \"Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n            \"funding\": \"DEBIT\",\r\n            \"track\": \";0012030000000003=28122200897740000001?\",\r\n            \"account_type\": \"CHECKING\",\r\n            \"tag\":\"820219008407A0000002771010950500800080009A032209089C01005F280201245F2A0201245F3401019F02060000000010009F03060000000000009F080200029F090200019F10161502850400B100000000B280000000000000000000009F1A0201249F2608354C58202583C1B29F2701809F3303E0B0C89F34030403029F3501229F3602000E9F37044B17E5039F410400000003\"\r\n            \r\n        }\r\n    }\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	],
																	"query": [
																		{
																			"key": "Page",
																			"value": "2",
																			"disabled": true
																		}
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an INTERAC authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and with the funding field set to debit with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "PreAuth & Capture",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Interac Preauth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Accept-Encoding",
																		"value": "gzip",
																		"type": "text"
																	},
																	{
																		"key": "A",
																		"value": "B",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"103\",\r\n    \"cashback_amount\":\"100\",\r\n    \"surcharge_amount\":\"100\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"LATER\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"language\": \"fr-CA\",\r\n    \"device\": {\r\n        \"sequence_number\": \"000010011081\",\r\n        \"time\": \"2024-09-27T12:47:58.000Z\"\r\n    },\r\n    \"payment_method\": {\r\n        \"first_name\": \"Jane\",\r\n        \"last_name\": \"Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n            \"funding\": \"DEBIT\",\r\n            \"track\": \";0012030000000003=28122200897740000001?\",\r\n            \"account_type\": \"CHECKING\",\r\n            \"tag\":\"820219008407A0000002771010950500800080009A032209089C01005F280201245F2A0201245F3401019F02060000000010009F03060000000000009F080200029F090200019F10161502850400B100000000B280000000000000000000009F1A0201249F2608354C58202583C1B29F2701809F3303E0B0C89F34030403029F3501229F3602000E9F37044B17E5039F410400000003\"\r\n            \r\n        }\r\n    }\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	],
																	"query": [
																		{
																			"key": "Page",
																			"value": "2",
																			"disabled": true
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Capture",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Content-type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept-Encoding",
																		"value": "gzip"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"amount\":\"100\",\n    \"device\": {\n        \"sequence_number\": \"000010015040\"\n    },\n    \"payment_method\": {\n        \"card\": {\n            \"tag\": \"820219008407A0000002771010950500800080009A032209089C01005F280201245F2A0201245F3401019F02060000000010009F03060000000000009F080200029F090200019F10161502850400B100000000B280000000000000000000009F1A0201249F2608354C58202583C1B29F2701809F3303E0B0C89F34030403029F3501229F3602000E9F37044B17E5039F410400000003\"\n        }\n    }\n}"
																},
																"url": {
																	"raw": "https:/{{url}}/ucp/transactions/{{trn_id}}/capture",
																	"host": [
																		"https"
																	],
																	"port": "",
																	"path": [
																		"{{url}}",
																		"ucp",
																		"transactions",
																		"{{trn_id}}",
																		"capture"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an INTERAC Pre-authorization and capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name, the funding field set to debit with, and the capture mode set to LATER along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												},
												{
													"name": "Refunds",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Interac Sale",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																			"\r",
																			"pm.environment.set(\"reference\",str);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Content-type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "Accept-Encoding",
																		"value": "gzip",
																		"type": "text"
																	},
																	{
																		"key": "A",
																		"value": "B",
																		"type": "text",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"103\",\r\n    //\"cashback_amount\":\"100\",\r\n    //\"surcharge_amount\":\"100\",\r\n    \"currency\": \"CAD\",\r\n    \"country\": \"CA\",\r\n    \"capture_mode\": \"AUTO\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"language\": \"fr-CA\",\r\n    \"device\": {\r\n        \"sequence_number\": \"000010011081\",\r\n        \"time\": \"2024-09-27T12:47:58.000Z\"\r\n    },\r\n    \"payment_method\": {\r\n        \"first_name\": \"Jane\",\r\n        \"last_name\": \"Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n            \"funding\": \"DEBIT\",\r\n            \"track\": \";0012030000000003=28122200897740000001?\",\r\n            \"account_type\": \"CHECKING\",\r\n            \"tag\":\"820219008407A0000002771010950500800080009A032209089C01005F280201245F2A0201245F3401019F02060000000010009F03060000000000009F080200029F090200019F10161502850400B100000000B280000000000000000000009F1A0201249F2608354C58202583C1B29F2701809F3303E0B0C89F34030403029F3501229F3602000E9F37044B17E5039F410400000003\"\r\n            \r\n        }\r\n    }\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	],
																	"query": [
																		{
																			"key": "Page",
																			"value": "2",
																			"disabled": true
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Linked refund",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"disabled": true
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions",
																		"{{sale_trn_id}}",
																		"refund"
																	]
																},
																"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an INTERAC authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name, the funding field set to debit with, and the capture mode set to LATER along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
												}
											],
											"description": "This folder will show examples of the Canadian Debit Inter-Bank network known as INTERAC."
										}
									],
									"description": "Our API gives you full control over your transactions allowing you to capture, refund, or void them quickly and easily from your application. This guide goes through the potential lifecycle of a transaction and provides a sample code for each request type.\n\nFor more information see [Transactions ](https://developer.globalpay.com/docs/transaction-management#api) for an Overview."
								},
								{
									"name": "Card Storage",
									"item": [
										{
											"name": "Create Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to create a multi-use tokenized payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a multi-use payment token by entering the card data into the body and performing a tokenization request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n\nFor more information see [Card Storage](https://) for a step-by-step guide."
										},
										{
											"name": "Auth With Payment Token",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"type\": \"SALE\",\n    \"amount\": \"12\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This transaction auth request is the final step in completing a 3DS Auth.  The payment token retrieved in the first step of the process (Tokenization) and the authentication id retrieved in the last step (Obtain Result), are in the body of the request.\r\n\r\nOn successful authentication, a 00 result with be returned in response along with a TRN id.\r\n\r\nFor more information on 3DS Auth, please visit: https://developer.globalpay.com/api/3d-secure and https://developer.globalpay.com/api/3d-secure-two"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to create a payment token and authorize the payment. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a tokenized payment method by entering the account_name and card information into the Tokenize Single-use request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n3. Perform authorization by entering the account_name along with the necessary PMT_id into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) and [Card Storage](https://) for a step-by-step guide."
										},
										{
											"name": "Recurring Auth Tokenized Card",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Tokenize",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"pmt_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"pmt_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"pmt_reference\", jsonData.reference);\r",
																	"\r",
																	"tests[\"ID \" + pm.environment.get(\"pmt_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12345",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{token_acc_name}}\",\n    \"reference\": \"{{reference}}\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/payment-methods",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"payment-methods"
															]
														},
														"description": "This request stores a card on GP systems and returns a unique GP token that can be used to create future sale or refund transactions.\r\nIn the body of the request you can see that the card details are inputted into request along with a reference. This is a unique id that the merchant gives in order to identify this tokenization request.\r\nIn the response back, you should receive an id. This is the unique id that global payments has replaced the card details with.\r\n\r\nFor more info on tokenization, visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"brand_ref\", jsonData.payment_method.card.brand_reference);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															},
															{
																"key": "payment_method.storage_model",
																"value": "ALWAYS",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\":\"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															],
															"query": [
																{
																	"key": "",
																	"value": "",
																	"disabled": true
																}
															]
														},
														"description": "This request tokenizes as part of a transaction. The field \"storage_model\" stores the card if the field is present and the merchant has a TKA account. This can be checked by seeing if TKA account is in access token response.\r\n\r\n- \"storage_model\" can be ALWAYS | ON_SUCCESS\r\n- ALWAYS= Always create a token even if card declines\r\n- ON_SUCCESS - Only tokenize card if authorized \r\n\r\nIf tokenized, a new field in \"payment_method\" called id is returned  that contains the token \r\n\r\nFor more details on tokenization, please visit: https://developer.globalpay.com/api/payment-methods-tokenization#/Create/post_payment_methods"
													},
													"response": []
												},
												{
													"name": "Recurring Payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "X-GP-Idempotency",
																"value": "12348",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CNP\",\n    \"capture_mode\": \"AUTO\",\n    \"type\": \"SALE\",\n    \"amount\": \"100\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"initiator\": \"MERCHANT\",\n    \"stored_credential\": {\n        \"model\": \"RECURRING\",\n        \"reason\": \"INCREMENTAL\",\n        \"sequence\": \"SUBSEQUENT\"\n    },\n    \"payment_method\": {\n        \"name\": \"Jane\",\n        \"entry_mode\": \"ECOM\",\n        \"id\": \"{{pmt_id}}\",\n        \"card\": {\n            \"brand_reference\": \"{{brand_ref}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CNP ECOM transaction (Customer not present).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" in body of request is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CNP AUTH request, visit here: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process recurring auth transactions with a tokenized card. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Create a single-use payment token by entering the card data into the body and performing Tokenize Single Use. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n    \n3. Initiate authorization by entering the account_name and PMT_ID into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n4. A recurring payment can be set up by entering account_name and PMT_id into the body of the request along with the brand reference field return from the original authorization. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Card Storage](https://) and [Transactions](https://) for a step-by-step guide."
										}
									],
									"description": "With our API, you can securely store card data with Global Payments and receive a token representation of the card. This token can be stored with no increased PCI Compliance requirements.\n\nTokens can be used for recurring billing or to enable one-click checkout. You can add, delete, and update stored cards.\n\nIn this guide, you'll learn how to store cards (Payment Methods) and how to charge them.\n\nFor more information see [Card Storage](https://developer.globalpay.com/docs/card-storage#api) for an Overview."
								},
								{
									"name": "Encryption",
									"item": [
										{
											"name": "Chip",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "CP Chip",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"funding\": \"DEBIT\",\n        \"track\": \"6ntnzvADzdWnrfh9QFEunPhmgGaH+kBgxREKJuhYeeWsSoBko6OBew==\",\n        \"track_number\": \"2\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        },\n        \"encryption\": {\n            \"version\": \"05\",\n            \"method\": \"KSN\",\n            \"info\": \"//89P4IAAKACpA==\",\n            \"type\": \"ASCII\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with the encryption data block. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform authorization by entering the account_name and the encryption object with the method set to KSN and version to 05 along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										},
										{
											"name": "Swipe",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "CP SWIPE",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"SWIPE\",\n        \"encryption\": {\n            \"method\": \"KSN\",\n            \"version\": \"05\",\n            \"info\": \"//89P4IADOAD4A==\"\n        },\n        \"card\": {\n            \"track_number\": \"2\",\n            \"track\": \"iaQbFN0EqXK3x8YHgh2ogmylKCG5J11v9BcOaOyCSVQ=\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Swipe transaction (Customer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with the encryption data block. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform authorization by entering the account_name and the encryption object with the method set to KSN and version to 05 along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										}
									],
									"description": "This folder will show examples of Card Track Data Encryption using the Triple DES DUKPT standard."
								},
								{
									"name": "Refunds",
									"item": [
										{
											"name": "Refunds for Previous Auth",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "CP Chip",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Linked Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"refund"
															]
														},
														"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to refund a previous authorization. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/payment-methods-tokenization) to refer to the API specs.\n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Standalone Refund",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Standalone Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"stdaloneref_trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"REFUND\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to refund a standalone transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction/refund by entering the account_name, card information, and type=REFUND into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										}
									],
									"description": "Once a transaction is captured and the funds deducted from the customer's account, it is possible to refund the full or partial amount back to them without the need to obtain their card details again.\n\nMerchants can process a refund for any amount up to 115% of the original transaction value. The amount and currency must be specified in this request.\n\nFor more information see [Refunds](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
								},
								{
									"name": "Reversal",
									"item": [
										{
											"name": "Reversal For Previous Auth",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "CP Chip",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Reversal For Previous Auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/reversal",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"reversal"
															]
														},
														"description": "This request reverses a previous sale transaction. On success, you will receive a \"REVERSED\" status.\r\n   \r\n For more info on a reversed sale transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to reverse or cancel a previous transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a reversal by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://developer.globalpay.com/docs/transaction-management#api) for a step-by-step guide."
										},
										{
											"name": "Reversal For Previous Refund",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\n\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\n    \n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\n    \n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\n    \n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\n    \n\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\n\nFor more info on retrieving an access token, visit: [https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken](https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken)"
													},
													"response": []
												},
												{
													"name": "CP Chip",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 4000); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);",
																	"",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"channel\": \"CP\",\n    \"type\": \"SALE\",\n    \"capture_mode\": \"AUTO\",\n    \"amount\": \"10000\",\n    \"currency\": \"USD\",\n    \"reference\": \"{{reference}}\",\n    \"country\": \"US\",\n    \"payment_method\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\",\n        \"entry_mode\": \"CHIP\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "This request is for authorising a CP Chip transaction (Cutomer present eg. in shop at terminal).\r\n\r\n- Funds can either be captured (taken) from customer automatically or else at a later stage. \"capture_mode\" is where you can edit the capture status. \r\n    - \"LATER\" =  funds will be taken from customer at a later stage. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'preauthorized'.\r\n        A 'Complete Capture' request is required to complete transaction.\r\n    - \"AUTO\" = funds will be taken from the customer automatically. A Successful response should return a transaction id (TRN_....) and should indicate that transaction status is 'captured'. \r\n        No additional request is necessary.\r\n\r\n- Account name is which account of the api you want to send the request to, so in this case it is Transactions. Other accounts available include Disputes, Settlements and Tokenizations.\r\n- Amount is the amount of money being charged to the customers card. How the amount is written is that \"100\" equates to $1.00, not $100.\r\n- Payment Method is how the customer has paid for the transaction. Here we see if it was ECOM (website), MOTO (over the phone) and their card details.\r\n- Reference is a specific unique reference for each transaction given by the merchant. This could be an order number or an invoice number etc.\r\n\r\nFor more details on a CP AUTH request, visit: https://developer.globalpay.com/api/transactions#/Create/post_transactions"
													},
													"response": []
												},
												{
													"name": "Linked Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{sale_trn_id}}",
																"refund"
															]
														},
														"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
													},
													"response": []
												},
												{
													"name": "Reversal For Previous Refund",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var str = String(\"00000000\"+ Math.floor(Math.random()*100000000) + 1).slice(-8);\r",
																	"\r",
																	"pm.environment.set(\"reference\",str);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"disabled": true
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions/{{refund_trn_id}}/reversal",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions",
																"{{refund_trn_id}}",
																"reversal"
															]
														},
														"description": "This request reverses a previous refund transaction. On success of reversal of refund, status will be \"REVERSED\"\r\n\r\n For more info on a reversed transaction request, visit: https://developer.globalpay.com/api/transactions#/Reverse/post_transactions__id__reversal"
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to reverse a previous refund. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Create a transaction by entering the account_name and card information into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Process a reversal for a previous refund by entering the TRN_id into the URL of the Reversal For Previous Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Transaction Management](https://) for a step-by-step guide."
										}
									],
									"description": "Before a transaction is captured, it is possible to Void an Authorization request. If the transaction was already placed in the next settlement file (or batch), this will remove it. If using Delayed Capture, this will cancel the initial authorization. If the transaction was settled or batched, then it cannot be voided. This request requires the ID from the original transaction.\n\nFor more information see [Reversals](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
								},
								{
									"name": "DCC",
									"item": [
										{
											"name": "DCC Opt In",
											"item": [
												{
													"name": "Authorization",
													"item": [
														{
															"name": "Access Token",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"token\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																			"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																			"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																			"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																			"\r",
																			"var date = new Date();\r",
																			"var year = date.getUTCFullYear()\r",
																			"var month = date.getUTCMonth()+1\r",
																			"var date = date.getUTCDate()\r",
																			"\r",
																			"var full_date = year+\"-\"+month+\"-\"+date\r",
																			"\r",
																			"if(month < 10){\r",
																			"    full_date = year+\"-0\"+month+\"-\"+date\r",
																			"}else if(month > 9){\r",
																			"    full_date = year+\"-\"+month+\"-\"+date\r",
																			"}\r",
																			"\r",
																			"var length = jsonData.scope.accounts.length\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																			"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																			"\r",
																			"//Add new accounts in this loop\r",
																			"for(var x = 0; x < length; x++){\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																			"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																			"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																			"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"    \r",
																			"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																			"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																			"    }\r",
																			"\r",
																			"}\r",
																			"\r",
																			"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var date = new Date();",
																			"",
																			"",
																			"nonceDate = date.toISOString(); ",
																			"pm.environment.set(\"nonce\", nonceDate);",
																			"",
																			"var nonce = pm.environment.get(\"nonce\");",
																			"",
																			"",
																			"var app_key = pm.environment.get(\"app_key\");",
																			"var s512Txt = nonce +''+app_key;",
																			"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																			"",
																			"//var secret = SHA512(s512Txt);",
																			"pm.environment.set(\"secret\", secret);",
																			"",
																			"",
																			"",
																			"/*",
																			"",
																			"NOT USE as replace this function with CryptoJS.SHA512",
																			"",
																			"* Secure Hash Algorithm (SHA512)",
																			"* http://www.happycode.info/",
																			"*/",
																			"",
																			"function SHA512(str) {",
																			" function int64(msint_32, lsint_32) {",
																			" this.highOrder = msint_32;",
																			" this.lowOrder = lsint_32;",
																			" }",
																			"",
																			" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																			" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																			" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																			" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																			"",
																			" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																			" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																			" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																			" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																			" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																			" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																			" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																			" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																			" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																			" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																			" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																			" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																			" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																			" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																			" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																			" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																			" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																			" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																			" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																			" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																			" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																			" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																			" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																			" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																			" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																			" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																			" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																			" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																			" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																			" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																			" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																			" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																			" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																			" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																			" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																			" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																			" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																			" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																			" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																			" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																			"",
																			" var W = new Array(64);",
																			" var a, b, c, d, e, f, g, h, i, j;",
																			" var T1, T2;",
																			" var charsize = 8;",
																			"",
																			" function utf8_encode(str) {",
																			" return unescape(encodeURIComponent(str));",
																			" }",
																			"",
																			" function str2binb(str) {",
																			" var bin = [];",
																			" var mask = (1 << charsize) - 1;",
																			" var len = str.length * charsize;",
																			"",
																			" for (var i = 0; i < len; i += charsize) {",
																			" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																			" }",
																			"",
																			" return bin;",
																			" }",
																			"",
																			" function binb2hex(binarray) {",
																			" var hex_tab = '0123456789abcdef';",
																			" var str = '';",
																			" var length = binarray.length * 4;",
																			" var srcByte;",
																			"",
																			" for (var i = 0; i < length; i += 1) {",
																			" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																			" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																			" }",
																			"",
																			" return str;",
																			" }",
																			"",
																			" function safe_add_2(x, y) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																			" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_4(a, b, c, d) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function safe_add_5(a, b, c, d, e) {",
																			" var lsw, msw, lowOrder, highOrder;",
																			"",
																			" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																			" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																			" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																			" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																			" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																			"",
																			" return new int64(highOrder, lowOrder);",
																			" }",
																			"",
																			" function maj(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function ch(x, y, z) {",
																			" return new int64(",
																			" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																			" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																			" );",
																			" }",
																			"",
																			" function rotr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																			" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																			" );",
																			" }",
																			" }",
																			"",
																			" function sigma0(x) {",
																			" var rotr28 = rotr(x, 28);",
																			" var rotr34 = rotr(x, 34);",
																			" var rotr39 = rotr(x, 39);",
																			"",
																			" return new int64(",
																			" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																			" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																			" );",
																			" }",
																			"",
																			" function sigma1(x) {",
																			" var rotr14 = rotr(x, 14);",
																			" var rotr18 = rotr(x, 18);",
																			" var rotr41 = rotr(x, 41);",
																			"",
																			" return new int64(",
																			" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																			" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma0(x) {",
																			" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																			"",
																			" return new int64(",
																			" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																			" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																			" );",
																			" }",
																			"",
																			" function gamma1(x) {",
																			" var rotr19 = rotr(x, 19);",
																			" var rotr61 = rotr(x, 61);",
																			" var shr6 = shr(x, 6);",
																			"",
																			" return new int64(",
																			" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																			" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																			" );",
																			" }",
																			"",
																			" function shr(x, n) {",
																			" if (n <= 32) {",
																			" return new int64(",
																			" x.highOrder >>> n,",
																			" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																			" );",
																			" } else {",
																			" return new int64(",
																			" 0,",
																			" x.highOrder << (32 - n)",
																			" );",
																			" }",
																			" }",
																			"",
																			" str = utf8_encode(str);",
																			" strlen = str.length*charsize;",
																			" str = str2binb(str);",
																			"",
																			" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																			" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																			"",
																			" for (var i = 0; i < str.length; i += 32) {",
																			" a = H[0];",
																			" b = H[1];",
																			" c = H[2];",
																			" d = H[3];",
																			" e = H[4];",
																			" f = H[5];",
																			" g = H[6];",
																			" h = H[7];",
																			"",
																			" for (var j = 0; j < 80; j++) {",
																			" if (j < 16) {",
																			" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																			" } else {",
																			" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																			" }",
																			"",
																			" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																			" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																			" h = g;",
																			" g = f;",
																			" f = e;",
																			" e = safe_add_2(d, T1);",
																			" d = c;",
																			" c = b;",
																			" b = a;",
																			" a = safe_add_2(T1, T2);",
																			" }",
																			"",
																			" H[0] = safe_add_2(a, H[0]);",
																			" H[1] = safe_add_2(b, H[1]);",
																			" H[2] = safe_add_2(c, H[2]);",
																			" H[3] = safe_add_2(d, H[3]);",
																			" H[4] = safe_add_2(e, H[4]);",
																			" H[5] = safe_add_2(f, H[5]);",
																			" H[6] = safe_add_2(g, H[6]);",
																			" H[7] = safe_add_2(h, H[7]);",
																			" }",
																			"",
																			" var binarray = [];",
																			" for (var i = 0; i < H.length; i++) {",
																			" binarray.push(H[i].highOrder);",
																			" binarray.push(H[i].lowOrder);",
																			" }",
																			" return binb2hex(binarray);",
																			"}",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"name": "Content-Type",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/accesstoken",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"accesstoken"
																	]
																},
																"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
															},
															"response": []
														},
														{
															"name": "Rate Lookup",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"\r",
																			"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n            \"track\": \";4761739001010036=25122011184404889?\",\r\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n        }\r\n    }\r\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/currency-conversions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"currency-conversions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "ECOM Sale",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.environment.unset(\"trn_id\");\r",
																			"\r",
																			"var jsonData = JSON.parse(responseBody);\r",
																			"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																			"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																			"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																			"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																			"\r",
																			"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																			"\r",
																			"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																			"\r",
																			"pm.test(\"Successful POST request\", function () {\r",
																			"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Status code name has string\", function () {\r",
																			"    pm.response.to.have.status(\"OK\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	},
																	{
																		"key": "X-GP-Version",
																		"value": "{{version}}",
																		"type": "text"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token}}",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																},
																"url": {
																	"raw": "https://{{url}}/ucp/transactions",
																	"protocol": "https",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"ucp",
																		"transactions"
																	]
																}
															},
															"response": []
														}
													],
													"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
												},
												{
													"name": "Refund",
													"item": [
														{
															"name": "Linked",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n            \"track\": \";4761739001010036=25122011184404889?\",\r\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n        }\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"refund_trn_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"disabled": true
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{sale_trn_id}}/refund",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{sale_trn_id}}",
																				"refund"
																			]
																		},
																		"description": "This request is for refunding a previous sale transaction. It uses the sale_trn_id from most recent sale transaction. You can only refund a transaction that has the status 'CAPTURED' ie. you can not process a refund for a transaction that is being captured at a later stage.\r\n\r\nFor more details on a refund request, visit: https://developer.globalpay.com/api/transactions#/Refund/post_transactions__id__refund"
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up for CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Perform authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n4. Process a refund by entering the TRN_id into the URL of the Linked Refund request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Standalone",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Refund standalone",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"REFUND\",\n    \"channel\": \"CNP\",\n    \"amount\": \"CP\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency_conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to refund a standalone transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n3. Create a transaction/refund by entering the account_name, card information, and type=REFUND into the body of the Transaction request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) & [Transaction Management](https://) for a step-by-step guide."
														}
													],
													"description": "Once a DCC transaction is captured and the funds deducted from the customer's account, it is possible to refund the full or partial amount back to them without the need to obtain their card details again.\n\nMerchants can process a refund for any amount up to 115% of the original transaction value. The amount and currency must be specified in this request.\n\nFor more information see [Refunds ](https://developer.globalpay.com/docs/transaction-management#api) for an overview."
												},
												{
													"name": "Capture",
													"item": [
														{
															"name": "Same Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": ""
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request without changing the amount. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Decreased Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"100\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"amount\":\"50\"\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request, decreasing the amount of the capture. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														},
														{
															"name": "Increase Amount",
															"item": [
																{
																	"name": "Access Token",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"token\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																					"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																					"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																					"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																					"\r",
																					"var date = new Date();\r",
																					"var year = date.getUTCFullYear()\r",
																					"var month = date.getUTCMonth()+1\r",
																					"var date = date.getUTCDate()\r",
																					"\r",
																					"var full_date = year+\"-\"+month+\"-\"+date\r",
																					"\r",
																					"if(month < 10){\r",
																					"    full_date = year+\"-0\"+month+\"-\"+date\r",
																					"}else if(month > 9){\r",
																					"    full_date = year+\"-\"+month+\"-\"+date\r",
																					"}\r",
																					"\r",
																					"var length = jsonData.scope.accounts.length\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																					"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																					"\r",
																					"//Add new accounts in this loop\r",
																					"for(var x = 0; x < length; x++){\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																					"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																					"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																					"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"    \r",
																					"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																					"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																					"    }\r",
																					"\r",
																					"}\r",
																					"\r",
																					"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"var date = new Date();",
																					"",
																					"",
																					"nonceDate = date.toISOString(); ",
																					"pm.environment.set(\"nonce\", nonceDate);",
																					"",
																					"var nonce = pm.environment.get(\"nonce\");",
																					"",
																					"",
																					"var app_key = pm.environment.get(\"app_key\");",
																					"var s512Txt = nonce +''+app_key;",
																					"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																					"",
																					"//var secret = SHA512(s512Txt);",
																					"pm.environment.set(\"secret\", secret);",
																					"",
																					"",
																					"",
																					"/*",
																					"",
																					"NOT USE as replace this function with CryptoJS.SHA512",
																					"",
																					"* Secure Hash Algorithm (SHA512)",
																					"* http://www.happycode.info/",
																					"*/",
																					"",
																					"function SHA512(str) {",
																					" function int64(msint_32, lsint_32) {",
																					" this.highOrder = msint_32;",
																					" this.lowOrder = lsint_32;",
																					" }",
																					"",
																					" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																					" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																					" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																					" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																					"",
																					" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																					" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																					" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																					" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																					" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																					" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																					" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																					" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																					" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																					" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																					" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																					" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																					" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																					" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																					" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																					" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																					" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																					" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																					" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																					" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																					" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																					" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																					" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																					" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																					" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																					" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																					" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																					" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																					" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																					" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																					" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																					" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																					" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																					" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																					" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																					" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																					" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																					" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																					" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																					" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																					"",
																					" var W = new Array(64);",
																					" var a, b, c, d, e, f, g, h, i, j;",
																					" var T1, T2;",
																					" var charsize = 8;",
																					"",
																					" function utf8_encode(str) {",
																					" return unescape(encodeURIComponent(str));",
																					" }",
																					"",
																					" function str2binb(str) {",
																					" var bin = [];",
																					" var mask = (1 << charsize) - 1;",
																					" var len = str.length * charsize;",
																					"",
																					" for (var i = 0; i < len; i += charsize) {",
																					" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																					" }",
																					"",
																					" return bin;",
																					" }",
																					"",
																					" function binb2hex(binarray) {",
																					" var hex_tab = '0123456789abcdef';",
																					" var str = '';",
																					" var length = binarray.length * 4;",
																					" var srcByte;",
																					"",
																					" for (var i = 0; i < length; i += 1) {",
																					" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																					" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																					" }",
																					"",
																					" return str;",
																					" }",
																					"",
																					" function safe_add_2(x, y) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																					" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_4(a, b, c, d) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function safe_add_5(a, b, c, d, e) {",
																					" var lsw, msw, lowOrder, highOrder;",
																					"",
																					" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																					" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																					" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																					" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																					" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																					"",
																					" return new int64(highOrder, lowOrder);",
																					" }",
																					"",
																					" function maj(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function ch(x, y, z) {",
																					" return new int64(",
																					" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																					" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																					" );",
																					" }",
																					"",
																					" function rotr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																					" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																					" );",
																					" }",
																					" }",
																					"",
																					" function sigma0(x) {",
																					" var rotr28 = rotr(x, 28);",
																					" var rotr34 = rotr(x, 34);",
																					" var rotr39 = rotr(x, 39);",
																					"",
																					" return new int64(",
																					" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																					" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																					" );",
																					" }",
																					"",
																					" function sigma1(x) {",
																					" var rotr14 = rotr(x, 14);",
																					" var rotr18 = rotr(x, 18);",
																					" var rotr41 = rotr(x, 41);",
																					"",
																					" return new int64(",
																					" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																					" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma0(x) {",
																					" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																					"",
																					" return new int64(",
																					" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																					" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																					" );",
																					" }",
																					"",
																					" function gamma1(x) {",
																					" var rotr19 = rotr(x, 19);",
																					" var rotr61 = rotr(x, 61);",
																					" var shr6 = shr(x, 6);",
																					"",
																					" return new int64(",
																					" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																					" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																					" );",
																					" }",
																					"",
																					" function shr(x, n) {",
																					" if (n <= 32) {",
																					" return new int64(",
																					" x.highOrder >>> n,",
																					" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																					" );",
																					" } else {",
																					" return new int64(",
																					" 0,",
																					" x.highOrder << (32 - n)",
																					" );",
																					" }",
																					" }",
																					"",
																					" str = utf8_encode(str);",
																					" strlen = str.length*charsize;",
																					" str = str2binb(str);",
																					"",
																					" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																					" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																					"",
																					" for (var i = 0; i < str.length; i += 32) {",
																					" a = H[0];",
																					" b = H[1];",
																					" c = H[2];",
																					" d = H[3];",
																					" e = H[4];",
																					" f = H[5];",
																					" g = H[6];",
																					" h = H[7];",
																					"",
																					" for (var j = 0; j < 80; j++) {",
																					" if (j < 16) {",
																					" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																					" } else {",
																					" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																					" }",
																					"",
																					" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																					" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																					" h = g;",
																					" g = f;",
																					" f = e;",
																					" e = safe_add_2(d, T1);",
																					" d = c;",
																					" c = b;",
																					" b = a;",
																					" a = safe_add_2(T1, T2);",
																					" }",
																					"",
																					" H[0] = safe_add_2(a, H[0]);",
																					" H[1] = safe_add_2(b, H[1]);",
																					" H[2] = safe_add_2(c, H[2]);",
																					" H[3] = safe_add_2(d, H[3]);",
																					" H[4] = safe_add_2(e, H[4]);",
																					" H[5] = safe_add_2(f, H[5]);",
																					" H[6] = safe_add_2(g, H[6]);",
																					" H[7] = safe_add_2(h, H[7]);",
																					" }",
																					"",
																					" var binarray = [];",
																					" for (var i = 0; i < H.length; i++) {",
																					" binarray.push(H[i].highOrder);",
																					" binarray.push(H[i].lowOrder);",
																					" }",
																					" return binb2hex(binarray);",
																					"}",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disabledSystemHeaders": {
																			"content-type": true
																		}
																	},
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/accesstoken",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"accesstoken"
																			]
																		},
																		"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"100\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "ECOM Sale",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.environment.unset(\"trn_id\");\r",
																					"\r",
																					"var jsonData = JSON.parse(responseBody);\r",
																					"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																					"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																					"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																					"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																					"\r",
																					"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"100\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    \"currency-conversion\": {\n        \"id\": \"{{ccs_id}}\"\n    }\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Rate Lookup (Increase)",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"var jsonData = JSON.parse(responseBody);\r",
																					"\r",
																					"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																					"\r",
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"150\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/currency-conversions",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"currency-conversions"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Complete Capture",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																					"\r",
																					"pm.test(\"Successful POST request\", function () {\r",
																					"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Status code name has string\", function () {\r",
																					"    pm.response.to.have.status(\"OK\");\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"name": "Content-Type",
																				"type": "text"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer {{token}}"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "X-GP-Version",
																				"value": "{{version}}",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\r\n    \"amount\":\"50\"\r\n}"
																		},
																		"url": {
																			"raw": "https://{{url}}/ucp/transactions/{{trn_id}}/capture",
																			"protocol": "https",
																			"host": [
																				"{{url}}"
																			],
																			"path": [
																				"ucp",
																				"transactions",
																				"{{trn_id}}",
																				"capture"
																			]
																		},
																		"description": "This request must be sent in order to complete a 'Capture Later' transaction request. By sending this request, the funds will be now taken from the customers account. \r\nIf transaction is successful, you will receive back response that gives transaction id of first request (Capture Later req) and the staus of the transaction should be 'CAPTURED'."
																	},
																	"response": []
																}
															],
															"description": "This process flow is commonly used for merchants who want to process a pre-authorization with a DCC rate look-up CCS_ID in the transaction and complete the capture. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform pre-authorization by entering the account_name & the CCS_ID from the Rate Look Up along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n4. Complete the transaction by entering the TRN_id into the URL of the Complete Capture request, increasing the amount of the capture. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
														}
													],
													"description": "This process flow is commonly used for merchants who want to process a pre-authorization and complete the capture. In the subfolders below we will show the flows when a merchant Same Amount, Decreased Amount, and Increased amounts.\n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
												}
											],
											"description": "This process flow is commonly used for merchants who want to create auths, refunds, and captures when opting into DCC transactions.\n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										},
										{
											"name": "DCC Opt-Out",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Rate Lookup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\r\n        \"card\": {\r\n        \t\r\n             \"track\": \";4761739001010036=25122011184404889?\",\r\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\r\n    \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/currency-conversions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"currency-conversions"
															]
														}
													},
													"response": []
												},
												{
													"name": "ECOM Sale",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"10\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"name\": \"Jane Doe\",\n        \"entry_mode\": \"CONTACTLESS_CHIP\",\n        \"card\": {\n        \t\n             \"track\": \";4761739001010036=25122011184404889?\",\n             \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n    \t}\n    },\n    // In an Opt-Out scenario, simply pass the payer_currency with the same value as base transaction currency\n   \"currency_conversion\": {\n        \"payer_currency\": \"EUR\"\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														}
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform authorization by entering the account_name & not passing the CCS_ID from the Rate Look Up. In an Opt-Out scenario, simply pass the payer_currency with the same value as the base transaction currency along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										},
										{
											"name": "DCC Not Available",
											"item": [
												{
													"name": "Access Token",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"token\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
																	"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
																	"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
																	"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
																	"\r",
																	"var date = new Date();\r",
																	"var year = date.getUTCFullYear()\r",
																	"var month = date.getUTCMonth()+1\r",
																	"var date = date.getUTCDate()\r",
																	"\r",
																	"var full_date = year+\"-\"+month+\"-\"+date\r",
																	"\r",
																	"if(month < 10){\r",
																	"    full_date = year+\"-0\"+month+\"-\"+date\r",
																	"}else if(month > 9){\r",
																	"    full_date = year+\"-\"+month+\"-\"+date\r",
																	"}\r",
																	"\r",
																	"var length = jsonData.scope.accounts.length\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
																	"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
																	"\r",
																	"//Add new accounts in this loop\r",
																	"for(var x = 0; x < length; x++){\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'transaction_processing_dcc') {\r",
																	"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
																	"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
																	"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"    \r",
																	"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
																	"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
																	"    }\r",
																	"\r",
																	"}\r",
																	"\r",
																	"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var date = new Date();",
																	"",
																	"",
																	"nonceDate = date.toISOString(); ",
																	"pm.environment.set(\"nonce\", nonceDate);",
																	"",
																	"var nonce = pm.environment.get(\"nonce\");",
																	"",
																	"",
																	"var app_key = pm.environment.get(\"app_key\");",
																	"var s512Txt = nonce +''+app_key;",
																	"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
																	"",
																	"//var secret = SHA512(s512Txt);",
																	"pm.environment.set(\"secret\", secret);",
																	"",
																	"",
																	"",
																	"/*",
																	"",
																	"NOT USE as replace this function with CryptoJS.SHA512",
																	"",
																	"* Secure Hash Algorithm (SHA512)",
																	"* http://www.happycode.info/",
																	"*/",
																	"",
																	"function SHA512(str) {",
																	" function int64(msint_32, lsint_32) {",
																	" this.highOrder = msint_32;",
																	" this.lowOrder = lsint_32;",
																	" }",
																	"",
																	" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
																	" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
																	" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
																	" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
																	"",
																	" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
																	" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
																	" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
																	" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
																	" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
																	" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
																	" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
																	" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
																	" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
																	" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
																	" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
																	" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
																	" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
																	" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
																	" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
																	" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
																	" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
																	" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
																	" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
																	" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
																	" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
																	" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
																	" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
																	" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
																	" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
																	" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
																	" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
																	" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
																	" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
																	" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
																	" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
																	" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
																	" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
																	" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
																	" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
																	" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
																	" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
																	" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
																	" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
																	" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
																	"",
																	" var W = new Array(64);",
																	" var a, b, c, d, e, f, g, h, i, j;",
																	" var T1, T2;",
																	" var charsize = 8;",
																	"",
																	" function utf8_encode(str) {",
																	" return unescape(encodeURIComponent(str));",
																	" }",
																	"",
																	" function str2binb(str) {",
																	" var bin = [];",
																	" var mask = (1 << charsize) - 1;",
																	" var len = str.length * charsize;",
																	"",
																	" for (var i = 0; i < len; i += charsize) {",
																	" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
																	" }",
																	"",
																	" return bin;",
																	" }",
																	"",
																	" function binb2hex(binarray) {",
																	" var hex_tab = '0123456789abcdef';",
																	" var str = '';",
																	" var length = binarray.length * 4;",
																	" var srcByte;",
																	"",
																	" for (var i = 0; i < length; i += 1) {",
																	" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
																	" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
																	" }",
																	"",
																	" return str;",
																	" }",
																	"",
																	" function safe_add_2(x, y) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
																	" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_4(a, b, c, d) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function safe_add_5(a, b, c, d, e) {",
																	" var lsw, msw, lowOrder, highOrder;",
																	"",
																	" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
																	" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
																	" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
																	" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
																	" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
																	"",
																	" return new int64(highOrder, lowOrder);",
																	" }",
																	"",
																	" function maj(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function ch(x, y, z) {",
																	" return new int64(",
																	" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
																	" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
																	" );",
																	" }",
																	"",
																	" function rotr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
																	" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
																	" );",
																	" }",
																	" }",
																	"",
																	" function sigma0(x) {",
																	" var rotr28 = rotr(x, 28);",
																	" var rotr34 = rotr(x, 34);",
																	" var rotr39 = rotr(x, 39);",
																	"",
																	" return new int64(",
																	" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
																	" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
																	" );",
																	" }",
																	"",
																	" function sigma1(x) {",
																	" var rotr14 = rotr(x, 14);",
																	" var rotr18 = rotr(x, 18);",
																	" var rotr41 = rotr(x, 41);",
																	"",
																	" return new int64(",
																	" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
																	" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma0(x) {",
																	" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
																	"",
																	" return new int64(",
																	" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
																	" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
																	" );",
																	" }",
																	"",
																	" function gamma1(x) {",
																	" var rotr19 = rotr(x, 19);",
																	" var rotr61 = rotr(x, 61);",
																	" var shr6 = shr(x, 6);",
																	"",
																	" return new int64(",
																	" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
																	" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
																	" );",
																	" }",
																	"",
																	" function shr(x, n) {",
																	" if (n <= 32) {",
																	" return new int64(",
																	" x.highOrder >>> n,",
																	" x.lowOrder >>> n | (x.highOrder << (32 - n))",
																	" );",
																	" } else {",
																	" return new int64(",
																	" 0,",
																	" x.highOrder << (32 - n)",
																	" );",
																	" }",
																	" }",
																	"",
																	" str = utf8_encode(str);",
																	" strlen = str.length*charsize;",
																	" str = str2binb(str);",
																	"",
																	" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
																	" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
																	"",
																	" for (var i = 0; i < str.length; i += 32) {",
																	" a = H[0];",
																	" b = H[1];",
																	" c = H[2];",
																	" d = H[3];",
																	" e = H[4];",
																	" f = H[5];",
																	" g = H[6];",
																	" h = H[7];",
																	"",
																	" for (var j = 0; j < 80; j++) {",
																	" if (j < 16) {",
																	" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
																	" } else {",
																	" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
																	" }",
																	"",
																	" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
																	" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
																	" h = g;",
																	" g = f;",
																	" f = e;",
																	" e = safe_add_2(d, T1);",
																	" d = c;",
																	" c = b;",
																	" b = a;",
																	" a = safe_add_2(T1, T2);",
																	" }",
																	"",
																	" H[0] = safe_add_2(a, H[0]);",
																	" H[1] = safe_add_2(b, H[1]);",
																	" H[2] = safe_add_2(c, H[2]);",
																	" H[3] = safe_add_2(d, H[3]);",
																	" H[4] = safe_add_2(e, H[4]);",
																	" H[5] = safe_add_2(f, H[5]);",
																	" H[6] = safe_add_2(g, H[6]);",
																	" H[7] = safe_add_2(h, H[7]);",
																	" }",
																	"",
																	" var binarray = [];",
																	" for (var i = 0; i < H.length; i++) {",
																	" binarray.push(H[i].highOrder);",
																	" binarray.push(H[i].lowOrder);",
																	" }",
																	" return binb2hex(binarray);",
																	"}",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"name": "Content-Type",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/accesstoken",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"accesstoken"
															]
														},
														"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
													},
													"response": []
												},
												{
													"name": "Rate Lookup Not Available",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"\r",
																	"postman.setEnvironmentVariable(\"ccs_id\", jsonData.id);\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"account_name\": \"{{acc_name}}\",\r\n    \"model\": \"FROM_TRANSACTION_CURRENCY\",\r\n    \"transaction_type\": \"SALE\",\r\n    \"channel\": \"CP\",\r\n    \"amount\": \"10000\",\r\n    \"currency\": \"EUR\",\r\n    \"country\": \"GB\",\r\n    \"reference\": \"{{reference}}\",\r\n    \"payment_method\": {\r\n        \"name\": \"Jane Doe\",\r\n        \"entry_mode\": \"SWIPE\",\r\n        \"card\": {\r\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\"\r\n        }\r\n    }\r\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/currency-conversions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"currency-conversions"
															]
														}
													},
													"response": []
												},
												{
													"name": "ECOM Sale with no DCC",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.unset(\"trn_id\");\r",
																	"\r",
																	"var jsonData = JSON.parse(responseBody);\r",
																	"postman.setEnvironmentVariable(\"trn_id\", jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"sale_trn_id\",jsonData.id);\r",
																	"postman.setEnvironmentVariable(\"reference\", jsonData.reference);\r",
																	"postman.setEnvironmentVariable(\"batch_id\", jsonData.batch_id);\r",
																	"postman.setEnvironmentVariable(\"act_id\", jsonData.action.id);\r",
																	"\r",
																	"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
																	"\r",
																	"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 1500); \r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"OK\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-GP-Version",
																"value": "{{version}}",
																"type": "text"
															},
															{
																"key": "Authorization",
																"value": "Bearer {{token}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"account_name\": \"{{acc_name}}\",\n    \"type\": \"SALE\",\n    \"channel\": \"CP\",\n    \"amount\": \"10000\",\n    \"currency\": \"EUR\",\n    \"country\": \"GB\",\n    \"capture_mode\": \"AUTO\",\n    \"reference\": \"{{reference}}\",\n    \"payment_method\": {\n        \"first_name\": \"James\",\n        \"last_name\": \"Mason\",\n        \"entry_mode\": \"ECOM\",\n        \"card\": {\n            \"track\": \"%B4012002000060016^VI TEST CREDIT^251210118039000000000396?;4012002000060016=25121011803939600000?\",\n            \"tag\": \"9F4005F000F0A0019F02060000000025009F03060000000000009F2608D90A06501B48564E82027C005F3401019F360200029F0702FF009F0802008C9F0902008C9F34030403029F2701809F0D05F0400088009F0E0508000000009F0F05F0400098005F280208409F390105FFC605DC4000A800FFC7050010000000FFC805DC4004F8009F3303E0B8C89F1A0208409F350122950500000080005F2A0208409A031409109B02E8009F21030811539C01009F37045EED3A8E4F07A00000000310109F0607A00000000310108407A00000000310109F100706010A03A400029F410400000001\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{url}}/ucp/transactions",
															"protocol": "https",
															"host": [
																"{{url}}"
															],
															"path": [
																"ucp",
																"transactions"
															]
														},
														"description": "For this request, if you want to do a sale with no DCC chosen, currency_conversion.exchange_rate field must be set to 1, currency_conversion.payer_amount must match 'amount' and currency_conversion.payer_currency must match 'currency'."
													},
													"response": []
												}
											],
											"description": "This process flow is commonly used for merchants who want to process an authorization with a DCC rate look-up CCS_ID in the transaction. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Perform a Convert Transaction Amount (Rate Look Up) to see if the card is available for DCC and what the current exchange rate is. If the card is eligible for DCC, you’ll receive an **AVAILABLE** status. If the card is not eligible for DCC or the currency is the same as your base currency, you’ll receive a NOT_AVAILABLE status. Please [click here](https://developer.globalpay.com/api/currency-conversion) to refer to Currency Conversion API specs.\n    \n3. Perform authorization by entering the account_name & not passing the CCS_ID from the Rate Look Up as it is not available along with the necessary card data into the body of the request. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [DCC ](https://developer.globalpay.com/docs/dcc#api) for a step-by-step guide."
										}
									],
									"description": "Dynamic Currency Conversion (DCC) enables merchants to provide customers purchasing internationally a final payment amount in the currency of their card. Either the merchant or a third-party Currency Conversion Processor (CCP) provides the interbank exchange rate available at the time of transaction and displays it to the customer. This way, the customer knows the exchange rate before they complete the payment. They can then choose whether to continue with the conversion or pay in the merchant’s base currency.\n\nFor more information see [DCC](https://developer.globalpay.com/docs/dcc#api) for an overview."
								}
							],
							"description": "Below you will find a folder of the most common use cases you will find for Customer Present Scenarios. We show the full flow of transactions as they would be in production."
						}
					],
					"description": "This folder is intended to be used by integrators / merchants who want to do Customer Present transactions. The folder contains use cases which an integrator/merchant can replicate in their integration. The use cases depicts full flow or transactions as they would in Production environment."
				},
				{
					"name": "Reporting",
					"item": [
						{
							"name": "Real-Time Reporting",
							"item": [
								{
									"name": "Transactions",
									"item": [
										{
											"name": "Access Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.unset(\"token\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
															"\r",
															"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
															"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
															"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
															"\r",
															"var date = new Date();\r",
															"var year = date.getUTCFullYear()\r",
															"var month = date.getUTCMonth()+1\r",
															"var date = date.getUTCDate()\r",
															"\r",
															"var full_date = year+\"-\"+month+\"-\"+date\r",
															"\r",
															"if(month < 10){\r",
															"    full_date = year+\"-0\"+month+\"-\"+date\r",
															"}else if(month > 9){\r",
															"    full_date = year+\"-\"+month+\"-\"+date\r",
															"}\r",
															"\r",
															"var length = jsonData.scope.accounts.length\r",
															"\r",
															"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
															"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
															"\r",
															"//Add new accounts in this loop\r",
															"for(var x = 0; x < length; x++){\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
															"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
															"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
															"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"    \r",
															"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
															"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();",
															"",
															"",
															"nonceDate = date.toISOString(); ",
															"pm.environment.set(\"nonce\", nonceDate);",
															"",
															"var nonce = pm.environment.get(\"nonce\");",
															"",
															"",
															"var app_key = pm.environment.get(\"app_key\");",
															"var s512Txt = nonce +''+app_key;",
															"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
															"",
															"//var secret = SHA512(s512Txt);",
															"pm.environment.set(\"secret\", secret);",
															"",
															"",
															"",
															"/*",
															"",
															"NOT USE as replace this function with CryptoJS.SHA512",
															"",
															"* Secure Hash Algorithm (SHA512)",
															"* http://www.happycode.info/",
															"*/",
															"",
															"function SHA512(str) {",
															" function int64(msint_32, lsint_32) {",
															" this.highOrder = msint_32;",
															" this.lowOrder = lsint_32;",
															" }",
															"",
															" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
															" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
															" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
															" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
															"",
															" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
															" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
															" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
															" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
															" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
															" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
															" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
															" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
															" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
															" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
															" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
															" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
															" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
															" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
															" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
															" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
															" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
															" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
															" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
															" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
															" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
															" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
															" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
															" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
															" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
															" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
															" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
															" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
															" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
															" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
															" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
															" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
															" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
															" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
															" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
															" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
															" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
															" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
															" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
															" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
															"",
															" var W = new Array(64);",
															" var a, b, c, d, e, f, g, h, i, j;",
															" var T1, T2;",
															" var charsize = 8;",
															"",
															" function utf8_encode(str) {",
															" return unescape(encodeURIComponent(str));",
															" }",
															"",
															" function str2binb(str) {",
															" var bin = [];",
															" var mask = (1 << charsize) - 1;",
															" var len = str.length * charsize;",
															"",
															" for (var i = 0; i < len; i += charsize) {",
															" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
															" }",
															"",
															" return bin;",
															" }",
															"",
															" function binb2hex(binarray) {",
															" var hex_tab = '0123456789abcdef';",
															" var str = '';",
															" var length = binarray.length * 4;",
															" var srcByte;",
															"",
															" for (var i = 0; i < length; i += 1) {",
															" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
															" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
															" }",
															"",
															" return str;",
															" }",
															"",
															" function safe_add_2(x, y) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
															" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_4(a, b, c, d) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_5(a, b, c, d, e) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function maj(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function ch(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function rotr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
															" );",
															" }",
															" }",
															"",
															" function sigma0(x) {",
															" var rotr28 = rotr(x, 28);",
															" var rotr34 = rotr(x, 34);",
															" var rotr39 = rotr(x, 39);",
															"",
															" return new int64(",
															" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
															" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
															" );",
															" }",
															"",
															" function sigma1(x) {",
															" var rotr14 = rotr(x, 14);",
															" var rotr18 = rotr(x, 18);",
															" var rotr41 = rotr(x, 41);",
															"",
															" return new int64(",
															" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
															" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
															" );",
															" }",
															"",
															" function gamma0(x) {",
															" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
															"",
															" return new int64(",
															" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
															" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
															" );",
															" }",
															"",
															" function gamma1(x) {",
															" var rotr19 = rotr(x, 19);",
															" var rotr61 = rotr(x, 61);",
															" var shr6 = shr(x, 6);",
															"",
															" return new int64(",
															" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
															" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
															" );",
															" }",
															"",
															" function shr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" x.highOrder >>> n,",
															" x.lowOrder >>> n | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" 0,",
															" x.highOrder << (32 - n)",
															" );",
															" }",
															" }",
															"",
															" str = utf8_encode(str);",
															" strlen = str.length*charsize;",
															" str = str2binb(str);",
															"",
															" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
															" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
															"",
															" for (var i = 0; i < str.length; i += 32) {",
															" a = H[0];",
															" b = H[1];",
															" c = H[2];",
															" d = H[3];",
															" e = H[4];",
															" f = H[5];",
															" g = H[6];",
															" h = H[7];",
															"",
															" for (var j = 0; j < 80; j++) {",
															" if (j < 16) {",
															" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
															" } else {",
															" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
															" }",
															"",
															" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
															" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
															" h = g;",
															" g = f;",
															" f = e;",
															" e = safe_add_2(d, T1);",
															" d = c;",
															" c = b;",
															" b = a;",
															" a = safe_add_2(T1, T2);",
															" }",
															"",
															" H[0] = safe_add_2(a, H[0]);",
															" H[1] = safe_add_2(b, H[1]);",
															" H[2] = safe_add_2(c, H[2]);",
															" H[3] = safe_add_2(d, H[3]);",
															" H[4] = safe_add_2(e, H[4]);",
															" H[5] = safe_add_2(f, H[5]);",
															" H[6] = safe_add_2(g, H[6]);",
															" H[7] = safe_add_2(h, H[7]);",
															" }",
															"",
															" var binarray = [];",
															" for (var i = 0; i < H.length; i++) {",
															" binarray.push(H[i].highOrder);",
															" binarray.push(H[i].lowOrder);",
															" }",
															" return binb2hex(binarray);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"name": "Content-Type",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/accesstoken",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"accesstoken"
													]
												},
												"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
											},
											"response": []
										},
										{
											"name": "Transaction Single",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var totalPageAmount=parseInt(pm.environment.get(\"total_count\")) || 0;\r",
															"var totalRecordCount=parseInt(pm.environment.get(\"total_amount\")) || 0;\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"\r",
															"for(var i = 0; i < jsonData.transactions.length; i++) {\r",
															"    var obj = jsonData.transactions[i];\r",
															"    totalPageAmount += parseInt(obj.merchant_amount);\r",
															"    totalRecordCount++;\r",
															"}\r",
															"\r",
															"postman.setEnvironmentVariable(\"total_count\", totalRecordCount);\r",
															"postman.setEnvironmentVariable(\"total_amount\", totalPageAmount);\r",
															"\r",
															"console.log(totalPageAmount);\r",
															"console.log(totalRecordCount);\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "idempotency-key",
														"value": "12345",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/transactions/{{trn_id}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"transactions",
														"{{trn_id}}"
													]
												},
												"description": "This request is for getting a realtime report of transactions. It is recomended to wait approx 5 secs after completing a transaction to run a realtime report. \r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- The Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_time_created variable in the Params tab to change the date of how far back in time the report goes to. \r\n\r\nFor more info on getting list of realtime transactions, visit: https://developer.globalpay.com/api/transactions#/Transactions/get_transactions"
											},
											"response": []
										},
										{
											"name": "Transactions List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"var totalPageAmount=parseInt(pm.environment.get(\"total_count\")) || 0;\r",
															"var totalRecordCount=parseInt(pm.environment.get(\"total_amount\")) || 0;\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"\r",
															"for(var i = 0; i < jsonData.transactions.length; i++) {\r",
															"    var obj = jsonData.transactions[i];\r",
															"    totalPageAmount += parseInt(obj.merchant_amount);\r",
															"    totalRecordCount++;\r",
															"}\r",
															"\r",
															"postman.setEnvironmentVariable(\"total_count\", totalRecordCount);\r",
															"postman.setEnvironmentVariable(\"total_amount\", totalPageAmount);\r",
															"\r",
															"console.log(totalPageAmount);\r",
															"console.log(totalRecordCount);\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													},
													{
														"key": "idempotency-key",
														"value": "12345",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/transactions",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"transactions"
													],
													"query": [
														{
															"key": "from_time_created",
															"value": "{{from_time_created}}",
															"disabled": true
														},
														{
															"key": "to_time_created",
															"value": "{{to_time_created}}",
															"disabled": true
														}
													]
												},
												"description": "This request is for getting a realtime report of transactions. It is recomended to wait approx 5 secs after completing a transaction to run a realtime report. \r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- The Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_time_created variable in the Params tab to change the date of how far back in time the report goes to. \r\n\r\nFor more info on getting list of realtime transactions, visit: https://developer.globalpay.com/api/transactions#/Transactions/get_transactions"
											},
											"response": []
										}
									],
									"description": "This process flow is commonly used for merchants who want to see the Real-Time transaction data info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Get a transaction in response of the request by providing the TRN_ID. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n3. Get a list of transactions in response of the request by providing a Date Range. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Real-Time Reporting](https://developer.globalpay.com/docs/real-time-report) for a step-by-step guide."
								}
							],
							"description": "Our reporting APIs can be used to reconcile transactions but can also provide a detailed audit trail for all activities that take place on your account. This guide focuses on transaction processing, specifically authorizations, to demonstrate how the outcome and data returned by the Issuer are available in real-time. Any subsequent actions performed on the transaction or authorization are also recorded and available in real-time.\n\nFor more information see [Real-Time Reporting](https://developer.globalpay.com/docs/real-time-report) for a step-by-step guide."
						},
						{
							"name": "Settlement Reporting",
							"item": [
								{
									"name": "Deposits",
									"item": [
										{
											"name": "Access Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.unset(\"token\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
															"\r",
															"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
															"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
															"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
															"\r",
															"var date = new Date();\r",
															"var year = date.getUTCFullYear()\r",
															"var month = date.getUTCMonth()+1\r",
															"var date = date.getUTCDate()\r",
															"\r",
															"var full_date = year+\"-\"+month+\"-\"+date\r",
															"\r",
															"if(month < 10){\r",
															"    full_date = year+\"-0\"+month+\"-\"+date\r",
															"}else if(month > 9){\r",
															"    full_date = year+\"-\"+month+\"-\"+date\r",
															"}\r",
															"\r",
															"var length = jsonData.scope.accounts.length\r",
															"\r",
															"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
															"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
															"\r",
															"//Add new accounts in this loop\r",
															"for(var x = 0; x < length; x++){\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
															"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
															"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
															"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"    \r",
															"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
															"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();",
															"",
															"",
															"nonceDate = date.toISOString(); ",
															"pm.environment.set(\"nonce\", nonceDate);",
															"",
															"var nonce = pm.environment.get(\"nonce\");",
															"",
															"",
															"var app_key = pm.environment.get(\"app_key\");",
															"var s512Txt = nonce +''+app_key;",
															"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
															"",
															"//var secret = SHA512(s512Txt);",
															"pm.environment.set(\"secret\", secret);",
															"",
															"",
															"",
															"/*",
															"",
															"NOT USE as replace this function with CryptoJS.SHA512",
															"",
															"* Secure Hash Algorithm (SHA512)",
															"* http://www.happycode.info/",
															"*/",
															"",
															"function SHA512(str) {",
															" function int64(msint_32, lsint_32) {",
															" this.highOrder = msint_32;",
															" this.lowOrder = lsint_32;",
															" }",
															"",
															" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
															" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
															" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
															" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
															"",
															" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
															" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
															" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
															" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
															" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
															" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
															" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
															" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
															" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
															" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
															" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
															" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
															" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
															" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
															" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
															" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
															" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
															" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
															" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
															" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
															" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
															" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
															" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
															" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
															" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
															" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
															" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
															" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
															" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
															" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
															" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
															" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
															" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
															" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
															" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
															" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
															" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
															" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
															" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
															" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
															"",
															" var W = new Array(64);",
															" var a, b, c, d, e, f, g, h, i, j;",
															" var T1, T2;",
															" var charsize = 8;",
															"",
															" function utf8_encode(str) {",
															" return unescape(encodeURIComponent(str));",
															" }",
															"",
															" function str2binb(str) {",
															" var bin = [];",
															" var mask = (1 << charsize) - 1;",
															" var len = str.length * charsize;",
															"",
															" for (var i = 0; i < len; i += charsize) {",
															" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
															" }",
															"",
															" return bin;",
															" }",
															"",
															" function binb2hex(binarray) {",
															" var hex_tab = '0123456789abcdef';",
															" var str = '';",
															" var length = binarray.length * 4;",
															" var srcByte;",
															"",
															" for (var i = 0; i < length; i += 1) {",
															" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
															" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
															" }",
															"",
															" return str;",
															" }",
															"",
															" function safe_add_2(x, y) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
															" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_4(a, b, c, d) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_5(a, b, c, d, e) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function maj(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function ch(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function rotr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
															" );",
															" }",
															" }",
															"",
															" function sigma0(x) {",
															" var rotr28 = rotr(x, 28);",
															" var rotr34 = rotr(x, 34);",
															" var rotr39 = rotr(x, 39);",
															"",
															" return new int64(",
															" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
															" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
															" );",
															" }",
															"",
															" function sigma1(x) {",
															" var rotr14 = rotr(x, 14);",
															" var rotr18 = rotr(x, 18);",
															" var rotr41 = rotr(x, 41);",
															"",
															" return new int64(",
															" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
															" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
															" );",
															" }",
															"",
															" function gamma0(x) {",
															" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
															"",
															" return new int64(",
															" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
															" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
															" );",
															" }",
															"",
															" function gamma1(x) {",
															" var rotr19 = rotr(x, 19);",
															" var rotr61 = rotr(x, 61);",
															" var shr6 = shr(x, 6);",
															"",
															" return new int64(",
															" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
															" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
															" );",
															" }",
															"",
															" function shr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" x.highOrder >>> n,",
															" x.lowOrder >>> n | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" 0,",
															" x.highOrder << (32 - n)",
															" );",
															" }",
															" }",
															"",
															" str = utf8_encode(str);",
															" strlen = str.length*charsize;",
															" str = str2binb(str);",
															"",
															" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
															" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
															"",
															" for (var i = 0; i < str.length; i += 32) {",
															" a = H[0];",
															" b = H[1];",
															" c = H[2];",
															" d = H[3];",
															" e = H[4];",
															" f = H[5];",
															" g = H[6];",
															" h = H[7];",
															"",
															" for (var j = 0; j < 80; j++) {",
															" if (j < 16) {",
															" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
															" } else {",
															" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
															" }",
															"",
															" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
															" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
															" h = g;",
															" g = f;",
															" f = e;",
															" e = safe_add_2(d, T1);",
															" d = c;",
															" c = b;",
															" b = a;",
															" a = safe_add_2(T1, T2);",
															" }",
															"",
															" H[0] = safe_add_2(a, H[0]);",
															" H[1] = safe_add_2(b, H[1]);",
															" H[2] = safe_add_2(c, H[2]);",
															" H[3] = safe_add_2(d, H[3]);",
															" H[4] = safe_add_2(e, H[4]);",
															" H[5] = safe_add_2(f, H[5]);",
															" H[6] = safe_add_2(g, H[6]);",
															" H[7] = safe_add_2(h, H[7]);",
															" }",
															"",
															" var binarray = [];",
															" for (var i = 0; i < H.length; i++) {",
															" binarray.push(H[i].highOrder);",
															" binarray.push(H[i].lowOrder);",
															" }",
															" return binb2hex(binarray);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"name": "Content-Type",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/accesstoken",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"accesstoken"
													]
												},
												"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
											},
											"response": []
										},
										{
											"name": "Deposit List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/settlement/deposits?account_name={{settlement_acc_name}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"settlement",
														"deposits"
													],
													"query": [
														{
															"key": "account_name",
															"value": "{{settlement_acc_name}}"
														},
														{
															"key": "from_time_created",
															"value": "{{from_time_created}}",
															"disabled": true
														},
														{
															"key": "to_time_created",
															"value": "{{to_time_created}}",
															"disabled": true
														}
													]
												},
												"description": "This request returns a list of all deposits for a merchant from a specific date. Deposits make up all Debits and Credits made to a merchants bank a/c. To change the date of how far back in time the report goes to, edit the from_time_created variable in the Params tab to whatever date you would like. It is recommended to go at least 10 days back in time.\r\n\r\nTo find out more info on getting deposit list, visit: https://developer.globalpay.com/api/deposits#/Deposits/get_deposits"
											},
											"response": []
										},
										{
											"name": "Deposit Single",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/settlement/deposits/{{DEP_ID}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"settlement",
														"deposits",
														"{{DEP_ID}}"
													]
												},
												"description": "This request returns a list of all deposits for a merchant from a specific date. Deposits make up all Debits and Credits made to a merchants bank a/c. To change the date of how far back in time the report goes to, edit the from_time_created variable in the Params tab to whatever date you would like. It is recommended to go at least 10 days back in time.\r\n\r\nTo find out more info on getting deposit list, visit: https://developer.globalpay.com/api/deposits#/Deposits/get_deposits"
											},
											"response": []
										}
									],
									"description": "This process flow is commonly used for merchants who want to see the settled deposit data info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Get a Deposit in the response of the request by providing the DEP_ID. Please [click here](https://developer.globalpay.com/api/deposits) to refer to the Deposits API spec.\n3. Get a list of Deposits in the response of the request by providing a Date Range. Please [click here](https://developer.globalpay.com/api/deposits) to refer to the Deposits API spec.\n    \n\nFor more information see [Settlement Reporting](https://developer.globalpay.com/docs/settle-report/guide) for a step-by-step guide."
								},
								{
									"name": "Disputes",
									"item": [
										{
											"name": "Access Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.unset(\"token\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
															"\r",
															"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
															"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
															"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
															"\r",
															"var date = new Date();\r",
															"var year = date.getUTCFullYear()\r",
															"var month = date.getUTCMonth()+1\r",
															"var date = date.getUTCDate()\r",
															"\r",
															"var full_date = year+\"-\"+month+\"-\"+date\r",
															"\r",
															"if(month < 10){\r",
															"    full_date = year+\"-0\"+month+\"-\"+date\r",
															"}else if(month > 9){\r",
															"    full_date = year+\"-\"+month+\"-\"+date\r",
															"}\r",
															"\r",
															"var length = jsonData.scope.accounts.length\r",
															"\r",
															"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
															"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
															"\r",
															"//Add new accounts in this loop\r",
															"for(var x = 0; x < length; x++){\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
															"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
															"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
															"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"    \r",
															"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
															"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();",
															"",
															"",
															"nonceDate = date.toISOString(); ",
															"pm.environment.set(\"nonce\", nonceDate);",
															"",
															"var nonce = pm.environment.get(\"nonce\");",
															"",
															"",
															"var app_key = pm.environment.get(\"app_key\");",
															"var s512Txt = nonce +''+app_key;",
															"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
															"",
															"//var secret = SHA512(s512Txt);",
															"pm.environment.set(\"secret\", secret);",
															"",
															"",
															"",
															"/*",
															"",
															"NOT USE as replace this function with CryptoJS.SHA512",
															"",
															"* Secure Hash Algorithm (SHA512)",
															"* http://www.happycode.info/",
															"*/",
															"",
															"function SHA512(str) {",
															" function int64(msint_32, lsint_32) {",
															" this.highOrder = msint_32;",
															" this.lowOrder = lsint_32;",
															" }",
															"",
															" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
															" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
															" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
															" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
															"",
															" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
															" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
															" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
															" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
															" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
															" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
															" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
															" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
															" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
															" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
															" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
															" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
															" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
															" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
															" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
															" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
															" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
															" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
															" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
															" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
															" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
															" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
															" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
															" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
															" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
															" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
															" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
															" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
															" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
															" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
															" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
															" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
															" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
															" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
															" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
															" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
															" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
															" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
															" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
															" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
															"",
															" var W = new Array(64);",
															" var a, b, c, d, e, f, g, h, i, j;",
															" var T1, T2;",
															" var charsize = 8;",
															"",
															" function utf8_encode(str) {",
															" return unescape(encodeURIComponent(str));",
															" }",
															"",
															" function str2binb(str) {",
															" var bin = [];",
															" var mask = (1 << charsize) - 1;",
															" var len = str.length * charsize;",
															"",
															" for (var i = 0; i < len; i += charsize) {",
															" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
															" }",
															"",
															" return bin;",
															" }",
															"",
															" function binb2hex(binarray) {",
															" var hex_tab = '0123456789abcdef';",
															" var str = '';",
															" var length = binarray.length * 4;",
															" var srcByte;",
															"",
															" for (var i = 0; i < length; i += 1) {",
															" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
															" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
															" }",
															"",
															" return str;",
															" }",
															"",
															" function safe_add_2(x, y) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
															" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_4(a, b, c, d) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_5(a, b, c, d, e) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function maj(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function ch(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function rotr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
															" );",
															" }",
															" }",
															"",
															" function sigma0(x) {",
															" var rotr28 = rotr(x, 28);",
															" var rotr34 = rotr(x, 34);",
															" var rotr39 = rotr(x, 39);",
															"",
															" return new int64(",
															" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
															" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
															" );",
															" }",
															"",
															" function sigma1(x) {",
															" var rotr14 = rotr(x, 14);",
															" var rotr18 = rotr(x, 18);",
															" var rotr41 = rotr(x, 41);",
															"",
															" return new int64(",
															" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
															" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
															" );",
															" }",
															"",
															" function gamma0(x) {",
															" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
															"",
															" return new int64(",
															" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
															" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
															" );",
															" }",
															"",
															" function gamma1(x) {",
															" var rotr19 = rotr(x, 19);",
															" var rotr61 = rotr(x, 61);",
															" var shr6 = shr(x, 6);",
															"",
															" return new int64(",
															" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
															" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
															" );",
															" }",
															"",
															" function shr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" x.highOrder >>> n,",
															" x.lowOrder >>> n | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" 0,",
															" x.highOrder << (32 - n)",
															" );",
															" }",
															" }",
															"",
															" str = utf8_encode(str);",
															" strlen = str.length*charsize;",
															" str = str2binb(str);",
															"",
															" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
															" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
															"",
															" for (var i = 0; i < str.length; i += 32) {",
															" a = H[0];",
															" b = H[1];",
															" c = H[2];",
															" d = H[3];",
															" e = H[4];",
															" f = H[5];",
															" g = H[6];",
															" h = H[7];",
															"",
															" for (var j = 0; j < 80; j++) {",
															" if (j < 16) {",
															" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
															" } else {",
															" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
															" }",
															"",
															" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
															" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
															" h = g;",
															" g = f;",
															" f = e;",
															" e = safe_add_2(d, T1);",
															" d = c;",
															" c = b;",
															" b = a;",
															" a = safe_add_2(T1, T2);",
															" }",
															"",
															" H[0] = safe_add_2(a, H[0]);",
															" H[1] = safe_add_2(b, H[1]);",
															" H[2] = safe_add_2(c, H[2]);",
															" H[3] = safe_add_2(d, H[3]);",
															" H[4] = safe_add_2(e, H[4]);",
															" H[5] = safe_add_2(f, H[5]);",
															" H[6] = safe_add_2(g, H[6]);",
															" H[7] = safe_add_2(h, H[7]);",
															" }",
															"",
															" var binarray = [];",
															" for (var i = 0; i < H.length; i++) {",
															" binarray.push(H[i].highOrder);",
															" binarray.push(H[i].lowOrder);",
															" }",
															" return binb2hex(binarray);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"name": "Content-Type",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/accesstoken",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"accesstoken"
													]
												},
												"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
											},
											"response": []
										},
										{
											"name": "Settled Disputes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.environment.unset(\"trn_id\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"dis_id\", jsonData.disputes[0].id);\r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/settlement/disputes?account_name={{settlement_acc_name}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"settlement",
														"disputes"
													],
													"query": [
														{
															"key": "account_name",
															"value": "{{settlement_acc_name}}"
														},
														{
															"key": "from_time_created",
															"value": "{{from_time_created}}",
															"disabled": true
														},
														{
															"key": "to_time_created",
															"value": "{{to_time_created}}",
															"disabled": true
														}
													]
												},
												"description": "This request returns a list of all disputes initiated by a Payer/Payer's Bank to the Merchant from a specific date. To change the date of how far back in time the report goes to, edit the from_deposit_time_created variable in the Params tab to whatever date you would like. It is recommended to go at least 10 days back in time.\r\n\r\nFor more info on getting dispute list, visit: https://developer.globalpay.com/api/disputes#/Disputes/get_disputes"
											},
											"response": []
										}
									],
									"description": "This process flow is commonly used for merchants who want to see the settled disputes' data info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Get a list of Deposits in the response of the request by providing a Date Range. Please [click here](https://developer.globalpay.com/api/disputes) to refer to the Disputes API spec.\n    \n\nFor more information see [Disputes Management](https://developer.globalpay.com/docs/dispute-mgt/guide) for a step-by-step guide."
								},
								{
									"name": "Transactions",
									"item": [
										{
											"name": "Access Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.unset(\"token\");\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
															"\r",
															"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
															"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
															"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
															"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
															"\r",
															"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
															"\r",
															"var date = new Date();\r",
															"var year = date.getUTCFullYear()\r",
															"var month = date.getUTCMonth()+1\r",
															"var date = date.getUTCDate()\r",
															"\r",
															"var full_date = year+\"-\"+month+\"-\"+date\r",
															"\r",
															"if(month < 10){\r",
															"    full_date = year+\"-0\"+month+\"-\"+date\r",
															"}else if(month > 9){\r",
															"    full_date = year+\"-\"+month+\"-\"+date\r",
															"}\r",
															"\r",
															"var length = jsonData.scope.accounts.length\r",
															"\r",
															"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
															"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
															"\r",
															"//Add new accounts in this loop\r",
															"for(var x = 0; x < length; x++){\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
															"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
															"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
															"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"    \r",
															"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
															"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
															"    }\r",
															"\r",
															"}\r",
															"\r",
															"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var date = new Date();",
															"",
															"",
															"nonceDate = date.toISOString(); ",
															"pm.environment.set(\"nonce\", nonceDate);",
															"",
															"var nonce = pm.environment.get(\"nonce\");",
															"",
															"",
															"var app_key = pm.environment.get(\"app_key\");",
															"var s512Txt = nonce +''+app_key;",
															"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
															"",
															"//var secret = SHA512(s512Txt);",
															"pm.environment.set(\"secret\", secret);",
															"",
															"",
															"",
															"/*",
															"",
															"NOT USE as replace this function with CryptoJS.SHA512",
															"",
															"* Secure Hash Algorithm (SHA512)",
															"* http://www.happycode.info/",
															"*/",
															"",
															"function SHA512(str) {",
															" function int64(msint_32, lsint_32) {",
															" this.highOrder = msint_32;",
															" this.lowOrder = lsint_32;",
															" }",
															"",
															" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
															" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
															" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
															" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
															"",
															" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
															" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
															" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
															" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
															" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
															" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
															" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
															" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
															" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
															" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
															" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
															" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
															" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
															" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
															" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
															" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
															" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
															" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
															" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
															" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
															" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
															" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
															" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
															" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
															" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
															" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
															" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
															" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
															" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
															" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
															" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
															" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
															" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
															" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
															" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
															" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
															" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
															" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
															" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
															" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
															"",
															" var W = new Array(64);",
															" var a, b, c, d, e, f, g, h, i, j;",
															" var T1, T2;",
															" var charsize = 8;",
															"",
															" function utf8_encode(str) {",
															" return unescape(encodeURIComponent(str));",
															" }",
															"",
															" function str2binb(str) {",
															" var bin = [];",
															" var mask = (1 << charsize) - 1;",
															" var len = str.length * charsize;",
															"",
															" for (var i = 0; i < len; i += charsize) {",
															" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
															" }",
															"",
															" return bin;",
															" }",
															"",
															" function binb2hex(binarray) {",
															" var hex_tab = '0123456789abcdef';",
															" var str = '';",
															" var length = binarray.length * 4;",
															" var srcByte;",
															"",
															" for (var i = 0; i < length; i += 1) {",
															" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
															" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
															" }",
															"",
															" return str;",
															" }",
															"",
															" function safe_add_2(x, y) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
															" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_4(a, b, c, d) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function safe_add_5(a, b, c, d, e) {",
															" var lsw, msw, lowOrder, highOrder;",
															"",
															" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
															" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
															" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
															" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
															" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
															"",
															" return new int64(highOrder, lowOrder);",
															" }",
															"",
															" function maj(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function ch(x, y, z) {",
															" return new int64(",
															" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
															" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
															" );",
															" }",
															"",
															" function rotr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
															" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
															" );",
															" }",
															" }",
															"",
															" function sigma0(x) {",
															" var rotr28 = rotr(x, 28);",
															" var rotr34 = rotr(x, 34);",
															" var rotr39 = rotr(x, 39);",
															"",
															" return new int64(",
															" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
															" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
															" );",
															" }",
															"",
															" function sigma1(x) {",
															" var rotr14 = rotr(x, 14);",
															" var rotr18 = rotr(x, 18);",
															" var rotr41 = rotr(x, 41);",
															"",
															" return new int64(",
															" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
															" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
															" );",
															" }",
															"",
															" function gamma0(x) {",
															" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
															"",
															" return new int64(",
															" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
															" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
															" );",
															" }",
															"",
															" function gamma1(x) {",
															" var rotr19 = rotr(x, 19);",
															" var rotr61 = rotr(x, 61);",
															" var shr6 = shr(x, 6);",
															"",
															" return new int64(",
															" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
															" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
															" );",
															" }",
															"",
															" function shr(x, n) {",
															" if (n <= 32) {",
															" return new int64(",
															" x.highOrder >>> n,",
															" x.lowOrder >>> n | (x.highOrder << (32 - n))",
															" );",
															" } else {",
															" return new int64(",
															" 0,",
															" x.highOrder << (32 - n)",
															" );",
															" }",
															" }",
															"",
															" str = utf8_encode(str);",
															" strlen = str.length*charsize;",
															" str = str2binb(str);",
															"",
															" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
															" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
															"",
															" for (var i = 0; i < str.length; i += 32) {",
															" a = H[0];",
															" b = H[1];",
															" c = H[2];",
															" d = H[3];",
															" e = H[4];",
															" f = H[5];",
															" g = H[6];",
															" h = H[7];",
															"",
															" for (var j = 0; j < 80; j++) {",
															" if (j < 16) {",
															" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
															" } else {",
															" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
															" }",
															"",
															" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
															" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
															" h = g;",
															" g = f;",
															" f = e;",
															" e = safe_add_2(d, T1);",
															" d = c;",
															" c = b;",
															" b = a;",
															" a = safe_add_2(T1, T2);",
															" }",
															"",
															" H[0] = safe_add_2(a, H[0]);",
															" H[1] = safe_add_2(b, H[1]);",
															" H[2] = safe_add_2(c, H[2]);",
															" H[3] = safe_add_2(d, H[3]);",
															" H[4] = safe_add_2(e, H[4]);",
															" H[5] = safe_add_2(f, H[5]);",
															" H[6] = safe_add_2(g, H[6]);",
															" H[7] = safe_add_2(h, H[7]);",
															" }",
															"",
															" var binarray = [];",
															" for (var i = 0; i < H.length; i++) {",
															" binarray.push(H[i].highOrder);",
															" binarray.push(H[i].lowOrder);",
															" }",
															" return binb2hex(binarray);",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"name": "Content-Type",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
												},
												"url": {
													"raw": "https://{{url}}/ucp/accesstoken",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"accesstoken"
													]
												},
												"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
											},
											"response": []
										},
										{
											"name": "Settled Transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.environment.unset(\"trn_id\");\r",
															"\r",
															"\r",
															"\r",
															"var jsonData = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"trn_id\", jsonData.transactions[0].id);\r",
															"\r",
															"tests[\"Transaction ID \" + pm.environment.get(\"trn_id\")] = true;\r",
															"\r",
															"\r",
															"\r",
															"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
															"\r",
															"\r",
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has string\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token}}",
														"type": "text"
													},
													{
														"key": "X-GP-Version",
														"value": "{{version}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{url}}/ucp/settlement/transactions?account_name={{settlement_acc_name}}",
													"protocol": "https",
													"host": [
														"{{url}}"
													],
													"path": [
														"ucp",
														"settlement",
														"transactions"
													],
													"query": [
														{
															"key": "account_name",
															"value": "{{settlement_acc_name}}"
														},
														{
															"key": "from_time_created",
															"value": "{{from_time_created}}",
															"disabled": true
														},
														{
															"key": "to_time_created",
															"value": "{{to_time_created}}",
															"disabled": true
														}
													]
												},
												"description": "This request returns a list of all transactions done by a merchant from a specific date. \r\n- Page size indicates how many transactions are on one page of the report. 1000 is the max amount of records on one page.\r\n- Page variable is what page of the report the response is going to return. If you have less than 1000 transactions for the time period of the report, the report will only contain one page. \r\n- Edit the from_batch_time_created variable in the Params tab to change the date of how far back in time the report goes to. It is recommended to go at least 10 days back in time.\r\n\r\nFor more info on getting list of transactions, visit: https://developer.globalpay.com/api/transactions#/Transactions/get_settlement_transactions"
											},
											"response": []
										}
									],
									"description": "This process flow is commonly used for merchants who want to see the settled transaction data info. In this flow, we will complete the following steps in sequential order:\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n    \n2. Get a list of Settled Transactions in the response of the request by providing a Date Range. Please [click here](https://developer.globalpay.com/api/transactions) to refer to transactions API specs.\n    \n\nFor more information see [Settlement Reporting](https://developer.globalpay.com/docs/settle-report/guide) for a step-by-step guide."
								}
							],
							"description": "Settlement Reporting helps merchants simplify their daily fund transfer process by automating the reconciliation of funds transferred to their bank accounts with transactions from multiple payment channels. Our Deposits, Transactions, and Disputes capabilities offer maximum flexibility for pulling the deposit data, whether it's by timeframe, status, bank account number, and so on."
						},
						{
							"name": "Dispute Managment",
							"item": [
								{
									"name": "Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.unset(\"token\");\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
													"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
													"\r",
													"postman.setEnvironmentVariable(\"mer_id\", jsonData.scope.merchant_id);\r",
													"\r",
													"postman.setEnvironmentVariable(\"MER_ID_1\");\r",
													"postman.setEnvironmentVariable(\"MER_ID_2\");\r",
													"postman.setEnvironmentVariable(\"MER_ID_3\");\r",
													"\r",
													"postman.setEnvironmentVariable(\"expiry_year\", \"30\");\r",
													"postman.setEnvironmentVariable(\"expiry_month\", \"12\");\r",
													"postman.setEnvironmentVariable(\"cvv\", \"123\");\r",
													"\r",
													"postman.setEnvironmentVariable(\"from_time_created\", \"2024-01-01\" );\r",
													"\r",
													"var date = new Date();\r",
													"var year = date.getUTCFullYear()\r",
													"var month = date.getUTCMonth()+1\r",
													"var date = date.getUTCDate()\r",
													"\r",
													"var full_date = year+\"-\"+month+\"-\"+date\r",
													"\r",
													"if(month < 10){\r",
													"    full_date = year+\"-0\"+month+\"-\"+date\r",
													"}else if(month > 9){\r",
													"    full_date = year+\"-\"+month+\"-\"+date\r",
													"}\r",
													"\r",
													"var length = jsonData.scope.accounts.length\r",
													"\r",
													"postman.setEnvironmentVariable(\"to_time_created\", full_date);\r",
													"postman.setEnvironmentVariable(\"tra_id\", jsonData.scope.accounts[0].id);\r",
													"\r",
													"//Add new accounts in this loop\r",
													"for(var x = 0; x < length; x++){\r",
													"\r",
													"    if (jsonData.scope.accounts[x].name == 'transaction_processing') {\r",
													"        postman.setEnvironmentVariable(\"acc_name\", jsonData.scope.accounts[x].name);\r",
													"    }\r",
													"\r",
													"    if (jsonData.scope.accounts[x].name == 'tokenization') {\r",
													"    postman.setEnvironmentVariable(\"token_acc_name\", jsonData.scope.accounts[x].name);\r",
													"    }\r",
													"\r",
													"    if (jsonData.scope.accounts[x].name == 'dispute_management') {\r",
													"        postman.setEnvironmentVariable(\"dispute_acc_name\", jsonData.scope.accounts[x].name);\r",
													"    }\r",
													"    \r",
													"    if (jsonData.scope.accounts[x].name == 'settlement_reporting') {\r",
													"        postman.setEnvironmentVariable(\"settlement_acc_name\", jsonData.scope.accounts[x].name);\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"tests[\"Token is \" + pm.environment.get(\"token\")] = true;\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var date = new Date();",
													"",
													"",
													"nonceDate = date.toISOString(); ",
													"pm.environment.set(\"nonce\", nonceDate);",
													"",
													"var nonce = pm.environment.get(\"nonce\");",
													"",
													"",
													"var app_key = pm.environment.get(\"app_key\");",
													"var s512Txt = nonce +''+app_key;",
													"var secret = CryptoJS.SHA512(s512Txt).toString(CryptoJS.enc.Hex);",
													"",
													"//var secret = SHA512(s512Txt);",
													"pm.environment.set(\"secret\", secret);",
													"",
													"",
													"",
													"/*",
													"",
													"NOT USE as replace this function with CryptoJS.SHA512",
													"",
													"* Secure Hash Algorithm (SHA512)",
													"* http://www.happycode.info/",
													"*/",
													"",
													"function SHA512(str) {",
													" function int64(msint_32, lsint_32) {",
													" this.highOrder = msint_32;",
													" this.lowOrder = lsint_32;",
													" }",
													"",
													" var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),",
													" new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),",
													" new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),",
													" new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];",
													"",
													" var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),",
													" new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),",
													" new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),",
													" new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),",
													" new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),",
													" new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),",
													" new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),",
													" new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),",
													" new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),",
													" new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),",
													" new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),",
													" new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),",
													" new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),",
													" new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),",
													" new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),",
													" new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),",
													" new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),",
													" new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),",
													" new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),",
													" new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),",
													" new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),",
													" new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),",
													" new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),",
													" new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),",
													" new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),",
													" new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),",
													" new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),",
													" new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),",
													" new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),",
													" new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),",
													" new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),",
													" new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),",
													" new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),",
													" new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),",
													" new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),",
													" new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),",
													" new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),",
													" new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),",
													" new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),",
													" new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];",
													"",
													" var W = new Array(64);",
													" var a, b, c, d, e, f, g, h, i, j;",
													" var T1, T2;",
													" var charsize = 8;",
													"",
													" function utf8_encode(str) {",
													" return unescape(encodeURIComponent(str));",
													" }",
													"",
													" function str2binb(str) {",
													" var bin = [];",
													" var mask = (1 << charsize) - 1;",
													" var len = str.length * charsize;",
													"",
													" for (var i = 0; i < len; i += charsize) {",
													" bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));",
													" }",
													"",
													" return bin;",
													" }",
													"",
													" function binb2hex(binarray) {",
													" var hex_tab = '0123456789abcdef';",
													" var str = '';",
													" var length = binarray.length * 4;",
													" var srcByte;",
													"",
													" for (var i = 0; i < length; i += 1) {",
													" srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);",
													" str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);",
													" }",
													"",
													" return str;",
													" }",
													"",
													" function safe_add_2(x, y) {",
													" var lsw, msw, lowOrder, highOrder;",
													"",
													" lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);",
													" msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);",
													" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);",
													" msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);",
													" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" return new int64(highOrder, lowOrder);",
													" }",
													"",
													" function safe_add_4(a, b, c, d) {",
													" var lsw, msw, lowOrder, highOrder;",
													"",
													" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);",
													" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);",
													" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);",
													" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);",
													" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" return new int64(highOrder, lowOrder);",
													" }",
													"",
													" function safe_add_5(a, b, c, d, e) {",
													" var lsw, msw, lowOrder, highOrder;",
													"",
													" lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);",
													" msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);",
													" lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);",
													" msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);",
													" highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);",
													"",
													" return new int64(highOrder, lowOrder);",
													" }",
													"",
													" function maj(x, y, z) {",
													" return new int64(",
													" (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),",
													" (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)",
													" );",
													" }",
													"",
													" function ch(x, y, z) {",
													" return new int64(",
													" (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),",
													" (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)",
													" );",
													" }",
													"",
													" function rotr(x, n) {",
													" if (n <= 32) {",
													" return new int64(",
													" (x.highOrder >>> n) | (x.lowOrder << (32 - n)),",
													" (x.lowOrder >>> n) | (x.highOrder << (32 - n))",
													" );",
													" } else {",
													" return new int64(",
													" (x.lowOrder >>> n) | (x.highOrder << (32 - n)),",
													" (x.highOrder >>> n) | (x.lowOrder << (32 - n))",
													" );",
													" }",
													" }",
													"",
													" function sigma0(x) {",
													" var rotr28 = rotr(x, 28);",
													" var rotr34 = rotr(x, 34);",
													" var rotr39 = rotr(x, 39);",
													"",
													" return new int64(",
													" rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,",
													" rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder",
													" );",
													" }",
													"",
													" function sigma1(x) {",
													" var rotr14 = rotr(x, 14);",
													" var rotr18 = rotr(x, 18);",
													" var rotr41 = rotr(x, 41);",
													"",
													" return new int64(",
													" rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,",
													" rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder",
													" );",
													" }",
													"",
													" function gamma0(x) {",
													" var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);",
													"",
													" return new int64(",
													" rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,",
													" rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder",
													" );",
													" }",
													"",
													" function gamma1(x) {",
													" var rotr19 = rotr(x, 19);",
													" var rotr61 = rotr(x, 61);",
													" var shr6 = shr(x, 6);",
													"",
													" return new int64(",
													" rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,",
													" rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder",
													" );",
													" }",
													"",
													" function shr(x, n) {",
													" if (n <= 32) {",
													" return new int64(",
													" x.highOrder >>> n,",
													" x.lowOrder >>> n | (x.highOrder << (32 - n))",
													" );",
													" } else {",
													" return new int64(",
													" 0,",
													" x.highOrder << (32 - n)",
													" );",
													" }",
													" }",
													"",
													" str = utf8_encode(str);",
													" strlen = str.length*charsize;",
													" str = str2binb(str);",
													"",
													" str[strlen >> 5] |= 0x80 << (24 - strlen % 32);",
													" str[(((strlen + 128) >> 10) << 5) + 31] = strlen;",
													"",
													" for (var i = 0; i < str.length; i += 32) {",
													" a = H[0];",
													" b = H[1];",
													" c = H[2];",
													" d = H[3];",
													" e = H[4];",
													" f = H[5];",
													" g = H[6];",
													" h = H[7];",
													"",
													" for (var j = 0; j < 80; j++) {",
													" if (j < 16) {",
													" W[j] = new int64(str[j*2 + i], str[j*2 + i + 1]);",
													" } else {",
													" W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);",
													" }",
													"",
													" T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);",
													" T2 = safe_add_2(sigma0(a), maj(a, b, c));",
													" h = g;",
													" g = f;",
													" f = e;",
													" e = safe_add_2(d, T1);",
													" d = c;",
													" c = b;",
													" b = a;",
													" a = safe_add_2(T1, T2);",
													" }",
													"",
													" H[0] = safe_add_2(a, H[0]);",
													" H[1] = safe_add_2(b, H[1]);",
													" H[2] = safe_add_2(c, H[2]);",
													" H[3] = safe_add_2(d, H[3]);",
													" H[4] = safe_add_2(e, H[4]);",
													" H[5] = safe_add_2(f, H[5]);",
													" H[6] = safe_add_2(g, H[6]);",
													" H[7] = safe_add_2(h, H[7]);",
													" }",
													"",
													" var binarray = [];",
													" for (var i = 0; i < H.length; i++) {",
													" binarray.push(H[i].highOrder);",
													" binarray.push(H[i].lowOrder);",
													" }",
													" return binb2hex(binarray);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_id\": \"{{app_id}}\",\n    \"secret\": \"{{secret}}\",\n    \"grant_type\": \"client_credentials\",\n    \"nonce\": \"{{nonce}}\"\n}"
										},
										"url": {
											"raw": "https://{{url}}/ucp/accesstoken",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"accesstoken"
											]
										},
										"description": "An Access Token Request must be done in order to execute any request to the API. As you can see in the body of the request there are 3 variables:\r\n- app_id: This is your individual app id that was given to you when your app was created in the dev portal. It indicates to the API what accounts and permissions you have access to e.g. Settlements, Disputes etc.\r\n- nonce: this is a random unique string used to calculate the secret. In this case we use the current date and time in string format for nonce. Every time access token is run, value is unique due to time change.\r\n- secret: as the app_key is never sent over the Internet, we use encryption to hide the app_key, SHA512(nonce + app_key). This function can be seen in Pre-request Script for this request. API decrypts SHA512 and if app_key matches one on API record, then access token is given.\r\n- seconds_to_expire: this is how long you want your access token to be valid in seconds. We do not recommend having an access token live for more than 24hrs.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the accounts and permissions available for the current merchant e.g Settlement Reporting or Tokenization etc.. The merchant_id is associated with your app and it determines what accounts of the API your app has access to and by extension, the resources and permissions.\r\n\r\nFor more info on retrieving an access token, visit: https://developer.globalpay.com/api/access-token#/Create%20Access%20Token/post_accesstoken"
									},
									"response": []
								},
								{
									"name": "Disputes List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var totalAdjDebitAmount=0;\r",
													"var totalAdjCreditAmount=0;\r",
													"var totalAdjEvenAmount=0;\r",
													"var totalAdjDebitCount=0;\r",
													"var totalAdjCreditCount=0;\r",
													"var totalAdjEvenCount=0;\r",
													"var totalRecordCount=0;\r",
													"var i=0;\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"\r",
													"for(i = 0; i < jsonData.disputes.length; i++) {\r",
													"\r",
													"    var obj = jsonData.disputes[i];\r",
													"    fundingType = String(obj.last_adjustment_funding);\r",
													"    \r",
													"    if (fundingType == \"DEBIT\"){\r",
													"        totalAdjDebitAmount += parseInt(obj.last_adjustment_amount);\r",
													"        totalAdjDebitCount++;\r",
													"    }else if(fundingType == \"CREDIT\") {\r",
													"        totalAdjCreditAmount += parseInt(obj.last_adjustment_amount);\r",
													"        totalAdjCreditCount++;\r",
													"       \r",
													"    }else {\r",
													"         totalAdjEvenAmount += parseInt(obj.last_adjustment_amount);\r",
													"        totalAdjEvenCount++;\r",
													"        \r",
													"    }\r",
													"    totalRecordCount++;\r",
													"}\r",
													"\r",
													"totalAdjCreditAmount = 0 - totalAdjCreditAmount;\r",
													"\r",
													"console.log(\"dr amt: \" + totalAdjDebitAmount);\r",
													"console.log(\"dr cnt: \" + totalAdjDebitCount);\r",
													"\r",
													"console.log(\"cr amt: \" + totalAdjCreditAmount);\r",
													"console.log(\"cr cnt: \" + totalAdjCreditCount);\r",
													"\r",
													"console.log(\"ev amt: \" + totalAdjEvenAmount);\r",
													"console.log(\"ev cnt: \" + totalAdjEvenCount);\r",
													"\r",
													"console.log(\"ttl cnt: \" + totalRecordCount);\r",
													"console.log(\"ttl amt (sum): \" + (totalAdjDebitAmount + totalAdjCreditAmount + totalAdjEvenAmount));\r",
													"\r",
													"console.log(\"ttl cnt (sum): \" + (totalAdjDebitCount + totalAdjCreditCount + totalAdjEvenCount));\r",
													"\r",
													"console.log(\"ttl cnt: \" + totalRecordCount);\r",
													"console.log(\"ttl amt (sum): \" + (totalAdjDebitAmount + totalAdjCreditAmount));\r",
													"\r",
													"console.log(\"ttl cnt (sum): \" + (totalAdjDebitCount + totalAdjCreditCount));\r",
													"\r",
													"console.log(\" ********** \");\r",
													"\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
													"\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "idempotency-key",
												"value": "12345",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "https://{{url}}/ucp/disputes",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"disputes"
											],
											"query": [
												{
													"key": "stage",
													"value": "CHARGEBACK",
													"disabled": true
												},
												{
													"key": "from_stage_time_created",
													"value": "{{from_time_created}}",
													"disabled": true
												},
												{
													"key": "to_stage_time_created",
													"value": "{{to_time_created}}",
													"disabled": true
												}
											]
										},
										"description": "This request retrieves all disputes from GP that have been made by a Payer or a Payer's Bank. User can pass in certain criteria in the query string in order to return specific types of disputes such as:\r\n- Chargebacks\r\n- Retrieval\r\n- Reversal\r\n- Arbitration\r\n- & more\r\n\r\nTo see further criteria, visit https://developer.globalpay.com/api/disputes#/Disputes/get_disputes\r\n\r\nAdditionally, the user can change page size, how the response is ordered and change the date from when the disputes date back too.\r\n\r\n\r\nIn the response received back, you will see the merchant_id along with the disputes and their reason code/description for the dispute."
									},
									"response": []
								},
								{
									"name": "Dispute Single",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//pm.environment.unset(\"doc_id\");\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
													"\r",
													"postman.setEnvironmentVariable(\"dis_id\", jsonData.id);\r",
													"\r",
													"pm.test(\"Document available\", function () {\r",
													"   pm.expect(jsonData.documents[0]).to.have.any.keys('id');\r",
													"postman.setEnvironmentVariable(\"doc_id\", jsonData.documents[0].id);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{url}}/ucp/disputes/{{DIS_ID}}",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"disputes",
												"{{DIS_ID}}"
											]
										},
										"description": "This request returns details about a specific dispute. User must include dispute id in query string.\r\n\r\nThe status of the specific dispute is returned along with what stage the dispute is in and reason for dispute and any documentation the issuer has provided regarding dispute.\r\n\r\nFor more info on getting specific dispute from API, visit https://developer.globalpay.com/api/disputes#/Dispute/get_disputes__id_"
									},
									"response": []
								},
								{
									"name": "Document",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{url}}/ucp/disputes/{{DIS_ID}}/documents/DOC_MyEvidence_234234AVCDE-1",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"disputes",
												"{{DIS_ID}}",
												"documents",
												"DOC_MyEvidence_234234AVCDE-1"
											]
										},
										"description": "This request is for retrieving a document that has been provided by the Issuer in a dispute. You must provide the dispute id and also the document id in the query string. In the response, you should receive the document in base 64.\r\n\r\nFor more info on getting a document in a dispute, visit: https://developer.globalpay.com/api/disputes#/Document/get_disputes__id__documents__doc_id_"
									},
									"response": []
								},
								{
									"name": "Accept Dispute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//pm.environment.unset(\"doc_id\");\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
													"\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											},
											{
												"key": "idempotency-key",
												"value": "12345",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{url}}/ucp/disputes/{{dis_id}}/acceptance",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"disputes",
												"{{dis_id}}",
												"acceptance"
											]
										},
										"description": "This request is to be ran in order to accept liability for the dispute which will involve financial impact to the merchant. The dispute id associated with dispute being accepted is to be passed into query string. On successfull acceptance of dispute, status in response will be 'CLOSED' and stage will be 'RETRIEVAL'.\r\n\r\nFor more details on this request and response received, visit: https://developer.globalpay.com/api/disputes#/Accept/post_disputes__id__acceptance"
									},
									"response": []
								},
								{
									"name": "Challenge Dispute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//pm.environment.unset(\"doc_id\");\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); \r",
													"\r",
													"\r",
													"pm.test(\"Document available\", function () {\r",
													"   pm.expect(jsonData.documents[0]).to.have.any.keys('id');\r",
													"postman.setEnvironmentVariable(\"doc_id\", jsonData.documents[0].id);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1500); "
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false,
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-GP-Version",
												"value": "{{version}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"documents\": [\n        {\n            \"b64_content\": \"SGV5LCBIb3cgYXJlIHlvdT8=\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{url}}/ucp/disputes/{{dis_id}}/challenge",
											"protocol": "https",
											"host": [
												"{{url}}"
											],
											"path": [
												"ucp",
												"disputes",
												"{{dis_id}}",
												"challenge"
											]
										},
										"description": "This request is to be ran in order to challenge a dispute or respond to a retrieval by providing relevant documentation. To provide documentation, input doc in base 64 format into body of request. The dispute id associated with dispute being challenged is to be passed into query string. A successful response will change the status to \"CLOSED\" and will assign a document id to the doc you provided in body of request.\r\n\r\nFor more details on this challenge dispute request and response received, visit: https://developer.globalpay.com/api/disputes#/Challenge"
									},
									"response": []
								}
							],
							"description": "Using the Global Payments Disputes API allows you to automate the reporting and management of transaction disputes. This includes the ability to accept or challenge disputes along with the reporting available across multiple channels and regions from a single source.\n\nWith the help of our tools such as Fraud Management, Invoicing, and Dynamic Narrative as well as our best practice guidelines, you can prevent disputes before they happen.\n\n1. Create an access token by running the access token POST. Use the “token” field in all future API request headers by setting the variable as a token and the value as the received token, or put the value in the environment. For information on this API please refer API spec [here](https://developer.globalpay.com/api/access-token).\n2. Get a Dispute in the response of the request by providing the DIS_ID. Please [click here](https://developer.globalpay.com/api/disputes) to refer to the Disputes API spec.\n3. Get a list of Disputes in the response of the request by providing a Date Range.\n4. DOCUMENT Please [click here](https://developer.globalpay.com/api/disputes) to refer to the Disputes API spec.\n5. A dispute challenge will require some evidence, depending on the type of case. This evidence can be in the form of a sales receipt, proof of delivery or a copy of the terms and conditions Please [click here](https://developer.globalpay.com/api/disputes) to refer to the Disputes API spec.\n6. To accept liability for a dispute, you just need to provide the unique ID of the case. Please [click here](https://developer.globalpay.com/api/disputes) to refer to the Disputes API spec.\n    \n\nFor more information see [Disputes Management](https://developer.globalpay.com/docs/dispute-mgt/guide) for a step-by-step guide."
						}
					],
					"description": "This folder will cover all of the reporting the API offers and how it can be utilized. We have settlement reporting, Real-Time Reporting and Dispute management."
				}
			],
			"description": "Any integrator who is not a partner is refered to as Standalone Merchant. This folder can be used by developers to go through various common transaction flows which can be achieved using Unifield Payments REST API."
		}
	]
}