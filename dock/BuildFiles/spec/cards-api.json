{
    "swagger": "2.0",
    "x-stoplight": {
        "id": "83weu55tssczi"
    },
    "info": {
        "description": "This repository is an API documentation of the Piercards, a module of the Vnext platform, powered by Conductor Technology.\nThe Piercards is a card manager that provides a variety of functions that allows for the client to generate card and all its lifecycle.\nIts possible too, the embossing card generation by associating layouts setup to the card.\n\nThe step-by-step should be to proceed with the download of this API Collection to your Postman, by clicking on the ``` Run in Postman ``` button on the top right of this page.\n## Setup\nBefore all, to access the API, the client need to be authorized and setup its card data on server side. For this should provides to Piercards setup:\n- Digital certificate (private key);\n- Bank Identification Number (“BIN”);\n\n## Certificate-based authentication\nA certificate-based authentication uses a public key cryptography and digital certificate do authenticate. The client sends a request with the public certificate key, and the server corfirms the validity of the digital signature. If the certificate has been issued by a trusted certificate authority, the client has the access allowed.\n\n## Generating card\nThe card generation is the main functionality of the module. When generating the card ``` /v1/card (post) ```, the issuer must provides:\n- enter the identifier of the embossing setup, previously embossing setup created ``` /v1/embossing-setup (post) ``` in order for the embossing file to be successfully generated.\n- when is generated, the card status can be ``` 'Pending' or 'Queue' ```. At 'Pending' the card is setted an already embossed card, and the application not will generating an embossing file to this card. At 'Queue' the card will be embossed and the embossing file will be generated.\n- the Virtual flag defines if the card is a virtual or not.\n\n## Embossing card\nThe card embossing process involves the entire process of print or stamp payment card details, like cardholder's name, card number and card expiration date. At the end of process the API generates a file based on a layout, with all cards data ready to emboss. The API allows to the issuer create and customize all the layout data presents in the file.\n\n**Embossing flow**\n\n<img src=\"https://vnext.conductor.com.br/piercards/v1/doc/images/Diagrama_de_fluxo_de_embossing.png\" />\n\n\n**Custom layouts**\n\nCustomize layouts allows the client to change the layout description and its field's properties, like description, type or formatters. When a layout is customized, it inherits all fields from the parent layout. When a field is custom its overwrites the parent layout field.\nTo customize a layout, its possible:\n- change layout description;\n- customize fields, like alter field type, position in layout (Header, Detail or Trailer), or the value size;\n- field formatters, according with the value and the card design ``` e.g. Fill with blank spaces ``` or ``` e.g. Fill with zero values ```\n\n**Metadata**\n\nIts possible to create extra data and to add its to embossing card file, it is the metadata. They can be created and provided in the card embossing setup.  The metadata allows to issuer:\n- add an additional header, including text and an image, like logos, QR code;\n- tooltips and description fields for individual properties;\n- extra embossing file data;\n\n<img src=\"https://vnext.conductor.com.br/piercards/v1/doc/images/Metadata_card.png\" alt=\"drawing\" width=\"300\" height=\"145\"/>\n\n\n\n## Api Specifications\n\n**Default errors http codes response:**\n\nCode | Description\n-----|-----\n400 | Invalid json format\n400 | Parameter id informed is not a valid UUID\n401 | Issuer ID not found on request headers\n401 | Issuer doesn't have permission for this feature\n404 | Resource not found\n500 | An unexpected server error\n\n\n\n\n\n\n## Architecture",
        "title": "Cards API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "00a423ff-5b75-412b-8edd-beaec375005a.mock.pstmn.io",
    "basePath": "/",
    "paths": {
        "/batches": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "List all the batches on filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Batches"
                ],
                "summary": "List batches",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'brand')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/batches.BatchPageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates a new batch. The batch contains additional features to the card, working with metadata.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Batches"
                ],
                "summary": "Generate a batch",
                "parameters": [
                    {
                        "description": "Object for persisting a card batch",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/batches.BatchPersist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/batches.BatchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/batches/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Finds for a batch with given ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Batches"
                ],
                "summary": "Find batch by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the batch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/batches.BatchResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Allows updating the batch with give ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Batches"
                ],
                "summary": "Update a batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the batch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a batch",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/batches.BatchUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/batches.BatchResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to list all exists cards in issuer database\n\n**Errors http codes response:**\n\nCode | Description\n-----|-----\n400 | Invalid format for id entered\n400 | Account transaction counter doesn't allow negative number\n400 | Invalid pin",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "List all the cards generated by issuer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'brand', 'embossingStatus DESC', 'virtual ASC', 'brand DESC, status')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Card's art identification",
                        "name": "artId",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Should be virtual",
                        "name": "virtual",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Card's brand",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Card's embossment status",
                        "name": "embossingStatus",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Card's bin",
                        "name": "bin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group of cardholders",
                        "name": "cardHolderGroup",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Card's status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "External identification",
                        "name": "nsuExternal",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Embossing Configuration Id",
                        "name": "embossingSetupId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardPageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to generate a card. The card generation is the main functionality of the module. When generating the card ``` /v1/card (post) ```, the issuer must enter the identifier of the embossing setup, previously embossing setup created ``` /v1/embossing-setup (post) ``` in order for the embossing file to be successfully generated. When is generated the card status can be ``` 'Pending' or 'Queue' ```. At 'Pending' the card is setted an already embossed card, and the application not will generating an embossing file to this card. At 'Queue' the card will be embossed and the embossing file will be generated. The Virtual flag defines if the card is a virtual or not",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Generate a card",
                "parameters": [
                    {
                        "description": "Object for persisting the card's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/check-pan": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to find a card by it's plain number. Also handles a card's application, if it is informed. A new application is created in case it does not exist",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Find card by its PAN",
                "parameters": [
                    {
                        "description": "Object with the card's pan and application identifier",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardPanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardSensitivePinResponse"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/card-details": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to find a card by it's plain number.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Find card details by PAN",
                "parameters": [
                    {
                        "description": "Object with the card's pan",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardDetailRequest"
                        },
                        "x-examples": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardDetailResponse"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to find a card with given ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Find card by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to change card's Status and EmbossingStatus",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Partially update a card",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a card's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardPartialUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/active-function": {
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to change card's Active Function",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Update active function",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a card's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.ActiveFunctionUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/atc": {
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to update a card application transaction counter. This is used by transaction authorization",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Update card's application transaction counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating an application transaction counter",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardATCUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/check-pin": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to validate a card's pin. It returns with an OK HttpStatus if the given pin is the same as the card's",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Validate a card's pin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with the card's pin",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardCheckPinRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/dynamic-cvv": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The query of the dynamic cvv is performed using the card identifier. The validations will be applied to the existence of the card, the existence of a previously registered dynamic cvv and that its expiration date is valid. For the expiration date, it is considered valid when the date in question is less than or equal to the date of the request.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Find the dynamic CVV by card",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.DynamicCvvResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates a new dynamic cvv for the informed card. The expiration date is a mandatory field and cannot be less than the current date. The format for the expiration date must follow the YYYY-MM-DDTHH:mm:ss(+|-)00:00, where (+|-)00:00 represents the timezone, for example: UTC +03:00",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Create a dynamic CVV",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for create a new dynamic cvv",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.DynamicCvvPersist"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/cards.DynamicCvvResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Forces a dynamic CVV to expire. When expired it is no longer possible to make purchases with this CVV",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Expires a dynamic CVV",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/decrease": {
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Decrement the card's invalid password counter",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Decrease the card's invalid password counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/increase": {
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Increment the card's invalid password counter",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Increase the card's invalid password counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/embossment": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to generate a card's embossment data",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Generate card embossment data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardEmbossResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/pin": {
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to change card's pin",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Change card's pin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a card's pin",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardPinUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/reissue": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Reissue a new card",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Reissue a card",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for reissue a new card",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cards.CardPersistReissue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cards.CardResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/cards/{id}/resend-embossment": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the card",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "summary": "Create a card resend embossment"
            }
        },
        "/embossing-setup": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to list all the setups for generating embossing files",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Setup"
                ],
                "summary": "List all embossing setup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'brand', 'brand DESC', 'brand ASC', 'brand DESC, status')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupResponsePage"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to create a new embossing setup, to associate new cards to file templates",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Setup"
                ],
                "summary": "Generate a embossing setup",
                "parameters": [
                    {
                        "description": "Object for persisting the embossing setup",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupPersist"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/embossing-setup/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to find a embossing setup by its identifier",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Setup"
                ],
                "summary": "Find embossing setup by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the embossing setup",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to update a embossing setup",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Setup"
                ],
                "summary": "Updates a embossing setup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the embossing setup",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating the embossing setup",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/embossing_setup.EmbossingSetupResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The representation of a processing performed by the physical embossing file generation routine is presented as a file. This resource allows to list all embossing files",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "List embossing files",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'createdAt ASC', 'status DESC', 'generation DESC')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Files status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Generation file",
                        "name": "generation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Created in",
                        "name": "createdAt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.FilePageResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The representation of a processing performed by the physical embossing file generation routine is presented as a file. This resource allows to return a file by its identifier",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Find file by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID File",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.FileResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to update an embossing generation file representation",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Update a file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID File",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a files data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/files.FileUpdateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "File not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files/{id}/generate": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to generate and return a .txt file of the embossing file representation. Fetches all data generated from cards, applying layout, fields and formatters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Generate a file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID File",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/files/{id}/headers": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Return lines referring to file header",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Generate headers of file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/files/{id}/lines": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "List all the cards ready to embossing based on pagination",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "List emboss records of file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/embossing.InternalEmbossingResponsePage"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files/{id}/requeue": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to requeue cards associated for a given file ID, generating a new embossing file data, associating it to a new created file. This routine could be used in case of fail in generated embossing files data before",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Requeue and generates new embossing files data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/files/{id}/trailers": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Return lines referring to file trailer",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Generate trailers of file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/formatters": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to list all the field formatters",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "List field formatters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'createdAt', 'createdAt DESC', 'createdAt ASC', 'createdAt DESC, name')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterResponsePage"
                        }
                    },
                    "204": {
                        "description": "Formatter Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to create a new field formatter and evaluate it source code",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "Generate a field formatter",
                "parameters": [
                    {
                        "description": "Object for persisting the field formatter",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterPersist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/formatters/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to find for a field formatter by its identifier",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "Find formatter by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the formatter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterResponse"
                        }
                    },
                    "204": {
                        "description": "Formatter Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to update a field formatter",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "Update a formatter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the formatter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a formatter's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterUpdateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterResponse"
                        }
                    },
                    "204": {
                        "description": "Formatter Not Found"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to delete a field formatter",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "Deletes a formatter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the formatter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted"
                    },
                    "204": {
                        "description": "Formatter Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/formatters/{id}/evaluate": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Layout's fields has formatters that allows to formatter its values. (e.g. 'Fill with blank space', 'Fill with zero values'). This resource allows to evaluate a formatter's source code",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Formatters"
                ],
                "summary": "Evaluates a formatter's source",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the formatter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for evaluating a formatter with the input",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterEvaluateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/formatters.FormatterEvaluateResponse"
                        }
                    },
                    "204": {
                        "description": "Formatter Not Found"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/internals/tenants": {
            "get": {
                "description": "List all the tenants",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Internals"
                ],
                "summary": "List tenants",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'brand', 'brand DESC', 'brand ASC', 'brand DESC, status')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tenants.Tenant"
                            }
                        }
                    },
                    "204": {
                        "description": "Tenant not found"
                    }
                }
            },
            "post": {
                "description": "Creates a new tenant allowing a new issuer to use the API",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Internals"
                ],
                "summary": "Create a tenant",
                "parameters": [
                    {
                        "description": "Object for creating a tenant",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenants.TenantPersist"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/tenants.Tenant"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/internals/tenants/{id}": {
            "get": {
                "description": "Finds a tenant by its ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Internals"
                ],
                "summary": "Find tenant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tenants.Tenant"
                        }
                    },
                    "204": {
                        "description": "Tenant not found"
                    }
                }
            },
            "put": {
                "description": "Updates a tenant by its ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Internals"
                ],
                "summary": "Update a tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a tenant",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tenants.TenantPersist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/tenants.Tenant"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "delete": {
                "description": "Deletes a tenant by its ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Internals"
                ],
                "summary": "Delete a tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the tenant",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content"
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/layouts": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The card embossing process involves, before all, the embossing file generation that contains the cards embossing data. This file has your own layout. This resource allows to list all layouts",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Layouts"
                ],
                "summary": "List layouts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'description', 'description DESC')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutResponsePage"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The card embossing process involves, before all, the embossing file generation that contains the cards embossing data. This file has your own layout. This resource allows to create a new layout",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Layouts"
                ],
                "summary": "Create a layout",
                "parameters": [
                    {
                        "description": "Object for persisting the layout's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutCompactResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/layouts/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The card embossing process involves, before all, the embossing file generation that contains the cards embossing data. This file has your own layout. This resource allows to find a layout by its identifier",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Layouts"
                ],
                "summary": "Find layout by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The card embossing process involves, before all, the embossing file generation that contains the cards embossing data. This file has your own layout. This resource allows  to change layout's description",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Layouts"
                ],
                "summary": "Update partially a layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a layout's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutPartialUpdate"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/layouts/{id}/customize": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The card embossing process involves, before all, the embossing file generation that contains the cards embossing data. This file has your own default layout that can be customized. The personalized layout inherites all fields from its default layout. Only default layouts can be customized. Changing a default layout (it's fields) will affect it's customizeds layouts. This resource allows to customize a default",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Layouts"
                ],
                "summary": "Customize a layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the parent layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for persisting the customized layout's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.LayoutCompactResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/layouts/{id}/fields": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to list all fields that belongs to the given layout id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Fields"
                ],
                "summary": "List fields by its layout",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'description', 'description DESC')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The identifier for the field's layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldsResponsePage"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to create a new field for a layout. Its validate the existence of the given layout and formatter.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Fields"
                ],
                "summary": "Creates a new field for a layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for persisting the field's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/layouts/{id}/fields/{fieldId}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to return a field by its identifier.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Fields"
                ],
                "summary": "Find field by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier for the field",
                        "name": "fieldId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to partially update a field",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Fields"
                ],
                "summary": "Partially update a field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier for the field",
                        "name": "fieldId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a field's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldPartialUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/layouts/{id}/fields/{fieldId}/customize": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "This resource allows to customize a field. Its overrides the behavior of an existing field. Only works if the given layout identifier belongs to a customized layout. By creating a customized field, the embossing process will ignore the default field behavior, overriding by its customized one. A field can only be customized once per layout.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Fields"
                ],
                "summary": "Customize a field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for a customized layout",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The identifier for the parent field to be customized",
                        "name": "fieldId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for persisting the field's data",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/layouts.FieldResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/manager/health": {
            "get": {
                "description": "Checks the API and it's components health",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Management"
                ],
                "summary": "Check API and its components health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manager.ManagerHealth"
                        }
                    }
                }
            }
        },
        "/manager/info": {
            "get": {
                "description": "Checks the API and it's components versioning information",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Management"
                ],
                "summary": "Check version information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manager.ManagerInfoResponse"
                        }
                    }
                }
            }
        },
        "/metadata": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The embossing files can hold additional fields beyond the card data. This resource allows to list all metadata",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "List metadatas",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'name', 'value DESC', 'value ASC')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "External identification",
                        "name": "externalId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataPageResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The embossing files can hold additional fields beyond the card data. This resource allows to create a new metadata validating its type",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Create a metadata",
                "parameters": [
                    {
                        "description": "Object for persisting the metadata",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataGenericPersist"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/metadata/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The embossing files can hold additional fields beyond the card data. This resource allows to find a metadata by its identifier",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Find metadata by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the metadata",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The embossing files can hold additional fields beyond the card data. This resource allows to update a metadata",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Update a metadata by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the metadata",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating the metadata",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/metadatas.MetadataResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "The embossing files can hold additional fields beyond the card data. This resource allows to delete a metadata",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Delete a metadata by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the metadata",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "List all the profiles on filters and pagination.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "List profiles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page of the current result set",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Amount of data that should be returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Attribute to order the list (e.g. 'brand')",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfilePageResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates a new profile. The profile contains additional features to the card, working with metadata.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Generate a profile",
                "parameters": [
                    {
                        "description": "Object for persisting a card profile",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfilePersist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/profiles/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Finds for a profile with given ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Find profile by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Allows updating the profile with give ID",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update a profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The identifier for the profile",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a profile",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileResponse"
                        }
                    },
                    "204": {
                        "description": "Not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "batches.BatchPageResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/batches.BatchResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "batches.BatchPersist": {
            "type": "object",
            "properties": {
                "model": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "integer"
                }
            }
        },
        "batches.BatchResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "batches.BatchUpdate": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "integer"
                }
            }
        },
        "cards.ActiveFunctionUpdate": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string"
                }
            }
        },
        "cards.AddressResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "complement": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "cards.CardATCUpdate": {
            "type": "object",
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "transactionCounter": {
                    "type": "integer"
                }
            }
        },
        "cards.CardCheckPinRequest": {
            "type": "object",
            "properties": {
                "pinCode": {
                    "type": "string"
                }
            }
        },
        "cards.CardCompactResponse": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string"
                },
                "artId": {
                    "type": "integer"
                },
                "brand": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "embossedAt": {
                    "type": "string"
                },
                "embossingSetupId": {
                    "type": "string"
                },
                "embossingStatus": {
                    "type": "string"
                },
                "expirationDateFormat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invalidPinCounter": {
                    "type": "integer"
                },
                "nsuExternal": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "secondaryExpirationDateFormat": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.CardCreateRequest": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1",
                        "2"
                    ]
                },
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardCreateRequestAddress"
                },
                "artId": {
                    "type": "integer"
                },
                "batchGroup": {
                    "type": "string"
                },
                "bin": {
                    "type": "string"
                },
                "brand": {
                    "type": "string",
                    "enum": [
                        "VISA",
                        "MASTERCARD",
                        "ELO"
                    ]
                },
                "cardHolderGroup": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "embossingSetupId": {
                    "type": "string"
                },
                "embossingStatus": {
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "QUEUE"
                    ]
                },
                "expirationDate": {
                    "type": "string"
                },
                "expirationDateFormat": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardMetadataPersist"
                    }
                },
                "nsuExternal": {
                    "type": "string"
                },
                "pan": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardCreateRequestPan"
                },
                "pin": {
                    "type": "string"
                },
                "profileId": {
                    "type": "string"
                },
                "secondaryExpirationDateFormat": {
                    "type": "string"
                },
                "serviceCode": {
                    "type": "string"
                },
                "trackingCode": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.CardCreateRequestAddress": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "complement": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "cards.CardCreateRequestPan": {
            "type": "object",
            "properties": {
                "range": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardCreateRequestPanRange"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "cards.CardCreateRequestPanRange": {
            "type": "object",
            "properties": {
                "final": {
                    "type": "integer"
                },
                "initial": {
                    "type": "integer"
                }
            }
        },
        "cards.CardDetailRequest": {
            "type": "object",
            "properties": {
                "pan": {
                    "type": "string"
                }
            }
        },
        "cards.CardDetailResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "dynamicCVV": {
                    "type": "object",
                    "$ref": "#/definitions/cards.DynamicCvvResponse"
                },
                "embossedAt": {
                    "type": "string"
                },
                "encryptedPin": {
                    "type": "string"
                },
                "encryptedPin03": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "expirationDateFormat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invalidPinCounter": {
                    "type": "integer"
                },
                "secondaryExpirationDateFormat": {
                    "type": "string"
                },
                "serviceCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.CardEmbossResponse": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string"
                },
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/cards.AddressResponse"
                },
                "artId": {
                    "type": "integer"
                },
                "batchGroup": {
                    "type": "string"
                },
                "bin": {
                    "type": "string"
                },
                "binKeysId": {
                    "type": "integer"
                },
                "brand": {
                    "type": "string"
                },
                "cardHolderGroup": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "embossedAt": {
                    "type": "string"
                },
                "embossingStatus": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maskedPan": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardMetadataResponse"
                    }
                },
                "sensitiveData": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardEmbossSensitiveDataResponse"
                },
                "serviceCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trackingCode": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.CardEmbossResponseStripe": {
            "type": "object",
            "properties": {
                "cvvFirstTrack": {
                    "type": "string"
                },
                "cvvSecondTrack": {
                    "type": "string"
                },
                "firstTrack": {
                    "type": "string"
                },
                "secondTrack": {
                    "type": "string"
                }
            }
        },
        "cards.CardEmbossSensitiveDataResponse": {
            "type": "object",
            "properties": {
                "cvv": {
                    "type": "string"
                },
                "cvv2": {
                    "type": "string"
                },
                "icvv": {
                    "type": "string"
                },
                "pan": {
                    "type": "string"
                },
                "stripe": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardEmbossResponseStripe"
                }
            }
        },
        "cards.CardMetadataPersist": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "cards.CardMetadataResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "cards.CardPageResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardCompactResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "cards.CardPanRequest": {
            "type": "object",
            "properties": {
                "applicationId": {
                    "type": "string"
                },
                "pan": {
                    "type": "string"
                }
            }
        },
        "cards.CardPartialUpdate": {
            "type": "object",
            "properties": {
                "embossedAt": {
                    "type": "string",
                    "example": "yyyy-mm-ddThh:mm:ssZ"
                },
                "embossingStatus": {
                    "type": "string"
                },
                "final": {
                    "type": "integer"
                },
                "initial": {
                    "type": "integer"
                },
                "invalidPinCounter": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "cards.CardPersistReissue": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardCreateRequestAddress"
                }
            }
        },
        "cards.CardPinUpdate": {
            "type": "object",
            "properties": {
                "pinCode": {
                    "type": "string"
                }
            }
        },
        "cards.CardProfileResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxInvalidPinAttempts": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "cards.CardProfilesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "cards.CardResponse": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string"
                },
                "address": {
                    "type": "object",
                    "$ref": "#/definitions/cards.AddressResponse"
                },
                "artId": {
                    "type": "integer"
                },
                "batchGroup": {
                    "type": "string"
                },
                "bin": {
                    "type": "string"
                },
                "binKeysId": {
                    "type": "integer"
                },
                "brand": {
                    "type": "string"
                },
                "cardHolderGroup": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "embossedAt": {
                    "type": "string"
                },
                "embossingSetupId": {
                    "type": "string"
                },
                "embossingStatus": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "expirationDateFormat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invalidPinCounter": {
                    "type": "integer"
                },
                "maskedPan": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardMetadataResponse"
                    }
                },
                "nsuExternal": {
                    "type": "string"
                },
                "profile": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardProfileResponse"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardProfilesResponse"
                    }
                },
                "secondaryExpirationDateFormat": {
                    "type": "string"
                },
                "serviceCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trackingCode": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.CardSensitivePinResponse": {
            "type": "object",
            "properties": {
                "activeFunction": {
                    "type": "string"
                },
                "artId": {
                    "type": "integer"
                },
                "atc": {
                    "type": "integer"
                },
                "bin": {
                    "type": "string"
                },
                "binKeysId": {
                    "type": "integer"
                },
                "brand": {
                    "type": "string"
                },
                "cardHolderName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "embossedAt": {
                    "type": "string"
                },
                "embossingSetupId": {
                    "type": "string"
                },
                "embossingStatus": {
                    "type": "string"
                },
                "encryptedPin": {
                    "type": "string"
                },
                "encryptedPin03": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "expirationDateFormat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invalidPinCounter": {
                    "type": "integer"
                },
                "maskedPan": {
                    "type": "string"
                },
                "nsuExternal": {
                    "type": "string"
                },
                "profile": {
                    "type": "object",
                    "$ref": "#/definitions/cards.CardProfileResponse"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cards.CardProfilesResponse"
                    }
                },
                "secondaryExpirationDateFormat": {
                    "type": "string"
                },
                "serviceCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "trackingCode": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "virtual": {
                    "type": "boolean"
                }
            }
        },
        "cards.DynamicCvvPersist": {
            "type": "object",
            "properties": {
                "expirationDate": {
                    "type": "string"
                }
            }
        },
        "cards.DynamicCvvResponse": {
            "type": "object",
            "properties": {
                "cardId": {
                    "type": "string"
                },
                "cvv": {
                    "type": "string"
                },
                "expirationDate": {
                    "type": "string"
                },
                "generationDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "serviceCode": {
                    "type": "string"
                }
            }
        },
        "embossing.InternalEmbossingResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "embossing.InternalEmbossingResponsePage": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/embossing.InternalEmbossingResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "embossing_setup.EmbossingSetupPersist": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "layoutId": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/metadatas.MetadataPersist"
                    }
                }
            }
        },
        "embossing_setup.EmbossingSetupResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "layoutId": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/metadatas.MetadataResponse"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "embossing_setup.EmbossingSetupResponsePage": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/embossing_setup.EmbossingSetupResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "embossing_setup.EmbossingSetupUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "layoutId": {
                    "type": "string"
                }
            }
        },
        "files.FilePageResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/files.FileResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "files.FileResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "generation": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "quantum": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "files.FileUpdateDto": {
            "type": "object",
            "properties": {
                "generation": {
                    "type": "string"
                },
                "quantum": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "formatters.FormatterEvaluateRequest": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                }
            }
        },
        "formatters.FormatterEvaluateResponse": {
            "type": "object",
            "properties": {
                "output": {
                    "type": "string"
                }
            }
        },
        "formatters.FormatterPersist": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "testLength": {
                    "type": "integer"
                },
                "testValue": {
                    "type": "string"
                }
            }
        },
        "formatters.FormatterResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "testResult": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "formatters.FormatterResponseCompact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "formatters.FormatterResponsePage": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/formatters.FormatterResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "formatters.FormatterUpdateDto": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "testLength": {
                    "type": "integer"
                },
                "testValue": {
                    "type": "string"
                }
            }
        },
        "layouts.FieldCreateRequest": {
            "type": "object",
            "properties": {
                "columnNumber": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "formatterId": {
                    "type": "string"
                },
                "lineNumber": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "layouts.FieldPartialUpdate": {
            "type": "object",
            "properties": {
                "columnNumber": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "formatterId": {
                    "type": "string"
                },
                "lineNumber": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "layouts.FieldResponse": {
            "type": "object",
            "properties": {
                "columnNumber": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "formatter": {
                    "type": "object",
                    "$ref": "#/definitions/formatters.FormatterResponseCompact"
                },
                "id": {
                    "type": "string"
                },
                "lineNumber": {
                    "type": "integer"
                },
                "name": {
                    "description": "CreatedAt    time.Time  `json:\"createdAt\"`\nUpdatedAt    time.Time  `json:\"updatedAt\"`\nDeletedAt    *time.Time `json:\"deletedAt,omitempty\"`",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "layouts.FieldResponseCompact": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "CreatedAt    time.Time  `json:\"createdAt\"`\nUpdatedAt    time.Time  `json:\"updatedAt\"`\nDeletedAt    *time.Time `json:\"deletedAt,omitempty\"`",
                    "type": "string"
                }
            }
        },
        "layouts.FieldsResponsePage": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/layouts.FieldResponseCompact"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "layouts.LayoutCompactResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isCustomized": {
                    "type": "boolean"
                },
                "parentLayoutId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "layouts.LayoutCreateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "layouts.LayoutPartialUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "layouts.LayoutResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/layouts.FieldResponseCompact"
                    }
                },
                "id": {
                    "type": "string"
                },
                "isCustomized": {
                    "type": "boolean"
                },
                "parentLayoutId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "layouts.LayoutResponsePage": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/layouts.LayoutCompactResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "manager.ManagerHealth": {
            "type": "object",
            "properties": {
                "db": {
                    "type": "object",
                    "$ref": "#/definitions/manager.ManagerHealthDB"
                },
                "diskSpace": {
                    "type": "object",
                    "$ref": "#/definitions/manager.ManagerHealthDiskSpace"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "manager.ManagerHealthDB": {
            "type": "object",
            "properties": {
                "hello": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "manager.ManagerHealthDiskSpace": {
            "type": "object",
            "properties": {
                "free": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "threshold": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "manager.ManagerInfoResponse": {
            "type": "object",
            "properties": {
                "app": {
                    "type": "object",
                    "$ref": "#/definitions/manager.ManagerInfoResponseApp"
                },
                "git": {
                    "type": "object",
                    "$ref": "#/definitions/manager.ManagerInfoResponseGitCommit"
                }
            }
        },
        "manager.ManagerInfoResponseApp": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "manager.ManagerInfoResponseGitCommit": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "metadatas.MetadataGenericPersist": {
            "type": "object",
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "CARD|EMBOSSINGSETUP"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "metadatas.MetadataPageResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/metadatas.MetadataResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "metadatas.MetadataPersist": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "metadatas.MetadataResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "metadatas.MetadataUpdate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "profiles.ProfilePageResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "nextPage": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "prevPage": {
                    "type": "integer"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/profiles.ProfileResponse"
                    }
                },
                "totalPages": {
                    "type": "integer"
                },
                "totalRecords": {
                    "type": "integer"
                }
            }
        },
        "profiles.ProfilePersist": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "profiles.ProfileResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "profiles.ProfileUpdate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "tenants.Tenant": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "dialect": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "issuer_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "tenants.TenantPersist": {
            "type": "object",
            "properties": {
                "dialect": {
                    "type": "string"
                },
                "issuer_id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "issuerIdAuthentication": {
            "type": "apiKey",
            "name": "issuer_id",
            "in": "header"
        }
    },
    "schemes": [
        "https"
    ]
}