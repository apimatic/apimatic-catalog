{
    "swagger": "2.0",
    "x-stoplight": {
        "id": "vz3pudwvpz4gb"
    },
    "info": {
        "description": "API documentation for Person Service",
        "title": "Person API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/v1",
    "paths": {
        "/persons": {
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates a new Person with it's documents, addresses and phone information",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Create a person",
                "parameters": [
                    {
                        "description": "Object for persisting the person",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.Persist"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/person.Response"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/persons/{id}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Returns a person by the identification code\nPersons resources can be used to create (\"/persons\" POST), update (\"/persons/{id}\" PUT), list (\"/persons\" GET) persons",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Find a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Response"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Updates a person\nPersons resources can be used to find (\"/persons/{id}\" GET), list (\"/persons\" GET) persons",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Update a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a person",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/person.Persist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.Response"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/persons/{id}/addresses": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Returns a person's address list. If the person is not found a failure message will be returned.\nAddresses resources can be used to create (\"/persons/{id}/addresses\" POST), update (\"/persons/{id}/addresses/{addId}\" PUT) addresses",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "List a person's addresses by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.PersonAddressResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates an address and attaches it to a person. If the person is not found a failure message will be returned.\nPersons resources can be used to find (\"/persons/{id}\" GET), list (\"/persons\" GET) persons",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Creates an address and attaches it to a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for persisting the person",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/address.PersistList"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/address.Persist"
                            }
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/persons/{id}/addresses/{addId}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Returns an address by identification. If the person or address is not found a failure message will be returned\nAddress resources can be used to create (\"/persons/{id}/addresses\" POST), update (\"/persons/{id}/addresses/{addId}\" GET) addresses",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Find an address by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Address's identification code",
                        "name": "addId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/address.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Person or Address not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Updates a person address. If the person or address is not found a failure message will be returned.\nAddress resources can be used to find (\"/persons/{id}/addresses/{addId}\" GET), list (\"/persons/{id}/addresses\" GET) addresses",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Update an addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Address's identification code",
                        "name": "addId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating an address",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/address.AddressUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/address.Response"
                        }
                    },
                    "204": {
                        "description": "Person or Address not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/persons/{id}/documents": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Returns a person's document list. If the person is not found a failure message will be returned.\nDocument resources can be used to create (\"/persons/{id}/documents\" POST), update (\"/persons/{id}/documents/{id}\" PUT) documents",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "List the documents by person ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.PersonDocumentsReponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Creates and attaches a document to a person. If the person is not found a failure message will be returned.\nPersons resources can be used to find (\"/persons/{id}\" GET), list (\"/persons\" GET) persons",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Creates and attaches a document to a person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a person",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.DocumentsPersist"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.PersonDocumentsReponse"
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            }
        },
        "/persons/{id}/documents/{docId}": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Return a document by identification. If the person or document is not found a failure message will be returned\nDocument resources can be used to create (\"/persons/{id}/documents\" POST), update (\"/persons/documents/{docId}\" GET) persons",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Find a document by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document's identification code",
                        "name": "docId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/document.Response"
                        }
                    },
                    "204": {
                        "description": "Person or Document not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Updates a document",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "Updates a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document's identification code",
                        "name": "docId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object for updating a document",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/document.DocumentUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/document.Response"
                        }
                    },
                    "204": {
                        "description": "Person or document not found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/persons/{id}/phones": {
            "get": {
                "security": [
                    {
                        "issuerIdAuthentication": []
                    }
                ],
                "description": "Returns a person's phone list. If the person is not found a failure message will be returned.\nPhones resources can be used to create (\"/persons/{id}/phones\" POST), update (\"/persons/{id}/phones/{id}\" PUT) phones",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Persons"
                ],
                "summary": "List the person's phones",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Person's identification code",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/person.PersonPhonesResponse"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "address.Address": {
            "type": "object",
            "properties": {
                "addressType": {
                    "description": "Type of this address`\t\t\t\t\t\t\t\t\t\t\t\t\t//Type of this address (0",
                    "type": "string",
                    "enum": [
                        "Residential",
                        "Commercial",
                        "CardDelivery"
                    ],
                    "example": "Residential"
                },
                "companyID": {
                    "description": "Company's identification code",
                    "type": "string",
                    "example": "e4a8910c-c9b2-4c26-9da9-ad067b20824a"
                },
                "complement": {
                    "description": "Address's complement",
                    "type": "string"
                },
                "createdAt": {
                    "description": "Date this register was created",
                    "type": "string"
                },
                "deletedAt": {
                    "description": "Date it was deleted",
                    "type": "string"
                },
                "id": {
                    "description": "Address's identification code",
                    "type": "string",
                    "example": "e4a8910c-c9b2-4c26-9da9-ad067b20824a"
                },
                "main": {
                    "description": "Indicates if this is the main person's address",
                    "type": "boolean"
                },
                "neighborhood": {
                    "description": "Address's neighborhood",
                    "type": "string"
                },
                "number": {
                    "description": "Address's number",
                    "type": "string"
                },
                "personID": {
                    "description": "Person's identification code",
                    "type": "string",
                    "example": "e4a8910c-c9b2-4c26-9da9-ad067b20824a"
                },
                "street": {
                    "description": "Address's street",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Date of the last time it was updated",
                    "type": "string"
                },
                "zipCode": {
                    "description": "Object for zip code information",
                    "$ref": "#/definitions/address.ZipCode"
                },
                "zipCodeID": {
                    "description": "ZipCode's identification code",
                    "type": "string",
                    "example": "e4a8910c-c9b2-4c26-9da9-ad067b20824a"
                }
            }
        },
        "address.AddressUpdate": {
            "type": "object",
            "properties": {
                "addressType": {
                    "description": "Type of this address",
                    "type": "string",
                    "enum": [
                        "Residential",
                        " Commercial",
                        " CardDelivery"
                    ],
                    "example": "Residential"
                },
                "complement": {
                    "description": "Any address complement",
                    "type": "string"
                },
                "isPrimary": {
                    "type": "boolean"
                },
                "neighborhood": {
                    "description": "Address's neighborhood",
                    "type": "string"
                },
                "number": {
                    "description": "Address's number",
                    "type": "string"
                },
                "street": {
                    "description": "Address's street",
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "address.Persist": {
            "type": "object",
            "required": [
                "addressType",
                "isPrimary",
                "zipCode"
            ],
            "properties": {
                "addressType": {
                    "description": "Type of this address",
                    "type": "string",
                    "enum": [
                        "Residential",
                        " Commercial",
                        " CardDelivery"
                    ],
                    "example": "Residential"
                },
                "complement": {
                    "description": "Any address complement",
                    "type": "string"
                },
                "isPrimary": {
                    "description": "Indicates if this is the person's primary address",
                    "type": "boolean"
                },
                "neighborhood": {
                    "description": "Address's neighborhood",
                    "type": "string"
                },
                "number": {
                    "description": "Address's number",
                    "type": "string"
                },
                "street": {
                    "description": "Address's street",
                    "type": "string"
                },
                "zipCode": {
                    "description": "Address's zip code",
                    "type": "string"
                }
            }
        },
        "address.PersistList": {
            "type": "object",
            "required": [
                "addresses"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/address.Persist"
                    }
                }
            }
        },
        "address.Response": {
            "type": "object",
            "properties": {
                "addressType": {
                    "description": "Type of this address",
                    "type": "string",
                    "enum": [
                        "Residential",
                        "Commercial",
                        "CardDelivery"
                    ]
                },
                "complement": {
                    "description": "Any address complement",
                    "type": "string"
                },
                "id": {
                    "description": "Address's identification code",
                    "type": "string",
                    "example": "da6e68ab-0389-4832-ae6c-46cd37dc8beb"
                },
                "isPrimary": {
                    "description": "Indicates if this is the person's main address",
                    "type": "boolean"
                },
                "neighborhood": {
                    "description": "Address's neighborhood",
                    "type": "string"
                },
                "number": {
                    "description": "Address's number",
                    "type": "string"
                },
                "personID": {
                    "description": "Person's identification code",
                    "type": "string",
                    "example": "da6e68ab-0389-4832-ae6c-46cd37dc8beb"
                },
                "street": {
                    "description": "Address's street",
                    "type": "string"
                },
                "zipCode": {
                    "description": "ZipCode response object",
                    "$ref": "#/definitions/address.ZipCodeResponse"
                },
                "zipCodeId": {
                    "description": "ZipCode's identification code",
                    "type": "string",
                    "example": "da6e68ab-0389-4832-ae6c-46cd37dc8beb"
                }
            }
        },
        "address.ZipCode": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "Zip code's city (eg. São Paulo)",
                    "type": "string",
                    "example": "São Paulo"
                },
                "country": {
                    "description": "Zip code's country (eg. Brazil)",
                    "type": "string",
                    "example": "São Paulo"
                },
                "createdAt": {
                    "description": "Date this zip code register was created",
                    "type": "string"
                },
                "id": {
                    "description": "Zip code's identification code",
                    "type": "string",
                    "example": "e4a8910c-c9b2-4c26-9da9-ad067b20824a"
                },
                "state": {
                    "description": "Zip code's state (eg. São Paulo)",
                    "type": "string",
                    "example": "São Paulo"
                },
                "updatedAt": {
                    "description": "Date the last time it was updated",
                    "type": "string"
                },
                "zipcode": {
                    "description": "Zip code's number",
                    "type": "string"
                }
            }
        },
        "address.ZipCodeResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "ZipCode's city (eg. São Paulo)",
                    "type": "string"
                },
                "country": {
                    "description": "ZipCode's country (eg. Brazil)",
                    "type": "string"
                },
                "id": {
                    "description": "ZipCode's identification code",
                    "type": "string",
                    "example": "0955f40f-4bd6-4f72-a320-dd0ded903f7c"
                },
                "number": {
                    "description": "ZipCode's number",
                    "type": "string"
                },
                "state": {
                    "description": "ZipCode's state (eg. São Paulo)",
                    "type": "string"
                }
            }
        },
        "document.Document": {
            "type": "object",
            "properties": {
                "companyID": {
                    "description": "Company's identification code",
                    "type": "string",
                    "example": "962531ec-7e50-4a5a-a9e6-85da81d4ea25"
                },
                "createdAt": {
                    "description": "Date the document resource was created",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "documentType": {
                    "description": "Type of the register the document comproves",
                    "type": "string",
                    "example": "ISO"
                },
                "expiringDate": {
                    "description": "Date until the document will still be valid",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "id": {
                    "description": "Document's identification code",
                    "type": "string",
                    "example": "962531ec-7e50-4a5a-a9e6-85da81d4ea25"
                },
                "isPrimary": {
                    "description": "Indicates if this is the main person's document",
                    "type": "boolean"
                },
                "issuingAuthority": {
                    "description": "Authority institution that issued the document",
                    "type": "string",
                    "example": "Certifying Organization's Name"
                },
                "issuingDate": {
                    "description": "Date the document was issued",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "number": {
                    "description": "Document's registered number",
                    "type": "string"
                },
                "personID": {
                    "description": "Person's identification code",
                    "type": "string",
                    "example": "962531ec-7e50-4a5a-a9e6-85da81d4ea25"
                },
                "updatedAt": {
                    "description": "Date the document resource was last updated",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                }
            }
        },
        "document.DocumentDTO": {
            "type": "object",
            "required": [
                "isPrimary"
            ],
            "properties": {
                "documentType": {
                    "description": "Type of the register the document comproves",
                    "type": "string",
                    "example": "ISO"
                },
                "expiringDate": {
                    "description": "Date until the document will still be valid",
                    "type": "string",
                    "example": "2021-01-01T00:00:01Z"
                },
                "isPrimary": {
                    "description": "Indicates if this is the person's main document (eg. The main document issued by a government institution)",
                    "type": "boolean"
                },
                "issuingAuthority": {
                    "description": "Authority institution that issued the document",
                    "type": "string",
                    "example": "Certifying Organization's Name"
                },
                "issuingDate": {
                    "description": "Date the document was issued",
                    "type": "string",
                    "example": "2021-01-01T00:00:01Z"
                },
                "number": {
                    "description": "Document's registered number",
                    "type": "string"
                }
            }
        },
        "document.DocumentUpdate": {
            "type": "object",
            "properties": {
                "documenttype": {
                    "description": "Type of the register the document comproves",
                    "type": "string",
                    "example": "ISO"
                },
                "expiringdate": {
                    "description": "Date until the document will still be valid",
                    "type": "string",
                    "example": "2021-01-01T00:00:01Z"
                },
                "isPrimary": {
                    "description": "Indicates if this is the person's main document (eg. The main document issued by a government institution)",
                    "type": "boolean"
                },
                "issuingauthority": {
                    "description": "Authority institution that issued the document",
                    "type": "string",
                    "example": "Certifying Organization's Name"
                },
                "issuingdate": {
                    "description": "Date the document was issued",
                    "type": "string",
                    "example": "2021-01-01T00:00:01Z"
                },
                "number": {
                    "description": "Document's registered number",
                    "type": "string"
                }
            }
        },
        "document.DocumentsPersist": {
            "type": "object",
            "required": [
                "documents"
            ],
            "properties": {
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/document.DocumentDTO"
                    }
                }
            }
        },
        "document.Response": {
            "type": "object",
            "properties": {
                "documentType": {
                    "description": "Type of the register the document comproves",
                    "type": "string",
                    "example": "ISO"
                },
                "expiringDate": {
                    "description": "Date until the document will still be valid",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "id": {
                    "description": "Document's identification code",
                    "type": "string",
                    "example": "0955f40f-4bd6-4f72-a320-dd0ded903f7c"
                },
                "isPrimary": {
                    "description": "Indicates if this is the person's main document (eg. The main document issued by a government institution)",
                    "type": "boolean"
                },
                "issuingAuthority": {
                    "description": "Authority institution that issued the document",
                    "type": "string",
                    "example": "Certifying Organization's Name"
                },
                "issuingDate": {
                    "description": "Date the document was issued",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "number": {
                    "description": "Document's registered number",
                    "type": "string"
                }
            }
        },
        "person.AdditionalDataPersist": {
            "type": "object",
            "properties": {
                "bankAccount": {
                    "description": "Person's bank account",
                    "type": "string"
                },
                "bankAgency": {
                    "description": "Person's bank agency",
                    "type": "string"
                },
                "bankCode": {
                    "description": "Person's bank code",
                    "type": "string"
                },
                "birthplace": {
                    "description": "Person's birthplace",
                    "type": "string"
                },
                "fatherName": {
                    "description": "Father's name",
                    "type": "string"
                },
                "motherName": {
                    "description": "Mother's name",
                    "type": "string"
                },
                "nationality": {
                    "description": "Person's nationality (eg. Brazilian)",
                    "type": "string",
                    "example": "Brazilian"
                },
                "occupation": {
                    "description": "Person's occupation or profession (eg. Teacher, Doctor, Actor)",
                    "type": "string",
                    "example": "Doctor"
                },
                "politicallyExposed": {
                    "description": "Indicates if this person is politically exposed (eg. Politicians)",
                    "type": "boolean"
                },
                "salary": {
                    "description": "Person's salary",
                    "type": "number",
                    "example": 10000
                },
                "spouseName": {
                    "description": "Spouse's name",
                    "type": "string"
                }
            }
        },
        "person.AdditionalDataResponse": {
            "type": "object",
            "properties": {
                "bankAccount": {
                    "description": "Person's bank account",
                    "type": "string"
                },
                "bankAgency": {
                    "description": "Person's bank agency",
                    "type": "string"
                },
                "bankCode": {
                    "description": "Person's bank code",
                    "type": "string"
                },
                "birthPlace": {
                    "description": "Person's birthplace",
                    "type": "string"
                },
                "fatherName": {
                    "description": "Father's name",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "motherName": {
                    "description": "Mother's name",
                    "type": "string"
                },
                "nationality": {
                    "description": "Person's nationality (eg. Brazilian)",
                    "type": "string"
                },
                "occupation": {
                    "description": "Person's occupation or profession (eg. Teacher, Doctor, Actor)",
                    "type": "string"
                },
                "politicallyExposed": {
                    "description": "Indicates if this person is politically exposed (eg. Politicians)",
                    "type": "number"
                },
                "salary": {
                    "description": "Person's salary",
                    "type": "number",
                    "example": 10000
                },
                "spouseName": {
                    "description": "Spouse's name",
                    "type": "string"
                }
            }
        },
        "person.DocumentPersist": {
            "type": "object",
            "required": [
                "documentType",
                "number"
            ],
            "properties": {
                "documentType": {
                    "description": "Type of the register the document comproves",
                    "type": "string",
                    "example": "ISO"
                },
                "expiringDate": {
                    "description": "Date until the document will still be valid",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "isPrimary": {
                    "description": "Indicates if this is the company's main document (eg. The main document issued by a government institution)",
                    "type": "boolean"
                },
                "issuingAuthority": {
                    "description": "Authority institution that issued the document",
                    "type": "string",
                    "example": "Certifying Organization's Name'"
                },
                "issuingDate": {
                    "description": "Date the document was issued",
                    "type": "string",
                    "example": "2021-01-21T20:21:27Z"
                },
                "number": {
                    "description": "Document's registered number",
                    "type": "string"
                }
            }
        },
        "person.Persist": {
            "type": "object",
            "properties": {
                "additional": {
                    "$ref": "#/definitions/person.AdditionalDataPersist"
                },
                "addressAssign": {
                    "description": "List of objects for persisting addresses",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/address.Persist"
                    }
                },
                "birthdate": {
                    "description": "Day this person was born",
                    "type": "string",
                    "example": "2021-01-01T00:00:01Z"
                },
                "document": {
                    "description": "List of objects for persisting documents",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/person.DocumentPersist"
                    }
                },
                "email": {
                    "description": "Person's contact e-mail address",
                    "type": "string"
                },
                "gender": {
                    "description": "Declared person's gender",
                    "type": "string",
                    "enum": [
                        "M",
                        " F",
                        " m",
                        " f"
                    ],
                    "example": "M"
                },
                "metadata": {
                    "description": "Person's metadata",
                    "type": "object"
                },
                "name": {
                    "description": "Person's full name",
                    "type": "string"
                },
                "nickname": {
                    "description": "Nickname or how this person is known",
                    "type": "string"
                },
                "phones": {
                    "description": "List of objects for persisting phones",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/phone.PhonePersist"
                    }
                }
            },
            "required": [
                "additional",
                "addressAssign",
                "birthdate",
                "document",
                "name"
            ]
        },
        "person.PersonAddressResponse": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/address.Address"
                    }
                }
            }
        },
        "person.PersonDocumentsReponse": {
            "type": "object",
            "properties": {
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/document.Document"
                    }
                }
            }
        },
        "person.PersonPhonesResponse": {
            "type": "object",
            "properties": {
                "phones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/phone.Phone"
                    }
                }
            }
        },
        "person.Response": {
            "type": "object",
            "properties": {
                "additional": {
                    "description": "Additional data response object",
                    "$ref": "#/definitions/person.AdditionalDataResponse"
                },
                "addresses": {
                    "description": "Addresses' response object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/address.Response"
                    }
                },
                "birthdate": {
                    "description": "Date this person was born",
                    "type": "string"
                },
                "documents": {
                    "description": "Document response object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/document.Response"
                    }
                },
                "gender": {
                    "description": "Person's declared gender",
                    "type": "string"
                },
                "id": {
                    "description": "Person's identification code",
                    "type": "string",
                    "example": "c8318f39-c352-4478-9bd9-24346b20841e"
                },
                "metadata": {
                    "description": "Person's metadata",
                    "type": "object"
                },
                "name": {
                    "description": "Name of this person",
                    "type": "string"
                },
                "nickname": {
                    "description": "Nickname or how this person is known",
                    "type": "string"
                },
                "phones": {
                    "description": "Phones' response object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/phone.PhoneResponse"
                    }
                }
            }
        },
        "phone.Phone": {
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "The area dialling code (eg. 011 for São Paulo)",
                    "type": "string",
                    "example": "011"
                },
                "companyID": {
                    "description": "Company's identification code",
                    "type": "string",
                    "example": "c2d87dd4-2f0e-46b2-acd2-9c054d7e09f3"
                },
                "countryCode": {
                    "description": "Country calling code (eg. 055 for Brazil)",
                    "type": "string",
                    "example": "055"
                },
                "id": {
                    "description": "Phone's identification code",
                    "type": "string",
                    "example": "c2d87dd4-2f0e-46b2-acd2-9c054d7e09f3"
                },
                "main": {
                    "description": "Indicates if this is the main person's number",
                    "type": "boolean"
                },
                "number": {
                    "description": "Telephone's number",
                    "type": "string"
                },
                "personID": {
                    "description": "Person's identification code",
                    "type": "string",
                    "example": "c2d87dd4-2f0e-46b2-acd2-9c054d7e09f3"
                },
                "phoneType": {
                    "description": "What this phone is generally used for (eg. Residential or Commercial)",
                    "type": "string",
                    "enum": [
                        "Residential",
                        "Commercial",
                        "Cellphone"
                    ],
                    "example": "residential"
                }
            }
        },
        "phone.PhonePersist": {
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "The area dialling code (eg. 011 for São Paulo)",
                    "type": "string",
                    "example": "011"
                },
                "countryCode": {
                    "description": "Country calling code (eg. 055 for Brazil)",
                    "type": "string",
                    "example": "055"
                },
                "main": {
                    "description": "Indicates if this is the main person's number",
                    "type": "boolean"
                },
                "number": {
                    "description": "Telephone's number",
                    "type": "string"
                },
                "phoneType": {
                    "description": "What this phone is generally used for (eg. Residential or Commercial)",
                    "type": "string",
                    "enum": [
                        "Residential",
                        "Commercial",
                        "Cellphone"
                    ],
                    "example": "Commercial"
                }
            }
        },
        "phone.PhoneResponse": {
            "type": "object",
            "properties": {
                "areaCode": {
                    "description": "The area code(eg. 11 for São Paulo)",
                    "type": "string"
                },
                "countryCode": {
                    "description": "The country code (eg. 55 for Brazil)",
                    "type": "string"
                },
                "id": {
                    "description": "The phone's identification code",
                    "type": "string",
                    "example": "aabbb2e9-e165-493c-a204-f1f9739212bd"
                },
                "main": {
                    "description": "Indicates if it is the main phone number",
                    "type": "boolean"
                },
                "number": {
                    "description": "The phone number",
                    "type": "string"
                },
                "phoneType": {
                    "description": "The type of the contact phone number (eg. Commercial or Residential)",
                    "type": "string",
                    "enum": [
                        "Residential",
                        "Commercial",
                        "Cellphone"
                    ],
                    "example": "Commercial"
                }
            }
        }
    },
    "securityDefinitions": {
        "issuerIdAuthentication": {
            "type": "apiKey",
            "name": "issuer_id",
            "in": "header"
        }
    }
}